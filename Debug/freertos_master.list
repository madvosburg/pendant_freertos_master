
freertos_master.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000070b8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b0  08007258  08007258  00017258  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007308  08007308  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  08007308  08007308  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007308  08007308  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007308  08007308  00017308  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800730c  0800730c  0001730c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08007310  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020078  2**0
                  CONTENTS
 10 .bss          00001b14  20000078  20000078  00020078  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  20001b8c  20001b8c  00020078  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001b091  00000000  00000000  000200eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003b43  00000000  00000000  0003b17c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000016c0  00000000  00000000  0003ecc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000011b2  00000000  00000000  00040380  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000233be  00000000  00000000  00041532  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001bfd8  00000000  00000000  000648f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000e3600  00000000  00000000  000808c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00005fb0  00000000  00000000  00163ec8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006e  00000000  00000000  00169e78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000078 	.word	0x20000078
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007240 	.word	0x08007240

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000007c 	.word	0x2000007c
 80001dc:	08007240 	.word	0x08007240

080001e0 <crc_append>:
uint64_t crc_key = 0xD;

/**
 * appends 3 zeros to end of data to prepare for division
 */
uint64_t crc_append(uint64_t crc_data){
 80001e0:	b480      	push	{r7}
 80001e2:	b083      	sub	sp, #12
 80001e4:	af00      	add	r7, sp, #0
 80001e6:	e9c7 0100 	strd	r0, r1, [r7]
	return crc_data << 3;
 80001ea:	e9d7 0100 	ldrd	r0, r1, [r7]
 80001ee:	f04f 0200 	mov.w	r2, #0
 80001f2:	f04f 0300 	mov.w	r3, #0
 80001f6:	00cb      	lsls	r3, r1, #3
 80001f8:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80001fc:	00c2      	lsls	r2, r0, #3
}
 80001fe:	4610      	mov	r0, r2
 8000200:	4619      	mov	r1, r3
 8000202:	370c      	adds	r7, #12
 8000204:	46bd      	mov	sp, r7
 8000206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800020a:	4770      	bx	lr

0800020c <crc_xor>:

/**
 * XOR logic used to divide data by key
 */
uint64_t crc_xor(uint64_t div_data){
 800020c:	b4b0      	push	{r4, r5, r7}
 800020e:	b085      	sub	sp, #20
 8000210:	af00      	add	r7, sp, #0
 8000212:	e9c7 0100 	strd	r0, r1, [r7]
	uint64_t ans = div_data;
 8000216:	e9d7 0100 	ldrd	r0, r1, [r7]
 800021a:	e9c7 0102 	strd	r0, r1, [r7, #8]
	if(ans & 0b1000){
 800021e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000222:	f000 0208 	and.w	r2, r0, #8
 8000226:	2300      	movs	r3, #0
 8000228:	4313      	orrs	r3, r2
 800022a:	d00a      	beq.n	8000242 <crc_xor+0x36>
		ans = ans ^ crc_key;		//if leftmost bit is 1, perform xor with key
 800022c:	4b09      	ldr	r3, [pc, #36]	; (8000254 <crc_xor+0x48>)
 800022e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000232:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000236:	ea80 0402 	eor.w	r4, r0, r2
 800023a:	ea81 0503 	eor.w	r5, r1, r3
 800023e:	e9c7 4502 	strd	r4, r5, [r7, #8]
	}else{
		ans = ans ^ 0b0000;			//if leftmost bit is 0, perform xor with all zeros
	}
	return ans;
 8000242:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
}
 8000246:	4610      	mov	r0, r2
 8000248:	4619      	mov	r1, r3
 800024a:	3714      	adds	r7, #20
 800024c:	46bd      	mov	sp, r7
 800024e:	bcb0      	pop	{r4, r5, r7}
 8000250:	4770      	bx	lr
 8000252:	bf00      	nop
 8000254:	20000000 	.word	0x20000000

08000258 <crc_division>:
/**
 * divides data by key to get remainder
 *
 * takes 4 bits at a time and XORs them until 4 bit remainder is left
 */
uint64_t crc_division(uint64_t data, int curs_pos, int shift_pos, uint64_t answer){
 8000258:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800025c:	b08f      	sub	sp, #60	; 0x3c
 800025e:	af00      	add	r7, sp, #0
 8000260:	e9c7 0106 	strd	r0, r1, [r7, #24]
 8000264:	617a      	str	r2, [r7, #20]
 8000266:	613b      	str	r3, [r7, #16]
	int cursor = curs_pos;
 8000268:	697b      	ldr	r3, [r7, #20]
 800026a:	637b      	str	r3, [r7, #52]	; 0x34
	int bit_shift = shift_pos;
 800026c:	693b      	ldr	r3, [r7, #16]
 800026e:	633b      	str	r3, [r7, #48]	; 0x30
	uint64_t remain = answer;
 8000270:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8000274:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	uint64_t dividend = 0;
 8000278:	f04f 0200 	mov.w	r2, #0
 800027c:	f04f 0300 	mov.w	r3, #0
 8000280:	e9c7 2308 	strd	r2, r3, [r7, #32]

	while(bit_shift > 0){
 8000284:	e057      	b.n	8000336 <crc_division+0xde>
		bit_shift--;
 8000286:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000288:	3b01      	subs	r3, #1
 800028a:	633b      	str	r3, [r7, #48]	; 0x30
		dividend = data & (0x0800000000000000 >> cursor);
 800028c:	f04f 0200 	mov.w	r2, #0
 8000290:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000294:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8000296:	f1c0 0120 	rsb	r1, r0, #32
 800029a:	f1b0 0420 	subs.w	r4, r0, #32
 800029e:	fa22 fa00 	lsr.w	sl, r2, r0
 80002a2:	fa03 f101 	lsl.w	r1, r3, r1
 80002a6:	ea4a 0a01 	orr.w	sl, sl, r1
 80002aa:	d403      	bmi.n	80002b4 <crc_division+0x5c>
 80002ac:	fa43 f404 	asr.w	r4, r3, r4
 80002b0:	ea4a 0a04 	orr.w	sl, sl, r4
 80002b4:	fa43 fb00 	asr.w	fp, r3, r0
 80002b8:	4650      	mov	r0, sl
 80002ba:	4659      	mov	r1, fp
 80002bc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80002c0:	ea02 0500 	and.w	r5, r2, r0
 80002c4:	ea03 0601 	and.w	r6, r3, r1
 80002c8:	e9c7 5608 	strd	r5, r6, [r7, #32]
		dividend = dividend >> bit_shift;
 80002cc:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80002d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80002d2:	f1c0 0420 	rsb	r4, r0, #32
 80002d6:	f1a0 0120 	sub.w	r1, r0, #32
 80002da:	fa22 f800 	lsr.w	r8, r2, r0
 80002de:	fa03 f404 	lsl.w	r4, r3, r4
 80002e2:	ea48 0804 	orr.w	r8, r8, r4
 80002e6:	fa23 f101 	lsr.w	r1, r3, r1
 80002ea:	ea48 0801 	orr.w	r8, r8, r1
 80002ee:	fa23 f900 	lsr.w	r9, r3, r0
 80002f2:	e9c7 8908 	strd	r8, r9, [r7, #32]
		remain = remain << 1;
 80002f6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80002fa:	1891      	adds	r1, r2, r2
 80002fc:	60b9      	str	r1, [r7, #8]
 80002fe:	415b      	adcs	r3, r3
 8000300:	60fb      	str	r3, [r7, #12]
 8000302:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8000306:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
		remain += dividend;
 800030a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800030e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8000312:	1884      	adds	r4, r0, r2
 8000314:	603c      	str	r4, [r7, #0]
 8000316:	eb41 0303 	adc.w	r3, r1, r3
 800031a:	607b      	str	r3, [r7, #4]
 800031c:	e9d7 3400 	ldrd	r3, r4, [r7]
 8000320:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
		remain = crc_xor(remain);
 8000324:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8000328:	f7ff ff70 	bl	800020c <crc_xor>
 800032c:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
		cursor++;
 8000330:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000332:	3301      	adds	r3, #1
 8000334:	637b      	str	r3, [r7, #52]	; 0x34
	while(bit_shift > 0){
 8000336:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000338:	2b00      	cmp	r3, #0
 800033a:	dca4      	bgt.n	8000286 <crc_division+0x2e>
	}
	return remain;
 800033c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
}
 8000340:	4610      	mov	r0, r2
 8000342:	4619      	mov	r1, r3
 8000344:	373c      	adds	r7, #60	; 0x3c
 8000346:	46bd      	mov	sp, r7
 8000348:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800034c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800034c:	b480      	push	{r7}
 800034e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000350:	4b04      	ldr	r3, [pc, #16]	; (8000364 <__NVIC_GetPriorityGrouping+0x18>)
 8000352:	68db      	ldr	r3, [r3, #12]
 8000354:	0a1b      	lsrs	r3, r3, #8
 8000356:	f003 0307 	and.w	r3, r3, #7
}
 800035a:	4618      	mov	r0, r3
 800035c:	46bd      	mov	sp, r7
 800035e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000362:	4770      	bx	lr
 8000364:	e000ed00 	.word	0xe000ed00

08000368 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000368:	b480      	push	{r7}
 800036a:	b083      	sub	sp, #12
 800036c:	af00      	add	r7, sp, #0
 800036e:	4603      	mov	r3, r0
 8000370:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000372:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000376:	2b00      	cmp	r3, #0
 8000378:	db0b      	blt.n	8000392 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800037a:	79fb      	ldrb	r3, [r7, #7]
 800037c:	f003 021f 	and.w	r2, r3, #31
 8000380:	4907      	ldr	r1, [pc, #28]	; (80003a0 <__NVIC_EnableIRQ+0x38>)
 8000382:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000386:	095b      	lsrs	r3, r3, #5
 8000388:	2001      	movs	r0, #1
 800038a:	fa00 f202 	lsl.w	r2, r0, r2
 800038e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000392:	bf00      	nop
 8000394:	370c      	adds	r7, #12
 8000396:	46bd      	mov	sp, r7
 8000398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800039c:	4770      	bx	lr
 800039e:	bf00      	nop
 80003a0:	e000e100 	.word	0xe000e100

080003a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80003a4:	b480      	push	{r7}
 80003a6:	b083      	sub	sp, #12
 80003a8:	af00      	add	r7, sp, #0
 80003aa:	4603      	mov	r3, r0
 80003ac:	6039      	str	r1, [r7, #0]
 80003ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80003b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80003b4:	2b00      	cmp	r3, #0
 80003b6:	db0a      	blt.n	80003ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80003b8:	683b      	ldr	r3, [r7, #0]
 80003ba:	b2da      	uxtb	r2, r3
 80003bc:	490c      	ldr	r1, [pc, #48]	; (80003f0 <__NVIC_SetPriority+0x4c>)
 80003be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80003c2:	0112      	lsls	r2, r2, #4
 80003c4:	b2d2      	uxtb	r2, r2
 80003c6:	440b      	add	r3, r1
 80003c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80003cc:	e00a      	b.n	80003e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80003ce:	683b      	ldr	r3, [r7, #0]
 80003d0:	b2da      	uxtb	r2, r3
 80003d2:	4908      	ldr	r1, [pc, #32]	; (80003f4 <__NVIC_SetPriority+0x50>)
 80003d4:	79fb      	ldrb	r3, [r7, #7]
 80003d6:	f003 030f 	and.w	r3, r3, #15
 80003da:	3b04      	subs	r3, #4
 80003dc:	0112      	lsls	r2, r2, #4
 80003de:	b2d2      	uxtb	r2, r2
 80003e0:	440b      	add	r3, r1
 80003e2:	761a      	strb	r2, [r3, #24]
}
 80003e4:	bf00      	nop
 80003e6:	370c      	adds	r7, #12
 80003e8:	46bd      	mov	sp, r7
 80003ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ee:	4770      	bx	lr
 80003f0:	e000e100 	.word	0xe000e100
 80003f4:	e000ed00 	.word	0xe000ed00

080003f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80003f8:	b480      	push	{r7}
 80003fa:	b089      	sub	sp, #36	; 0x24
 80003fc:	af00      	add	r7, sp, #0
 80003fe:	60f8      	str	r0, [r7, #12]
 8000400:	60b9      	str	r1, [r7, #8]
 8000402:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000404:	68fb      	ldr	r3, [r7, #12]
 8000406:	f003 0307 	and.w	r3, r3, #7
 800040a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800040c:	69fb      	ldr	r3, [r7, #28]
 800040e:	f1c3 0307 	rsb	r3, r3, #7
 8000412:	2b04      	cmp	r3, #4
 8000414:	bf28      	it	cs
 8000416:	2304      	movcs	r3, #4
 8000418:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800041a:	69fb      	ldr	r3, [r7, #28]
 800041c:	3304      	adds	r3, #4
 800041e:	2b06      	cmp	r3, #6
 8000420:	d902      	bls.n	8000428 <NVIC_EncodePriority+0x30>
 8000422:	69fb      	ldr	r3, [r7, #28]
 8000424:	3b03      	subs	r3, #3
 8000426:	e000      	b.n	800042a <NVIC_EncodePriority+0x32>
 8000428:	2300      	movs	r3, #0
 800042a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800042c:	f04f 32ff 	mov.w	r2, #4294967295
 8000430:	69bb      	ldr	r3, [r7, #24]
 8000432:	fa02 f303 	lsl.w	r3, r2, r3
 8000436:	43da      	mvns	r2, r3
 8000438:	68bb      	ldr	r3, [r7, #8]
 800043a:	401a      	ands	r2, r3
 800043c:	697b      	ldr	r3, [r7, #20]
 800043e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000440:	f04f 31ff 	mov.w	r1, #4294967295
 8000444:	697b      	ldr	r3, [r7, #20]
 8000446:	fa01 f303 	lsl.w	r3, r1, r3
 800044a:	43d9      	mvns	r1, r3
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000450:	4313      	orrs	r3, r2
         );
}
 8000452:	4618      	mov	r0, r3
 8000454:	3724      	adds	r7, #36	; 0x24
 8000456:	46bd      	mov	sp, r7
 8000458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800045c:	4770      	bx	lr

0800045e <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 800045e:	b480      	push	{r7}
 8000460:	b083      	sub	sp, #12
 8000462:	af00      	add	r7, sp, #0
 8000464:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8000466:	687b      	ldr	r3, [r7, #4]
 8000468:	681b      	ldr	r3, [r3, #0]
 800046a:	f043 0201 	orr.w	r2, r3, #1
 800046e:	687b      	ldr	r3, [r7, #4]
 8000470:	601a      	str	r2, [r3, #0]
}
 8000472:	bf00      	nop
 8000474:	370c      	adds	r7, #12
 8000476:	46bd      	mov	sp, r7
 8000478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800047c:	4770      	bx	lr

0800047e <LL_TIM_DisableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_DisableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableCounter(TIM_TypeDef *TIMx)
{
 800047e:	b480      	push	{r7}
 8000480:	b083      	sub	sp, #12
 8000482:	af00      	add	r7, sp, #0
 8000484:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_CEN);
 8000486:	687b      	ldr	r3, [r7, #4]
 8000488:	681b      	ldr	r3, [r3, #0]
 800048a:	f023 0201 	bic.w	r2, r3, #1
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	601a      	str	r2, [r3, #0]
}
 8000492:	bf00      	nop
 8000494:	370c      	adds	r7, #12
 8000496:	46bd      	mov	sp, r7
 8000498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800049c:	4770      	bx	lr

0800049e <LL_TIM_DisableARRPreload>:
  * @rmtoll CR1          ARPE          LL_TIM_DisableARRPreload
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableARRPreload(TIM_TypeDef *TIMx)
{
 800049e:	b480      	push	{r7}
 80004a0:	b083      	sub	sp, #12
 80004a2:	af00      	add	r7, sp, #0
 80004a4:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 80004a6:	687b      	ldr	r3, [r7, #4]
 80004a8:	681b      	ldr	r3, [r3, #0]
 80004aa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80004ae:	687b      	ldr	r3, [r7, #4]
 80004b0:	601a      	str	r2, [r3, #0]
}
 80004b2:	bf00      	nop
 80004b4:	370c      	adds	r7, #12
 80004b6:	46bd      	mov	sp, r7
 80004b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004bc:	4770      	bx	lr

080004be <LL_TIM_ClearFlag_UPDATE>:
  * @rmtoll SR           UIF           LL_TIM_ClearFlag_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_UPDATE(TIM_TypeDef *TIMx)
{
 80004be:	b480      	push	{r7}
 80004c0:	b083      	sub	sp, #12
 80004c2:	af00      	add	r7, sp, #0
 80004c4:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80004c6:	687b      	ldr	r3, [r7, #4]
 80004c8:	f06f 0201 	mvn.w	r2, #1
 80004cc:	611a      	str	r2, [r3, #16]
}
 80004ce:	bf00      	nop
 80004d0:	370c      	adds	r7, #12
 80004d2:	46bd      	mov	sp, r7
 80004d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004d8:	4770      	bx	lr

080004da <LL_TIM_IsActiveFlag_UPDATE>:
  * @rmtoll SR           UIF           LL_TIM_IsActiveFlag_UPDATE
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_UPDATE(const TIM_TypeDef *TIMx)
{
 80004da:	b480      	push	{r7}
 80004dc:	b083      	sub	sp, #12
 80004de:	af00      	add	r7, sp, #0
 80004e0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	691b      	ldr	r3, [r3, #16]
 80004e6:	f003 0301 	and.w	r3, r3, #1
 80004ea:	2b01      	cmp	r3, #1
 80004ec:	d101      	bne.n	80004f2 <LL_TIM_IsActiveFlag_UPDATE+0x18>
 80004ee:	2301      	movs	r3, #1
 80004f0:	e000      	b.n	80004f4 <LL_TIM_IsActiveFlag_UPDATE+0x1a>
 80004f2:	2300      	movs	r3, #0
}
 80004f4:	4618      	mov	r0, r3
 80004f6:	370c      	adds	r7, #12
 80004f8:	46bd      	mov	sp, r7
 80004fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004fe:	4770      	bx	lr

08000500 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8000500:	b480      	push	{r7}
 8000502:	b083      	sub	sp, #12
 8000504:	af00      	add	r7, sp, #0
 8000506:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	695b      	ldr	r3, [r3, #20]
 800050c:	f043 0201 	orr.w	r2, r3, #1
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	615a      	str	r2, [r3, #20]
}
 8000514:	bf00      	nop
 8000516:	370c      	adds	r7, #12
 8000518:	46bd      	mov	sp, r7
 800051a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800051e:	4770      	bx	lr

08000520 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000520:	b480      	push	{r7}
 8000522:	b085      	sub	sp, #20
 8000524:	af00      	add	r7, sp, #0
 8000526:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000528:	4b08      	ldr	r3, [pc, #32]	; (800054c <LL_APB2_GRP1_EnableClock+0x2c>)
 800052a:	699a      	ldr	r2, [r3, #24]
 800052c:	4907      	ldr	r1, [pc, #28]	; (800054c <LL_APB2_GRP1_EnableClock+0x2c>)
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	4313      	orrs	r3, r2
 8000532:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000534:	4b05      	ldr	r3, [pc, #20]	; (800054c <LL_APB2_GRP1_EnableClock+0x2c>)
 8000536:	699a      	ldr	r2, [r3, #24]
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	4013      	ands	r3, r2
 800053c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800053e:	68fb      	ldr	r3, [r7, #12]
}
 8000540:	bf00      	nop
 8000542:	3714      	adds	r7, #20
 8000544:	46bd      	mov	sp, r7
 8000546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800054a:	4770      	bx	lr
 800054c:	40021000 	.word	0x40021000

08000550 <crc_encode>:
uint8_t wwdg_msg[20] = "Watchdog init\n\r";

/**
 * initializes values for division and carries out the encoding of each crc value
 */
void crc_encode(){
 8000550:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000554:	b08d      	sub	sp, #52	; 0x34
 8000556:	af02      	add	r7, sp, #8
	int shift = 60;
 8000558:	233c      	movs	r3, #60	; 0x3c
 800055a:	627b      	str	r3, [r7, #36]	; 0x24
	int position = 0;
 800055c:	2300      	movs	r3, #0
 800055e:	623b      	str	r3, [r7, #32]
	uint64_t appended_data = crc_append(data);
 8000560:	4b25      	ldr	r3, [pc, #148]	; (80005f8 <crc_encode+0xa8>)
 8000562:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000566:	4610      	mov	r0, r2
 8000568:	4619      	mov	r1, r3
 800056a:	f7ff fe39 	bl	80001e0 <crc_append>
 800056e:	e9c7 0106 	strd	r0, r1, [r7, #24]
	uint64_t dividend = appended_data & 0xF000000000000000;
 8000572:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8000576:	f04f 0a00 	mov.w	sl, #0
 800057a:	f003 4b70 	and.w	fp, r3, #4026531840	; 0xf0000000
 800057e:	e9c7 ab04 	strd	sl, fp, [r7, #16]
	dividend = dividend >> shift;
 8000582:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8000586:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000588:	f1c1 0620 	rsb	r6, r1, #32
 800058c:	f1a1 0020 	sub.w	r0, r1, #32
 8000590:	fa22 f401 	lsr.w	r4, r2, r1
 8000594:	fa03 f606 	lsl.w	r6, r3, r6
 8000598:	4334      	orrs	r4, r6
 800059a:	fa23 f000 	lsr.w	r0, r3, r0
 800059e:	4304      	orrs	r4, r0
 80005a0:	fa23 f501 	lsr.w	r5, r3, r1
 80005a4:	e9c7 4504 	strd	r4, r5, [r7, #16]
	uint64_t ans = crc_xor(dividend);
 80005a8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80005ac:	f7ff fe2e 	bl	800020c <crc_xor>
 80005b0:	e9c7 0102 	strd	r0, r1, [r7, #8]

	uint64_t remain = crc_division(appended_data, position, shift, ans);
 80005b4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80005b8:	e9cd 2300 	strd	r2, r3, [sp]
 80005bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005be:	6a3a      	ldr	r2, [r7, #32]
 80005c0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80005c4:	f7ff fe48 	bl	8000258 <crc_division>
 80005c8:	e9c7 0100 	strd	r0, r1, [r7]
	TxData[0] = data;
 80005cc:	4b0a      	ldr	r3, [pc, #40]	; (80005f8 <crc_encode+0xa8>)
 80005ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80005d2:	490a      	ldr	r1, [pc, #40]	; (80005fc <crc_encode+0xac>)
 80005d4:	e9c1 2300 	strd	r2, r3, [r1]
	TxData[1] = appended_data + remain;
 80005d8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80005dc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80005e0:	eb10 0802 	adds.w	r8, r0, r2
 80005e4:	eb41 0903 	adc.w	r9, r1, r3
 80005e8:	4b04      	ldr	r3, [pc, #16]	; (80005fc <crc_encode+0xac>)
 80005ea:	e9c3 8902 	strd	r8, r9, [r3, #8]
}
 80005ee:	bf00      	nop
 80005f0:	372c      	adds	r7, #44	; 0x2c
 80005f2:	46bd      	mov	sp, r7
 80005f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80005f8:	200001d8 	.word	0x200001d8
 80005fc:	200001c0 	.word	0x200001c0

08000600 <send_data>:

/**
 * sends data with crc to receiver every 10ms
 */
void send_data(){
 8000600:	b580      	push	{r7, lr}
 8000602:	af00      	add	r7, sp, #0
	crc_encode();
 8000604:	f7ff ffa4 	bl	8000550 <crc_encode>

	osDelay(10);
 8000608:	200a      	movs	r0, #10
 800060a:	f004 f9ab 	bl	8004964 <osDelay>
	if(timer_flag){
 800060e:	4b08      	ldr	r3, [pc, #32]	; (8000630 <send_data+0x30>)
 8000610:	781b      	ldrb	r3, [r3, #0]
 8000612:	2b00      	cmp	r3, #0
 8000614:	d002      	beq.n	800061c <send_data+0x1c>
		HAL_WWDG_Refresh(&hwwdg);		//transmitting timeout
 8000616:	4807      	ldr	r0, [pc, #28]	; (8000634 <send_data+0x34>)
 8000618:	f003 ffaf 	bl	800457a <HAL_WWDG_Refresh>
	}
	HAL_UART_Transmit(&huart1, (uint8_t*)TxData, sizeof(TxData), 1000);
 800061c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000620:	2218      	movs	r2, #24
 8000622:	4905      	ldr	r1, [pc, #20]	; (8000638 <send_data+0x38>)
 8000624:	4805      	ldr	r0, [pc, #20]	; (800063c <send_data+0x3c>)
 8000626:	f002 ffbb 	bl	80035a0 <HAL_UART_Transmit>
}
 800062a:	bf00      	nop
 800062c:	bd80      	pop	{r7, pc}
 800062e:	bf00      	nop
 8000630:	200001e0 	.word	0x200001e0
 8000634:	200001a4 	.word	0x200001a4
 8000638:	200001c0 	.word	0x200001c0
 800063c:	20000094 	.word	0x20000094

08000640 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000644:	f000 fc86 	bl	8000f54 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000648:	f000 f82e 	bl	80006a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800064c:	f000 f942 	bl	80008d4 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000650:	f000 f8c0 	bl	80007d4 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000654:	f000 f8ee 	bl	8000834 <MX_USART2_UART_Init>
  MX_TIM16_Init();
 8000658:	f000 f87e 	bl	8000758 <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */
  LL_TIM_EnableCounter(TIM16);
 800065c:	480b      	ldr	r0, [pc, #44]	; (800068c <main+0x4c>)
 800065e:	f7ff fefe 	bl	800045e <LL_TIM_EnableCounter>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000662:	f004 f86d 	bl	8004740 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of read_pins */
  read_pinsHandle = osThreadNew(StartRead02, NULL, &read_pins_attributes);
 8000666:	4a0a      	ldr	r2, [pc, #40]	; (8000690 <main+0x50>)
 8000668:	2100      	movs	r1, #0
 800066a:	480a      	ldr	r0, [pc, #40]	; (8000694 <main+0x54>)
 800066c:	f004 f8d0 	bl	8004810 <osThreadNew>
 8000670:	4603      	mov	r3, r0
 8000672:	4a09      	ldr	r2, [pc, #36]	; (8000698 <main+0x58>)
 8000674:	6013      	str	r3, [r2, #0]

  /* creation of watchdog */
  watchdogHandle = osThreadNew(StartWatchdog01, NULL, &watchdog_attributes);
 8000676:	4a09      	ldr	r2, [pc, #36]	; (800069c <main+0x5c>)
 8000678:	2100      	movs	r1, #0
 800067a:	4809      	ldr	r0, [pc, #36]	; (80006a0 <main+0x60>)
 800067c:	f004 f8c8 	bl	8004810 <osThreadNew>
 8000680:	4603      	mov	r3, r0
 8000682:	4a08      	ldr	r2, [pc, #32]	; (80006a4 <main+0x64>)
 8000684:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000686:	f004 f88f 	bl	80047a8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800068a:	e7fe      	b.n	800068a <main+0x4a>
 800068c:	40014400 	.word	0x40014400
 8000690:	08007288 	.word	0x08007288
 8000694:	080009ad 	.word	0x080009ad
 8000698:	200001b8 	.word	0x200001b8
 800069c:	080072ac 	.word	0x080072ac
 80006a0:	08000b51 	.word	0x08000b51
 80006a4:	200001bc 	.word	0x200001bc

080006a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b0a6      	sub	sp, #152	; 0x98
 80006ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ae:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80006b2:	2228      	movs	r2, #40	; 0x28
 80006b4:	2100      	movs	r1, #0
 80006b6:	4618      	mov	r0, r3
 80006b8:	f006 fd88 	bl	80071cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006bc:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80006c0:	2200      	movs	r2, #0
 80006c2:	601a      	str	r2, [r3, #0]
 80006c4:	605a      	str	r2, [r3, #4]
 80006c6:	609a      	str	r2, [r3, #8]
 80006c8:	60da      	str	r2, [r3, #12]
 80006ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80006cc:	1d3b      	adds	r3, r7, #4
 80006ce:	2258      	movs	r2, #88	; 0x58
 80006d0:	2100      	movs	r1, #0
 80006d2:	4618      	mov	r0, r3
 80006d4:	f006 fd7a 	bl	80071cc <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006d8:	2302      	movs	r3, #2
 80006da:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006dc:	2301      	movs	r3, #1
 80006de:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006e0:	2310      	movs	r3, #16
 80006e2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006e6:	2300      	movs	r3, #0
 80006e8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006ec:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80006f0:	4618      	mov	r0, r3
 80006f2:	f000 ff75 	bl	80015e0 <HAL_RCC_OscConfig>
 80006f6:	4603      	mov	r3, r0
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d001      	beq.n	8000700 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80006fc:	f000 fa4c 	bl	8000b98 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000700:	230f      	movs	r3, #15
 8000702:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000704:	2300      	movs	r3, #0
 8000706:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000708:	2300      	movs	r3, #0
 800070a:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800070c:	2300      	movs	r3, #0
 800070e:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000710:	2300      	movs	r3, #0
 8000712:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000714:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000718:	2100      	movs	r1, #0
 800071a:	4618      	mov	r0, r3
 800071c:	f001 ffb4 	bl	8002688 <HAL_RCC_ClockConfig>
 8000720:	4603      	mov	r3, r0
 8000722:	2b00      	cmp	r3, #0
 8000724:	d001      	beq.n	800072a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000726:	f000 fa37 	bl	8000b98 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2
 800072a:	4b0a      	ldr	r3, [pc, #40]	; (8000754 <SystemClock_Config+0xac>)
 800072c:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_TIM16;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800072e:	2300      	movs	r3, #0
 8000730:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000732:	2300      	movs	r3, #0
 8000734:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Tim16ClockSelection = RCC_TIM16CLK_HCLK;
 8000736:	2300      	movs	r3, #0
 8000738:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800073a:	1d3b      	adds	r3, r7, #4
 800073c:	4618      	mov	r0, r3
 800073e:	f002 f9f5 	bl	8002b2c <HAL_RCCEx_PeriphCLKConfig>
 8000742:	4603      	mov	r3, r0
 8000744:	2b00      	cmp	r3, #0
 8000746:	d001      	beq.n	800074c <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8000748:	f000 fa26 	bl	8000b98 <Error_Handler>
  }
}
 800074c:	bf00      	nop
 800074e:	3798      	adds	r7, #152	; 0x98
 8000750:	46bd      	mov	sp, r7
 8000752:	bd80      	pop	{r7, pc}
 8000754:	00800003 	.word	0x00800003

08000758 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b086      	sub	sp, #24
 800075c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_Init 0 */
	//f = 8MHz / PSC					PSC = 367
	//T = (1 / f) * period = 3s			Period = 65216
  /* USER CODE END TIM16_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 800075e:	1d3b      	adds	r3, r7, #4
 8000760:	2200      	movs	r2, #0
 8000762:	601a      	str	r2, [r3, #0]
 8000764:	605a      	str	r2, [r3, #4]
 8000766:	609a      	str	r2, [r3, #8]
 8000768:	60da      	str	r2, [r3, #12]
 800076a:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_TIM16);
 800076c:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000770:	f7ff fed6 	bl	8000520 <LL_APB2_GRP1_EnableClock>

  /* TIM16 interrupt Init */
  NVIC_SetPriority(TIM1_UP_TIM16_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 8000774:	f7ff fdea 	bl	800034c <__NVIC_GetPriorityGrouping>
 8000778:	4603      	mov	r3, r0
 800077a:	2200      	movs	r2, #0
 800077c:	2105      	movs	r1, #5
 800077e:	4618      	mov	r0, r3
 8000780:	f7ff fe3a 	bl	80003f8 <NVIC_EncodePriority>
 8000784:	4603      	mov	r3, r0
 8000786:	4619      	mov	r1, r3
 8000788:	2019      	movs	r0, #25
 800078a:	f7ff fe0b 	bl	80003a4 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 800078e:	2019      	movs	r0, #25
 8000790:	f7ff fdea 	bl	8000368 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  TIM_InitStruct.Prescaler = 367;
 8000794:	f240 136f 	movw	r3, #367	; 0x16f
 8000798:	80bb      	strh	r3, [r7, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 800079a:	2300      	movs	r3, #0
 800079c:	60bb      	str	r3, [r7, #8]
  TIM_InitStruct.Autoreload = 65216;
 800079e:	f64f 63c0 	movw	r3, #65216	; 0xfec0
 80007a2:	60fb      	str	r3, [r7, #12]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 80007a4:	2300      	movs	r3, #0
 80007a6:	613b      	str	r3, [r7, #16]
  TIM_InitStruct.RepetitionCounter = 0;
 80007a8:	2300      	movs	r3, #0
 80007aa:	617b      	str	r3, [r7, #20]
  LL_TIM_Init(TIM16, &TIM_InitStruct);
 80007ac:	1d3b      	adds	r3, r7, #4
 80007ae:	4619      	mov	r1, r3
 80007b0:	4807      	ldr	r0, [pc, #28]	; (80007d0 <MX_TIM16_Init+0x78>)
 80007b2:	f003 ff2d 	bl	8004610 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM16);
 80007b6:	4806      	ldr	r0, [pc, #24]	; (80007d0 <MX_TIM16_Init+0x78>)
 80007b8:	f7ff fe71 	bl	800049e <LL_TIM_DisableARRPreload>
  /* USER CODE BEGIN TIM16_Init 2 */

	LL_TIM_GenerateEvent_UPDATE(TIM16);
 80007bc:	4804      	ldr	r0, [pc, #16]	; (80007d0 <MX_TIM16_Init+0x78>)
 80007be:	f7ff fe9f 	bl	8000500 <LL_TIM_GenerateEvent_UPDATE>

	LL_TIM_ClearFlag_UPDATE(TIM16);
 80007c2:	4803      	ldr	r0, [pc, #12]	; (80007d0 <MX_TIM16_Init+0x78>)
 80007c4:	f7ff fe7b 	bl	80004be <LL_TIM_ClearFlag_UPDATE>
  /* USER CODE END TIM16_Init 2 */

}
 80007c8:	bf00      	nop
 80007ca:	3718      	adds	r7, #24
 80007cc:	46bd      	mov	sp, r7
 80007ce:	bd80      	pop	{r7, pc}
 80007d0:	40014400 	.word	0x40014400

080007d4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80007d8:	4b14      	ldr	r3, [pc, #80]	; (800082c <MX_USART1_UART_Init+0x58>)
 80007da:	4a15      	ldr	r2, [pc, #84]	; (8000830 <MX_USART1_UART_Init+0x5c>)
 80007dc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80007de:	4b13      	ldr	r3, [pc, #76]	; (800082c <MX_USART1_UART_Init+0x58>)
 80007e0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007e4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80007e6:	4b11      	ldr	r3, [pc, #68]	; (800082c <MX_USART1_UART_Init+0x58>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80007ec:	4b0f      	ldr	r3, [pc, #60]	; (800082c <MX_USART1_UART_Init+0x58>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80007f2:	4b0e      	ldr	r3, [pc, #56]	; (800082c <MX_USART1_UART_Init+0x58>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80007f8:	4b0c      	ldr	r3, [pc, #48]	; (800082c <MX_USART1_UART_Init+0x58>)
 80007fa:	220c      	movs	r2, #12
 80007fc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007fe:	4b0b      	ldr	r3, [pc, #44]	; (800082c <MX_USART1_UART_Init+0x58>)
 8000800:	2200      	movs	r2, #0
 8000802:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000804:	4b09      	ldr	r3, [pc, #36]	; (800082c <MX_USART1_UART_Init+0x58>)
 8000806:	2200      	movs	r2, #0
 8000808:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800080a:	4b08      	ldr	r3, [pc, #32]	; (800082c <MX_USART1_UART_Init+0x58>)
 800080c:	2200      	movs	r2, #0
 800080e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000810:	4b06      	ldr	r3, [pc, #24]	; (800082c <MX_USART1_UART_Init+0x58>)
 8000812:	2200      	movs	r2, #0
 8000814:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000816:	4805      	ldr	r0, [pc, #20]	; (800082c <MX_USART1_UART_Init+0x58>)
 8000818:	f002 fe74 	bl	8003504 <HAL_UART_Init>
 800081c:	4603      	mov	r3, r0
 800081e:	2b00      	cmp	r3, #0
 8000820:	d001      	beq.n	8000826 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000822:	f000 f9b9 	bl	8000b98 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000826:	bf00      	nop
 8000828:	bd80      	pop	{r7, pc}
 800082a:	bf00      	nop
 800082c:	20000094 	.word	0x20000094
 8000830:	40013800 	.word	0x40013800

08000834 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000838:	4b14      	ldr	r3, [pc, #80]	; (800088c <MX_USART2_UART_Init+0x58>)
 800083a:	4a15      	ldr	r2, [pc, #84]	; (8000890 <MX_USART2_UART_Init+0x5c>)
 800083c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800083e:	4b13      	ldr	r3, [pc, #76]	; (800088c <MX_USART2_UART_Init+0x58>)
 8000840:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000844:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000846:	4b11      	ldr	r3, [pc, #68]	; (800088c <MX_USART2_UART_Init+0x58>)
 8000848:	2200      	movs	r2, #0
 800084a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800084c:	4b0f      	ldr	r3, [pc, #60]	; (800088c <MX_USART2_UART_Init+0x58>)
 800084e:	2200      	movs	r2, #0
 8000850:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000852:	4b0e      	ldr	r3, [pc, #56]	; (800088c <MX_USART2_UART_Init+0x58>)
 8000854:	2200      	movs	r2, #0
 8000856:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000858:	4b0c      	ldr	r3, [pc, #48]	; (800088c <MX_USART2_UART_Init+0x58>)
 800085a:	220c      	movs	r2, #12
 800085c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800085e:	4b0b      	ldr	r3, [pc, #44]	; (800088c <MX_USART2_UART_Init+0x58>)
 8000860:	2200      	movs	r2, #0
 8000862:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000864:	4b09      	ldr	r3, [pc, #36]	; (800088c <MX_USART2_UART_Init+0x58>)
 8000866:	2200      	movs	r2, #0
 8000868:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800086a:	4b08      	ldr	r3, [pc, #32]	; (800088c <MX_USART2_UART_Init+0x58>)
 800086c:	2200      	movs	r2, #0
 800086e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000870:	4b06      	ldr	r3, [pc, #24]	; (800088c <MX_USART2_UART_Init+0x58>)
 8000872:	2200      	movs	r2, #0
 8000874:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000876:	4805      	ldr	r0, [pc, #20]	; (800088c <MX_USART2_UART_Init+0x58>)
 8000878:	f002 fe44 	bl	8003504 <HAL_UART_Init>
 800087c:	4603      	mov	r3, r0
 800087e:	2b00      	cmp	r3, #0
 8000880:	d001      	beq.n	8000886 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000882:	f000 f989 	bl	8000b98 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000886:	bf00      	nop
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	2000011c 	.word	0x2000011c
 8000890:	40004400 	.word	0x40004400

08000894 <MX_WWDG_Init>:
  * @brief WWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_WWDG_Init(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	af00      	add	r7, sp, #0
  /* USER CODE END WWDG_Init 0 */

  /* USER CODE BEGIN WWDG_Init 1 */
	//5-15ms window
  /* USER CODE END WWDG_Init 1 */
  hwwdg.Instance = WWDG;
 8000898:	4b0c      	ldr	r3, [pc, #48]	; (80008cc <MX_WWDG_Init+0x38>)
 800089a:	4a0d      	ldr	r2, [pc, #52]	; (80008d0 <MX_WWDG_Init+0x3c>)
 800089c:	601a      	str	r2, [r3, #0]
  hwwdg.Init.Prescaler = WWDG_PRESCALER_4;
 800089e:	4b0b      	ldr	r3, [pc, #44]	; (80008cc <MX_WWDG_Init+0x38>)
 80008a0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80008a4:	605a      	str	r2, [r3, #4]
  hwwdg.Init.Window = 70;
 80008a6:	4b09      	ldr	r3, [pc, #36]	; (80008cc <MX_WWDG_Init+0x38>)
 80008a8:	2246      	movs	r2, #70	; 0x46
 80008aa:	609a      	str	r2, [r3, #8]
  hwwdg.Init.Counter = 72;
 80008ac:	4b07      	ldr	r3, [pc, #28]	; (80008cc <MX_WWDG_Init+0x38>)
 80008ae:	2248      	movs	r2, #72	; 0x48
 80008b0:	60da      	str	r2, [r3, #12]
  hwwdg.Init.EWIMode = WWDG_EWI_DISABLE;
 80008b2:	4b06      	ldr	r3, [pc, #24]	; (80008cc <MX_WWDG_Init+0x38>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	611a      	str	r2, [r3, #16]
  if (HAL_WWDG_Init(&hwwdg) != HAL_OK)
 80008b8:	4804      	ldr	r0, [pc, #16]	; (80008cc <MX_WWDG_Init+0x38>)
 80008ba:	f003 fe3a 	bl	8004532 <HAL_WWDG_Init>
 80008be:	4603      	mov	r3, r0
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d001      	beq.n	80008c8 <MX_WWDG_Init+0x34>
  {
    Error_Handler();
 80008c4:	f000 f968 	bl	8000b98 <Error_Handler>
  }
  /* USER CODE BEGIN WWDG_Init 2 */

  /* USER CODE END WWDG_Init 2 */

}
 80008c8:	bf00      	nop
 80008ca:	bd80      	pop	{r7, pc}
 80008cc:	200001a4 	.word	0x200001a4
 80008d0:	40002c00 	.word	0x40002c00

080008d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b088      	sub	sp, #32
 80008d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008da:	f107 030c 	add.w	r3, r7, #12
 80008de:	2200      	movs	r2, #0
 80008e0:	601a      	str	r2, [r3, #0]
 80008e2:	605a      	str	r2, [r3, #4]
 80008e4:	609a      	str	r2, [r3, #8]
 80008e6:	60da      	str	r2, [r3, #12]
 80008e8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008ea:	4b2d      	ldr	r3, [pc, #180]	; (80009a0 <MX_GPIO_Init+0xcc>)
 80008ec:	695b      	ldr	r3, [r3, #20]
 80008ee:	4a2c      	ldr	r2, [pc, #176]	; (80009a0 <MX_GPIO_Init+0xcc>)
 80008f0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80008f4:	6153      	str	r3, [r2, #20]
 80008f6:	4b2a      	ldr	r3, [pc, #168]	; (80009a0 <MX_GPIO_Init+0xcc>)
 80008f8:	695b      	ldr	r3, [r3, #20]
 80008fa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80008fe:	60bb      	str	r3, [r7, #8]
 8000900:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000902:	4b27      	ldr	r3, [pc, #156]	; (80009a0 <MX_GPIO_Init+0xcc>)
 8000904:	695b      	ldr	r3, [r3, #20]
 8000906:	4a26      	ldr	r2, [pc, #152]	; (80009a0 <MX_GPIO_Init+0xcc>)
 8000908:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800090c:	6153      	str	r3, [r2, #20]
 800090e:	4b24      	ldr	r3, [pc, #144]	; (80009a0 <MX_GPIO_Init+0xcc>)
 8000910:	695b      	ldr	r3, [r3, #20]
 8000912:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000916:	607b      	str	r3, [r7, #4]
 8000918:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800091a:	4b21      	ldr	r3, [pc, #132]	; (80009a0 <MX_GPIO_Init+0xcc>)
 800091c:	695b      	ldr	r3, [r3, #20]
 800091e:	4a20      	ldr	r2, [pc, #128]	; (80009a0 <MX_GPIO_Init+0xcc>)
 8000920:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000924:	6153      	str	r3, [r2, #20]
 8000926:	4b1e      	ldr	r3, [pc, #120]	; (80009a0 <MX_GPIO_Init+0xcc>)
 8000928:	695b      	ldr	r3, [r3, #20]
 800092a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800092e:	603b      	str	r3, [r7, #0]
 8000930:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pins : PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000932:	230c      	movs	r3, #12
 8000934:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000936:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800093a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800093c:	2301      	movs	r3, #1
 800093e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000940:	f107 030c 	add.w	r3, r7, #12
 8000944:	4619      	mov	r1, r3
 8000946:	4817      	ldr	r0, [pc, #92]	; (80009a4 <MX_GPIO_Init+0xd0>)
 8000948:	f000 fc84 	bl	8001254 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800094c:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000950:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000952:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000956:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000958:	2301      	movs	r3, #1
 800095a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800095c:	f107 030c 	add.w	r3, r7, #12
 8000960:	4619      	mov	r1, r3
 8000962:	4811      	ldr	r0, [pc, #68]	; (80009a8 <MX_GPIO_Init+0xd4>)
 8000964:	f000 fc76 	bl	8001254 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_TSC_IRQn, 5, 0);
 8000968:	2200      	movs	r2, #0
 800096a:	2105      	movs	r1, #5
 800096c:	2008      	movs	r0, #8
 800096e:	f000 fbcb 	bl	8001108 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_TSC_IRQn);
 8000972:	2008      	movs	r0, #8
 8000974:	f000 fbe4 	bl	8001140 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 5, 0);
 8000978:	2200      	movs	r2, #0
 800097a:	2105      	movs	r1, #5
 800097c:	2009      	movs	r0, #9
 800097e:	f000 fbc3 	bl	8001108 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8000982:	2009      	movs	r0, #9
 8000984:	f000 fbdc 	bl	8001140 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000988:	2200      	movs	r2, #0
 800098a:	2105      	movs	r1, #5
 800098c:	2028      	movs	r0, #40	; 0x28
 800098e:	f000 fbbb 	bl	8001108 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000992:	2028      	movs	r0, #40	; 0x28
 8000994:	f000 fbd4 	bl	8001140 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000998:	bf00      	nop
 800099a:	3720      	adds	r7, #32
 800099c:	46bd      	mov	sp, r7
 800099e:	bd80      	pop	{r7, pc}
 80009a0:	40021000 	.word	0x40021000
 80009a4:	48000800 	.word	0x48000800
 80009a8:	48000400 	.word	0x48000400

080009ac <StartRead02>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartRead02 */
void StartRead02(void *argument)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b082      	sub	sp, #8
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
		//button logic
		if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_2) == 0)
 80009b4:	2104      	movs	r1, #4
 80009b6:	485a      	ldr	r0, [pc, #360]	; (8000b20 <StartRead02+0x174>)
 80009b8:	f000 fdd6 	bl	8001568 <HAL_GPIO_ReadPin>
 80009bc:	4603      	mov	r3, r0
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d114      	bne.n	80009ec <StartRead02+0x40>
		{
			data = RELAY1_ON;
 80009c2:	4958      	ldr	r1, [pc, #352]	; (8000b24 <StartRead02+0x178>)
 80009c4:	f04f 0201 	mov.w	r2, #1
 80009c8:	f04f 0300 	mov.w	r3, #0
 80009cc:	e9c1 2300 	strd	r2, r3, [r1]
			send_data();
 80009d0:	f7ff fe16 	bl	8000600 <send_data>
			HAL_UART_Transmit(&huart2, relay1_msg, 20, 10);
 80009d4:	230a      	movs	r3, #10
 80009d6:	2214      	movs	r2, #20
 80009d8:	4953      	ldr	r1, [pc, #332]	; (8000b28 <StartRead02+0x17c>)
 80009da:	4854      	ldr	r0, [pc, #336]	; (8000b2c <StartRead02+0x180>)
 80009dc:	f002 fde0 	bl	80035a0 <HAL_UART_Transmit>
			relay1_count++;
 80009e0:	4b53      	ldr	r3, [pc, #332]	; (8000b30 <StartRead02+0x184>)
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	3301      	adds	r3, #1
 80009e6:	4a52      	ldr	r2, [pc, #328]	; (8000b30 <StartRead02+0x184>)
 80009e8:	6013      	str	r3, [r2, #0]
 80009ea:	e00f      	b.n	8000a0c <StartRead02+0x60>
			//flash_write(RELAY1_ADDRESS, relay1_count, timer_flag, &hwwdg);
		}else if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_2) == 1){
 80009ec:	2104      	movs	r1, #4
 80009ee:	484c      	ldr	r0, [pc, #304]	; (8000b20 <StartRead02+0x174>)
 80009f0:	f000 fdba 	bl	8001568 <HAL_GPIO_ReadPin>
 80009f4:	4603      	mov	r3, r0
 80009f6:	2b01      	cmp	r3, #1
 80009f8:	d108      	bne.n	8000a0c <StartRead02+0x60>
			data = RELAY1_OFF;
 80009fa:	494a      	ldr	r1, [pc, #296]	; (8000b24 <StartRead02+0x178>)
 80009fc:	f04f 0202 	mov.w	r2, #2
 8000a00:	f04f 0300 	mov.w	r3, #0
 8000a04:	e9c1 2300 	strd	r2, r3, [r1]
			send_data();
 8000a08:	f7ff fdfa 	bl	8000600 <send_data>
		}

		if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_3) == 0)
 8000a0c:	2108      	movs	r1, #8
 8000a0e:	4844      	ldr	r0, [pc, #272]	; (8000b20 <StartRead02+0x174>)
 8000a10:	f000 fdaa 	bl	8001568 <HAL_GPIO_ReadPin>
 8000a14:	4603      	mov	r3, r0
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d114      	bne.n	8000a44 <StartRead02+0x98>
		{
			data = RELAY2_ON;
 8000a1a:	4942      	ldr	r1, [pc, #264]	; (8000b24 <StartRead02+0x178>)
 8000a1c:	f04f 0203 	mov.w	r2, #3
 8000a20:	f04f 0300 	mov.w	r3, #0
 8000a24:	e9c1 2300 	strd	r2, r3, [r1]
			send_data();
 8000a28:	f7ff fdea 	bl	8000600 <send_data>
			HAL_UART_Transmit(&huart2, relay2_msg, 20, 10);
 8000a2c:	230a      	movs	r3, #10
 8000a2e:	2214      	movs	r2, #20
 8000a30:	4940      	ldr	r1, [pc, #256]	; (8000b34 <StartRead02+0x188>)
 8000a32:	483e      	ldr	r0, [pc, #248]	; (8000b2c <StartRead02+0x180>)
 8000a34:	f002 fdb4 	bl	80035a0 <HAL_UART_Transmit>
			relay2_count++;
 8000a38:	4b3f      	ldr	r3, [pc, #252]	; (8000b38 <StartRead02+0x18c>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	3301      	adds	r3, #1
 8000a3e:	4a3e      	ldr	r2, [pc, #248]	; (8000b38 <StartRead02+0x18c>)
 8000a40:	6013      	str	r3, [r2, #0]
 8000a42:	e00f      	b.n	8000a64 <StartRead02+0xb8>
			//flash_write(RELAY2_ADDRESS, relay2_count, timer_flag, &hwwdg);
		}else if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_3) == 1){
 8000a44:	2108      	movs	r1, #8
 8000a46:	4836      	ldr	r0, [pc, #216]	; (8000b20 <StartRead02+0x174>)
 8000a48:	f000 fd8e 	bl	8001568 <HAL_GPIO_ReadPin>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	2b01      	cmp	r3, #1
 8000a50:	d108      	bne.n	8000a64 <StartRead02+0xb8>
			data = RELAY2_OFF;
 8000a52:	4934      	ldr	r1, [pc, #208]	; (8000b24 <StartRead02+0x178>)
 8000a54:	f04f 0204 	mov.w	r2, #4
 8000a58:	f04f 0300 	mov.w	r3, #0
 8000a5c:	e9c1 2300 	strd	r2, r3, [r1]
			send_data();
 8000a60:	f7ff fdce 	bl	8000600 <send_data>
		}

		if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14) == 0)
 8000a64:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a68:	4834      	ldr	r0, [pc, #208]	; (8000b3c <StartRead02+0x190>)
 8000a6a:	f000 fd7d 	bl	8001568 <HAL_GPIO_ReadPin>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d114      	bne.n	8000a9e <StartRead02+0xf2>
		{
			data = RELAY3_ON;
 8000a74:	492b      	ldr	r1, [pc, #172]	; (8000b24 <StartRead02+0x178>)
 8000a76:	f04f 0205 	mov.w	r2, #5
 8000a7a:	f04f 0300 	mov.w	r3, #0
 8000a7e:	e9c1 2300 	strd	r2, r3, [r1]
			send_data();
 8000a82:	f7ff fdbd 	bl	8000600 <send_data>
			HAL_UART_Transmit(&huart2, relay3_msg, 20, 10);
 8000a86:	230a      	movs	r3, #10
 8000a88:	2214      	movs	r2, #20
 8000a8a:	492d      	ldr	r1, [pc, #180]	; (8000b40 <StartRead02+0x194>)
 8000a8c:	4827      	ldr	r0, [pc, #156]	; (8000b2c <StartRead02+0x180>)
 8000a8e:	f002 fd87 	bl	80035a0 <HAL_UART_Transmit>
			relay3_count++;
 8000a92:	4b2c      	ldr	r3, [pc, #176]	; (8000b44 <StartRead02+0x198>)
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	3301      	adds	r3, #1
 8000a98:	4a2a      	ldr	r2, [pc, #168]	; (8000b44 <StartRead02+0x198>)
 8000a9a:	6013      	str	r3, [r2, #0]
 8000a9c:	e010      	b.n	8000ac0 <StartRead02+0x114>
			//flash_write(RELAY3_ADDRESS, relay3_count, timer_flag, &hwwdg);
		}else if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14) == 1){
 8000a9e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000aa2:	4826      	ldr	r0, [pc, #152]	; (8000b3c <StartRead02+0x190>)
 8000aa4:	f000 fd60 	bl	8001568 <HAL_GPIO_ReadPin>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	2b01      	cmp	r3, #1
 8000aac:	d108      	bne.n	8000ac0 <StartRead02+0x114>
			data = RELAY3_OFF;
 8000aae:	491d      	ldr	r1, [pc, #116]	; (8000b24 <StartRead02+0x178>)
 8000ab0:	f04f 0206 	mov.w	r2, #6
 8000ab4:	f04f 0300 	mov.w	r3, #0
 8000ab8:	e9c1 2300 	strd	r2, r3, [r1]
			send_data();
 8000abc:	f7ff fda0 	bl	8000600 <send_data>
		}

		if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15) == 0)
 8000ac0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ac4:	481d      	ldr	r0, [pc, #116]	; (8000b3c <StartRead02+0x190>)
 8000ac6:	f000 fd4f 	bl	8001568 <HAL_GPIO_ReadPin>
 8000aca:	4603      	mov	r3, r0
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d114      	bne.n	8000afa <StartRead02+0x14e>
		{
			data = RELAY4_ON;
 8000ad0:	4914      	ldr	r1, [pc, #80]	; (8000b24 <StartRead02+0x178>)
 8000ad2:	f04f 0207 	mov.w	r2, #7
 8000ad6:	f04f 0300 	mov.w	r3, #0
 8000ada:	e9c1 2300 	strd	r2, r3, [r1]
			send_data();
 8000ade:	f7ff fd8f 	bl	8000600 <send_data>
			HAL_UART_Transmit(&huart2, relay4_msg, 20, 10);
 8000ae2:	230a      	movs	r3, #10
 8000ae4:	2214      	movs	r2, #20
 8000ae6:	4918      	ldr	r1, [pc, #96]	; (8000b48 <StartRead02+0x19c>)
 8000ae8:	4810      	ldr	r0, [pc, #64]	; (8000b2c <StartRead02+0x180>)
 8000aea:	f002 fd59 	bl	80035a0 <HAL_UART_Transmit>
			relay4_count++;
 8000aee:	4b17      	ldr	r3, [pc, #92]	; (8000b4c <StartRead02+0x1a0>)
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	3301      	adds	r3, #1
 8000af4:	4a15      	ldr	r2, [pc, #84]	; (8000b4c <StartRead02+0x1a0>)
 8000af6:	6013      	str	r3, [r2, #0]
 8000af8:	e75c      	b.n	80009b4 <StartRead02+0x8>
			//flash_write(RELAY4_ADDRESS, relay4_count, timer_flag, &hwwdg);
		}else if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15) == 1){
 8000afa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000afe:	480f      	ldr	r0, [pc, #60]	; (8000b3c <StartRead02+0x190>)
 8000b00:	f000 fd32 	bl	8001568 <HAL_GPIO_ReadPin>
 8000b04:	4603      	mov	r3, r0
 8000b06:	2b01      	cmp	r3, #1
 8000b08:	f47f af54 	bne.w	80009b4 <StartRead02+0x8>
			data = RELAY4_OFF;
 8000b0c:	4905      	ldr	r1, [pc, #20]	; (8000b24 <StartRead02+0x178>)
 8000b0e:	f04f 0208 	mov.w	r2, #8
 8000b12:	f04f 0300 	mov.w	r3, #0
 8000b16:	e9c1 2300 	strd	r2, r3, [r1]
			send_data();
 8000b1a:	f7ff fd71 	bl	8000600 <send_data>
		if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_2) == 0)
 8000b1e:	e749      	b.n	80009b4 <StartRead02+0x8>
 8000b20:	48000800 	.word	0x48000800
 8000b24:	200001d8 	.word	0x200001d8
 8000b28:	20000008 	.word	0x20000008
 8000b2c:	2000011c 	.word	0x2000011c
 8000b30:	200001e4 	.word	0x200001e4
 8000b34:	2000001c 	.word	0x2000001c
 8000b38:	200001e8 	.word	0x200001e8
 8000b3c:	48000400 	.word	0x48000400
 8000b40:	20000030 	.word	0x20000030
 8000b44:	200001ec 	.word	0x200001ec
 8000b48:	20000044 	.word	0x20000044
 8000b4c:	200001f0 	.word	0x200001f0

08000b50 <StartWatchdog01>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartWatchdog01 */
void StartWatchdog01(void *argument)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b082      	sub	sp, #8
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartWatchdog01 */
  /* Infinite loop */
  for(;;)
  {
		if(LL_TIM_IsActiveFlag_UPDATE(TIM16)){
 8000b58:	480b      	ldr	r0, [pc, #44]	; (8000b88 <StartWatchdog01+0x38>)
 8000b5a:	f7ff fcbe 	bl	80004da <LL_TIM_IsActiveFlag_UPDATE>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d0f9      	beq.n	8000b58 <StartWatchdog01+0x8>
			LL_TIM_ClearFlag_UPDATE(TIM16);
 8000b64:	4808      	ldr	r0, [pc, #32]	; (8000b88 <StartWatchdog01+0x38>)
 8000b66:	f7ff fcaa 	bl	80004be <LL_TIM_ClearFlag_UPDATE>
			LL_TIM_DisableCounter(TIM16);
 8000b6a:	4807      	ldr	r0, [pc, #28]	; (8000b88 <StartWatchdog01+0x38>)
 8000b6c:	f7ff fc87 	bl	800047e <LL_TIM_DisableCounter>
			MX_WWDG_Init();
 8000b70:	f7ff fe90 	bl	8000894 <MX_WWDG_Init>
			timer_flag = true;
 8000b74:	4b05      	ldr	r3, [pc, #20]	; (8000b8c <StartWatchdog01+0x3c>)
 8000b76:	2201      	movs	r2, #1
 8000b78:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart2, wwdg_msg, 20, 10);
 8000b7a:	230a      	movs	r3, #10
 8000b7c:	2214      	movs	r2, #20
 8000b7e:	4904      	ldr	r1, [pc, #16]	; (8000b90 <StartWatchdog01+0x40>)
 8000b80:	4804      	ldr	r0, [pc, #16]	; (8000b94 <StartWatchdog01+0x44>)
 8000b82:	f002 fd0d 	bl	80035a0 <HAL_UART_Transmit>
		if(LL_TIM_IsActiveFlag_UPDATE(TIM16)){
 8000b86:	e7e7      	b.n	8000b58 <StartWatchdog01+0x8>
 8000b88:	40014400 	.word	0x40014400
 8000b8c:	200001e0 	.word	0x200001e0
 8000b90:	20000058 	.word	0x20000058
 8000b94:	2000011c 	.word	0x2000011c

08000b98 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b9c:	b672      	cpsid	i
}
 8000b9e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ba0:	e7fe      	b.n	8000ba0 <Error_Handler+0x8>
	...

08000ba4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b082      	sub	sp, #8
 8000ba8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000baa:	4b11      	ldr	r3, [pc, #68]	; (8000bf0 <HAL_MspInit+0x4c>)
 8000bac:	699b      	ldr	r3, [r3, #24]
 8000bae:	4a10      	ldr	r2, [pc, #64]	; (8000bf0 <HAL_MspInit+0x4c>)
 8000bb0:	f043 0301 	orr.w	r3, r3, #1
 8000bb4:	6193      	str	r3, [r2, #24]
 8000bb6:	4b0e      	ldr	r3, [pc, #56]	; (8000bf0 <HAL_MspInit+0x4c>)
 8000bb8:	699b      	ldr	r3, [r3, #24]
 8000bba:	f003 0301 	and.w	r3, r3, #1
 8000bbe:	607b      	str	r3, [r7, #4]
 8000bc0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bc2:	4b0b      	ldr	r3, [pc, #44]	; (8000bf0 <HAL_MspInit+0x4c>)
 8000bc4:	69db      	ldr	r3, [r3, #28]
 8000bc6:	4a0a      	ldr	r2, [pc, #40]	; (8000bf0 <HAL_MspInit+0x4c>)
 8000bc8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bcc:	61d3      	str	r3, [r2, #28]
 8000bce:	4b08      	ldr	r3, [pc, #32]	; (8000bf0 <HAL_MspInit+0x4c>)
 8000bd0:	69db      	ldr	r3, [r3, #28]
 8000bd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bd6:	603b      	str	r3, [r7, #0]
 8000bd8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000bda:	2200      	movs	r2, #0
 8000bdc:	210f      	movs	r1, #15
 8000bde:	f06f 0001 	mvn.w	r0, #1
 8000be2:	f000 fa91 	bl	8001108 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000be6:	bf00      	nop
 8000be8:	3708      	adds	r7, #8
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	bf00      	nop
 8000bf0:	40021000 	.word	0x40021000

08000bf4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b08c      	sub	sp, #48	; 0x30
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bfc:	f107 031c 	add.w	r3, r7, #28
 8000c00:	2200      	movs	r2, #0
 8000c02:	601a      	str	r2, [r3, #0]
 8000c04:	605a      	str	r2, [r3, #4]
 8000c06:	609a      	str	r2, [r3, #8]
 8000c08:	60da      	str	r2, [r3, #12]
 8000c0a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	4a36      	ldr	r2, [pc, #216]	; (8000cec <HAL_UART_MspInit+0xf8>)
 8000c12:	4293      	cmp	r3, r2
 8000c14:	d130      	bne.n	8000c78 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000c16:	4b36      	ldr	r3, [pc, #216]	; (8000cf0 <HAL_UART_MspInit+0xfc>)
 8000c18:	699b      	ldr	r3, [r3, #24]
 8000c1a:	4a35      	ldr	r2, [pc, #212]	; (8000cf0 <HAL_UART_MspInit+0xfc>)
 8000c1c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c20:	6193      	str	r3, [r2, #24]
 8000c22:	4b33      	ldr	r3, [pc, #204]	; (8000cf0 <HAL_UART_MspInit+0xfc>)
 8000c24:	699b      	ldr	r3, [r3, #24]
 8000c26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c2a:	61bb      	str	r3, [r7, #24]
 8000c2c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c2e:	4b30      	ldr	r3, [pc, #192]	; (8000cf0 <HAL_UART_MspInit+0xfc>)
 8000c30:	695b      	ldr	r3, [r3, #20]
 8000c32:	4a2f      	ldr	r2, [pc, #188]	; (8000cf0 <HAL_UART_MspInit+0xfc>)
 8000c34:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000c38:	6153      	str	r3, [r2, #20]
 8000c3a:	4b2d      	ldr	r3, [pc, #180]	; (8000cf0 <HAL_UART_MspInit+0xfc>)
 8000c3c:	695b      	ldr	r3, [r3, #20]
 8000c3e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000c42:	617b      	str	r3, [r7, #20]
 8000c44:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000c46:	2330      	movs	r3, #48	; 0x30
 8000c48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c4a:	2302      	movs	r3, #2
 8000c4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c52:	2303      	movs	r3, #3
 8000c54:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000c56:	2307      	movs	r3, #7
 8000c58:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c5a:	f107 031c 	add.w	r3, r7, #28
 8000c5e:	4619      	mov	r1, r3
 8000c60:	4824      	ldr	r0, [pc, #144]	; (8000cf4 <HAL_UART_MspInit+0x100>)
 8000c62:	f000 faf7 	bl	8001254 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8000c66:	2200      	movs	r2, #0
 8000c68:	2105      	movs	r1, #5
 8000c6a:	2025      	movs	r0, #37	; 0x25
 8000c6c:	f000 fa4c 	bl	8001108 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000c70:	2025      	movs	r0, #37	; 0x25
 8000c72:	f000 fa65 	bl	8001140 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000c76:	e035      	b.n	8000ce4 <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART2)
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	4a1e      	ldr	r2, [pc, #120]	; (8000cf8 <HAL_UART_MspInit+0x104>)
 8000c7e:	4293      	cmp	r3, r2
 8000c80:	d130      	bne.n	8000ce4 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c82:	4b1b      	ldr	r3, [pc, #108]	; (8000cf0 <HAL_UART_MspInit+0xfc>)
 8000c84:	69db      	ldr	r3, [r3, #28]
 8000c86:	4a1a      	ldr	r2, [pc, #104]	; (8000cf0 <HAL_UART_MspInit+0xfc>)
 8000c88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c8c:	61d3      	str	r3, [r2, #28]
 8000c8e:	4b18      	ldr	r3, [pc, #96]	; (8000cf0 <HAL_UART_MspInit+0xfc>)
 8000c90:	69db      	ldr	r3, [r3, #28]
 8000c92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c96:	613b      	str	r3, [r7, #16]
 8000c98:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c9a:	4b15      	ldr	r3, [pc, #84]	; (8000cf0 <HAL_UART_MspInit+0xfc>)
 8000c9c:	695b      	ldr	r3, [r3, #20]
 8000c9e:	4a14      	ldr	r2, [pc, #80]	; (8000cf0 <HAL_UART_MspInit+0xfc>)
 8000ca0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ca4:	6153      	str	r3, [r2, #20]
 8000ca6:	4b12      	ldr	r3, [pc, #72]	; (8000cf0 <HAL_UART_MspInit+0xfc>)
 8000ca8:	695b      	ldr	r3, [r3, #20]
 8000caa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cae:	60fb      	str	r3, [r7, #12]
 8000cb0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000cb2:	230c      	movs	r3, #12
 8000cb4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cb6:	2302      	movs	r3, #2
 8000cb8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000cbe:	2303      	movs	r3, #3
 8000cc0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000cc2:	2307      	movs	r3, #7
 8000cc4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cc6:	f107 031c 	add.w	r3, r7, #28
 8000cca:	4619      	mov	r1, r3
 8000ccc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cd0:	f000 fac0 	bl	8001254 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	2105      	movs	r1, #5
 8000cd8:	2026      	movs	r0, #38	; 0x26
 8000cda:	f000 fa15 	bl	8001108 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000cde:	2026      	movs	r0, #38	; 0x26
 8000ce0:	f000 fa2e 	bl	8001140 <HAL_NVIC_EnableIRQ>
}
 8000ce4:	bf00      	nop
 8000ce6:	3730      	adds	r7, #48	; 0x30
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	bd80      	pop	{r7, pc}
 8000cec:	40013800 	.word	0x40013800
 8000cf0:	40021000 	.word	0x40021000
 8000cf4:	48000800 	.word	0x48000800
 8000cf8:	40004400 	.word	0x40004400

08000cfc <HAL_WWDG_MspInit>:
* This function configures the hardware resources used in this example
* @param hwwdg: WWDG handle pointer
* @retval None
*/
void HAL_WWDG_MspInit(WWDG_HandleTypeDef* hwwdg)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	b085      	sub	sp, #20
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
  if(hwwdg->Instance==WWDG)
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	4a0a      	ldr	r2, [pc, #40]	; (8000d34 <HAL_WWDG_MspInit+0x38>)
 8000d0a:	4293      	cmp	r3, r2
 8000d0c:	d10b      	bne.n	8000d26 <HAL_WWDG_MspInit+0x2a>
  {
  /* USER CODE BEGIN WWDG_MspInit 0 */

  /* USER CODE END WWDG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_WWDG_CLK_ENABLE();
 8000d0e:	4b0a      	ldr	r3, [pc, #40]	; (8000d38 <HAL_WWDG_MspInit+0x3c>)
 8000d10:	69db      	ldr	r3, [r3, #28]
 8000d12:	4a09      	ldr	r2, [pc, #36]	; (8000d38 <HAL_WWDG_MspInit+0x3c>)
 8000d14:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000d18:	61d3      	str	r3, [r2, #28]
 8000d1a:	4b07      	ldr	r3, [pc, #28]	; (8000d38 <HAL_WWDG_MspInit+0x3c>)
 8000d1c:	69db      	ldr	r3, [r3, #28]
 8000d1e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000d22:	60fb      	str	r3, [r7, #12]
 8000d24:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN WWDG_MspInit 1 */

  /* USER CODE END WWDG_MspInit 1 */
  }

}
 8000d26:	bf00      	nop
 8000d28:	3714      	adds	r7, #20
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d30:	4770      	bx	lr
 8000d32:	bf00      	nop
 8000d34:	40002c00 	.word	0x40002c00
 8000d38:	40021000 	.word	0x40021000

08000d3c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b08e      	sub	sp, #56	; 0x38
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000d44:	2300      	movs	r3, #0
 8000d46:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000d4c:	4b33      	ldr	r3, [pc, #204]	; (8000e1c <HAL_InitTick+0xe0>)
 8000d4e:	69db      	ldr	r3, [r3, #28]
 8000d50:	4a32      	ldr	r2, [pc, #200]	; (8000e1c <HAL_InitTick+0xe0>)
 8000d52:	f043 0310 	orr.w	r3, r3, #16
 8000d56:	61d3      	str	r3, [r2, #28]
 8000d58:	4b30      	ldr	r3, [pc, #192]	; (8000e1c <HAL_InitTick+0xe0>)
 8000d5a:	69db      	ldr	r3, [r3, #28]
 8000d5c:	f003 0310 	and.w	r3, r3, #16
 8000d60:	60fb      	str	r3, [r7, #12]
 8000d62:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000d64:	f107 0210 	add.w	r2, r7, #16
 8000d68:	f107 0314 	add.w	r3, r7, #20
 8000d6c:	4611      	mov	r1, r2
 8000d6e:	4618      	mov	r0, r3
 8000d70:	f001 feaa 	bl	8002ac8 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000d74:	6a3b      	ldr	r3, [r7, #32]
 8000d76:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000d78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d103      	bne.n	8000d86 <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000d7e:	f001 fe5f 	bl	8002a40 <HAL_RCC_GetPCLK1Freq>
 8000d82:	6378      	str	r0, [r7, #52]	; 0x34
 8000d84:	e004      	b.n	8000d90 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000d86:	f001 fe5b 	bl	8002a40 <HAL_RCC_GetPCLK1Freq>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	005b      	lsls	r3, r3, #1
 8000d8e:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000d90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d92:	4a23      	ldr	r2, [pc, #140]	; (8000e20 <HAL_InitTick+0xe4>)
 8000d94:	fba2 2303 	umull	r2, r3, r2, r3
 8000d98:	0c9b      	lsrs	r3, r3, #18
 8000d9a:	3b01      	subs	r3, #1
 8000d9c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000d9e:	4b21      	ldr	r3, [pc, #132]	; (8000e24 <HAL_InitTick+0xe8>)
 8000da0:	4a21      	ldr	r2, [pc, #132]	; (8000e28 <HAL_InitTick+0xec>)
 8000da2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000da4:	4b1f      	ldr	r3, [pc, #124]	; (8000e24 <HAL_InitTick+0xe8>)
 8000da6:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000daa:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000dac:	4a1d      	ldr	r2, [pc, #116]	; (8000e24 <HAL_InitTick+0xe8>)
 8000dae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000db0:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000db2:	4b1c      	ldr	r3, [pc, #112]	; (8000e24 <HAL_InitTick+0xe8>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000db8:	4b1a      	ldr	r3, [pc, #104]	; (8000e24 <HAL_InitTick+0xe8>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dbe:	4b19      	ldr	r3, [pc, #100]	; (8000e24 <HAL_InitTick+0xe8>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000dc4:	4817      	ldr	r0, [pc, #92]	; (8000e24 <HAL_InitTick+0xe8>)
 8000dc6:	f002 f8cf 	bl	8002f68 <HAL_TIM_Base_Init>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000dd0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d11b      	bne.n	8000e10 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000dd8:	4812      	ldr	r0, [pc, #72]	; (8000e24 <HAL_InitTick+0xe8>)
 8000dda:	f002 f927 	bl	800302c <HAL_TIM_Base_Start_IT>
 8000dde:	4603      	mov	r3, r0
 8000de0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000de4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d111      	bne.n	8000e10 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000dec:	2036      	movs	r0, #54	; 0x36
 8000dee:	f000 f9a7 	bl	8001140 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	2b0f      	cmp	r3, #15
 8000df6:	d808      	bhi.n	8000e0a <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000df8:	2200      	movs	r2, #0
 8000dfa:	6879      	ldr	r1, [r7, #4]
 8000dfc:	2036      	movs	r0, #54	; 0x36
 8000dfe:	f000 f983 	bl	8001108 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000e02:	4a0a      	ldr	r2, [pc, #40]	; (8000e2c <HAL_InitTick+0xf0>)
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	6013      	str	r3, [r2, #0]
 8000e08:	e002      	b.n	8000e10 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8000e0a:	2301      	movs	r3, #1
 8000e0c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000e10:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000e14:	4618      	mov	r0, r3
 8000e16:	3738      	adds	r7, #56	; 0x38
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bd80      	pop	{r7, pc}
 8000e1c:	40021000 	.word	0x40021000
 8000e20:	431bde83 	.word	0x431bde83
 8000e24:	200001f4 	.word	0x200001f4
 8000e28:	40001000 	.word	0x40001000
 8000e2c:	20000070 	.word	0x20000070

08000e30 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e30:	b480      	push	{r7}
 8000e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e34:	e7fe      	b.n	8000e34 <NMI_Handler+0x4>

08000e36 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e36:	b480      	push	{r7}
 8000e38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e3a:	e7fe      	b.n	8000e3a <HardFault_Handler+0x4>

08000e3c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e40:	e7fe      	b.n	8000e40 <MemManage_Handler+0x4>

08000e42 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e42:	b480      	push	{r7}
 8000e44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e46:	e7fe      	b.n	8000e46 <BusFault_Handler+0x4>

08000e48 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e4c:	e7fe      	b.n	8000e4c <UsageFault_Handler+0x4>

08000e4e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e4e:	b480      	push	{r7}
 8000e50:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e52:	bf00      	nop
 8000e54:	46bd      	mov	sp, r7
 8000e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5a:	4770      	bx	lr

08000e5c <EXTI2_TSC_IRQHandler>:

/**
  * @brief This function handles EXTI line2 and Touch Sense controller interrupts.
  */
void EXTI2_TSC_IRQHandler(void)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_TSC_IRQn 0 */

  /* USER CODE END EXTI2_TSC_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8000e60:	2004      	movs	r0, #4
 8000e62:	f000 fb99 	bl	8001598 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_TSC_IRQn 1 */

  /* USER CODE END EXTI2_TSC_IRQn 1 */
}
 8000e66:	bf00      	nop
 8000e68:	bd80      	pop	{r7, pc}

08000e6a <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8000e6a:	b580      	push	{r7, lr}
 8000e6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8000e6e:	2008      	movs	r0, #8
 8000e70:	f000 fb92 	bl	8001598 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8000e74:	bf00      	nop
 8000e76:	bd80      	pop	{r7, pc}

08000e78 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update and TIM16 interrupts.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000e7c:	bf00      	nop
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e84:	4770      	bx	lr
	...

08000e88 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000e8c:	4802      	ldr	r0, [pc, #8]	; (8000e98 <USART1_IRQHandler+0x10>)
 8000e8e:	f002 fc11 	bl	80036b4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000e92:	bf00      	nop
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	bf00      	nop
 8000e98:	20000094 	.word	0x20000094

08000e9c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000ea0:	4802      	ldr	r0, [pc, #8]	; (8000eac <USART2_IRQHandler+0x10>)
 8000ea2:	f002 fc07 	bl	80036b4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000ea6:	bf00      	nop
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	bf00      	nop
 8000eac:	2000011c 	.word	0x2000011c

08000eb0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8000eb4:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000eb8:	f000 fb6e 	bl	8001598 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8000ebc:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000ec0:	f000 fb6a 	bl	8001598 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000ec4:	bf00      	nop
 8000ec6:	bd80      	pop	{r7, pc}

08000ec8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1 underrun interrupt.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000ecc:	4802      	ldr	r0, [pc, #8]	; (8000ed8 <TIM6_DAC_IRQHandler+0x10>)
 8000ece:	f002 f91d 	bl	800310c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000ed2:	bf00      	nop
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	200001f4 	.word	0x200001f4

08000edc <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000edc:	b480      	push	{r7}
 8000ede:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ee0:	4b06      	ldr	r3, [pc, #24]	; (8000efc <SystemInit+0x20>)
 8000ee2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ee6:	4a05      	ldr	r2, [pc, #20]	; (8000efc <SystemInit+0x20>)
 8000ee8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000eec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ef0:	bf00      	nop
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef8:	4770      	bx	lr
 8000efa:	bf00      	nop
 8000efc:	e000ed00 	.word	0xe000ed00

08000f00 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000f00:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f38 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000f04:	f7ff ffea 	bl	8000edc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f08:	480c      	ldr	r0, [pc, #48]	; (8000f3c <LoopForever+0x6>)
  ldr r1, =_edata
 8000f0a:	490d      	ldr	r1, [pc, #52]	; (8000f40 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f0c:	4a0d      	ldr	r2, [pc, #52]	; (8000f44 <LoopForever+0xe>)
  movs r3, #0
 8000f0e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f10:	e002      	b.n	8000f18 <LoopCopyDataInit>

08000f12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f16:	3304      	adds	r3, #4

08000f18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f1c:	d3f9      	bcc.n	8000f12 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f1e:	4a0a      	ldr	r2, [pc, #40]	; (8000f48 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000f20:	4c0a      	ldr	r4, [pc, #40]	; (8000f4c <LoopForever+0x16>)
  movs r3, #0
 8000f22:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f24:	e001      	b.n	8000f2a <LoopFillZerobss>

08000f26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f28:	3204      	adds	r2, #4

08000f2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f2c:	d3fb      	bcc.n	8000f26 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f2e:	f006 f955 	bl	80071dc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000f32:	f7ff fb85 	bl	8000640 <main>

08000f36 <LoopForever>:

LoopForever:
    b LoopForever
 8000f36:	e7fe      	b.n	8000f36 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000f38:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000f3c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f40:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8000f44:	08007310 	.word	0x08007310
  ldr r2, =_sbss
 8000f48:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8000f4c:	20001b8c 	.word	0x20001b8c

08000f50 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000f50:	e7fe      	b.n	8000f50 <ADC1_2_IRQHandler>
	...

08000f54 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f58:	4b08      	ldr	r3, [pc, #32]	; (8000f7c <HAL_Init+0x28>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	4a07      	ldr	r2, [pc, #28]	; (8000f7c <HAL_Init+0x28>)
 8000f5e:	f043 0310 	orr.w	r3, r3, #16
 8000f62:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f64:	2003      	movs	r0, #3
 8000f66:	f000 f8c4 	bl	80010f2 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f6a:	200f      	movs	r0, #15
 8000f6c:	f7ff fee6 	bl	8000d3c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f70:	f7ff fe18 	bl	8000ba4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f74:	2300      	movs	r3, #0
}
 8000f76:	4618      	mov	r0, r3
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	bf00      	nop
 8000f7c:	40022000 	.word	0x40022000

08000f80 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f80:	b480      	push	{r7}
 8000f82:	af00      	add	r7, sp, #0
  return uwTick;  
 8000f84:	4b03      	ldr	r3, [pc, #12]	; (8000f94 <HAL_GetTick+0x14>)
 8000f86:	681b      	ldr	r3, [r3, #0]
}
 8000f88:	4618      	mov	r0, r3
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f90:	4770      	bx	lr
 8000f92:	bf00      	nop
 8000f94:	20000240 	.word	0x20000240

08000f98 <__NVIC_SetPriorityGrouping>:
{
 8000f98:	b480      	push	{r7}
 8000f9a:	b085      	sub	sp, #20
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	f003 0307 	and.w	r3, r3, #7
 8000fa6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fa8:	4b0c      	ldr	r3, [pc, #48]	; (8000fdc <__NVIC_SetPriorityGrouping+0x44>)
 8000faa:	68db      	ldr	r3, [r3, #12]
 8000fac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fae:	68ba      	ldr	r2, [r7, #8]
 8000fb0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fb4:	4013      	ands	r3, r2
 8000fb6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fbc:	68bb      	ldr	r3, [r7, #8]
 8000fbe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fc0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000fc4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fc8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fca:	4a04      	ldr	r2, [pc, #16]	; (8000fdc <__NVIC_SetPriorityGrouping+0x44>)
 8000fcc:	68bb      	ldr	r3, [r7, #8]
 8000fce:	60d3      	str	r3, [r2, #12]
}
 8000fd0:	bf00      	nop
 8000fd2:	3714      	adds	r7, #20
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fda:	4770      	bx	lr
 8000fdc:	e000ed00 	.word	0xe000ed00

08000fe0 <__NVIC_GetPriorityGrouping>:
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fe4:	4b04      	ldr	r3, [pc, #16]	; (8000ff8 <__NVIC_GetPriorityGrouping+0x18>)
 8000fe6:	68db      	ldr	r3, [r3, #12]
 8000fe8:	0a1b      	lsrs	r3, r3, #8
 8000fea:	f003 0307 	and.w	r3, r3, #7
}
 8000fee:	4618      	mov	r0, r3
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff6:	4770      	bx	lr
 8000ff8:	e000ed00 	.word	0xe000ed00

08000ffc <__NVIC_EnableIRQ>:
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	b083      	sub	sp, #12
 8001000:	af00      	add	r7, sp, #0
 8001002:	4603      	mov	r3, r0
 8001004:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001006:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800100a:	2b00      	cmp	r3, #0
 800100c:	db0b      	blt.n	8001026 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800100e:	79fb      	ldrb	r3, [r7, #7]
 8001010:	f003 021f 	and.w	r2, r3, #31
 8001014:	4907      	ldr	r1, [pc, #28]	; (8001034 <__NVIC_EnableIRQ+0x38>)
 8001016:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800101a:	095b      	lsrs	r3, r3, #5
 800101c:	2001      	movs	r0, #1
 800101e:	fa00 f202 	lsl.w	r2, r0, r2
 8001022:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001026:	bf00      	nop
 8001028:	370c      	adds	r7, #12
 800102a:	46bd      	mov	sp, r7
 800102c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop
 8001034:	e000e100 	.word	0xe000e100

08001038 <__NVIC_SetPriority>:
{
 8001038:	b480      	push	{r7}
 800103a:	b083      	sub	sp, #12
 800103c:	af00      	add	r7, sp, #0
 800103e:	4603      	mov	r3, r0
 8001040:	6039      	str	r1, [r7, #0]
 8001042:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001044:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001048:	2b00      	cmp	r3, #0
 800104a:	db0a      	blt.n	8001062 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	b2da      	uxtb	r2, r3
 8001050:	490c      	ldr	r1, [pc, #48]	; (8001084 <__NVIC_SetPriority+0x4c>)
 8001052:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001056:	0112      	lsls	r2, r2, #4
 8001058:	b2d2      	uxtb	r2, r2
 800105a:	440b      	add	r3, r1
 800105c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001060:	e00a      	b.n	8001078 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	b2da      	uxtb	r2, r3
 8001066:	4908      	ldr	r1, [pc, #32]	; (8001088 <__NVIC_SetPriority+0x50>)
 8001068:	79fb      	ldrb	r3, [r7, #7]
 800106a:	f003 030f 	and.w	r3, r3, #15
 800106e:	3b04      	subs	r3, #4
 8001070:	0112      	lsls	r2, r2, #4
 8001072:	b2d2      	uxtb	r2, r2
 8001074:	440b      	add	r3, r1
 8001076:	761a      	strb	r2, [r3, #24]
}
 8001078:	bf00      	nop
 800107a:	370c      	adds	r7, #12
 800107c:	46bd      	mov	sp, r7
 800107e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001082:	4770      	bx	lr
 8001084:	e000e100 	.word	0xe000e100
 8001088:	e000ed00 	.word	0xe000ed00

0800108c <NVIC_EncodePriority>:
{
 800108c:	b480      	push	{r7}
 800108e:	b089      	sub	sp, #36	; 0x24
 8001090:	af00      	add	r7, sp, #0
 8001092:	60f8      	str	r0, [r7, #12]
 8001094:	60b9      	str	r1, [r7, #8]
 8001096:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	f003 0307 	and.w	r3, r3, #7
 800109e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010a0:	69fb      	ldr	r3, [r7, #28]
 80010a2:	f1c3 0307 	rsb	r3, r3, #7
 80010a6:	2b04      	cmp	r3, #4
 80010a8:	bf28      	it	cs
 80010aa:	2304      	movcs	r3, #4
 80010ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010ae:	69fb      	ldr	r3, [r7, #28]
 80010b0:	3304      	adds	r3, #4
 80010b2:	2b06      	cmp	r3, #6
 80010b4:	d902      	bls.n	80010bc <NVIC_EncodePriority+0x30>
 80010b6:	69fb      	ldr	r3, [r7, #28]
 80010b8:	3b03      	subs	r3, #3
 80010ba:	e000      	b.n	80010be <NVIC_EncodePriority+0x32>
 80010bc:	2300      	movs	r3, #0
 80010be:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010c0:	f04f 32ff 	mov.w	r2, #4294967295
 80010c4:	69bb      	ldr	r3, [r7, #24]
 80010c6:	fa02 f303 	lsl.w	r3, r2, r3
 80010ca:	43da      	mvns	r2, r3
 80010cc:	68bb      	ldr	r3, [r7, #8]
 80010ce:	401a      	ands	r2, r3
 80010d0:	697b      	ldr	r3, [r7, #20]
 80010d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010d4:	f04f 31ff 	mov.w	r1, #4294967295
 80010d8:	697b      	ldr	r3, [r7, #20]
 80010da:	fa01 f303 	lsl.w	r3, r1, r3
 80010de:	43d9      	mvns	r1, r3
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010e4:	4313      	orrs	r3, r2
}
 80010e6:	4618      	mov	r0, r3
 80010e8:	3724      	adds	r7, #36	; 0x24
 80010ea:	46bd      	mov	sp, r7
 80010ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f0:	4770      	bx	lr

080010f2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010f2:	b580      	push	{r7, lr}
 80010f4:	b082      	sub	sp, #8
 80010f6:	af00      	add	r7, sp, #0
 80010f8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010fa:	6878      	ldr	r0, [r7, #4]
 80010fc:	f7ff ff4c 	bl	8000f98 <__NVIC_SetPriorityGrouping>
}
 8001100:	bf00      	nop
 8001102:	3708      	adds	r7, #8
 8001104:	46bd      	mov	sp, r7
 8001106:	bd80      	pop	{r7, pc}

08001108 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b086      	sub	sp, #24
 800110c:	af00      	add	r7, sp, #0
 800110e:	4603      	mov	r3, r0
 8001110:	60b9      	str	r1, [r7, #8]
 8001112:	607a      	str	r2, [r7, #4]
 8001114:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001116:	2300      	movs	r3, #0
 8001118:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800111a:	f7ff ff61 	bl	8000fe0 <__NVIC_GetPriorityGrouping>
 800111e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001120:	687a      	ldr	r2, [r7, #4]
 8001122:	68b9      	ldr	r1, [r7, #8]
 8001124:	6978      	ldr	r0, [r7, #20]
 8001126:	f7ff ffb1 	bl	800108c <NVIC_EncodePriority>
 800112a:	4602      	mov	r2, r0
 800112c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001130:	4611      	mov	r1, r2
 8001132:	4618      	mov	r0, r3
 8001134:	f7ff ff80 	bl	8001038 <__NVIC_SetPriority>
}
 8001138:	bf00      	nop
 800113a:	3718      	adds	r7, #24
 800113c:	46bd      	mov	sp, r7
 800113e:	bd80      	pop	{r7, pc}

08001140 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b082      	sub	sp, #8
 8001144:	af00      	add	r7, sp, #0
 8001146:	4603      	mov	r3, r0
 8001148:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800114a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800114e:	4618      	mov	r0, r3
 8001150:	f7ff ff54 	bl	8000ffc <__NVIC_EnableIRQ>
}
 8001154:	bf00      	nop
 8001156:	3708      	adds	r7, #8
 8001158:	46bd      	mov	sp, r7
 800115a:	bd80      	pop	{r7, pc}

0800115c <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800115c:	b480      	push	{r7}
 800115e:	b083      	sub	sp, #12
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	2b00      	cmp	r3, #0
 8001168:	d101      	bne.n	800116e <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 800116a:	2301      	movs	r3, #1
 800116c:	e02e      	b.n	80011cc <HAL_DMA_Abort+0x70>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001174:	2b02      	cmp	r3, #2
 8001176:	d008      	beq.n	800118a <HAL_DMA_Abort+0x2e>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	2204      	movs	r2, #4
 800117c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	2200      	movs	r2, #0
 8001182:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 8001186:	2301      	movs	r3, #1
 8001188:	e020      	b.n	80011cc <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	681a      	ldr	r2, [r3, #0]
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	f022 020e 	bic.w	r2, r2, #14
 8001198:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	681a      	ldr	r2, [r3, #0]
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	f022 0201 	bic.w	r2, r2, #1
 80011a8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80011b2:	2101      	movs	r1, #1
 80011b4:	fa01 f202 	lsl.w	r2, r1, r2
 80011b8:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	2201      	movs	r2, #1
 80011be:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	2200      	movs	r2, #0
 80011c6:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80011ca:	2300      	movs	r3, #0
}
 80011cc:	4618      	mov	r0, r3
 80011ce:	370c      	adds	r7, #12
 80011d0:	46bd      	mov	sp, r7
 80011d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d6:	4770      	bx	lr

080011d8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b084      	sub	sp, #16
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80011e0:	2300      	movs	r3, #0
 80011e2:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80011ea:	2b02      	cmp	r3, #2
 80011ec:	d005      	beq.n	80011fa <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	2204      	movs	r2, #4
 80011f2:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 80011f4:	2301      	movs	r3, #1
 80011f6:	73fb      	strb	r3, [r7, #15]
 80011f8:	e027      	b.n	800124a <HAL_DMA_Abort_IT+0x72>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	681a      	ldr	r2, [r3, #0]
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	f022 020e 	bic.w	r2, r2, #14
 8001208:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	681a      	ldr	r2, [r3, #0]
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	f022 0201 	bic.w	r2, r2, #1
 8001218:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001222:	2101      	movs	r1, #1
 8001224:	fa01 f202 	lsl.w	r2, r1, r2
 8001228:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	2201      	movs	r2, #1
 800122e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	2200      	movs	r2, #0
 8001236:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800123e:	2b00      	cmp	r3, #0
 8001240:	d003      	beq.n	800124a <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001246:	6878      	ldr	r0, [r7, #4]
 8001248:	4798      	blx	r3
    }
  }
  return status;
 800124a:	7bfb      	ldrb	r3, [r7, #15]
}
 800124c:	4618      	mov	r0, r3
 800124e:	3710      	adds	r7, #16
 8001250:	46bd      	mov	sp, r7
 8001252:	bd80      	pop	{r7, pc}

08001254 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001254:	b480      	push	{r7}
 8001256:	b087      	sub	sp, #28
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
 800125c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800125e:	2300      	movs	r3, #0
 8001260:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001262:	e160      	b.n	8001526 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	681a      	ldr	r2, [r3, #0]
 8001268:	2101      	movs	r1, #1
 800126a:	697b      	ldr	r3, [r7, #20]
 800126c:	fa01 f303 	lsl.w	r3, r1, r3
 8001270:	4013      	ands	r3, r2
 8001272:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	2b00      	cmp	r3, #0
 8001278:	f000 8152 	beq.w	8001520 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	685b      	ldr	r3, [r3, #4]
 8001280:	f003 0303 	and.w	r3, r3, #3
 8001284:	2b01      	cmp	r3, #1
 8001286:	d005      	beq.n	8001294 <HAL_GPIO_Init+0x40>
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	685b      	ldr	r3, [r3, #4]
 800128c:	f003 0303 	and.w	r3, r3, #3
 8001290:	2b02      	cmp	r3, #2
 8001292:	d130      	bne.n	80012f6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	689b      	ldr	r3, [r3, #8]
 8001298:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800129a:	697b      	ldr	r3, [r7, #20]
 800129c:	005b      	lsls	r3, r3, #1
 800129e:	2203      	movs	r2, #3
 80012a0:	fa02 f303 	lsl.w	r3, r2, r3
 80012a4:	43db      	mvns	r3, r3
 80012a6:	693a      	ldr	r2, [r7, #16]
 80012a8:	4013      	ands	r3, r2
 80012aa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	68da      	ldr	r2, [r3, #12]
 80012b0:	697b      	ldr	r3, [r7, #20]
 80012b2:	005b      	lsls	r3, r3, #1
 80012b4:	fa02 f303 	lsl.w	r3, r2, r3
 80012b8:	693a      	ldr	r2, [r7, #16]
 80012ba:	4313      	orrs	r3, r2
 80012bc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	693a      	ldr	r2, [r7, #16]
 80012c2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	685b      	ldr	r3, [r3, #4]
 80012c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80012ca:	2201      	movs	r2, #1
 80012cc:	697b      	ldr	r3, [r7, #20]
 80012ce:	fa02 f303 	lsl.w	r3, r2, r3
 80012d2:	43db      	mvns	r3, r3
 80012d4:	693a      	ldr	r2, [r7, #16]
 80012d6:	4013      	ands	r3, r2
 80012d8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	685b      	ldr	r3, [r3, #4]
 80012de:	091b      	lsrs	r3, r3, #4
 80012e0:	f003 0201 	and.w	r2, r3, #1
 80012e4:	697b      	ldr	r3, [r7, #20]
 80012e6:	fa02 f303 	lsl.w	r3, r2, r3
 80012ea:	693a      	ldr	r2, [r7, #16]
 80012ec:	4313      	orrs	r3, r2
 80012ee:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	693a      	ldr	r2, [r7, #16]
 80012f4:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80012f6:	683b      	ldr	r3, [r7, #0]
 80012f8:	685b      	ldr	r3, [r3, #4]
 80012fa:	f003 0303 	and.w	r3, r3, #3
 80012fe:	2b03      	cmp	r3, #3
 8001300:	d017      	beq.n	8001332 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	68db      	ldr	r3, [r3, #12]
 8001306:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001308:	697b      	ldr	r3, [r7, #20]
 800130a:	005b      	lsls	r3, r3, #1
 800130c:	2203      	movs	r2, #3
 800130e:	fa02 f303 	lsl.w	r3, r2, r3
 8001312:	43db      	mvns	r3, r3
 8001314:	693a      	ldr	r2, [r7, #16]
 8001316:	4013      	ands	r3, r2
 8001318:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	689a      	ldr	r2, [r3, #8]
 800131e:	697b      	ldr	r3, [r7, #20]
 8001320:	005b      	lsls	r3, r3, #1
 8001322:	fa02 f303 	lsl.w	r3, r2, r3
 8001326:	693a      	ldr	r2, [r7, #16]
 8001328:	4313      	orrs	r3, r2
 800132a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	693a      	ldr	r2, [r7, #16]
 8001330:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	685b      	ldr	r3, [r3, #4]
 8001336:	f003 0303 	and.w	r3, r3, #3
 800133a:	2b02      	cmp	r3, #2
 800133c:	d123      	bne.n	8001386 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800133e:	697b      	ldr	r3, [r7, #20]
 8001340:	08da      	lsrs	r2, r3, #3
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	3208      	adds	r2, #8
 8001346:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800134a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800134c:	697b      	ldr	r3, [r7, #20]
 800134e:	f003 0307 	and.w	r3, r3, #7
 8001352:	009b      	lsls	r3, r3, #2
 8001354:	220f      	movs	r2, #15
 8001356:	fa02 f303 	lsl.w	r3, r2, r3
 800135a:	43db      	mvns	r3, r3
 800135c:	693a      	ldr	r2, [r7, #16]
 800135e:	4013      	ands	r3, r2
 8001360:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001362:	683b      	ldr	r3, [r7, #0]
 8001364:	691a      	ldr	r2, [r3, #16]
 8001366:	697b      	ldr	r3, [r7, #20]
 8001368:	f003 0307 	and.w	r3, r3, #7
 800136c:	009b      	lsls	r3, r3, #2
 800136e:	fa02 f303 	lsl.w	r3, r2, r3
 8001372:	693a      	ldr	r2, [r7, #16]
 8001374:	4313      	orrs	r3, r2
 8001376:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001378:	697b      	ldr	r3, [r7, #20]
 800137a:	08da      	lsrs	r2, r3, #3
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	3208      	adds	r2, #8
 8001380:	6939      	ldr	r1, [r7, #16]
 8001382:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800138c:	697b      	ldr	r3, [r7, #20]
 800138e:	005b      	lsls	r3, r3, #1
 8001390:	2203      	movs	r2, #3
 8001392:	fa02 f303 	lsl.w	r3, r2, r3
 8001396:	43db      	mvns	r3, r3
 8001398:	693a      	ldr	r2, [r7, #16]
 800139a:	4013      	ands	r3, r2
 800139c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	685b      	ldr	r3, [r3, #4]
 80013a2:	f003 0203 	and.w	r2, r3, #3
 80013a6:	697b      	ldr	r3, [r7, #20]
 80013a8:	005b      	lsls	r3, r3, #1
 80013aa:	fa02 f303 	lsl.w	r3, r2, r3
 80013ae:	693a      	ldr	r2, [r7, #16]
 80013b0:	4313      	orrs	r3, r2
 80013b2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	693a      	ldr	r2, [r7, #16]
 80013b8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80013ba:	683b      	ldr	r3, [r7, #0]
 80013bc:	685b      	ldr	r3, [r3, #4]
 80013be:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	f000 80ac 	beq.w	8001520 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013c8:	4b5e      	ldr	r3, [pc, #376]	; (8001544 <HAL_GPIO_Init+0x2f0>)
 80013ca:	699b      	ldr	r3, [r3, #24]
 80013cc:	4a5d      	ldr	r2, [pc, #372]	; (8001544 <HAL_GPIO_Init+0x2f0>)
 80013ce:	f043 0301 	orr.w	r3, r3, #1
 80013d2:	6193      	str	r3, [r2, #24]
 80013d4:	4b5b      	ldr	r3, [pc, #364]	; (8001544 <HAL_GPIO_Init+0x2f0>)
 80013d6:	699b      	ldr	r3, [r3, #24]
 80013d8:	f003 0301 	and.w	r3, r3, #1
 80013dc:	60bb      	str	r3, [r7, #8]
 80013de:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80013e0:	4a59      	ldr	r2, [pc, #356]	; (8001548 <HAL_GPIO_Init+0x2f4>)
 80013e2:	697b      	ldr	r3, [r7, #20]
 80013e4:	089b      	lsrs	r3, r3, #2
 80013e6:	3302      	adds	r3, #2
 80013e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013ec:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80013ee:	697b      	ldr	r3, [r7, #20]
 80013f0:	f003 0303 	and.w	r3, r3, #3
 80013f4:	009b      	lsls	r3, r3, #2
 80013f6:	220f      	movs	r2, #15
 80013f8:	fa02 f303 	lsl.w	r3, r2, r3
 80013fc:	43db      	mvns	r3, r3
 80013fe:	693a      	ldr	r2, [r7, #16]
 8001400:	4013      	ands	r3, r2
 8001402:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800140a:	d025      	beq.n	8001458 <HAL_GPIO_Init+0x204>
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	4a4f      	ldr	r2, [pc, #316]	; (800154c <HAL_GPIO_Init+0x2f8>)
 8001410:	4293      	cmp	r3, r2
 8001412:	d01f      	beq.n	8001454 <HAL_GPIO_Init+0x200>
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	4a4e      	ldr	r2, [pc, #312]	; (8001550 <HAL_GPIO_Init+0x2fc>)
 8001418:	4293      	cmp	r3, r2
 800141a:	d019      	beq.n	8001450 <HAL_GPIO_Init+0x1fc>
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	4a4d      	ldr	r2, [pc, #308]	; (8001554 <HAL_GPIO_Init+0x300>)
 8001420:	4293      	cmp	r3, r2
 8001422:	d013      	beq.n	800144c <HAL_GPIO_Init+0x1f8>
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	4a4c      	ldr	r2, [pc, #304]	; (8001558 <HAL_GPIO_Init+0x304>)
 8001428:	4293      	cmp	r3, r2
 800142a:	d00d      	beq.n	8001448 <HAL_GPIO_Init+0x1f4>
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	4a4b      	ldr	r2, [pc, #300]	; (800155c <HAL_GPIO_Init+0x308>)
 8001430:	4293      	cmp	r3, r2
 8001432:	d007      	beq.n	8001444 <HAL_GPIO_Init+0x1f0>
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	4a4a      	ldr	r2, [pc, #296]	; (8001560 <HAL_GPIO_Init+0x30c>)
 8001438:	4293      	cmp	r3, r2
 800143a:	d101      	bne.n	8001440 <HAL_GPIO_Init+0x1ec>
 800143c:	2306      	movs	r3, #6
 800143e:	e00c      	b.n	800145a <HAL_GPIO_Init+0x206>
 8001440:	2307      	movs	r3, #7
 8001442:	e00a      	b.n	800145a <HAL_GPIO_Init+0x206>
 8001444:	2305      	movs	r3, #5
 8001446:	e008      	b.n	800145a <HAL_GPIO_Init+0x206>
 8001448:	2304      	movs	r3, #4
 800144a:	e006      	b.n	800145a <HAL_GPIO_Init+0x206>
 800144c:	2303      	movs	r3, #3
 800144e:	e004      	b.n	800145a <HAL_GPIO_Init+0x206>
 8001450:	2302      	movs	r3, #2
 8001452:	e002      	b.n	800145a <HAL_GPIO_Init+0x206>
 8001454:	2301      	movs	r3, #1
 8001456:	e000      	b.n	800145a <HAL_GPIO_Init+0x206>
 8001458:	2300      	movs	r3, #0
 800145a:	697a      	ldr	r2, [r7, #20]
 800145c:	f002 0203 	and.w	r2, r2, #3
 8001460:	0092      	lsls	r2, r2, #2
 8001462:	4093      	lsls	r3, r2
 8001464:	693a      	ldr	r2, [r7, #16]
 8001466:	4313      	orrs	r3, r2
 8001468:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800146a:	4937      	ldr	r1, [pc, #220]	; (8001548 <HAL_GPIO_Init+0x2f4>)
 800146c:	697b      	ldr	r3, [r7, #20]
 800146e:	089b      	lsrs	r3, r3, #2
 8001470:	3302      	adds	r3, #2
 8001472:	693a      	ldr	r2, [r7, #16]
 8001474:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001478:	4b3a      	ldr	r3, [pc, #232]	; (8001564 <HAL_GPIO_Init+0x310>)
 800147a:	689b      	ldr	r3, [r3, #8]
 800147c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	43db      	mvns	r3, r3
 8001482:	693a      	ldr	r2, [r7, #16]
 8001484:	4013      	ands	r3, r2
 8001486:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	685b      	ldr	r3, [r3, #4]
 800148c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001490:	2b00      	cmp	r3, #0
 8001492:	d003      	beq.n	800149c <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8001494:	693a      	ldr	r2, [r7, #16]
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	4313      	orrs	r3, r2
 800149a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800149c:	4a31      	ldr	r2, [pc, #196]	; (8001564 <HAL_GPIO_Init+0x310>)
 800149e:	693b      	ldr	r3, [r7, #16]
 80014a0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80014a2:	4b30      	ldr	r3, [pc, #192]	; (8001564 <HAL_GPIO_Init+0x310>)
 80014a4:	68db      	ldr	r3, [r3, #12]
 80014a6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	43db      	mvns	r3, r3
 80014ac:	693a      	ldr	r2, [r7, #16]
 80014ae:	4013      	ands	r3, r2
 80014b0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80014b2:	683b      	ldr	r3, [r7, #0]
 80014b4:	685b      	ldr	r3, [r3, #4]
 80014b6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d003      	beq.n	80014c6 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 80014be:	693a      	ldr	r2, [r7, #16]
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	4313      	orrs	r3, r2
 80014c4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80014c6:	4a27      	ldr	r2, [pc, #156]	; (8001564 <HAL_GPIO_Init+0x310>)
 80014c8:	693b      	ldr	r3, [r7, #16]
 80014ca:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80014cc:	4b25      	ldr	r3, [pc, #148]	; (8001564 <HAL_GPIO_Init+0x310>)
 80014ce:	685b      	ldr	r3, [r3, #4]
 80014d0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	43db      	mvns	r3, r3
 80014d6:	693a      	ldr	r2, [r7, #16]
 80014d8:	4013      	ands	r3, r2
 80014da:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80014dc:	683b      	ldr	r3, [r7, #0]
 80014de:	685b      	ldr	r3, [r3, #4]
 80014e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d003      	beq.n	80014f0 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 80014e8:	693a      	ldr	r2, [r7, #16]
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	4313      	orrs	r3, r2
 80014ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80014f0:	4a1c      	ldr	r2, [pc, #112]	; (8001564 <HAL_GPIO_Init+0x310>)
 80014f2:	693b      	ldr	r3, [r7, #16]
 80014f4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80014f6:	4b1b      	ldr	r3, [pc, #108]	; (8001564 <HAL_GPIO_Init+0x310>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	43db      	mvns	r3, r3
 8001500:	693a      	ldr	r2, [r7, #16]
 8001502:	4013      	ands	r3, r2
 8001504:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001506:	683b      	ldr	r3, [r7, #0]
 8001508:	685b      	ldr	r3, [r3, #4]
 800150a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800150e:	2b00      	cmp	r3, #0
 8001510:	d003      	beq.n	800151a <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8001512:	693a      	ldr	r2, [r7, #16]
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	4313      	orrs	r3, r2
 8001518:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800151a:	4a12      	ldr	r2, [pc, #72]	; (8001564 <HAL_GPIO_Init+0x310>)
 800151c:	693b      	ldr	r3, [r7, #16]
 800151e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001520:	697b      	ldr	r3, [r7, #20]
 8001522:	3301      	adds	r3, #1
 8001524:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	681a      	ldr	r2, [r3, #0]
 800152a:	697b      	ldr	r3, [r7, #20]
 800152c:	fa22 f303 	lsr.w	r3, r2, r3
 8001530:	2b00      	cmp	r3, #0
 8001532:	f47f ae97 	bne.w	8001264 <HAL_GPIO_Init+0x10>
  }
}
 8001536:	bf00      	nop
 8001538:	bf00      	nop
 800153a:	371c      	adds	r7, #28
 800153c:	46bd      	mov	sp, r7
 800153e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001542:	4770      	bx	lr
 8001544:	40021000 	.word	0x40021000
 8001548:	40010000 	.word	0x40010000
 800154c:	48000400 	.word	0x48000400
 8001550:	48000800 	.word	0x48000800
 8001554:	48000c00 	.word	0x48000c00
 8001558:	48001000 	.word	0x48001000
 800155c:	48001400 	.word	0x48001400
 8001560:	48001800 	.word	0x48001800
 8001564:	40010400 	.word	0x40010400

08001568 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001568:	b480      	push	{r7}
 800156a:	b085      	sub	sp, #20
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
 8001570:	460b      	mov	r3, r1
 8001572:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	691a      	ldr	r2, [r3, #16]
 8001578:	887b      	ldrh	r3, [r7, #2]
 800157a:	4013      	ands	r3, r2
 800157c:	2b00      	cmp	r3, #0
 800157e:	d002      	beq.n	8001586 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001580:	2301      	movs	r3, #1
 8001582:	73fb      	strb	r3, [r7, #15]
 8001584:	e001      	b.n	800158a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001586:	2300      	movs	r3, #0
 8001588:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800158a:	7bfb      	ldrb	r3, [r7, #15]
}
 800158c:	4618      	mov	r0, r3
 800158e:	3714      	adds	r7, #20
 8001590:	46bd      	mov	sp, r7
 8001592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001596:	4770      	bx	lr

08001598 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b082      	sub	sp, #8
 800159c:	af00      	add	r7, sp, #0
 800159e:	4603      	mov	r3, r0
 80015a0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80015a2:	4b08      	ldr	r3, [pc, #32]	; (80015c4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80015a4:	695a      	ldr	r2, [r3, #20]
 80015a6:	88fb      	ldrh	r3, [r7, #6]
 80015a8:	4013      	ands	r3, r2
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d006      	beq.n	80015bc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80015ae:	4a05      	ldr	r2, [pc, #20]	; (80015c4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80015b0:	88fb      	ldrh	r3, [r7, #6]
 80015b2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80015b4:	88fb      	ldrh	r3, [r7, #6]
 80015b6:	4618      	mov	r0, r3
 80015b8:	f000 f806 	bl	80015c8 <HAL_GPIO_EXTI_Callback>
  }
}
 80015bc:	bf00      	nop
 80015be:	3708      	adds	r7, #8
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bd80      	pop	{r7, pc}
 80015c4:	40010400 	.word	0x40010400

080015c8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80015c8:	b480      	push	{r7}
 80015ca:	b083      	sub	sp, #12
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	4603      	mov	r3, r0
 80015d0:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80015d2:	bf00      	nop
 80015d4:	370c      	adds	r7, #12
 80015d6:	46bd      	mov	sp, r7
 80015d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015dc:	4770      	bx	lr
	...

080015e0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 80015e6:	af00      	add	r7, sp, #0
 80015e8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80015ec:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80015f0:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80015f2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80015f6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d102      	bne.n	8001606 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001600:	2301      	movs	r3, #1
 8001602:	f001 b83a 	b.w	800267a <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001606:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800160a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f003 0301 	and.w	r3, r3, #1
 8001616:	2b00      	cmp	r3, #0
 8001618:	f000 816f 	beq.w	80018fa <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800161c:	4bb5      	ldr	r3, [pc, #724]	; (80018f4 <HAL_RCC_OscConfig+0x314>)
 800161e:	685b      	ldr	r3, [r3, #4]
 8001620:	f003 030c 	and.w	r3, r3, #12
 8001624:	2b04      	cmp	r3, #4
 8001626:	d00c      	beq.n	8001642 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001628:	4bb2      	ldr	r3, [pc, #712]	; (80018f4 <HAL_RCC_OscConfig+0x314>)
 800162a:	685b      	ldr	r3, [r3, #4]
 800162c:	f003 030c 	and.w	r3, r3, #12
 8001630:	2b08      	cmp	r3, #8
 8001632:	d15c      	bne.n	80016ee <HAL_RCC_OscConfig+0x10e>
 8001634:	4baf      	ldr	r3, [pc, #700]	; (80018f4 <HAL_RCC_OscConfig+0x314>)
 8001636:	685b      	ldr	r3, [r3, #4]
 8001638:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 800163c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001640:	d155      	bne.n	80016ee <HAL_RCC_OscConfig+0x10e>
 8001642:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001646:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800164a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800164e:	fa93 f3a3 	rbit	r3, r3
 8001652:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001656:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800165a:	fab3 f383 	clz	r3, r3
 800165e:	b2db      	uxtb	r3, r3
 8001660:	095b      	lsrs	r3, r3, #5
 8001662:	b2db      	uxtb	r3, r3
 8001664:	f043 0301 	orr.w	r3, r3, #1
 8001668:	b2db      	uxtb	r3, r3
 800166a:	2b01      	cmp	r3, #1
 800166c:	d102      	bne.n	8001674 <HAL_RCC_OscConfig+0x94>
 800166e:	4ba1      	ldr	r3, [pc, #644]	; (80018f4 <HAL_RCC_OscConfig+0x314>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	e015      	b.n	80016a0 <HAL_RCC_OscConfig+0xc0>
 8001674:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001678:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800167c:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8001680:	fa93 f3a3 	rbit	r3, r3
 8001684:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8001688:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800168c:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001690:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8001694:	fa93 f3a3 	rbit	r3, r3
 8001698:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 800169c:	4b95      	ldr	r3, [pc, #596]	; (80018f4 <HAL_RCC_OscConfig+0x314>)
 800169e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016a0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80016a4:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 80016a8:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 80016ac:	fa92 f2a2 	rbit	r2, r2
 80016b0:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 80016b4:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80016b8:	fab2 f282 	clz	r2, r2
 80016bc:	b2d2      	uxtb	r2, r2
 80016be:	f042 0220 	orr.w	r2, r2, #32
 80016c2:	b2d2      	uxtb	r2, r2
 80016c4:	f002 021f 	and.w	r2, r2, #31
 80016c8:	2101      	movs	r1, #1
 80016ca:	fa01 f202 	lsl.w	r2, r1, r2
 80016ce:	4013      	ands	r3, r2
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	f000 8111 	beq.w	80018f8 <HAL_RCC_OscConfig+0x318>
 80016d6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80016da:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	685b      	ldr	r3, [r3, #4]
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	f040 8108 	bne.w	80018f8 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 80016e8:	2301      	movs	r3, #1
 80016ea:	f000 bfc6 	b.w	800267a <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016ee:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80016f2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	685b      	ldr	r3, [r3, #4]
 80016fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016fe:	d106      	bne.n	800170e <HAL_RCC_OscConfig+0x12e>
 8001700:	4b7c      	ldr	r3, [pc, #496]	; (80018f4 <HAL_RCC_OscConfig+0x314>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	4a7b      	ldr	r2, [pc, #492]	; (80018f4 <HAL_RCC_OscConfig+0x314>)
 8001706:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800170a:	6013      	str	r3, [r2, #0]
 800170c:	e036      	b.n	800177c <HAL_RCC_OscConfig+0x19c>
 800170e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001712:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	685b      	ldr	r3, [r3, #4]
 800171a:	2b00      	cmp	r3, #0
 800171c:	d10c      	bne.n	8001738 <HAL_RCC_OscConfig+0x158>
 800171e:	4b75      	ldr	r3, [pc, #468]	; (80018f4 <HAL_RCC_OscConfig+0x314>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	4a74      	ldr	r2, [pc, #464]	; (80018f4 <HAL_RCC_OscConfig+0x314>)
 8001724:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001728:	6013      	str	r3, [r2, #0]
 800172a:	4b72      	ldr	r3, [pc, #456]	; (80018f4 <HAL_RCC_OscConfig+0x314>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	4a71      	ldr	r2, [pc, #452]	; (80018f4 <HAL_RCC_OscConfig+0x314>)
 8001730:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001734:	6013      	str	r3, [r2, #0]
 8001736:	e021      	b.n	800177c <HAL_RCC_OscConfig+0x19c>
 8001738:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800173c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	685b      	ldr	r3, [r3, #4]
 8001744:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001748:	d10c      	bne.n	8001764 <HAL_RCC_OscConfig+0x184>
 800174a:	4b6a      	ldr	r3, [pc, #424]	; (80018f4 <HAL_RCC_OscConfig+0x314>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	4a69      	ldr	r2, [pc, #420]	; (80018f4 <HAL_RCC_OscConfig+0x314>)
 8001750:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001754:	6013      	str	r3, [r2, #0]
 8001756:	4b67      	ldr	r3, [pc, #412]	; (80018f4 <HAL_RCC_OscConfig+0x314>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	4a66      	ldr	r2, [pc, #408]	; (80018f4 <HAL_RCC_OscConfig+0x314>)
 800175c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001760:	6013      	str	r3, [r2, #0]
 8001762:	e00b      	b.n	800177c <HAL_RCC_OscConfig+0x19c>
 8001764:	4b63      	ldr	r3, [pc, #396]	; (80018f4 <HAL_RCC_OscConfig+0x314>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	4a62      	ldr	r2, [pc, #392]	; (80018f4 <HAL_RCC_OscConfig+0x314>)
 800176a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800176e:	6013      	str	r3, [r2, #0]
 8001770:	4b60      	ldr	r3, [pc, #384]	; (80018f4 <HAL_RCC_OscConfig+0x314>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	4a5f      	ldr	r2, [pc, #380]	; (80018f4 <HAL_RCC_OscConfig+0x314>)
 8001776:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800177a:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800177c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001780:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	685b      	ldr	r3, [r3, #4]
 8001788:	2b00      	cmp	r3, #0
 800178a:	d059      	beq.n	8001840 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800178c:	f7ff fbf8 	bl	8000f80 <HAL_GetTick>
 8001790:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001794:	e00a      	b.n	80017ac <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001796:	f7ff fbf3 	bl	8000f80 <HAL_GetTick>
 800179a:	4602      	mov	r2, r0
 800179c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80017a0:	1ad3      	subs	r3, r2, r3
 80017a2:	2b64      	cmp	r3, #100	; 0x64
 80017a4:	d902      	bls.n	80017ac <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80017a6:	2303      	movs	r3, #3
 80017a8:	f000 bf67 	b.w	800267a <HAL_RCC_OscConfig+0x109a>
 80017ac:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80017b0:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017b4:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 80017b8:	fa93 f3a3 	rbit	r3, r3
 80017bc:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 80017c0:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017c4:	fab3 f383 	clz	r3, r3
 80017c8:	b2db      	uxtb	r3, r3
 80017ca:	095b      	lsrs	r3, r3, #5
 80017cc:	b2db      	uxtb	r3, r3
 80017ce:	f043 0301 	orr.w	r3, r3, #1
 80017d2:	b2db      	uxtb	r3, r3
 80017d4:	2b01      	cmp	r3, #1
 80017d6:	d102      	bne.n	80017de <HAL_RCC_OscConfig+0x1fe>
 80017d8:	4b46      	ldr	r3, [pc, #280]	; (80018f4 <HAL_RCC_OscConfig+0x314>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	e015      	b.n	800180a <HAL_RCC_OscConfig+0x22a>
 80017de:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80017e2:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017e6:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 80017ea:	fa93 f3a3 	rbit	r3, r3
 80017ee:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 80017f2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80017f6:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80017fa:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 80017fe:	fa93 f3a3 	rbit	r3, r3
 8001802:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001806:	4b3b      	ldr	r3, [pc, #236]	; (80018f4 <HAL_RCC_OscConfig+0x314>)
 8001808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800180a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800180e:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8001812:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8001816:	fa92 f2a2 	rbit	r2, r2
 800181a:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 800181e:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001822:	fab2 f282 	clz	r2, r2
 8001826:	b2d2      	uxtb	r2, r2
 8001828:	f042 0220 	orr.w	r2, r2, #32
 800182c:	b2d2      	uxtb	r2, r2
 800182e:	f002 021f 	and.w	r2, r2, #31
 8001832:	2101      	movs	r1, #1
 8001834:	fa01 f202 	lsl.w	r2, r1, r2
 8001838:	4013      	ands	r3, r2
 800183a:	2b00      	cmp	r3, #0
 800183c:	d0ab      	beq.n	8001796 <HAL_RCC_OscConfig+0x1b6>
 800183e:	e05c      	b.n	80018fa <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001840:	f7ff fb9e 	bl	8000f80 <HAL_GetTick>
 8001844:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001848:	e00a      	b.n	8001860 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800184a:	f7ff fb99 	bl	8000f80 <HAL_GetTick>
 800184e:	4602      	mov	r2, r0
 8001850:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001854:	1ad3      	subs	r3, r2, r3
 8001856:	2b64      	cmp	r3, #100	; 0x64
 8001858:	d902      	bls.n	8001860 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 800185a:	2303      	movs	r3, #3
 800185c:	f000 bf0d 	b.w	800267a <HAL_RCC_OscConfig+0x109a>
 8001860:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001864:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001868:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 800186c:	fa93 f3a3 	rbit	r3, r3
 8001870:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8001874:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001878:	fab3 f383 	clz	r3, r3
 800187c:	b2db      	uxtb	r3, r3
 800187e:	095b      	lsrs	r3, r3, #5
 8001880:	b2db      	uxtb	r3, r3
 8001882:	f043 0301 	orr.w	r3, r3, #1
 8001886:	b2db      	uxtb	r3, r3
 8001888:	2b01      	cmp	r3, #1
 800188a:	d102      	bne.n	8001892 <HAL_RCC_OscConfig+0x2b2>
 800188c:	4b19      	ldr	r3, [pc, #100]	; (80018f4 <HAL_RCC_OscConfig+0x314>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	e015      	b.n	80018be <HAL_RCC_OscConfig+0x2de>
 8001892:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001896:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800189a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800189e:	fa93 f3a3 	rbit	r3, r3
 80018a2:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 80018a6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80018aa:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80018ae:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80018b2:	fa93 f3a3 	rbit	r3, r3
 80018b6:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80018ba:	4b0e      	ldr	r3, [pc, #56]	; (80018f4 <HAL_RCC_OscConfig+0x314>)
 80018bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018be:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80018c2:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 80018c6:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 80018ca:	fa92 f2a2 	rbit	r2, r2
 80018ce:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 80018d2:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80018d6:	fab2 f282 	clz	r2, r2
 80018da:	b2d2      	uxtb	r2, r2
 80018dc:	f042 0220 	orr.w	r2, r2, #32
 80018e0:	b2d2      	uxtb	r2, r2
 80018e2:	f002 021f 	and.w	r2, r2, #31
 80018e6:	2101      	movs	r1, #1
 80018e8:	fa01 f202 	lsl.w	r2, r1, r2
 80018ec:	4013      	ands	r3, r2
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d1ab      	bne.n	800184a <HAL_RCC_OscConfig+0x26a>
 80018f2:	e002      	b.n	80018fa <HAL_RCC_OscConfig+0x31a>
 80018f4:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018fa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80018fe:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f003 0302 	and.w	r3, r3, #2
 800190a:	2b00      	cmp	r3, #0
 800190c:	f000 817f 	beq.w	8001c0e <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001910:	4ba7      	ldr	r3, [pc, #668]	; (8001bb0 <HAL_RCC_OscConfig+0x5d0>)
 8001912:	685b      	ldr	r3, [r3, #4]
 8001914:	f003 030c 	and.w	r3, r3, #12
 8001918:	2b00      	cmp	r3, #0
 800191a:	d00c      	beq.n	8001936 <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800191c:	4ba4      	ldr	r3, [pc, #656]	; (8001bb0 <HAL_RCC_OscConfig+0x5d0>)
 800191e:	685b      	ldr	r3, [r3, #4]
 8001920:	f003 030c 	and.w	r3, r3, #12
 8001924:	2b08      	cmp	r3, #8
 8001926:	d173      	bne.n	8001a10 <HAL_RCC_OscConfig+0x430>
 8001928:	4ba1      	ldr	r3, [pc, #644]	; (8001bb0 <HAL_RCC_OscConfig+0x5d0>)
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8001930:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001934:	d16c      	bne.n	8001a10 <HAL_RCC_OscConfig+0x430>
 8001936:	2302      	movs	r3, #2
 8001938:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800193c:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8001940:	fa93 f3a3 	rbit	r3, r3
 8001944:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8001948:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800194c:	fab3 f383 	clz	r3, r3
 8001950:	b2db      	uxtb	r3, r3
 8001952:	095b      	lsrs	r3, r3, #5
 8001954:	b2db      	uxtb	r3, r3
 8001956:	f043 0301 	orr.w	r3, r3, #1
 800195a:	b2db      	uxtb	r3, r3
 800195c:	2b01      	cmp	r3, #1
 800195e:	d102      	bne.n	8001966 <HAL_RCC_OscConfig+0x386>
 8001960:	4b93      	ldr	r3, [pc, #588]	; (8001bb0 <HAL_RCC_OscConfig+0x5d0>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	e013      	b.n	800198e <HAL_RCC_OscConfig+0x3ae>
 8001966:	2302      	movs	r3, #2
 8001968:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800196c:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8001970:	fa93 f3a3 	rbit	r3, r3
 8001974:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8001978:	2302      	movs	r3, #2
 800197a:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800197e:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8001982:	fa93 f3a3 	rbit	r3, r3
 8001986:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 800198a:	4b89      	ldr	r3, [pc, #548]	; (8001bb0 <HAL_RCC_OscConfig+0x5d0>)
 800198c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800198e:	2202      	movs	r2, #2
 8001990:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8001994:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8001998:	fa92 f2a2 	rbit	r2, r2
 800199c:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 80019a0:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80019a4:	fab2 f282 	clz	r2, r2
 80019a8:	b2d2      	uxtb	r2, r2
 80019aa:	f042 0220 	orr.w	r2, r2, #32
 80019ae:	b2d2      	uxtb	r2, r2
 80019b0:	f002 021f 	and.w	r2, r2, #31
 80019b4:	2101      	movs	r1, #1
 80019b6:	fa01 f202 	lsl.w	r2, r1, r2
 80019ba:	4013      	ands	r3, r2
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d00a      	beq.n	80019d6 <HAL_RCC_OscConfig+0x3f6>
 80019c0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80019c4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	68db      	ldr	r3, [r3, #12]
 80019cc:	2b01      	cmp	r3, #1
 80019ce:	d002      	beq.n	80019d6 <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 80019d0:	2301      	movs	r3, #1
 80019d2:	f000 be52 	b.w	800267a <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019d6:	4b76      	ldr	r3, [pc, #472]	; (8001bb0 <HAL_RCC_OscConfig+0x5d0>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80019de:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80019e2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	691b      	ldr	r3, [r3, #16]
 80019ea:	21f8      	movs	r1, #248	; 0xf8
 80019ec:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019f0:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 80019f4:	fa91 f1a1 	rbit	r1, r1
 80019f8:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 80019fc:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001a00:	fab1 f181 	clz	r1, r1
 8001a04:	b2c9      	uxtb	r1, r1
 8001a06:	408b      	lsls	r3, r1
 8001a08:	4969      	ldr	r1, [pc, #420]	; (8001bb0 <HAL_RCC_OscConfig+0x5d0>)
 8001a0a:	4313      	orrs	r3, r2
 8001a0c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a0e:	e0fe      	b.n	8001c0e <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a10:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a14:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	68db      	ldr	r3, [r3, #12]
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	f000 8088 	beq.w	8001b32 <HAL_RCC_OscConfig+0x552>
 8001a22:	2301      	movs	r3, #1
 8001a24:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a28:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8001a2c:	fa93 f3a3 	rbit	r3, r3
 8001a30:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8001a34:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a38:	fab3 f383 	clz	r3, r3
 8001a3c:	b2db      	uxtb	r3, r3
 8001a3e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001a42:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001a46:	009b      	lsls	r3, r3, #2
 8001a48:	461a      	mov	r2, r3
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a4e:	f7ff fa97 	bl	8000f80 <HAL_GetTick>
 8001a52:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a56:	e00a      	b.n	8001a6e <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a58:	f7ff fa92 	bl	8000f80 <HAL_GetTick>
 8001a5c:	4602      	mov	r2, r0
 8001a5e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001a62:	1ad3      	subs	r3, r2, r3
 8001a64:	2b02      	cmp	r3, #2
 8001a66:	d902      	bls.n	8001a6e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8001a68:	2303      	movs	r3, #3
 8001a6a:	f000 be06 	b.w	800267a <HAL_RCC_OscConfig+0x109a>
 8001a6e:	2302      	movs	r3, #2
 8001a70:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a74:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8001a78:	fa93 f3a3 	rbit	r3, r3
 8001a7c:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8001a80:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a84:	fab3 f383 	clz	r3, r3
 8001a88:	b2db      	uxtb	r3, r3
 8001a8a:	095b      	lsrs	r3, r3, #5
 8001a8c:	b2db      	uxtb	r3, r3
 8001a8e:	f043 0301 	orr.w	r3, r3, #1
 8001a92:	b2db      	uxtb	r3, r3
 8001a94:	2b01      	cmp	r3, #1
 8001a96:	d102      	bne.n	8001a9e <HAL_RCC_OscConfig+0x4be>
 8001a98:	4b45      	ldr	r3, [pc, #276]	; (8001bb0 <HAL_RCC_OscConfig+0x5d0>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	e013      	b.n	8001ac6 <HAL_RCC_OscConfig+0x4e6>
 8001a9e:	2302      	movs	r3, #2
 8001aa0:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aa4:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8001aa8:	fa93 f3a3 	rbit	r3, r3
 8001aac:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8001ab0:	2302      	movs	r3, #2
 8001ab2:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001ab6:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8001aba:	fa93 f3a3 	rbit	r3, r3
 8001abe:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001ac2:	4b3b      	ldr	r3, [pc, #236]	; (8001bb0 <HAL_RCC_OscConfig+0x5d0>)
 8001ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ac6:	2202      	movs	r2, #2
 8001ac8:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8001acc:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8001ad0:	fa92 f2a2 	rbit	r2, r2
 8001ad4:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8001ad8:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001adc:	fab2 f282 	clz	r2, r2
 8001ae0:	b2d2      	uxtb	r2, r2
 8001ae2:	f042 0220 	orr.w	r2, r2, #32
 8001ae6:	b2d2      	uxtb	r2, r2
 8001ae8:	f002 021f 	and.w	r2, r2, #31
 8001aec:	2101      	movs	r1, #1
 8001aee:	fa01 f202 	lsl.w	r2, r1, r2
 8001af2:	4013      	ands	r3, r2
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d0af      	beq.n	8001a58 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001af8:	4b2d      	ldr	r3, [pc, #180]	; (8001bb0 <HAL_RCC_OscConfig+0x5d0>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b00:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b04:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	691b      	ldr	r3, [r3, #16]
 8001b0c:	21f8      	movs	r1, #248	; 0xf8
 8001b0e:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b12:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8001b16:	fa91 f1a1 	rbit	r1, r1
 8001b1a:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8001b1e:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001b22:	fab1 f181 	clz	r1, r1
 8001b26:	b2c9      	uxtb	r1, r1
 8001b28:	408b      	lsls	r3, r1
 8001b2a:	4921      	ldr	r1, [pc, #132]	; (8001bb0 <HAL_RCC_OscConfig+0x5d0>)
 8001b2c:	4313      	orrs	r3, r2
 8001b2e:	600b      	str	r3, [r1, #0]
 8001b30:	e06d      	b.n	8001c0e <HAL_RCC_OscConfig+0x62e>
 8001b32:	2301      	movs	r3, #1
 8001b34:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b38:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001b3c:	fa93 f3a3 	rbit	r3, r3
 8001b40:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8001b44:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b48:	fab3 f383 	clz	r3, r3
 8001b4c:	b2db      	uxtb	r3, r3
 8001b4e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001b52:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001b56:	009b      	lsls	r3, r3, #2
 8001b58:	461a      	mov	r2, r3
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b5e:	f7ff fa0f 	bl	8000f80 <HAL_GetTick>
 8001b62:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b66:	e00a      	b.n	8001b7e <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b68:	f7ff fa0a 	bl	8000f80 <HAL_GetTick>
 8001b6c:	4602      	mov	r2, r0
 8001b6e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001b72:	1ad3      	subs	r3, r2, r3
 8001b74:	2b02      	cmp	r3, #2
 8001b76:	d902      	bls.n	8001b7e <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 8001b78:	2303      	movs	r3, #3
 8001b7a:	f000 bd7e 	b.w	800267a <HAL_RCC_OscConfig+0x109a>
 8001b7e:	2302      	movs	r3, #2
 8001b80:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b84:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8001b88:	fa93 f3a3 	rbit	r3, r3
 8001b8c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8001b90:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b94:	fab3 f383 	clz	r3, r3
 8001b98:	b2db      	uxtb	r3, r3
 8001b9a:	095b      	lsrs	r3, r3, #5
 8001b9c:	b2db      	uxtb	r3, r3
 8001b9e:	f043 0301 	orr.w	r3, r3, #1
 8001ba2:	b2db      	uxtb	r3, r3
 8001ba4:	2b01      	cmp	r3, #1
 8001ba6:	d105      	bne.n	8001bb4 <HAL_RCC_OscConfig+0x5d4>
 8001ba8:	4b01      	ldr	r3, [pc, #4]	; (8001bb0 <HAL_RCC_OscConfig+0x5d0>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	e016      	b.n	8001bdc <HAL_RCC_OscConfig+0x5fc>
 8001bae:	bf00      	nop
 8001bb0:	40021000 	.word	0x40021000
 8001bb4:	2302      	movs	r3, #2
 8001bb6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001bbe:	fa93 f3a3 	rbit	r3, r3
 8001bc2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8001bc6:	2302      	movs	r3, #2
 8001bc8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001bcc:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001bd0:	fa93 f3a3 	rbit	r3, r3
 8001bd4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001bd8:	4bbf      	ldr	r3, [pc, #764]	; (8001ed8 <HAL_RCC_OscConfig+0x8f8>)
 8001bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bdc:	2202      	movs	r2, #2
 8001bde:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8001be2:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8001be6:	fa92 f2a2 	rbit	r2, r2
 8001bea:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 8001bee:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001bf2:	fab2 f282 	clz	r2, r2
 8001bf6:	b2d2      	uxtb	r2, r2
 8001bf8:	f042 0220 	orr.w	r2, r2, #32
 8001bfc:	b2d2      	uxtb	r2, r2
 8001bfe:	f002 021f 	and.w	r2, r2, #31
 8001c02:	2101      	movs	r1, #1
 8001c04:	fa01 f202 	lsl.w	r2, r1, r2
 8001c08:	4013      	ands	r3, r2
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d1ac      	bne.n	8001b68 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c0e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c12:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f003 0308 	and.w	r3, r3, #8
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	f000 8113 	beq.w	8001e4a <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c24:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c28:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	695b      	ldr	r3, [r3, #20]
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d07c      	beq.n	8001d2e <HAL_RCC_OscConfig+0x74e>
 8001c34:	2301      	movs	r3, #1
 8001c36:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001c3e:	fa93 f3a3 	rbit	r3, r3
 8001c42:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 8001c46:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c4a:	fab3 f383 	clz	r3, r3
 8001c4e:	b2db      	uxtb	r3, r3
 8001c50:	461a      	mov	r2, r3
 8001c52:	4ba2      	ldr	r3, [pc, #648]	; (8001edc <HAL_RCC_OscConfig+0x8fc>)
 8001c54:	4413      	add	r3, r2
 8001c56:	009b      	lsls	r3, r3, #2
 8001c58:	461a      	mov	r2, r3
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c5e:	f7ff f98f 	bl	8000f80 <HAL_GetTick>
 8001c62:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c66:	e00a      	b.n	8001c7e <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c68:	f7ff f98a 	bl	8000f80 <HAL_GetTick>
 8001c6c:	4602      	mov	r2, r0
 8001c6e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001c72:	1ad3      	subs	r3, r2, r3
 8001c74:	2b02      	cmp	r3, #2
 8001c76:	d902      	bls.n	8001c7e <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8001c78:	2303      	movs	r3, #3
 8001c7a:	f000 bcfe 	b.w	800267a <HAL_RCC_OscConfig+0x109a>
 8001c7e:	2302      	movs	r3, #2
 8001c80:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c84:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001c88:	fa93 f2a3 	rbit	r2, r3
 8001c8c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c90:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001c94:	601a      	str	r2, [r3, #0]
 8001c96:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c9a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001c9e:	2202      	movs	r2, #2
 8001ca0:	601a      	str	r2, [r3, #0]
 8001ca2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ca6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	fa93 f2a3 	rbit	r2, r3
 8001cb0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001cb4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001cb8:	601a      	str	r2, [r3, #0]
 8001cba:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001cbe:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001cc2:	2202      	movs	r2, #2
 8001cc4:	601a      	str	r2, [r3, #0]
 8001cc6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001cca:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	fa93 f2a3 	rbit	r2, r3
 8001cd4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001cd8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001cdc:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cde:	4b7e      	ldr	r3, [pc, #504]	; (8001ed8 <HAL_RCC_OscConfig+0x8f8>)
 8001ce0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001ce2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ce6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001cea:	2102      	movs	r1, #2
 8001cec:	6019      	str	r1, [r3, #0]
 8001cee:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001cf2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	fa93 f1a3 	rbit	r1, r3
 8001cfc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d00:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001d04:	6019      	str	r1, [r3, #0]
  return result;
 8001d06:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d0a:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	fab3 f383 	clz	r3, r3
 8001d14:	b2db      	uxtb	r3, r3
 8001d16:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001d1a:	b2db      	uxtb	r3, r3
 8001d1c:	f003 031f 	and.w	r3, r3, #31
 8001d20:	2101      	movs	r1, #1
 8001d22:	fa01 f303 	lsl.w	r3, r1, r3
 8001d26:	4013      	ands	r3, r2
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d09d      	beq.n	8001c68 <HAL_RCC_OscConfig+0x688>
 8001d2c:	e08d      	b.n	8001e4a <HAL_RCC_OscConfig+0x86a>
 8001d2e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d32:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001d36:	2201      	movs	r2, #1
 8001d38:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d3a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d3e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	fa93 f2a3 	rbit	r2, r3
 8001d48:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d4c:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001d50:	601a      	str	r2, [r3, #0]
  return result;
 8001d52:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d56:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001d5a:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d5c:	fab3 f383 	clz	r3, r3
 8001d60:	b2db      	uxtb	r3, r3
 8001d62:	461a      	mov	r2, r3
 8001d64:	4b5d      	ldr	r3, [pc, #372]	; (8001edc <HAL_RCC_OscConfig+0x8fc>)
 8001d66:	4413      	add	r3, r2
 8001d68:	009b      	lsls	r3, r3, #2
 8001d6a:	461a      	mov	r2, r3
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d70:	f7ff f906 	bl	8000f80 <HAL_GetTick>
 8001d74:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d78:	e00a      	b.n	8001d90 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d7a:	f7ff f901 	bl	8000f80 <HAL_GetTick>
 8001d7e:	4602      	mov	r2, r0
 8001d80:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001d84:	1ad3      	subs	r3, r2, r3
 8001d86:	2b02      	cmp	r3, #2
 8001d88:	d902      	bls.n	8001d90 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 8001d8a:	2303      	movs	r3, #3
 8001d8c:	f000 bc75 	b.w	800267a <HAL_RCC_OscConfig+0x109a>
 8001d90:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d94:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001d98:	2202      	movs	r2, #2
 8001d9a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d9c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001da0:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	fa93 f2a3 	rbit	r2, r3
 8001daa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001dae:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001db2:	601a      	str	r2, [r3, #0]
 8001db4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001db8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001dbc:	2202      	movs	r2, #2
 8001dbe:	601a      	str	r2, [r3, #0]
 8001dc0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001dc4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	fa93 f2a3 	rbit	r2, r3
 8001dce:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001dd2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001dd6:	601a      	str	r2, [r3, #0]
 8001dd8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ddc:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001de0:	2202      	movs	r2, #2
 8001de2:	601a      	str	r2, [r3, #0]
 8001de4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001de8:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	fa93 f2a3 	rbit	r2, r3
 8001df2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001df6:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001dfa:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001dfc:	4b36      	ldr	r3, [pc, #216]	; (8001ed8 <HAL_RCC_OscConfig+0x8f8>)
 8001dfe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001e00:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e04:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001e08:	2102      	movs	r1, #2
 8001e0a:	6019      	str	r1, [r3, #0]
 8001e0c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e10:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	fa93 f1a3 	rbit	r1, r3
 8001e1a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e1e:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001e22:	6019      	str	r1, [r3, #0]
  return result;
 8001e24:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e28:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	fab3 f383 	clz	r3, r3
 8001e32:	b2db      	uxtb	r3, r3
 8001e34:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001e38:	b2db      	uxtb	r3, r3
 8001e3a:	f003 031f 	and.w	r3, r3, #31
 8001e3e:	2101      	movs	r1, #1
 8001e40:	fa01 f303 	lsl.w	r3, r1, r3
 8001e44:	4013      	ands	r3, r2
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d197      	bne.n	8001d7a <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e4a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e4e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f003 0304 	and.w	r3, r3, #4
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	f000 81a5 	beq.w	80021aa <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e60:	2300      	movs	r3, #0
 8001e62:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e66:	4b1c      	ldr	r3, [pc, #112]	; (8001ed8 <HAL_RCC_OscConfig+0x8f8>)
 8001e68:	69db      	ldr	r3, [r3, #28]
 8001e6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d116      	bne.n	8001ea0 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e72:	4b19      	ldr	r3, [pc, #100]	; (8001ed8 <HAL_RCC_OscConfig+0x8f8>)
 8001e74:	69db      	ldr	r3, [r3, #28]
 8001e76:	4a18      	ldr	r2, [pc, #96]	; (8001ed8 <HAL_RCC_OscConfig+0x8f8>)
 8001e78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e7c:	61d3      	str	r3, [r2, #28]
 8001e7e:	4b16      	ldr	r3, [pc, #88]	; (8001ed8 <HAL_RCC_OscConfig+0x8f8>)
 8001e80:	69db      	ldr	r3, [r3, #28]
 8001e82:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001e86:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e8a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001e8e:	601a      	str	r2, [r3, #0]
 8001e90:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e94:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001e98:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ea0:	4b0f      	ldr	r3, [pc, #60]	; (8001ee0 <HAL_RCC_OscConfig+0x900>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d121      	bne.n	8001ef0 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001eac:	4b0c      	ldr	r3, [pc, #48]	; (8001ee0 <HAL_RCC_OscConfig+0x900>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	4a0b      	ldr	r2, [pc, #44]	; (8001ee0 <HAL_RCC_OscConfig+0x900>)
 8001eb2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001eb6:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001eb8:	f7ff f862 	bl	8000f80 <HAL_GetTick>
 8001ebc:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ec0:	e010      	b.n	8001ee4 <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ec2:	f7ff f85d 	bl	8000f80 <HAL_GetTick>
 8001ec6:	4602      	mov	r2, r0
 8001ec8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001ecc:	1ad3      	subs	r3, r2, r3
 8001ece:	2b64      	cmp	r3, #100	; 0x64
 8001ed0:	d908      	bls.n	8001ee4 <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 8001ed2:	2303      	movs	r3, #3
 8001ed4:	e3d1      	b.n	800267a <HAL_RCC_OscConfig+0x109a>
 8001ed6:	bf00      	nop
 8001ed8:	40021000 	.word	0x40021000
 8001edc:	10908120 	.word	0x10908120
 8001ee0:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ee4:	4b8d      	ldr	r3, [pc, #564]	; (800211c <HAL_RCC_OscConfig+0xb3c>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d0e8      	beq.n	8001ec2 <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ef0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ef4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	689b      	ldr	r3, [r3, #8]
 8001efc:	2b01      	cmp	r3, #1
 8001efe:	d106      	bne.n	8001f0e <HAL_RCC_OscConfig+0x92e>
 8001f00:	4b87      	ldr	r3, [pc, #540]	; (8002120 <HAL_RCC_OscConfig+0xb40>)
 8001f02:	6a1b      	ldr	r3, [r3, #32]
 8001f04:	4a86      	ldr	r2, [pc, #536]	; (8002120 <HAL_RCC_OscConfig+0xb40>)
 8001f06:	f043 0301 	orr.w	r3, r3, #1
 8001f0a:	6213      	str	r3, [r2, #32]
 8001f0c:	e035      	b.n	8001f7a <HAL_RCC_OscConfig+0x99a>
 8001f0e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f12:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	689b      	ldr	r3, [r3, #8]
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d10c      	bne.n	8001f38 <HAL_RCC_OscConfig+0x958>
 8001f1e:	4b80      	ldr	r3, [pc, #512]	; (8002120 <HAL_RCC_OscConfig+0xb40>)
 8001f20:	6a1b      	ldr	r3, [r3, #32]
 8001f22:	4a7f      	ldr	r2, [pc, #508]	; (8002120 <HAL_RCC_OscConfig+0xb40>)
 8001f24:	f023 0301 	bic.w	r3, r3, #1
 8001f28:	6213      	str	r3, [r2, #32]
 8001f2a:	4b7d      	ldr	r3, [pc, #500]	; (8002120 <HAL_RCC_OscConfig+0xb40>)
 8001f2c:	6a1b      	ldr	r3, [r3, #32]
 8001f2e:	4a7c      	ldr	r2, [pc, #496]	; (8002120 <HAL_RCC_OscConfig+0xb40>)
 8001f30:	f023 0304 	bic.w	r3, r3, #4
 8001f34:	6213      	str	r3, [r2, #32]
 8001f36:	e020      	b.n	8001f7a <HAL_RCC_OscConfig+0x99a>
 8001f38:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f3c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	689b      	ldr	r3, [r3, #8]
 8001f44:	2b05      	cmp	r3, #5
 8001f46:	d10c      	bne.n	8001f62 <HAL_RCC_OscConfig+0x982>
 8001f48:	4b75      	ldr	r3, [pc, #468]	; (8002120 <HAL_RCC_OscConfig+0xb40>)
 8001f4a:	6a1b      	ldr	r3, [r3, #32]
 8001f4c:	4a74      	ldr	r2, [pc, #464]	; (8002120 <HAL_RCC_OscConfig+0xb40>)
 8001f4e:	f043 0304 	orr.w	r3, r3, #4
 8001f52:	6213      	str	r3, [r2, #32]
 8001f54:	4b72      	ldr	r3, [pc, #456]	; (8002120 <HAL_RCC_OscConfig+0xb40>)
 8001f56:	6a1b      	ldr	r3, [r3, #32]
 8001f58:	4a71      	ldr	r2, [pc, #452]	; (8002120 <HAL_RCC_OscConfig+0xb40>)
 8001f5a:	f043 0301 	orr.w	r3, r3, #1
 8001f5e:	6213      	str	r3, [r2, #32]
 8001f60:	e00b      	b.n	8001f7a <HAL_RCC_OscConfig+0x99a>
 8001f62:	4b6f      	ldr	r3, [pc, #444]	; (8002120 <HAL_RCC_OscConfig+0xb40>)
 8001f64:	6a1b      	ldr	r3, [r3, #32]
 8001f66:	4a6e      	ldr	r2, [pc, #440]	; (8002120 <HAL_RCC_OscConfig+0xb40>)
 8001f68:	f023 0301 	bic.w	r3, r3, #1
 8001f6c:	6213      	str	r3, [r2, #32]
 8001f6e:	4b6c      	ldr	r3, [pc, #432]	; (8002120 <HAL_RCC_OscConfig+0xb40>)
 8001f70:	6a1b      	ldr	r3, [r3, #32]
 8001f72:	4a6b      	ldr	r2, [pc, #428]	; (8002120 <HAL_RCC_OscConfig+0xb40>)
 8001f74:	f023 0304 	bic.w	r3, r3, #4
 8001f78:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f7a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f7e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	689b      	ldr	r3, [r3, #8]
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	f000 8081 	beq.w	800208e <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f8c:	f7fe fff8 	bl	8000f80 <HAL_GetTick>
 8001f90:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f94:	e00b      	b.n	8001fae <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f96:	f7fe fff3 	bl	8000f80 <HAL_GetTick>
 8001f9a:	4602      	mov	r2, r0
 8001f9c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001fa0:	1ad3      	subs	r3, r2, r3
 8001fa2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	d901      	bls.n	8001fae <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 8001faa:	2303      	movs	r3, #3
 8001fac:	e365      	b.n	800267a <HAL_RCC_OscConfig+0x109a>
 8001fae:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001fb2:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8001fb6:	2202      	movs	r2, #2
 8001fb8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fba:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001fbe:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	fa93 f2a3 	rbit	r2, r3
 8001fc8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001fcc:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8001fd0:	601a      	str	r2, [r3, #0]
 8001fd2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001fd6:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001fda:	2202      	movs	r2, #2
 8001fdc:	601a      	str	r2, [r3, #0]
 8001fde:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001fe2:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	fa93 f2a3 	rbit	r2, r3
 8001fec:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ff0:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001ff4:	601a      	str	r2, [r3, #0]
  return result;
 8001ff6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ffa:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001ffe:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002000:	fab3 f383 	clz	r3, r3
 8002004:	b2db      	uxtb	r3, r3
 8002006:	095b      	lsrs	r3, r3, #5
 8002008:	b2db      	uxtb	r3, r3
 800200a:	f043 0302 	orr.w	r3, r3, #2
 800200e:	b2db      	uxtb	r3, r3
 8002010:	2b02      	cmp	r3, #2
 8002012:	d102      	bne.n	800201a <HAL_RCC_OscConfig+0xa3a>
 8002014:	4b42      	ldr	r3, [pc, #264]	; (8002120 <HAL_RCC_OscConfig+0xb40>)
 8002016:	6a1b      	ldr	r3, [r3, #32]
 8002018:	e013      	b.n	8002042 <HAL_RCC_OscConfig+0xa62>
 800201a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800201e:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8002022:	2202      	movs	r2, #2
 8002024:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002026:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800202a:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	fa93 f2a3 	rbit	r2, r3
 8002034:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002038:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 800203c:	601a      	str	r2, [r3, #0]
 800203e:	4b38      	ldr	r3, [pc, #224]	; (8002120 <HAL_RCC_OscConfig+0xb40>)
 8002040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002042:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002046:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800204a:	2102      	movs	r1, #2
 800204c:	6011      	str	r1, [r2, #0]
 800204e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002052:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002056:	6812      	ldr	r2, [r2, #0]
 8002058:	fa92 f1a2 	rbit	r1, r2
 800205c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002060:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8002064:	6011      	str	r1, [r2, #0]
  return result;
 8002066:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800206a:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 800206e:	6812      	ldr	r2, [r2, #0]
 8002070:	fab2 f282 	clz	r2, r2
 8002074:	b2d2      	uxtb	r2, r2
 8002076:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800207a:	b2d2      	uxtb	r2, r2
 800207c:	f002 021f 	and.w	r2, r2, #31
 8002080:	2101      	movs	r1, #1
 8002082:	fa01 f202 	lsl.w	r2, r1, r2
 8002086:	4013      	ands	r3, r2
 8002088:	2b00      	cmp	r3, #0
 800208a:	d084      	beq.n	8001f96 <HAL_RCC_OscConfig+0x9b6>
 800208c:	e083      	b.n	8002196 <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800208e:	f7fe ff77 	bl	8000f80 <HAL_GetTick>
 8002092:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002096:	e00b      	b.n	80020b0 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002098:	f7fe ff72 	bl	8000f80 <HAL_GetTick>
 800209c:	4602      	mov	r2, r0
 800209e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80020a2:	1ad3      	subs	r3, r2, r3
 80020a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80020a8:	4293      	cmp	r3, r2
 80020aa:	d901      	bls.n	80020b0 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 80020ac:	2303      	movs	r3, #3
 80020ae:	e2e4      	b.n	800267a <HAL_RCC_OscConfig+0x109a>
 80020b0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020b4:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80020b8:	2202      	movs	r2, #2
 80020ba:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020bc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020c0:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	fa93 f2a3 	rbit	r2, r3
 80020ca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020ce:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80020d2:	601a      	str	r2, [r3, #0]
 80020d4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020d8:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80020dc:	2202      	movs	r2, #2
 80020de:	601a      	str	r2, [r3, #0]
 80020e0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020e4:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	fa93 f2a3 	rbit	r2, r3
 80020ee:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020f2:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80020f6:	601a      	str	r2, [r3, #0]
  return result;
 80020f8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020fc:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002100:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002102:	fab3 f383 	clz	r3, r3
 8002106:	b2db      	uxtb	r3, r3
 8002108:	095b      	lsrs	r3, r3, #5
 800210a:	b2db      	uxtb	r3, r3
 800210c:	f043 0302 	orr.w	r3, r3, #2
 8002110:	b2db      	uxtb	r3, r3
 8002112:	2b02      	cmp	r3, #2
 8002114:	d106      	bne.n	8002124 <HAL_RCC_OscConfig+0xb44>
 8002116:	4b02      	ldr	r3, [pc, #8]	; (8002120 <HAL_RCC_OscConfig+0xb40>)
 8002118:	6a1b      	ldr	r3, [r3, #32]
 800211a:	e017      	b.n	800214c <HAL_RCC_OscConfig+0xb6c>
 800211c:	40007000 	.word	0x40007000
 8002120:	40021000 	.word	0x40021000
 8002124:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002128:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 800212c:	2202      	movs	r2, #2
 800212e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002130:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002134:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	fa93 f2a3 	rbit	r2, r3
 800213e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002142:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8002146:	601a      	str	r2, [r3, #0]
 8002148:	4bb3      	ldr	r3, [pc, #716]	; (8002418 <HAL_RCC_OscConfig+0xe38>)
 800214a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800214c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002150:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002154:	2102      	movs	r1, #2
 8002156:	6011      	str	r1, [r2, #0]
 8002158:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800215c:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002160:	6812      	ldr	r2, [r2, #0]
 8002162:	fa92 f1a2 	rbit	r1, r2
 8002166:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800216a:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 800216e:	6011      	str	r1, [r2, #0]
  return result;
 8002170:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002174:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8002178:	6812      	ldr	r2, [r2, #0]
 800217a:	fab2 f282 	clz	r2, r2
 800217e:	b2d2      	uxtb	r2, r2
 8002180:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002184:	b2d2      	uxtb	r2, r2
 8002186:	f002 021f 	and.w	r2, r2, #31
 800218a:	2101      	movs	r1, #1
 800218c:	fa01 f202 	lsl.w	r2, r1, r2
 8002190:	4013      	ands	r3, r2
 8002192:	2b00      	cmp	r3, #0
 8002194:	d180      	bne.n	8002098 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002196:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 800219a:	2b01      	cmp	r3, #1
 800219c:	d105      	bne.n	80021aa <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800219e:	4b9e      	ldr	r3, [pc, #632]	; (8002418 <HAL_RCC_OscConfig+0xe38>)
 80021a0:	69db      	ldr	r3, [r3, #28]
 80021a2:	4a9d      	ldr	r2, [pc, #628]	; (8002418 <HAL_RCC_OscConfig+0xe38>)
 80021a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021a8:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80021aa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80021ae:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	699b      	ldr	r3, [r3, #24]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	f000 825e 	beq.w	8002678 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80021bc:	4b96      	ldr	r3, [pc, #600]	; (8002418 <HAL_RCC_OscConfig+0xe38>)
 80021be:	685b      	ldr	r3, [r3, #4]
 80021c0:	f003 030c 	and.w	r3, r3, #12
 80021c4:	2b08      	cmp	r3, #8
 80021c6:	f000 821f 	beq.w	8002608 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80021ca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80021ce:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	699b      	ldr	r3, [r3, #24]
 80021d6:	2b02      	cmp	r3, #2
 80021d8:	f040 8170 	bne.w	80024bc <HAL_RCC_OscConfig+0xedc>
 80021dc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80021e0:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80021e4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80021e8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021ea:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80021ee:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	fa93 f2a3 	rbit	r2, r3
 80021f8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80021fc:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002200:	601a      	str	r2, [r3, #0]
  return result;
 8002202:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002206:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800220a:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800220c:	fab3 f383 	clz	r3, r3
 8002210:	b2db      	uxtb	r3, r3
 8002212:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002216:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800221a:	009b      	lsls	r3, r3, #2
 800221c:	461a      	mov	r2, r3
 800221e:	2300      	movs	r3, #0
 8002220:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002222:	f7fe fead 	bl	8000f80 <HAL_GetTick>
 8002226:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800222a:	e009      	b.n	8002240 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800222c:	f7fe fea8 	bl	8000f80 <HAL_GetTick>
 8002230:	4602      	mov	r2, r0
 8002232:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002236:	1ad3      	subs	r3, r2, r3
 8002238:	2b02      	cmp	r3, #2
 800223a:	d901      	bls.n	8002240 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 800223c:	2303      	movs	r3, #3
 800223e:	e21c      	b.n	800267a <HAL_RCC_OscConfig+0x109a>
 8002240:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002244:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002248:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800224c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800224e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002252:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	fa93 f2a3 	rbit	r2, r3
 800225c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002260:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002264:	601a      	str	r2, [r3, #0]
  return result;
 8002266:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800226a:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800226e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002270:	fab3 f383 	clz	r3, r3
 8002274:	b2db      	uxtb	r3, r3
 8002276:	095b      	lsrs	r3, r3, #5
 8002278:	b2db      	uxtb	r3, r3
 800227a:	f043 0301 	orr.w	r3, r3, #1
 800227e:	b2db      	uxtb	r3, r3
 8002280:	2b01      	cmp	r3, #1
 8002282:	d102      	bne.n	800228a <HAL_RCC_OscConfig+0xcaa>
 8002284:	4b64      	ldr	r3, [pc, #400]	; (8002418 <HAL_RCC_OscConfig+0xe38>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	e027      	b.n	80022da <HAL_RCC_OscConfig+0xcfa>
 800228a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800228e:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8002292:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002296:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002298:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800229c:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	fa93 f2a3 	rbit	r2, r3
 80022a6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80022aa:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80022ae:	601a      	str	r2, [r3, #0]
 80022b0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80022b4:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80022b8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80022bc:	601a      	str	r2, [r3, #0]
 80022be:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80022c2:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	fa93 f2a3 	rbit	r2, r3
 80022cc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80022d0:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 80022d4:	601a      	str	r2, [r3, #0]
 80022d6:	4b50      	ldr	r3, [pc, #320]	; (8002418 <HAL_RCC_OscConfig+0xe38>)
 80022d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022da:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80022de:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80022e2:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80022e6:	6011      	str	r1, [r2, #0]
 80022e8:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80022ec:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80022f0:	6812      	ldr	r2, [r2, #0]
 80022f2:	fa92 f1a2 	rbit	r1, r2
 80022f6:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80022fa:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 80022fe:	6011      	str	r1, [r2, #0]
  return result;
 8002300:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002304:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8002308:	6812      	ldr	r2, [r2, #0]
 800230a:	fab2 f282 	clz	r2, r2
 800230e:	b2d2      	uxtb	r2, r2
 8002310:	f042 0220 	orr.w	r2, r2, #32
 8002314:	b2d2      	uxtb	r2, r2
 8002316:	f002 021f 	and.w	r2, r2, #31
 800231a:	2101      	movs	r1, #1
 800231c:	fa01 f202 	lsl.w	r2, r1, r2
 8002320:	4013      	ands	r3, r2
 8002322:	2b00      	cmp	r3, #0
 8002324:	d182      	bne.n	800222c <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002326:	4b3c      	ldr	r3, [pc, #240]	; (8002418 <HAL_RCC_OscConfig+0xe38>)
 8002328:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800232a:	f023 020f 	bic.w	r2, r3, #15
 800232e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002332:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800233a:	4937      	ldr	r1, [pc, #220]	; (8002418 <HAL_RCC_OscConfig+0xe38>)
 800233c:	4313      	orrs	r3, r2
 800233e:	62cb      	str	r3, [r1, #44]	; 0x2c
 8002340:	4b35      	ldr	r3, [pc, #212]	; (8002418 <HAL_RCC_OscConfig+0xe38>)
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8002348:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800234c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	6a19      	ldr	r1, [r3, #32]
 8002354:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002358:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	69db      	ldr	r3, [r3, #28]
 8002360:	430b      	orrs	r3, r1
 8002362:	492d      	ldr	r1, [pc, #180]	; (8002418 <HAL_RCC_OscConfig+0xe38>)
 8002364:	4313      	orrs	r3, r2
 8002366:	604b      	str	r3, [r1, #4]
 8002368:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800236c:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002370:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002374:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002376:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800237a:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	fa93 f2a3 	rbit	r2, r3
 8002384:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002388:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800238c:	601a      	str	r2, [r3, #0]
  return result;
 800238e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002392:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002396:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002398:	fab3 f383 	clz	r3, r3
 800239c:	b2db      	uxtb	r3, r3
 800239e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80023a2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80023a6:	009b      	lsls	r3, r3, #2
 80023a8:	461a      	mov	r2, r3
 80023aa:	2301      	movs	r3, #1
 80023ac:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023ae:	f7fe fde7 	bl	8000f80 <HAL_GetTick>
 80023b2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80023b6:	e009      	b.n	80023cc <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023b8:	f7fe fde2 	bl	8000f80 <HAL_GetTick>
 80023bc:	4602      	mov	r2, r0
 80023be:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80023c2:	1ad3      	subs	r3, r2, r3
 80023c4:	2b02      	cmp	r3, #2
 80023c6:	d901      	bls.n	80023cc <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 80023c8:	2303      	movs	r3, #3
 80023ca:	e156      	b.n	800267a <HAL_RCC_OscConfig+0x109a>
 80023cc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80023d0:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80023d4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80023d8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023da:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80023de:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	fa93 f2a3 	rbit	r2, r3
 80023e8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80023ec:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80023f0:	601a      	str	r2, [r3, #0]
  return result;
 80023f2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80023f6:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80023fa:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80023fc:	fab3 f383 	clz	r3, r3
 8002400:	b2db      	uxtb	r3, r3
 8002402:	095b      	lsrs	r3, r3, #5
 8002404:	b2db      	uxtb	r3, r3
 8002406:	f043 0301 	orr.w	r3, r3, #1
 800240a:	b2db      	uxtb	r3, r3
 800240c:	2b01      	cmp	r3, #1
 800240e:	d105      	bne.n	800241c <HAL_RCC_OscConfig+0xe3c>
 8002410:	4b01      	ldr	r3, [pc, #4]	; (8002418 <HAL_RCC_OscConfig+0xe38>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	e02a      	b.n	800246c <HAL_RCC_OscConfig+0xe8c>
 8002416:	bf00      	nop
 8002418:	40021000 	.word	0x40021000
 800241c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002420:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8002424:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002428:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800242a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800242e:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	fa93 f2a3 	rbit	r2, r3
 8002438:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800243c:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002440:	601a      	str	r2, [r3, #0]
 8002442:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002446:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800244a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800244e:	601a      	str	r2, [r3, #0]
 8002450:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002454:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	fa93 f2a3 	rbit	r2, r3
 800245e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002462:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8002466:	601a      	str	r2, [r3, #0]
 8002468:	4b86      	ldr	r3, [pc, #536]	; (8002684 <HAL_RCC_OscConfig+0x10a4>)
 800246a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800246c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002470:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002474:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002478:	6011      	str	r1, [r2, #0]
 800247a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800247e:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002482:	6812      	ldr	r2, [r2, #0]
 8002484:	fa92 f1a2 	rbit	r1, r2
 8002488:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800248c:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8002490:	6011      	str	r1, [r2, #0]
  return result;
 8002492:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002496:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 800249a:	6812      	ldr	r2, [r2, #0]
 800249c:	fab2 f282 	clz	r2, r2
 80024a0:	b2d2      	uxtb	r2, r2
 80024a2:	f042 0220 	orr.w	r2, r2, #32
 80024a6:	b2d2      	uxtb	r2, r2
 80024a8:	f002 021f 	and.w	r2, r2, #31
 80024ac:	2101      	movs	r1, #1
 80024ae:	fa01 f202 	lsl.w	r2, r1, r2
 80024b2:	4013      	ands	r3, r2
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	f43f af7f 	beq.w	80023b8 <HAL_RCC_OscConfig+0xdd8>
 80024ba:	e0dd      	b.n	8002678 <HAL_RCC_OscConfig+0x1098>
 80024bc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80024c0:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80024c4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80024c8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024ca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80024ce:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	fa93 f2a3 	rbit	r2, r3
 80024d8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80024dc:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80024e0:	601a      	str	r2, [r3, #0]
  return result;
 80024e2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80024e6:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80024ea:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024ec:	fab3 f383 	clz	r3, r3
 80024f0:	b2db      	uxtb	r3, r3
 80024f2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80024f6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80024fa:	009b      	lsls	r3, r3, #2
 80024fc:	461a      	mov	r2, r3
 80024fe:	2300      	movs	r3, #0
 8002500:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002502:	f7fe fd3d 	bl	8000f80 <HAL_GetTick>
 8002506:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800250a:	e009      	b.n	8002520 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800250c:	f7fe fd38 	bl	8000f80 <HAL_GetTick>
 8002510:	4602      	mov	r2, r0
 8002512:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002516:	1ad3      	subs	r3, r2, r3
 8002518:	2b02      	cmp	r3, #2
 800251a:	d901      	bls.n	8002520 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 800251c:	2303      	movs	r3, #3
 800251e:	e0ac      	b.n	800267a <HAL_RCC_OscConfig+0x109a>
 8002520:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002524:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002528:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800252c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800252e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002532:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	fa93 f2a3 	rbit	r2, r3
 800253c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002540:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002544:	601a      	str	r2, [r3, #0]
  return result;
 8002546:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800254a:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800254e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002550:	fab3 f383 	clz	r3, r3
 8002554:	b2db      	uxtb	r3, r3
 8002556:	095b      	lsrs	r3, r3, #5
 8002558:	b2db      	uxtb	r3, r3
 800255a:	f043 0301 	orr.w	r3, r3, #1
 800255e:	b2db      	uxtb	r3, r3
 8002560:	2b01      	cmp	r3, #1
 8002562:	d102      	bne.n	800256a <HAL_RCC_OscConfig+0xf8a>
 8002564:	4b47      	ldr	r3, [pc, #284]	; (8002684 <HAL_RCC_OscConfig+0x10a4>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	e027      	b.n	80025ba <HAL_RCC_OscConfig+0xfda>
 800256a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800256e:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8002572:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002576:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002578:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800257c:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	fa93 f2a3 	rbit	r2, r3
 8002586:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800258a:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800258e:	601a      	str	r2, [r3, #0]
 8002590:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002594:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8002598:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800259c:	601a      	str	r2, [r3, #0]
 800259e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80025a2:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	fa93 f2a3 	rbit	r2, r3
 80025ac:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80025b0:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 80025b4:	601a      	str	r2, [r3, #0]
 80025b6:	4b33      	ldr	r3, [pc, #204]	; (8002684 <HAL_RCC_OscConfig+0x10a4>)
 80025b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ba:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80025be:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80025c2:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80025c6:	6011      	str	r1, [r2, #0]
 80025c8:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80025cc:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80025d0:	6812      	ldr	r2, [r2, #0]
 80025d2:	fa92 f1a2 	rbit	r1, r2
 80025d6:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80025da:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 80025de:	6011      	str	r1, [r2, #0]
  return result;
 80025e0:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80025e4:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 80025e8:	6812      	ldr	r2, [r2, #0]
 80025ea:	fab2 f282 	clz	r2, r2
 80025ee:	b2d2      	uxtb	r2, r2
 80025f0:	f042 0220 	orr.w	r2, r2, #32
 80025f4:	b2d2      	uxtb	r2, r2
 80025f6:	f002 021f 	and.w	r2, r2, #31
 80025fa:	2101      	movs	r1, #1
 80025fc:	fa01 f202 	lsl.w	r2, r1, r2
 8002600:	4013      	ands	r3, r2
 8002602:	2b00      	cmp	r3, #0
 8002604:	d182      	bne.n	800250c <HAL_RCC_OscConfig+0xf2c>
 8002606:	e037      	b.n	8002678 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002608:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800260c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	699b      	ldr	r3, [r3, #24]
 8002614:	2b01      	cmp	r3, #1
 8002616:	d101      	bne.n	800261c <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 8002618:	2301      	movs	r3, #1
 800261a:	e02e      	b.n	800267a <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800261c:	4b19      	ldr	r3, [pc, #100]	; (8002684 <HAL_RCC_OscConfig+0x10a4>)
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8002624:	4b17      	ldr	r3, [pc, #92]	; (8002684 <HAL_RCC_OscConfig+0x10a4>)
 8002626:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002628:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800262c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8002630:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8002634:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002638:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	69db      	ldr	r3, [r3, #28]
 8002640:	429a      	cmp	r2, r3
 8002642:	d117      	bne.n	8002674 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002644:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8002648:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800264c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002650:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002658:	429a      	cmp	r2, r3
 800265a:	d10b      	bne.n	8002674 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 800265c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002660:	f003 020f 	and.w	r2, r3, #15
 8002664:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002668:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002670:	429a      	cmp	r2, r3
 8002672:	d001      	beq.n	8002678 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8002674:	2301      	movs	r3, #1
 8002676:	e000      	b.n	800267a <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 8002678:	2300      	movs	r3, #0
}
 800267a:	4618      	mov	r0, r3
 800267c:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8002680:	46bd      	mov	sp, r7
 8002682:	bd80      	pop	{r7, pc}
 8002684:	40021000 	.word	0x40021000

08002688 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b09e      	sub	sp, #120	; 0x78
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
 8002690:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002692:	2300      	movs	r3, #0
 8002694:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	2b00      	cmp	r3, #0
 800269a:	d101      	bne.n	80026a0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800269c:	2301      	movs	r3, #1
 800269e:	e162      	b.n	8002966 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80026a0:	4b90      	ldr	r3, [pc, #576]	; (80028e4 <HAL_RCC_ClockConfig+0x25c>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f003 0307 	and.w	r3, r3, #7
 80026a8:	683a      	ldr	r2, [r7, #0]
 80026aa:	429a      	cmp	r2, r3
 80026ac:	d910      	bls.n	80026d0 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026ae:	4b8d      	ldr	r3, [pc, #564]	; (80028e4 <HAL_RCC_ClockConfig+0x25c>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f023 0207 	bic.w	r2, r3, #7
 80026b6:	498b      	ldr	r1, [pc, #556]	; (80028e4 <HAL_RCC_ClockConfig+0x25c>)
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	4313      	orrs	r3, r2
 80026bc:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80026be:	4b89      	ldr	r3, [pc, #548]	; (80028e4 <HAL_RCC_ClockConfig+0x25c>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f003 0307 	and.w	r3, r3, #7
 80026c6:	683a      	ldr	r2, [r7, #0]
 80026c8:	429a      	cmp	r2, r3
 80026ca:	d001      	beq.n	80026d0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80026cc:	2301      	movs	r3, #1
 80026ce:	e14a      	b.n	8002966 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f003 0302 	and.w	r3, r3, #2
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d008      	beq.n	80026ee <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026dc:	4b82      	ldr	r3, [pc, #520]	; (80028e8 <HAL_RCC_ClockConfig+0x260>)
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	689b      	ldr	r3, [r3, #8]
 80026e8:	497f      	ldr	r1, [pc, #508]	; (80028e8 <HAL_RCC_ClockConfig+0x260>)
 80026ea:	4313      	orrs	r3, r2
 80026ec:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f003 0301 	and.w	r3, r3, #1
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	f000 80dc 	beq.w	80028b4 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	2b01      	cmp	r3, #1
 8002702:	d13c      	bne.n	800277e <HAL_RCC_ClockConfig+0xf6>
 8002704:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002708:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800270a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800270c:	fa93 f3a3 	rbit	r3, r3
 8002710:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002712:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002714:	fab3 f383 	clz	r3, r3
 8002718:	b2db      	uxtb	r3, r3
 800271a:	095b      	lsrs	r3, r3, #5
 800271c:	b2db      	uxtb	r3, r3
 800271e:	f043 0301 	orr.w	r3, r3, #1
 8002722:	b2db      	uxtb	r3, r3
 8002724:	2b01      	cmp	r3, #1
 8002726:	d102      	bne.n	800272e <HAL_RCC_ClockConfig+0xa6>
 8002728:	4b6f      	ldr	r3, [pc, #444]	; (80028e8 <HAL_RCC_ClockConfig+0x260>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	e00f      	b.n	800274e <HAL_RCC_ClockConfig+0xc6>
 800272e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002732:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002734:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002736:	fa93 f3a3 	rbit	r3, r3
 800273a:	667b      	str	r3, [r7, #100]	; 0x64
 800273c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002740:	663b      	str	r3, [r7, #96]	; 0x60
 8002742:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002744:	fa93 f3a3 	rbit	r3, r3
 8002748:	65fb      	str	r3, [r7, #92]	; 0x5c
 800274a:	4b67      	ldr	r3, [pc, #412]	; (80028e8 <HAL_RCC_ClockConfig+0x260>)
 800274c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800274e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002752:	65ba      	str	r2, [r7, #88]	; 0x58
 8002754:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002756:	fa92 f2a2 	rbit	r2, r2
 800275a:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 800275c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800275e:	fab2 f282 	clz	r2, r2
 8002762:	b2d2      	uxtb	r2, r2
 8002764:	f042 0220 	orr.w	r2, r2, #32
 8002768:	b2d2      	uxtb	r2, r2
 800276a:	f002 021f 	and.w	r2, r2, #31
 800276e:	2101      	movs	r1, #1
 8002770:	fa01 f202 	lsl.w	r2, r1, r2
 8002774:	4013      	ands	r3, r2
 8002776:	2b00      	cmp	r3, #0
 8002778:	d17b      	bne.n	8002872 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800277a:	2301      	movs	r3, #1
 800277c:	e0f3      	b.n	8002966 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	685b      	ldr	r3, [r3, #4]
 8002782:	2b02      	cmp	r3, #2
 8002784:	d13c      	bne.n	8002800 <HAL_RCC_ClockConfig+0x178>
 8002786:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800278a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800278c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800278e:	fa93 f3a3 	rbit	r3, r3
 8002792:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002794:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002796:	fab3 f383 	clz	r3, r3
 800279a:	b2db      	uxtb	r3, r3
 800279c:	095b      	lsrs	r3, r3, #5
 800279e:	b2db      	uxtb	r3, r3
 80027a0:	f043 0301 	orr.w	r3, r3, #1
 80027a4:	b2db      	uxtb	r3, r3
 80027a6:	2b01      	cmp	r3, #1
 80027a8:	d102      	bne.n	80027b0 <HAL_RCC_ClockConfig+0x128>
 80027aa:	4b4f      	ldr	r3, [pc, #316]	; (80028e8 <HAL_RCC_ClockConfig+0x260>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	e00f      	b.n	80027d0 <HAL_RCC_ClockConfig+0x148>
 80027b0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80027b4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80027b8:	fa93 f3a3 	rbit	r3, r3
 80027bc:	647b      	str	r3, [r7, #68]	; 0x44
 80027be:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80027c2:	643b      	str	r3, [r7, #64]	; 0x40
 80027c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80027c6:	fa93 f3a3 	rbit	r3, r3
 80027ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 80027cc:	4b46      	ldr	r3, [pc, #280]	; (80028e8 <HAL_RCC_ClockConfig+0x260>)
 80027ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027d0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80027d4:	63ba      	str	r2, [r7, #56]	; 0x38
 80027d6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80027d8:	fa92 f2a2 	rbit	r2, r2
 80027dc:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80027de:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80027e0:	fab2 f282 	clz	r2, r2
 80027e4:	b2d2      	uxtb	r2, r2
 80027e6:	f042 0220 	orr.w	r2, r2, #32
 80027ea:	b2d2      	uxtb	r2, r2
 80027ec:	f002 021f 	and.w	r2, r2, #31
 80027f0:	2101      	movs	r1, #1
 80027f2:	fa01 f202 	lsl.w	r2, r1, r2
 80027f6:	4013      	ands	r3, r2
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d13a      	bne.n	8002872 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80027fc:	2301      	movs	r3, #1
 80027fe:	e0b2      	b.n	8002966 <HAL_RCC_ClockConfig+0x2de>
 8002800:	2302      	movs	r3, #2
 8002802:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002804:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002806:	fa93 f3a3 	rbit	r3, r3
 800280a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800280c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800280e:	fab3 f383 	clz	r3, r3
 8002812:	b2db      	uxtb	r3, r3
 8002814:	095b      	lsrs	r3, r3, #5
 8002816:	b2db      	uxtb	r3, r3
 8002818:	f043 0301 	orr.w	r3, r3, #1
 800281c:	b2db      	uxtb	r3, r3
 800281e:	2b01      	cmp	r3, #1
 8002820:	d102      	bne.n	8002828 <HAL_RCC_ClockConfig+0x1a0>
 8002822:	4b31      	ldr	r3, [pc, #196]	; (80028e8 <HAL_RCC_ClockConfig+0x260>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	e00d      	b.n	8002844 <HAL_RCC_ClockConfig+0x1bc>
 8002828:	2302      	movs	r3, #2
 800282a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800282c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800282e:	fa93 f3a3 	rbit	r3, r3
 8002832:	627b      	str	r3, [r7, #36]	; 0x24
 8002834:	2302      	movs	r3, #2
 8002836:	623b      	str	r3, [r7, #32]
 8002838:	6a3b      	ldr	r3, [r7, #32]
 800283a:	fa93 f3a3 	rbit	r3, r3
 800283e:	61fb      	str	r3, [r7, #28]
 8002840:	4b29      	ldr	r3, [pc, #164]	; (80028e8 <HAL_RCC_ClockConfig+0x260>)
 8002842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002844:	2202      	movs	r2, #2
 8002846:	61ba      	str	r2, [r7, #24]
 8002848:	69ba      	ldr	r2, [r7, #24]
 800284a:	fa92 f2a2 	rbit	r2, r2
 800284e:	617a      	str	r2, [r7, #20]
  return result;
 8002850:	697a      	ldr	r2, [r7, #20]
 8002852:	fab2 f282 	clz	r2, r2
 8002856:	b2d2      	uxtb	r2, r2
 8002858:	f042 0220 	orr.w	r2, r2, #32
 800285c:	b2d2      	uxtb	r2, r2
 800285e:	f002 021f 	and.w	r2, r2, #31
 8002862:	2101      	movs	r1, #1
 8002864:	fa01 f202 	lsl.w	r2, r1, r2
 8002868:	4013      	ands	r3, r2
 800286a:	2b00      	cmp	r3, #0
 800286c:	d101      	bne.n	8002872 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800286e:	2301      	movs	r3, #1
 8002870:	e079      	b.n	8002966 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002872:	4b1d      	ldr	r3, [pc, #116]	; (80028e8 <HAL_RCC_ClockConfig+0x260>)
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	f023 0203 	bic.w	r2, r3, #3
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	685b      	ldr	r3, [r3, #4]
 800287e:	491a      	ldr	r1, [pc, #104]	; (80028e8 <HAL_RCC_ClockConfig+0x260>)
 8002880:	4313      	orrs	r3, r2
 8002882:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002884:	f7fe fb7c 	bl	8000f80 <HAL_GetTick>
 8002888:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800288a:	e00a      	b.n	80028a2 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800288c:	f7fe fb78 	bl	8000f80 <HAL_GetTick>
 8002890:	4602      	mov	r2, r0
 8002892:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002894:	1ad3      	subs	r3, r2, r3
 8002896:	f241 3288 	movw	r2, #5000	; 0x1388
 800289a:	4293      	cmp	r3, r2
 800289c:	d901      	bls.n	80028a2 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800289e:	2303      	movs	r3, #3
 80028a0:	e061      	b.n	8002966 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028a2:	4b11      	ldr	r3, [pc, #68]	; (80028e8 <HAL_RCC_ClockConfig+0x260>)
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	f003 020c 	and.w	r2, r3, #12
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	685b      	ldr	r3, [r3, #4]
 80028ae:	009b      	lsls	r3, r3, #2
 80028b0:	429a      	cmp	r2, r3
 80028b2:	d1eb      	bne.n	800288c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80028b4:	4b0b      	ldr	r3, [pc, #44]	; (80028e4 <HAL_RCC_ClockConfig+0x25c>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f003 0307 	and.w	r3, r3, #7
 80028bc:	683a      	ldr	r2, [r7, #0]
 80028be:	429a      	cmp	r2, r3
 80028c0:	d214      	bcs.n	80028ec <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028c2:	4b08      	ldr	r3, [pc, #32]	; (80028e4 <HAL_RCC_ClockConfig+0x25c>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f023 0207 	bic.w	r2, r3, #7
 80028ca:	4906      	ldr	r1, [pc, #24]	; (80028e4 <HAL_RCC_ClockConfig+0x25c>)
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	4313      	orrs	r3, r2
 80028d0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80028d2:	4b04      	ldr	r3, [pc, #16]	; (80028e4 <HAL_RCC_ClockConfig+0x25c>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f003 0307 	and.w	r3, r3, #7
 80028da:	683a      	ldr	r2, [r7, #0]
 80028dc:	429a      	cmp	r2, r3
 80028de:	d005      	beq.n	80028ec <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80028e0:	2301      	movs	r3, #1
 80028e2:	e040      	b.n	8002966 <HAL_RCC_ClockConfig+0x2de>
 80028e4:	40022000 	.word	0x40022000
 80028e8:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f003 0304 	and.w	r3, r3, #4
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d008      	beq.n	800290a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80028f8:	4b1d      	ldr	r3, [pc, #116]	; (8002970 <HAL_RCC_ClockConfig+0x2e8>)
 80028fa:	685b      	ldr	r3, [r3, #4]
 80028fc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	68db      	ldr	r3, [r3, #12]
 8002904:	491a      	ldr	r1, [pc, #104]	; (8002970 <HAL_RCC_ClockConfig+0x2e8>)
 8002906:	4313      	orrs	r3, r2
 8002908:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f003 0308 	and.w	r3, r3, #8
 8002912:	2b00      	cmp	r3, #0
 8002914:	d009      	beq.n	800292a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002916:	4b16      	ldr	r3, [pc, #88]	; (8002970 <HAL_RCC_ClockConfig+0x2e8>)
 8002918:	685b      	ldr	r3, [r3, #4]
 800291a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	691b      	ldr	r3, [r3, #16]
 8002922:	00db      	lsls	r3, r3, #3
 8002924:	4912      	ldr	r1, [pc, #72]	; (8002970 <HAL_RCC_ClockConfig+0x2e8>)
 8002926:	4313      	orrs	r3, r2
 8002928:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800292a:	f000 f829 	bl	8002980 <HAL_RCC_GetSysClockFreq>
 800292e:	4601      	mov	r1, r0
 8002930:	4b0f      	ldr	r3, [pc, #60]	; (8002970 <HAL_RCC_ClockConfig+0x2e8>)
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002938:	22f0      	movs	r2, #240	; 0xf0
 800293a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800293c:	693a      	ldr	r2, [r7, #16]
 800293e:	fa92 f2a2 	rbit	r2, r2
 8002942:	60fa      	str	r2, [r7, #12]
  return result;
 8002944:	68fa      	ldr	r2, [r7, #12]
 8002946:	fab2 f282 	clz	r2, r2
 800294a:	b2d2      	uxtb	r2, r2
 800294c:	40d3      	lsrs	r3, r2
 800294e:	4a09      	ldr	r2, [pc, #36]	; (8002974 <HAL_RCC_ClockConfig+0x2ec>)
 8002950:	5cd3      	ldrb	r3, [r2, r3]
 8002952:	fa21 f303 	lsr.w	r3, r1, r3
 8002956:	4a08      	ldr	r2, [pc, #32]	; (8002978 <HAL_RCC_ClockConfig+0x2f0>)
 8002958:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800295a:	4b08      	ldr	r3, [pc, #32]	; (800297c <HAL_RCC_ClockConfig+0x2f4>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	4618      	mov	r0, r3
 8002960:	f7fe f9ec 	bl	8000d3c <HAL_InitTick>
  
  return HAL_OK;
 8002964:	2300      	movs	r3, #0
}
 8002966:	4618      	mov	r0, r3
 8002968:	3778      	adds	r7, #120	; 0x78
 800296a:	46bd      	mov	sp, r7
 800296c:	bd80      	pop	{r7, pc}
 800296e:	bf00      	nop
 8002970:	40021000 	.word	0x40021000
 8002974:	080072d0 	.word	0x080072d0
 8002978:	2000006c 	.word	0x2000006c
 800297c:	20000070 	.word	0x20000070

08002980 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002980:	b480      	push	{r7}
 8002982:	b087      	sub	sp, #28
 8002984:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002986:	2300      	movs	r3, #0
 8002988:	60fb      	str	r3, [r7, #12]
 800298a:	2300      	movs	r3, #0
 800298c:	60bb      	str	r3, [r7, #8]
 800298e:	2300      	movs	r3, #0
 8002990:	617b      	str	r3, [r7, #20]
 8002992:	2300      	movs	r3, #0
 8002994:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002996:	2300      	movs	r3, #0
 8002998:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 800299a:	4b1f      	ldr	r3, [pc, #124]	; (8002a18 <HAL_RCC_GetSysClockFreq+0x98>)
 800299c:	685b      	ldr	r3, [r3, #4]
 800299e:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	f003 030c 	and.w	r3, r3, #12
 80029a6:	2b04      	cmp	r3, #4
 80029a8:	d002      	beq.n	80029b0 <HAL_RCC_GetSysClockFreq+0x30>
 80029aa:	2b08      	cmp	r3, #8
 80029ac:	d003      	beq.n	80029b6 <HAL_RCC_GetSysClockFreq+0x36>
 80029ae:	e029      	b.n	8002a04 <HAL_RCC_GetSysClockFreq+0x84>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80029b0:	4b1a      	ldr	r3, [pc, #104]	; (8002a1c <HAL_RCC_GetSysClockFreq+0x9c>)
 80029b2:	613b      	str	r3, [r7, #16]
      break;
 80029b4:	e029      	b.n	8002a0a <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	0c9b      	lsrs	r3, r3, #18
 80029ba:	f003 030f 	and.w	r3, r3, #15
 80029be:	4a18      	ldr	r2, [pc, #96]	; (8002a20 <HAL_RCC_GetSysClockFreq+0xa0>)
 80029c0:	5cd3      	ldrb	r3, [r2, r3]
 80029c2:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 80029c4:	4b14      	ldr	r3, [pc, #80]	; (8002a18 <HAL_RCC_GetSysClockFreq+0x98>)
 80029c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029c8:	f003 030f 	and.w	r3, r3, #15
 80029cc:	4a15      	ldr	r2, [pc, #84]	; (8002a24 <HAL_RCC_GetSysClockFreq+0xa4>)
 80029ce:	5cd3      	ldrb	r3, [r2, r3]
 80029d0:	60bb      	str	r3, [r7, #8]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d008      	beq.n	80029ee <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80029dc:	4a0f      	ldr	r2, [pc, #60]	; (8002a1c <HAL_RCC_GetSysClockFreq+0x9c>)
 80029de:	68bb      	ldr	r3, [r7, #8]
 80029e0:	fbb2 f2f3 	udiv	r2, r2, r3
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	fb02 f303 	mul.w	r3, r2, r3
 80029ea:	617b      	str	r3, [r7, #20]
 80029ec:	e007      	b.n	80029fe <HAL_RCC_GetSysClockFreq+0x7e>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80029ee:	4a0b      	ldr	r2, [pc, #44]	; (8002a1c <HAL_RCC_GetSysClockFreq+0x9c>)
 80029f0:	68bb      	ldr	r3, [r7, #8]
 80029f2:	fbb2 f2f3 	udiv	r2, r2, r3
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	fb02 f303 	mul.w	r3, r2, r3
 80029fc:	617b      	str	r3, [r7, #20]
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80029fe:	697b      	ldr	r3, [r7, #20]
 8002a00:	613b      	str	r3, [r7, #16]
      break;
 8002a02:	e002      	b.n	8002a0a <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002a04:	4b05      	ldr	r3, [pc, #20]	; (8002a1c <HAL_RCC_GetSysClockFreq+0x9c>)
 8002a06:	613b      	str	r3, [r7, #16]
      break;
 8002a08:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a0a:	693b      	ldr	r3, [r7, #16]
}
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	371c      	adds	r7, #28
 8002a10:	46bd      	mov	sp, r7
 8002a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a16:	4770      	bx	lr
 8002a18:	40021000 	.word	0x40021000
 8002a1c:	007a1200 	.word	0x007a1200
 8002a20:	080072e8 	.word	0x080072e8
 8002a24:	080072f8 	.word	0x080072f8

08002a28 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a2c:	4b03      	ldr	r3, [pc, #12]	; (8002a3c <HAL_RCC_GetHCLKFreq+0x14>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
}
 8002a30:	4618      	mov	r0, r3
 8002a32:	46bd      	mov	sp, r7
 8002a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a38:	4770      	bx	lr
 8002a3a:	bf00      	nop
 8002a3c:	2000006c 	.word	0x2000006c

08002a40 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b082      	sub	sp, #8
 8002a44:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002a46:	f7ff ffef 	bl	8002a28 <HAL_RCC_GetHCLKFreq>
 8002a4a:	4601      	mov	r1, r0
 8002a4c:	4b0b      	ldr	r3, [pc, #44]	; (8002a7c <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002a4e:	685b      	ldr	r3, [r3, #4]
 8002a50:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002a54:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002a58:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a5a:	687a      	ldr	r2, [r7, #4]
 8002a5c:	fa92 f2a2 	rbit	r2, r2
 8002a60:	603a      	str	r2, [r7, #0]
  return result;
 8002a62:	683a      	ldr	r2, [r7, #0]
 8002a64:	fab2 f282 	clz	r2, r2
 8002a68:	b2d2      	uxtb	r2, r2
 8002a6a:	40d3      	lsrs	r3, r2
 8002a6c:	4a04      	ldr	r2, [pc, #16]	; (8002a80 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002a6e:	5cd3      	ldrb	r3, [r2, r3]
 8002a70:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002a74:	4618      	mov	r0, r3
 8002a76:	3708      	adds	r7, #8
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	bd80      	pop	{r7, pc}
 8002a7c:	40021000 	.word	0x40021000
 8002a80:	080072e0 	.word	0x080072e0

08002a84 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b082      	sub	sp, #8
 8002a88:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002a8a:	f7ff ffcd 	bl	8002a28 <HAL_RCC_GetHCLKFreq>
 8002a8e:	4601      	mov	r1, r0
 8002a90:	4b0b      	ldr	r3, [pc, #44]	; (8002ac0 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002a92:	685b      	ldr	r3, [r3, #4]
 8002a94:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8002a98:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002a9c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a9e:	687a      	ldr	r2, [r7, #4]
 8002aa0:	fa92 f2a2 	rbit	r2, r2
 8002aa4:	603a      	str	r2, [r7, #0]
  return result;
 8002aa6:	683a      	ldr	r2, [r7, #0]
 8002aa8:	fab2 f282 	clz	r2, r2
 8002aac:	b2d2      	uxtb	r2, r2
 8002aae:	40d3      	lsrs	r3, r2
 8002ab0:	4a04      	ldr	r2, [pc, #16]	; (8002ac4 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002ab2:	5cd3      	ldrb	r3, [r2, r3]
 8002ab4:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002ab8:	4618      	mov	r0, r3
 8002aba:	3708      	adds	r7, #8
 8002abc:	46bd      	mov	sp, r7
 8002abe:	bd80      	pop	{r7, pc}
 8002ac0:	40021000 	.word	0x40021000
 8002ac4:	080072e0 	.word	0x080072e0

08002ac8 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002ac8:	b480      	push	{r7}
 8002aca:	b083      	sub	sp, #12
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
 8002ad0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	220f      	movs	r2, #15
 8002ad6:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002ad8:	4b12      	ldr	r3, [pc, #72]	; (8002b24 <HAL_RCC_GetClockConfig+0x5c>)
 8002ada:	685b      	ldr	r3, [r3, #4]
 8002adc:	f003 0203 	and.w	r2, r3, #3
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8002ae4:	4b0f      	ldr	r3, [pc, #60]	; (8002b24 <HAL_RCC_GetClockConfig+0x5c>)
 8002ae6:	685b      	ldr	r3, [r3, #4]
 8002ae8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 8002af0:	4b0c      	ldr	r3, [pc, #48]	; (8002b24 <HAL_RCC_GetClockConfig+0x5c>)
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002afc:	4b09      	ldr	r3, [pc, #36]	; (8002b24 <HAL_RCC_GetClockConfig+0x5c>)
 8002afe:	685b      	ldr	r3, [r3, #4]
 8002b00:	08db      	lsrs	r3, r3, #3
 8002b02:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 8002b0a:	4b07      	ldr	r3, [pc, #28]	; (8002b28 <HAL_RCC_GetClockConfig+0x60>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f003 0207 	and.w	r2, r3, #7
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	601a      	str	r2, [r3, #0]
}
 8002b16:	bf00      	nop
 8002b18:	370c      	adds	r7, #12
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b20:	4770      	bx	lr
 8002b22:	bf00      	nop
 8002b24:	40021000 	.word	0x40021000
 8002b28:	40022000 	.word	0x40022000

08002b2c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b092      	sub	sp, #72	; 0x48
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002b34:	2300      	movs	r3, #0
 8002b36:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002b38:	2300      	movs	r3, #0
 8002b3a:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	f000 80d4 	beq.w	8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b50:	4b4e      	ldr	r3, [pc, #312]	; (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b52:	69db      	ldr	r3, [r3, #28]
 8002b54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d10e      	bne.n	8002b7a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b5c:	4b4b      	ldr	r3, [pc, #300]	; (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b5e:	69db      	ldr	r3, [r3, #28]
 8002b60:	4a4a      	ldr	r2, [pc, #296]	; (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b66:	61d3      	str	r3, [r2, #28]
 8002b68:	4b48      	ldr	r3, [pc, #288]	; (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b6a:	69db      	ldr	r3, [r3, #28]
 8002b6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b70:	60bb      	str	r3, [r7, #8]
 8002b72:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b74:	2301      	movs	r3, #1
 8002b76:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b7a:	4b45      	ldr	r3, [pc, #276]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d118      	bne.n	8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b86:	4b42      	ldr	r3, [pc, #264]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	4a41      	ldr	r2, [pc, #260]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002b8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b90:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b92:	f7fe f9f5 	bl	8000f80 <HAL_GetTick>
 8002b96:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b98:	e008      	b.n	8002bac <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b9a:	f7fe f9f1 	bl	8000f80 <HAL_GetTick>
 8002b9e:	4602      	mov	r2, r0
 8002ba0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ba2:	1ad3      	subs	r3, r2, r3
 8002ba4:	2b64      	cmp	r3, #100	; 0x64
 8002ba6:	d901      	bls.n	8002bac <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002ba8:	2303      	movs	r3, #3
 8002baa:	e1d6      	b.n	8002f5a <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bac:	4b38      	ldr	r3, [pc, #224]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d0f0      	beq.n	8002b9a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002bb8:	4b34      	ldr	r3, [pc, #208]	; (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bba:	6a1b      	ldr	r3, [r3, #32]
 8002bbc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002bc0:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002bc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	f000 8084 	beq.w	8002cd2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002bd2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002bd4:	429a      	cmp	r2, r3
 8002bd6:	d07c      	beq.n	8002cd2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002bd8:	4b2c      	ldr	r3, [pc, #176]	; (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bda:	6a1b      	ldr	r3, [r3, #32]
 8002bdc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002be0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002be2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002be6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002be8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bea:	fa93 f3a3 	rbit	r3, r3
 8002bee:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002bf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002bf2:	fab3 f383 	clz	r3, r3
 8002bf6:	b2db      	uxtb	r3, r3
 8002bf8:	461a      	mov	r2, r3
 8002bfa:	4b26      	ldr	r3, [pc, #152]	; (8002c94 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002bfc:	4413      	add	r3, r2
 8002bfe:	009b      	lsls	r3, r3, #2
 8002c00:	461a      	mov	r2, r3
 8002c02:	2301      	movs	r3, #1
 8002c04:	6013      	str	r3, [r2, #0]
 8002c06:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002c0a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c0e:	fa93 f3a3 	rbit	r3, r3
 8002c12:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002c14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002c16:	fab3 f383 	clz	r3, r3
 8002c1a:	b2db      	uxtb	r3, r3
 8002c1c:	461a      	mov	r2, r3
 8002c1e:	4b1d      	ldr	r3, [pc, #116]	; (8002c94 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002c20:	4413      	add	r3, r2
 8002c22:	009b      	lsls	r3, r3, #2
 8002c24:	461a      	mov	r2, r3
 8002c26:	2300      	movs	r3, #0
 8002c28:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002c2a:	4a18      	ldr	r2, [pc, #96]	; (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c2e:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002c30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c32:	f003 0301 	and.w	r3, r3, #1
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d04b      	beq.n	8002cd2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c3a:	f7fe f9a1 	bl	8000f80 <HAL_GetTick>
 8002c3e:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c40:	e00a      	b.n	8002c58 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c42:	f7fe f99d 	bl	8000f80 <HAL_GetTick>
 8002c46:	4602      	mov	r2, r0
 8002c48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c4a:	1ad3      	subs	r3, r2, r3
 8002c4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c50:	4293      	cmp	r3, r2
 8002c52:	d901      	bls.n	8002c58 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002c54:	2303      	movs	r3, #3
 8002c56:	e180      	b.n	8002f5a <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8002c58:	2302      	movs	r3, #2
 8002c5a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c5e:	fa93 f3a3 	rbit	r3, r3
 8002c62:	627b      	str	r3, [r7, #36]	; 0x24
 8002c64:	2302      	movs	r3, #2
 8002c66:	623b      	str	r3, [r7, #32]
 8002c68:	6a3b      	ldr	r3, [r7, #32]
 8002c6a:	fa93 f3a3 	rbit	r3, r3
 8002c6e:	61fb      	str	r3, [r7, #28]
  return result;
 8002c70:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c72:	fab3 f383 	clz	r3, r3
 8002c76:	b2db      	uxtb	r3, r3
 8002c78:	095b      	lsrs	r3, r3, #5
 8002c7a:	b2db      	uxtb	r3, r3
 8002c7c:	f043 0302 	orr.w	r3, r3, #2
 8002c80:	b2db      	uxtb	r3, r3
 8002c82:	2b02      	cmp	r3, #2
 8002c84:	d108      	bne.n	8002c98 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8002c86:	4b01      	ldr	r3, [pc, #4]	; (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c88:	6a1b      	ldr	r3, [r3, #32]
 8002c8a:	e00d      	b.n	8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8002c8c:	40021000 	.word	0x40021000
 8002c90:	40007000 	.word	0x40007000
 8002c94:	10908100 	.word	0x10908100
 8002c98:	2302      	movs	r3, #2
 8002c9a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c9c:	69bb      	ldr	r3, [r7, #24]
 8002c9e:	fa93 f3a3 	rbit	r3, r3
 8002ca2:	617b      	str	r3, [r7, #20]
 8002ca4:	4b9a      	ldr	r3, [pc, #616]	; (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ca8:	2202      	movs	r2, #2
 8002caa:	613a      	str	r2, [r7, #16]
 8002cac:	693a      	ldr	r2, [r7, #16]
 8002cae:	fa92 f2a2 	rbit	r2, r2
 8002cb2:	60fa      	str	r2, [r7, #12]
  return result;
 8002cb4:	68fa      	ldr	r2, [r7, #12]
 8002cb6:	fab2 f282 	clz	r2, r2
 8002cba:	b2d2      	uxtb	r2, r2
 8002cbc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002cc0:	b2d2      	uxtb	r2, r2
 8002cc2:	f002 021f 	and.w	r2, r2, #31
 8002cc6:	2101      	movs	r1, #1
 8002cc8:	fa01 f202 	lsl.w	r2, r1, r2
 8002ccc:	4013      	ands	r3, r2
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d0b7      	beq.n	8002c42 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002cd2:	4b8f      	ldr	r3, [pc, #572]	; (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002cd4:	6a1b      	ldr	r3, [r3, #32]
 8002cd6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	685b      	ldr	r3, [r3, #4]
 8002cde:	498c      	ldr	r1, [pc, #560]	; (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002ce0:	4313      	orrs	r3, r2
 8002ce2:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002ce4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002ce8:	2b01      	cmp	r3, #1
 8002cea:	d105      	bne.n	8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002cec:	4b88      	ldr	r3, [pc, #544]	; (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002cee:	69db      	ldr	r3, [r3, #28]
 8002cf0:	4a87      	ldr	r2, [pc, #540]	; (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002cf2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002cf6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f003 0301 	and.w	r3, r3, #1
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d008      	beq.n	8002d16 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002d04:	4b82      	ldr	r3, [pc, #520]	; (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002d06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d08:	f023 0203 	bic.w	r2, r3, #3
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	689b      	ldr	r3, [r3, #8]
 8002d10:	497f      	ldr	r1, [pc, #508]	; (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002d12:	4313      	orrs	r3, r2
 8002d14:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f003 0302 	and.w	r3, r3, #2
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d008      	beq.n	8002d34 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002d22:	4b7b      	ldr	r3, [pc, #492]	; (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d26:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	68db      	ldr	r3, [r3, #12]
 8002d2e:	4978      	ldr	r1, [pc, #480]	; (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002d30:	4313      	orrs	r3, r2
 8002d32:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f003 0304 	and.w	r3, r3, #4
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d008      	beq.n	8002d52 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002d40:	4b73      	ldr	r3, [pc, #460]	; (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002d42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d44:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	691b      	ldr	r3, [r3, #16]
 8002d4c:	4970      	ldr	r1, [pc, #448]	; (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002d4e:	4313      	orrs	r3, r2
 8002d50:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f003 0320 	and.w	r3, r3, #32
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d008      	beq.n	8002d70 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002d5e:	4b6c      	ldr	r3, [pc, #432]	; (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d62:	f023 0210 	bic.w	r2, r3, #16
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	69db      	ldr	r3, [r3, #28]
 8002d6a:	4969      	ldr	r1, [pc, #420]	; (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002d6c:	4313      	orrs	r3, r2
 8002d6e:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d008      	beq.n	8002d8e <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002d7c:	4b64      	ldr	r3, [pc, #400]	; (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002d7e:	685b      	ldr	r3, [r3, #4]
 8002d80:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d88:	4961      	ldr	r1, [pc, #388]	; (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002d8a:	4313      	orrs	r3, r2
 8002d8c:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d008      	beq.n	8002dac <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002d9a:	4b5d      	ldr	r3, [pc, #372]	; (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d9e:	f023 0220 	bic.w	r2, r3, #32
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6a1b      	ldr	r3, [r3, #32]
 8002da6:	495a      	ldr	r1, [pc, #360]	; (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002da8:	4313      	orrs	r3, r2
 8002daa:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d008      	beq.n	8002dca <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002db8:	4b55      	ldr	r3, [pc, #340]	; (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002dba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dbc:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dc4:	4952      	ldr	r1, [pc, #328]	; (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002dc6:	4313      	orrs	r3, r2
 8002dc8:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f003 0308 	and.w	r3, r3, #8
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d008      	beq.n	8002de8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002dd6:	4b4e      	ldr	r3, [pc, #312]	; (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dda:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	695b      	ldr	r3, [r3, #20]
 8002de2:	494b      	ldr	r1, [pc, #300]	; (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002de4:	4313      	orrs	r3, r2
 8002de6:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f003 0310 	and.w	r3, r3, #16
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d008      	beq.n	8002e06 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002df4:	4b46      	ldr	r3, [pc, #280]	; (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002df6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002df8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	699b      	ldr	r3, [r3, #24]
 8002e00:	4943      	ldr	r1, [pc, #268]	; (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002e02:	4313      	orrs	r3, r2
 8002e04:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d008      	beq.n	8002e24 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002e12:	4b3f      	ldr	r3, [pc, #252]	; (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002e14:	685b      	ldr	r3, [r3, #4]
 8002e16:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e1e:	493c      	ldr	r1, [pc, #240]	; (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002e20:	4313      	orrs	r3, r2
 8002e22:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d008      	beq.n	8002e42 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002e30:	4b37      	ldr	r3, [pc, #220]	; (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002e32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e34:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e3c:	4934      	ldr	r1, [pc, #208]	; (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002e3e:	4313      	orrs	r3, r2
 8002e40:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d008      	beq.n	8002e60 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8002e4e:	4b30      	ldr	r3, [pc, #192]	; (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002e50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e52:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e5a:	492d      	ldr	r1, [pc, #180]	; (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002e5c:	4313      	orrs	r3, r2
 8002e5e:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d008      	beq.n	8002e7e <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002e6c:	4b28      	ldr	r3, [pc, #160]	; (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002e6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e70:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e78:	4925      	ldr	r1, [pc, #148]	; (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002e7a:	4313      	orrs	r3, r2
 8002e7c:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d008      	beq.n	8002e9c <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8002e8a:	4b21      	ldr	r3, [pc, #132]	; (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e8e:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e96:	491e      	ldr	r1, [pc, #120]	; (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002e98:	4313      	orrs	r3, r2
 8002e9a:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d008      	beq.n	8002eba <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8002ea8:	4b19      	ldr	r3, [pc, #100]	; (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002eaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eac:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002eb4:	4916      	ldr	r1, [pc, #88]	; (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002eb6:	4313      	orrs	r3, r2
 8002eb8:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d008      	beq.n	8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8002ec6:	4b12      	ldr	r3, [pc, #72]	; (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eca:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ed2:	490f      	ldr	r1, [pc, #60]	; (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002ed4:	4313      	orrs	r3, r2
 8002ed6:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d008      	beq.n	8002ef6 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002ee4:	4b0a      	ldr	r3, [pc, #40]	; (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002ee6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ee8:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ef0:	4907      	ldr	r1, [pc, #28]	; (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002ef2:	4313      	orrs	r3, r2
 8002ef4:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d00c      	beq.n	8002f1c <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8002f02:	4b03      	ldr	r3, [pc, #12]	; (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f06:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	e002      	b.n	8002f14 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8002f0e:	bf00      	nop
 8002f10:	40021000 	.word	0x40021000
 8002f14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f16:	4913      	ldr	r1, [pc, #76]	; (8002f64 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002f18:	4313      	orrs	r3, r2
 8002f1a:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d008      	beq.n	8002f3a <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8002f28:	4b0e      	ldr	r3, [pc, #56]	; (8002f64 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002f2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f2c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f34:	490b      	ldr	r1, [pc, #44]	; (8002f64 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002f36:	4313      	orrs	r3, r2
 8002f38:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d008      	beq.n	8002f58 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8002f46:	4b07      	ldr	r3, [pc, #28]	; (8002f64 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f4a:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f52:	4904      	ldr	r1, [pc, #16]	; (8002f64 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002f54:	4313      	orrs	r3, r2
 8002f56:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002f58:	2300      	movs	r3, #0
}
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	3748      	adds	r7, #72	; 0x48
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	bd80      	pop	{r7, pc}
 8002f62:	bf00      	nop
 8002f64:	40021000 	.word	0x40021000

08002f68 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b082      	sub	sp, #8
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d101      	bne.n	8002f7a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002f76:	2301      	movs	r3, #1
 8002f78:	e049      	b.n	800300e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f80:	b2db      	uxtb	r3, r3
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d106      	bne.n	8002f94 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	2200      	movs	r2, #0
 8002f8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002f8e:	6878      	ldr	r0, [r7, #4]
 8002f90:	f000 f841 	bl	8003016 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2202      	movs	r2, #2
 8002f98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681a      	ldr	r2, [r3, #0]
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	3304      	adds	r3, #4
 8002fa4:	4619      	mov	r1, r3
 8002fa6:	4610      	mov	r0, r2
 8002fa8:	f000 f9e4 	bl	8003374 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2201      	movs	r2, #1
 8002fb0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2201      	movs	r2, #1
 8002fb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2201      	movs	r2, #1
 8002fc0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2201      	movs	r2, #1
 8002fc8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2201      	movs	r2, #1
 8002fd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2201      	movs	r2, #1
 8002fd8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2201      	movs	r2, #1
 8002fe0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2201      	movs	r2, #1
 8002fe8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2201      	movs	r2, #1
 8002ff0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2201      	movs	r2, #1
 8002ff8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2201      	movs	r2, #1
 8003000:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2201      	movs	r2, #1
 8003008:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800300c:	2300      	movs	r3, #0
}
 800300e:	4618      	mov	r0, r3
 8003010:	3708      	adds	r7, #8
 8003012:	46bd      	mov	sp, r7
 8003014:	bd80      	pop	{r7, pc}

08003016 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003016:	b480      	push	{r7}
 8003018:	b083      	sub	sp, #12
 800301a:	af00      	add	r7, sp, #0
 800301c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800301e:	bf00      	nop
 8003020:	370c      	adds	r7, #12
 8003022:	46bd      	mov	sp, r7
 8003024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003028:	4770      	bx	lr
	...

0800302c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800302c:	b480      	push	{r7}
 800302e:	b085      	sub	sp, #20
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800303a:	b2db      	uxtb	r3, r3
 800303c:	2b01      	cmp	r3, #1
 800303e:	d001      	beq.n	8003044 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003040:	2301      	movs	r3, #1
 8003042:	e04f      	b.n	80030e4 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2202      	movs	r2, #2
 8003048:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	68da      	ldr	r2, [r3, #12]
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f042 0201 	orr.w	r2, r2, #1
 800305a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	4a23      	ldr	r2, [pc, #140]	; (80030f0 <HAL_TIM_Base_Start_IT+0xc4>)
 8003062:	4293      	cmp	r3, r2
 8003064:	d01d      	beq.n	80030a2 <HAL_TIM_Base_Start_IT+0x76>
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800306e:	d018      	beq.n	80030a2 <HAL_TIM_Base_Start_IT+0x76>
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	4a1f      	ldr	r2, [pc, #124]	; (80030f4 <HAL_TIM_Base_Start_IT+0xc8>)
 8003076:	4293      	cmp	r3, r2
 8003078:	d013      	beq.n	80030a2 <HAL_TIM_Base_Start_IT+0x76>
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	4a1e      	ldr	r2, [pc, #120]	; (80030f8 <HAL_TIM_Base_Start_IT+0xcc>)
 8003080:	4293      	cmp	r3, r2
 8003082:	d00e      	beq.n	80030a2 <HAL_TIM_Base_Start_IT+0x76>
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	4a1c      	ldr	r2, [pc, #112]	; (80030fc <HAL_TIM_Base_Start_IT+0xd0>)
 800308a:	4293      	cmp	r3, r2
 800308c:	d009      	beq.n	80030a2 <HAL_TIM_Base_Start_IT+0x76>
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	4a1b      	ldr	r2, [pc, #108]	; (8003100 <HAL_TIM_Base_Start_IT+0xd4>)
 8003094:	4293      	cmp	r3, r2
 8003096:	d004      	beq.n	80030a2 <HAL_TIM_Base_Start_IT+0x76>
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	4a19      	ldr	r2, [pc, #100]	; (8003104 <HAL_TIM_Base_Start_IT+0xd8>)
 800309e:	4293      	cmp	r3, r2
 80030a0:	d115      	bne.n	80030ce <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	689a      	ldr	r2, [r3, #8]
 80030a8:	4b17      	ldr	r3, [pc, #92]	; (8003108 <HAL_TIM_Base_Start_IT+0xdc>)
 80030aa:	4013      	ands	r3, r2
 80030ac:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	2b06      	cmp	r3, #6
 80030b2:	d015      	beq.n	80030e0 <HAL_TIM_Base_Start_IT+0xb4>
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030ba:	d011      	beq.n	80030e0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	681a      	ldr	r2, [r3, #0]
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f042 0201 	orr.w	r2, r2, #1
 80030ca:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030cc:	e008      	b.n	80030e0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	681a      	ldr	r2, [r3, #0]
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f042 0201 	orr.w	r2, r2, #1
 80030dc:	601a      	str	r2, [r3, #0]
 80030de:	e000      	b.n	80030e2 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030e0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80030e2:	2300      	movs	r3, #0
}
 80030e4:	4618      	mov	r0, r3
 80030e6:	3714      	adds	r7, #20
 80030e8:	46bd      	mov	sp, r7
 80030ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ee:	4770      	bx	lr
 80030f0:	40012c00 	.word	0x40012c00
 80030f4:	40000400 	.word	0x40000400
 80030f8:	40000800 	.word	0x40000800
 80030fc:	40013400 	.word	0x40013400
 8003100:	40014000 	.word	0x40014000
 8003104:	40015000 	.word	0x40015000
 8003108:	00010007 	.word	0x00010007

0800310c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b084      	sub	sp, #16
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	68db      	ldr	r3, [r3, #12]
 800311a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	691b      	ldr	r3, [r3, #16]
 8003122:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003124:	68bb      	ldr	r3, [r7, #8]
 8003126:	f003 0302 	and.w	r3, r3, #2
 800312a:	2b00      	cmp	r3, #0
 800312c:	d020      	beq.n	8003170 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	f003 0302 	and.w	r3, r3, #2
 8003134:	2b00      	cmp	r3, #0
 8003136:	d01b      	beq.n	8003170 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f06f 0202 	mvn.w	r2, #2
 8003140:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2201      	movs	r2, #1
 8003146:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	699b      	ldr	r3, [r3, #24]
 800314e:	f003 0303 	and.w	r3, r3, #3
 8003152:	2b00      	cmp	r3, #0
 8003154:	d003      	beq.n	800315e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003156:	6878      	ldr	r0, [r7, #4]
 8003158:	f000 f8ee 	bl	8003338 <HAL_TIM_IC_CaptureCallback>
 800315c:	e005      	b.n	800316a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800315e:	6878      	ldr	r0, [r7, #4]
 8003160:	f000 f8e0 	bl	8003324 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003164:	6878      	ldr	r0, [r7, #4]
 8003166:	f000 f8f1 	bl	800334c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	2200      	movs	r2, #0
 800316e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003170:	68bb      	ldr	r3, [r7, #8]
 8003172:	f003 0304 	and.w	r3, r3, #4
 8003176:	2b00      	cmp	r3, #0
 8003178:	d020      	beq.n	80031bc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	f003 0304 	and.w	r3, r3, #4
 8003180:	2b00      	cmp	r3, #0
 8003182:	d01b      	beq.n	80031bc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f06f 0204 	mvn.w	r2, #4
 800318c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	2202      	movs	r2, #2
 8003192:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	699b      	ldr	r3, [r3, #24]
 800319a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d003      	beq.n	80031aa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80031a2:	6878      	ldr	r0, [r7, #4]
 80031a4:	f000 f8c8 	bl	8003338 <HAL_TIM_IC_CaptureCallback>
 80031a8:	e005      	b.n	80031b6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80031aa:	6878      	ldr	r0, [r7, #4]
 80031ac:	f000 f8ba 	bl	8003324 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031b0:	6878      	ldr	r0, [r7, #4]
 80031b2:	f000 f8cb 	bl	800334c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	2200      	movs	r2, #0
 80031ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80031bc:	68bb      	ldr	r3, [r7, #8]
 80031be:	f003 0308 	and.w	r3, r3, #8
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d020      	beq.n	8003208 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	f003 0308 	and.w	r3, r3, #8
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d01b      	beq.n	8003208 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f06f 0208 	mvn.w	r2, #8
 80031d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	2204      	movs	r2, #4
 80031de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	69db      	ldr	r3, [r3, #28]
 80031e6:	f003 0303 	and.w	r3, r3, #3
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d003      	beq.n	80031f6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80031ee:	6878      	ldr	r0, [r7, #4]
 80031f0:	f000 f8a2 	bl	8003338 <HAL_TIM_IC_CaptureCallback>
 80031f4:	e005      	b.n	8003202 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80031f6:	6878      	ldr	r0, [r7, #4]
 80031f8:	f000 f894 	bl	8003324 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031fc:	6878      	ldr	r0, [r7, #4]
 80031fe:	f000 f8a5 	bl	800334c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2200      	movs	r2, #0
 8003206:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003208:	68bb      	ldr	r3, [r7, #8]
 800320a:	f003 0310 	and.w	r3, r3, #16
 800320e:	2b00      	cmp	r3, #0
 8003210:	d020      	beq.n	8003254 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	f003 0310 	and.w	r3, r3, #16
 8003218:	2b00      	cmp	r3, #0
 800321a:	d01b      	beq.n	8003254 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f06f 0210 	mvn.w	r2, #16
 8003224:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2208      	movs	r2, #8
 800322a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	69db      	ldr	r3, [r3, #28]
 8003232:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003236:	2b00      	cmp	r3, #0
 8003238:	d003      	beq.n	8003242 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800323a:	6878      	ldr	r0, [r7, #4]
 800323c:	f000 f87c 	bl	8003338 <HAL_TIM_IC_CaptureCallback>
 8003240:	e005      	b.n	800324e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003242:	6878      	ldr	r0, [r7, #4]
 8003244:	f000 f86e 	bl	8003324 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003248:	6878      	ldr	r0, [r7, #4]
 800324a:	f000 f87f 	bl	800334c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2200      	movs	r2, #0
 8003252:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003254:	68bb      	ldr	r3, [r7, #8]
 8003256:	f003 0301 	and.w	r3, r3, #1
 800325a:	2b00      	cmp	r3, #0
 800325c:	d00c      	beq.n	8003278 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	f003 0301 	and.w	r3, r3, #1
 8003264:	2b00      	cmp	r3, #0
 8003266:	d007      	beq.n	8003278 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f06f 0201 	mvn.w	r2, #1
 8003270:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003272:	6878      	ldr	r0, [r7, #4]
 8003274:	f000 f84c 	bl	8003310 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003278:	68bb      	ldr	r3, [r7, #8]
 800327a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800327e:	2b00      	cmp	r3, #0
 8003280:	d00c      	beq.n	800329c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003288:	2b00      	cmp	r3, #0
 800328a:	d007      	beq.n	800329c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003294:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003296:	6878      	ldr	r0, [r7, #4]
 8003298:	f000 f920 	bl	80034dc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800329c:	68bb      	ldr	r3, [r7, #8]
 800329e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d00c      	beq.n	80032c0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d007      	beq.n	80032c0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80032b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80032ba:	6878      	ldr	r0, [r7, #4]
 80032bc:	f000 f918 	bl	80034f0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80032c0:	68bb      	ldr	r3, [r7, #8]
 80032c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d00c      	beq.n	80032e4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d007      	beq.n	80032e4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80032dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80032de:	6878      	ldr	r0, [r7, #4]
 80032e0:	f000 f83e 	bl	8003360 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80032e4:	68bb      	ldr	r3, [r7, #8]
 80032e6:	f003 0320 	and.w	r3, r3, #32
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d00c      	beq.n	8003308 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	f003 0320 	and.w	r3, r3, #32
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d007      	beq.n	8003308 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f06f 0220 	mvn.w	r2, #32
 8003300:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003302:	6878      	ldr	r0, [r7, #4]
 8003304:	f000 f8e0 	bl	80034c8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003308:	bf00      	nop
 800330a:	3710      	adds	r7, #16
 800330c:	46bd      	mov	sp, r7
 800330e:	bd80      	pop	{r7, pc}

08003310 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003310:	b480      	push	{r7}
 8003312:	b083      	sub	sp, #12
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003318:	bf00      	nop
 800331a:	370c      	adds	r7, #12
 800331c:	46bd      	mov	sp, r7
 800331e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003322:	4770      	bx	lr

08003324 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003324:	b480      	push	{r7}
 8003326:	b083      	sub	sp, #12
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800332c:	bf00      	nop
 800332e:	370c      	adds	r7, #12
 8003330:	46bd      	mov	sp, r7
 8003332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003336:	4770      	bx	lr

08003338 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003338:	b480      	push	{r7}
 800333a:	b083      	sub	sp, #12
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003340:	bf00      	nop
 8003342:	370c      	adds	r7, #12
 8003344:	46bd      	mov	sp, r7
 8003346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334a:	4770      	bx	lr

0800334c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800334c:	b480      	push	{r7}
 800334e:	b083      	sub	sp, #12
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003354:	bf00      	nop
 8003356:	370c      	adds	r7, #12
 8003358:	46bd      	mov	sp, r7
 800335a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335e:	4770      	bx	lr

08003360 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003360:	b480      	push	{r7}
 8003362:	b083      	sub	sp, #12
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003368:	bf00      	nop
 800336a:	370c      	adds	r7, #12
 800336c:	46bd      	mov	sp, r7
 800336e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003372:	4770      	bx	lr

08003374 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003374:	b480      	push	{r7}
 8003376:	b085      	sub	sp, #20
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
 800337c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	4a48      	ldr	r2, [pc, #288]	; (80034a8 <TIM_Base_SetConfig+0x134>)
 8003388:	4293      	cmp	r3, r2
 800338a:	d013      	beq.n	80033b4 <TIM_Base_SetConfig+0x40>
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003392:	d00f      	beq.n	80033b4 <TIM_Base_SetConfig+0x40>
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	4a45      	ldr	r2, [pc, #276]	; (80034ac <TIM_Base_SetConfig+0x138>)
 8003398:	4293      	cmp	r3, r2
 800339a:	d00b      	beq.n	80033b4 <TIM_Base_SetConfig+0x40>
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	4a44      	ldr	r2, [pc, #272]	; (80034b0 <TIM_Base_SetConfig+0x13c>)
 80033a0:	4293      	cmp	r3, r2
 80033a2:	d007      	beq.n	80033b4 <TIM_Base_SetConfig+0x40>
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	4a43      	ldr	r2, [pc, #268]	; (80034b4 <TIM_Base_SetConfig+0x140>)
 80033a8:	4293      	cmp	r3, r2
 80033aa:	d003      	beq.n	80033b4 <TIM_Base_SetConfig+0x40>
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	4a42      	ldr	r2, [pc, #264]	; (80034b8 <TIM_Base_SetConfig+0x144>)
 80033b0:	4293      	cmp	r3, r2
 80033b2:	d108      	bne.n	80033c6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033ba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	685b      	ldr	r3, [r3, #4]
 80033c0:	68fa      	ldr	r2, [r7, #12]
 80033c2:	4313      	orrs	r3, r2
 80033c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	4a37      	ldr	r2, [pc, #220]	; (80034a8 <TIM_Base_SetConfig+0x134>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d01f      	beq.n	800340e <TIM_Base_SetConfig+0x9a>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033d4:	d01b      	beq.n	800340e <TIM_Base_SetConfig+0x9a>
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	4a34      	ldr	r2, [pc, #208]	; (80034ac <TIM_Base_SetConfig+0x138>)
 80033da:	4293      	cmp	r3, r2
 80033dc:	d017      	beq.n	800340e <TIM_Base_SetConfig+0x9a>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	4a33      	ldr	r2, [pc, #204]	; (80034b0 <TIM_Base_SetConfig+0x13c>)
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d013      	beq.n	800340e <TIM_Base_SetConfig+0x9a>
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	4a32      	ldr	r2, [pc, #200]	; (80034b4 <TIM_Base_SetConfig+0x140>)
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d00f      	beq.n	800340e <TIM_Base_SetConfig+0x9a>
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	4a32      	ldr	r2, [pc, #200]	; (80034bc <TIM_Base_SetConfig+0x148>)
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d00b      	beq.n	800340e <TIM_Base_SetConfig+0x9a>
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	4a31      	ldr	r2, [pc, #196]	; (80034c0 <TIM_Base_SetConfig+0x14c>)
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d007      	beq.n	800340e <TIM_Base_SetConfig+0x9a>
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	4a30      	ldr	r2, [pc, #192]	; (80034c4 <TIM_Base_SetConfig+0x150>)
 8003402:	4293      	cmp	r3, r2
 8003404:	d003      	beq.n	800340e <TIM_Base_SetConfig+0x9a>
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	4a2b      	ldr	r2, [pc, #172]	; (80034b8 <TIM_Base_SetConfig+0x144>)
 800340a:	4293      	cmp	r3, r2
 800340c:	d108      	bne.n	8003420 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003414:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	68db      	ldr	r3, [r3, #12]
 800341a:	68fa      	ldr	r2, [r7, #12]
 800341c:	4313      	orrs	r3, r2
 800341e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	695b      	ldr	r3, [r3, #20]
 800342a:	4313      	orrs	r3, r2
 800342c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	68fa      	ldr	r2, [r7, #12]
 8003432:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	689a      	ldr	r2, [r3, #8]
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	681a      	ldr	r2, [r3, #0]
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	4a18      	ldr	r2, [pc, #96]	; (80034a8 <TIM_Base_SetConfig+0x134>)
 8003448:	4293      	cmp	r3, r2
 800344a:	d013      	beq.n	8003474 <TIM_Base_SetConfig+0x100>
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	4a19      	ldr	r2, [pc, #100]	; (80034b4 <TIM_Base_SetConfig+0x140>)
 8003450:	4293      	cmp	r3, r2
 8003452:	d00f      	beq.n	8003474 <TIM_Base_SetConfig+0x100>
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	4a19      	ldr	r2, [pc, #100]	; (80034bc <TIM_Base_SetConfig+0x148>)
 8003458:	4293      	cmp	r3, r2
 800345a:	d00b      	beq.n	8003474 <TIM_Base_SetConfig+0x100>
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	4a18      	ldr	r2, [pc, #96]	; (80034c0 <TIM_Base_SetConfig+0x14c>)
 8003460:	4293      	cmp	r3, r2
 8003462:	d007      	beq.n	8003474 <TIM_Base_SetConfig+0x100>
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	4a17      	ldr	r2, [pc, #92]	; (80034c4 <TIM_Base_SetConfig+0x150>)
 8003468:	4293      	cmp	r3, r2
 800346a:	d003      	beq.n	8003474 <TIM_Base_SetConfig+0x100>
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	4a12      	ldr	r2, [pc, #72]	; (80034b8 <TIM_Base_SetConfig+0x144>)
 8003470:	4293      	cmp	r3, r2
 8003472:	d103      	bne.n	800347c <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	691a      	ldr	r2, [r3, #16]
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2201      	movs	r2, #1
 8003480:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	691b      	ldr	r3, [r3, #16]
 8003486:	f003 0301 	and.w	r3, r3, #1
 800348a:	2b01      	cmp	r3, #1
 800348c:	d105      	bne.n	800349a <TIM_Base_SetConfig+0x126>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	691b      	ldr	r3, [r3, #16]
 8003492:	f023 0201 	bic.w	r2, r3, #1
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	611a      	str	r2, [r3, #16]
  }
}
 800349a:	bf00      	nop
 800349c:	3714      	adds	r7, #20
 800349e:	46bd      	mov	sp, r7
 80034a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a4:	4770      	bx	lr
 80034a6:	bf00      	nop
 80034a8:	40012c00 	.word	0x40012c00
 80034ac:	40000400 	.word	0x40000400
 80034b0:	40000800 	.word	0x40000800
 80034b4:	40013400 	.word	0x40013400
 80034b8:	40015000 	.word	0x40015000
 80034bc:	40014000 	.word	0x40014000
 80034c0:	40014400 	.word	0x40014400
 80034c4:	40014800 	.word	0x40014800

080034c8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80034c8:	b480      	push	{r7}
 80034ca:	b083      	sub	sp, #12
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80034d0:	bf00      	nop
 80034d2:	370c      	adds	r7, #12
 80034d4:	46bd      	mov	sp, r7
 80034d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034da:	4770      	bx	lr

080034dc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80034dc:	b480      	push	{r7}
 80034de:	b083      	sub	sp, #12
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80034e4:	bf00      	nop
 80034e6:	370c      	adds	r7, #12
 80034e8:	46bd      	mov	sp, r7
 80034ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ee:	4770      	bx	lr

080034f0 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80034f0:	b480      	push	{r7}
 80034f2:	b083      	sub	sp, #12
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80034f8:	bf00      	nop
 80034fa:	370c      	adds	r7, #12
 80034fc:	46bd      	mov	sp, r7
 80034fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003502:	4770      	bx	lr

08003504 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	b082      	sub	sp, #8
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2b00      	cmp	r3, #0
 8003510:	d101      	bne.n	8003516 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003512:	2301      	movs	r3, #1
 8003514:	e040      	b.n	8003598 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800351a:	2b00      	cmp	r3, #0
 800351c:	d106      	bne.n	800352c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	2200      	movs	r2, #0
 8003522:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003526:	6878      	ldr	r0, [r7, #4]
 8003528:	f7fd fb64 	bl	8000bf4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2224      	movs	r2, #36	; 0x24
 8003530:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	681a      	ldr	r2, [r3, #0]
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f022 0201 	bic.w	r2, r2, #1
 8003540:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003546:	2b00      	cmp	r3, #0
 8003548:	d002      	beq.n	8003550 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800354a:	6878      	ldr	r0, [r7, #4]
 800354c:	f000 fd8c 	bl	8004068 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003550:	6878      	ldr	r0, [r7, #4]
 8003552:	f000 fbb5 	bl	8003cc0 <UART_SetConfig>
 8003556:	4603      	mov	r3, r0
 8003558:	2b01      	cmp	r3, #1
 800355a:	d101      	bne.n	8003560 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800355c:	2301      	movs	r3, #1
 800355e:	e01b      	b.n	8003598 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	685a      	ldr	r2, [r3, #4]
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800356e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	689a      	ldr	r2, [r3, #8]
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800357e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	681a      	ldr	r2, [r3, #0]
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f042 0201 	orr.w	r2, r2, #1
 800358e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003590:	6878      	ldr	r0, [r7, #4]
 8003592:	f000 fe0b 	bl	80041ac <UART_CheckIdleState>
 8003596:	4603      	mov	r3, r0
}
 8003598:	4618      	mov	r0, r3
 800359a:	3708      	adds	r7, #8
 800359c:	46bd      	mov	sp, r7
 800359e:	bd80      	pop	{r7, pc}

080035a0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b08a      	sub	sp, #40	; 0x28
 80035a4:	af02      	add	r7, sp, #8
 80035a6:	60f8      	str	r0, [r7, #12]
 80035a8:	60b9      	str	r1, [r7, #8]
 80035aa:	603b      	str	r3, [r7, #0]
 80035ac:	4613      	mov	r3, r2
 80035ae:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80035b4:	2b20      	cmp	r3, #32
 80035b6:	d178      	bne.n	80036aa <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 80035b8:	68bb      	ldr	r3, [r7, #8]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d002      	beq.n	80035c4 <HAL_UART_Transmit+0x24>
 80035be:	88fb      	ldrh	r3, [r7, #6]
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d101      	bne.n	80035c8 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80035c4:	2301      	movs	r3, #1
 80035c6:	e071      	b.n	80036ac <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	2200      	movs	r2, #0
 80035cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	2221      	movs	r2, #33	; 0x21
 80035d4:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80035d6:	f7fd fcd3 	bl	8000f80 <HAL_GetTick>
 80035da:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	88fa      	ldrh	r2, [r7, #6]
 80035e0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	88fa      	ldrh	r2, [r7, #6]
 80035e8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	689b      	ldr	r3, [r3, #8]
 80035f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035f4:	d108      	bne.n	8003608 <HAL_UART_Transmit+0x68>
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	691b      	ldr	r3, [r3, #16]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d104      	bne.n	8003608 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80035fe:	2300      	movs	r3, #0
 8003600:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003602:	68bb      	ldr	r3, [r7, #8]
 8003604:	61bb      	str	r3, [r7, #24]
 8003606:	e003      	b.n	8003610 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003608:	68bb      	ldr	r3, [r7, #8]
 800360a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800360c:	2300      	movs	r3, #0
 800360e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003610:	e030      	b.n	8003674 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	9300      	str	r3, [sp, #0]
 8003616:	697b      	ldr	r3, [r7, #20]
 8003618:	2200      	movs	r2, #0
 800361a:	2180      	movs	r1, #128	; 0x80
 800361c:	68f8      	ldr	r0, [r7, #12]
 800361e:	f000 fe6d 	bl	80042fc <UART_WaitOnFlagUntilTimeout>
 8003622:	4603      	mov	r3, r0
 8003624:	2b00      	cmp	r3, #0
 8003626:	d004      	beq.n	8003632 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	2220      	movs	r2, #32
 800362c:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800362e:	2303      	movs	r3, #3
 8003630:	e03c      	b.n	80036ac <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8003632:	69fb      	ldr	r3, [r7, #28]
 8003634:	2b00      	cmp	r3, #0
 8003636:	d10b      	bne.n	8003650 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003638:	69bb      	ldr	r3, [r7, #24]
 800363a:	881a      	ldrh	r2, [r3, #0]
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003644:	b292      	uxth	r2, r2
 8003646:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003648:	69bb      	ldr	r3, [r7, #24]
 800364a:	3302      	adds	r3, #2
 800364c:	61bb      	str	r3, [r7, #24]
 800364e:	e008      	b.n	8003662 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003650:	69fb      	ldr	r3, [r7, #28]
 8003652:	781a      	ldrb	r2, [r3, #0]
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	b292      	uxth	r2, r2
 800365a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800365c:	69fb      	ldr	r3, [r7, #28]
 800365e:	3301      	adds	r3, #1
 8003660:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003668:	b29b      	uxth	r3, r3
 800366a:	3b01      	subs	r3, #1
 800366c:	b29a      	uxth	r2, r3
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800367a:	b29b      	uxth	r3, r3
 800367c:	2b00      	cmp	r3, #0
 800367e:	d1c8      	bne.n	8003612 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	9300      	str	r3, [sp, #0]
 8003684:	697b      	ldr	r3, [r7, #20]
 8003686:	2200      	movs	r2, #0
 8003688:	2140      	movs	r1, #64	; 0x40
 800368a:	68f8      	ldr	r0, [r7, #12]
 800368c:	f000 fe36 	bl	80042fc <UART_WaitOnFlagUntilTimeout>
 8003690:	4603      	mov	r3, r0
 8003692:	2b00      	cmp	r3, #0
 8003694:	d004      	beq.n	80036a0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	2220      	movs	r2, #32
 800369a:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 800369c:	2303      	movs	r3, #3
 800369e:	e005      	b.n	80036ac <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	2220      	movs	r2, #32
 80036a4:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80036a6:	2300      	movs	r3, #0
 80036a8:	e000      	b.n	80036ac <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 80036aa:	2302      	movs	r3, #2
  }
}
 80036ac:	4618      	mov	r0, r3
 80036ae:	3720      	adds	r7, #32
 80036b0:	46bd      	mov	sp, r7
 80036b2:	bd80      	pop	{r7, pc}

080036b4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b0ba      	sub	sp, #232	; 0xe8
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	69db      	ldr	r3, [r3, #28]
 80036c2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	689b      	ldr	r3, [r3, #8]
 80036d6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80036da:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80036de:	f640 030f 	movw	r3, #2063	; 0x80f
 80036e2:	4013      	ands	r3, r2
 80036e4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80036e8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d115      	bne.n	800371c <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80036f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80036f4:	f003 0320 	and.w	r3, r3, #32
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d00f      	beq.n	800371c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80036fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003700:	f003 0320 	and.w	r3, r3, #32
 8003704:	2b00      	cmp	r3, #0
 8003706:	d009      	beq.n	800371c <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800370c:	2b00      	cmp	r3, #0
 800370e:	f000 82ab 	beq.w	8003c68 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003716:	6878      	ldr	r0, [r7, #4]
 8003718:	4798      	blx	r3
      }
      return;
 800371a:	e2a5      	b.n	8003c68 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800371c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003720:	2b00      	cmp	r3, #0
 8003722:	f000 8117 	beq.w	8003954 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003726:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800372a:	f003 0301 	and.w	r3, r3, #1
 800372e:	2b00      	cmp	r3, #0
 8003730:	d106      	bne.n	8003740 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003732:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8003736:	4b85      	ldr	r3, [pc, #532]	; (800394c <HAL_UART_IRQHandler+0x298>)
 8003738:	4013      	ands	r3, r2
 800373a:	2b00      	cmp	r3, #0
 800373c:	f000 810a 	beq.w	8003954 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003740:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003744:	f003 0301 	and.w	r3, r3, #1
 8003748:	2b00      	cmp	r3, #0
 800374a:	d011      	beq.n	8003770 <HAL_UART_IRQHandler+0xbc>
 800374c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003750:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003754:	2b00      	cmp	r3, #0
 8003756:	d00b      	beq.n	8003770 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	2201      	movs	r2, #1
 800375e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003766:	f043 0201 	orr.w	r2, r3, #1
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003770:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003774:	f003 0302 	and.w	r3, r3, #2
 8003778:	2b00      	cmp	r3, #0
 800377a:	d011      	beq.n	80037a0 <HAL_UART_IRQHandler+0xec>
 800377c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003780:	f003 0301 	and.w	r3, r3, #1
 8003784:	2b00      	cmp	r3, #0
 8003786:	d00b      	beq.n	80037a0 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	2202      	movs	r2, #2
 800378e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003796:	f043 0204 	orr.w	r2, r3, #4
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80037a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80037a4:	f003 0304 	and.w	r3, r3, #4
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d011      	beq.n	80037d0 <HAL_UART_IRQHandler+0x11c>
 80037ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80037b0:	f003 0301 	and.w	r3, r3, #1
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d00b      	beq.n	80037d0 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	2204      	movs	r2, #4
 80037be:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80037c6:	f043 0202 	orr.w	r2, r3, #2
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80037d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80037d4:	f003 0308 	and.w	r3, r3, #8
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d017      	beq.n	800380c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80037dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80037e0:	f003 0320 	and.w	r3, r3, #32
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d105      	bne.n	80037f4 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80037e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80037ec:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d00b      	beq.n	800380c <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	2208      	movs	r2, #8
 80037fa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003802:	f043 0208 	orr.w	r2, r3, #8
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800380c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003810:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003814:	2b00      	cmp	r3, #0
 8003816:	d012      	beq.n	800383e <HAL_UART_IRQHandler+0x18a>
 8003818:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800381c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003820:	2b00      	cmp	r3, #0
 8003822:	d00c      	beq.n	800383e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800382c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003834:	f043 0220 	orr.w	r2, r3, #32
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003844:	2b00      	cmp	r3, #0
 8003846:	f000 8211 	beq.w	8003c6c <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800384a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800384e:	f003 0320 	and.w	r3, r3, #32
 8003852:	2b00      	cmp	r3, #0
 8003854:	d00d      	beq.n	8003872 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003856:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800385a:	f003 0320 	and.w	r3, r3, #32
 800385e:	2b00      	cmp	r3, #0
 8003860:	d007      	beq.n	8003872 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003866:	2b00      	cmp	r3, #0
 8003868:	d003      	beq.n	8003872 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800386e:	6878      	ldr	r0, [r7, #4]
 8003870:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003878:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	689b      	ldr	r3, [r3, #8]
 8003882:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003886:	2b40      	cmp	r3, #64	; 0x40
 8003888:	d005      	beq.n	8003896 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800388a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800388e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003892:	2b00      	cmp	r3, #0
 8003894:	d04f      	beq.n	8003936 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003896:	6878      	ldr	r0, [r7, #4]
 8003898:	f000 fd9d 	bl	80043d6 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	689b      	ldr	r3, [r3, #8]
 80038a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038a6:	2b40      	cmp	r3, #64	; 0x40
 80038a8:	d141      	bne.n	800392e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	3308      	adds	r3, #8
 80038b0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038b4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80038b8:	e853 3f00 	ldrex	r3, [r3]
 80038bc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80038c0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80038c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80038c8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	3308      	adds	r3, #8
 80038d2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80038d6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80038da:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038de:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80038e2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80038e6:	e841 2300 	strex	r3, r2, [r1]
 80038ea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80038ee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d1d9      	bne.n	80038aa <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d013      	beq.n	8003926 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003902:	4a13      	ldr	r2, [pc, #76]	; (8003950 <HAL_UART_IRQHandler+0x29c>)
 8003904:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800390a:	4618      	mov	r0, r3
 800390c:	f7fd fc64 	bl	80011d8 <HAL_DMA_Abort_IT>
 8003910:	4603      	mov	r3, r0
 8003912:	2b00      	cmp	r3, #0
 8003914:	d017      	beq.n	8003946 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800391a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800391c:	687a      	ldr	r2, [r7, #4]
 800391e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003920:	4610      	mov	r0, r2
 8003922:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003924:	e00f      	b.n	8003946 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003926:	6878      	ldr	r0, [r7, #4]
 8003928:	f000 f9b4 	bl	8003c94 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800392c:	e00b      	b.n	8003946 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800392e:	6878      	ldr	r0, [r7, #4]
 8003930:	f000 f9b0 	bl	8003c94 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003934:	e007      	b.n	8003946 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003936:	6878      	ldr	r0, [r7, #4]
 8003938:	f000 f9ac 	bl	8003c94 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2200      	movs	r2, #0
 8003940:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8003944:	e192      	b.n	8003c6c <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003946:	bf00      	nop
    return;
 8003948:	e190      	b.n	8003c6c <HAL_UART_IRQHandler+0x5b8>
 800394a:	bf00      	nop
 800394c:	04000120 	.word	0x04000120
 8003950:	0800449f 	.word	0x0800449f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003958:	2b01      	cmp	r3, #1
 800395a:	f040 814b 	bne.w	8003bf4 <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800395e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003962:	f003 0310 	and.w	r3, r3, #16
 8003966:	2b00      	cmp	r3, #0
 8003968:	f000 8144 	beq.w	8003bf4 <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800396c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003970:	f003 0310 	and.w	r3, r3, #16
 8003974:	2b00      	cmp	r3, #0
 8003976:	f000 813d 	beq.w	8003bf4 <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	2210      	movs	r2, #16
 8003980:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	689b      	ldr	r3, [r3, #8]
 8003988:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800398c:	2b40      	cmp	r3, #64	; 0x40
 800398e:	f040 80b5 	bne.w	8003afc <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	685b      	ldr	r3, [r3, #4]
 800399a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800399e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	f000 8164 	beq.w	8003c70 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80039ae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80039b2:	429a      	cmp	r2, r3
 80039b4:	f080 815c 	bcs.w	8003c70 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80039be:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039c6:	699b      	ldr	r3, [r3, #24]
 80039c8:	2b20      	cmp	r3, #32
 80039ca:	f000 8086 	beq.w	8003ada <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039d6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80039da:	e853 3f00 	ldrex	r3, [r3]
 80039de:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80039e2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80039e6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80039ea:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	461a      	mov	r2, r3
 80039f4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80039f8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80039fc:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a00:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003a04:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003a08:	e841 2300 	strex	r3, r2, [r1]
 8003a0c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003a10:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d1da      	bne.n	80039ce <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	3308      	adds	r3, #8
 8003a1e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a20:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003a22:	e853 3f00 	ldrex	r3, [r3]
 8003a26:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003a28:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003a2a:	f023 0301 	bic.w	r3, r3, #1
 8003a2e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	3308      	adds	r3, #8
 8003a38:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003a3c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003a40:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a42:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003a44:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003a48:	e841 2300 	strex	r3, r2, [r1]
 8003a4c:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003a4e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d1e1      	bne.n	8003a18 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	3308      	adds	r3, #8
 8003a5a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a5c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003a5e:	e853 3f00 	ldrex	r3, [r3]
 8003a62:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003a64:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003a66:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003a6a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	3308      	adds	r3, #8
 8003a74:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003a78:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003a7a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a7c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003a7e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003a80:	e841 2300 	strex	r3, r2, [r1]
 8003a84:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003a86:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d1e3      	bne.n	8003a54 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2220      	movs	r2, #32
 8003a90:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2200      	movs	r2, #0
 8003a98:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003aa0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003aa2:	e853 3f00 	ldrex	r3, [r3]
 8003aa6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003aa8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003aaa:	f023 0310 	bic.w	r3, r3, #16
 8003aae:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	461a      	mov	r2, r3
 8003ab8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003abc:	65bb      	str	r3, [r7, #88]	; 0x58
 8003abe:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ac0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003ac2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003ac4:	e841 2300 	strex	r3, r2, [r1]
 8003ac8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003aca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d1e4      	bne.n	8003a9a <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	f7fd fb41 	bl	800115c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	2202      	movs	r2, #2
 8003ade:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003aec:	b29b      	uxth	r3, r3
 8003aee:	1ad3      	subs	r3, r2, r3
 8003af0:	b29b      	uxth	r3, r3
 8003af2:	4619      	mov	r1, r3
 8003af4:	6878      	ldr	r0, [r7, #4]
 8003af6:	f000 f8d7 	bl	8003ca8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003afa:	e0b9      	b.n	8003c70 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003b08:	b29b      	uxth	r3, r3
 8003b0a:	1ad3      	subs	r3, r2, r3
 8003b0c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003b16:	b29b      	uxth	r3, r3
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	f000 80ab 	beq.w	8003c74 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 8003b1e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	f000 80a6 	beq.w	8003c74 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b30:	e853 3f00 	ldrex	r3, [r3]
 8003b34:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003b36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b38:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003b3c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	461a      	mov	r2, r3
 8003b46:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003b4a:	647b      	str	r3, [r7, #68]	; 0x44
 8003b4c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b4e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003b50:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003b52:	e841 2300 	strex	r3, r2, [r1]
 8003b56:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003b58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d1e4      	bne.n	8003b28 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	3308      	adds	r3, #8
 8003b64:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b68:	e853 3f00 	ldrex	r3, [r3]
 8003b6c:	623b      	str	r3, [r7, #32]
   return(result);
 8003b6e:	6a3b      	ldr	r3, [r7, #32]
 8003b70:	f023 0301 	bic.w	r3, r3, #1
 8003b74:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	3308      	adds	r3, #8
 8003b7e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003b82:	633a      	str	r2, [r7, #48]	; 0x30
 8003b84:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b86:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003b88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b8a:	e841 2300 	strex	r3, r2, [r1]
 8003b8e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003b90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d1e3      	bne.n	8003b5e <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	2220      	movs	r2, #32
 8003b9a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bb0:	693b      	ldr	r3, [r7, #16]
 8003bb2:	e853 3f00 	ldrex	r3, [r3]
 8003bb6:	60fb      	str	r3, [r7, #12]
   return(result);
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	f023 0310 	bic.w	r3, r3, #16
 8003bbe:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	461a      	mov	r2, r3
 8003bc8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003bcc:	61fb      	str	r3, [r7, #28]
 8003bce:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bd0:	69b9      	ldr	r1, [r7, #24]
 8003bd2:	69fa      	ldr	r2, [r7, #28]
 8003bd4:	e841 2300 	strex	r3, r2, [r1]
 8003bd8:	617b      	str	r3, [r7, #20]
   return(result);
 8003bda:	697b      	ldr	r3, [r7, #20]
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d1e4      	bne.n	8003baa <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2202      	movs	r2, #2
 8003be4:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003be6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003bea:	4619      	mov	r1, r3
 8003bec:	6878      	ldr	r0, [r7, #4]
 8003bee:	f000 f85b 	bl	8003ca8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003bf2:	e03f      	b.n	8003c74 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003bf4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003bf8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d00e      	beq.n	8003c1e <HAL_UART_IRQHandler+0x56a>
 8003c00:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003c04:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d008      	beq.n	8003c1e <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003c14:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003c16:	6878      	ldr	r0, [r7, #4]
 8003c18:	f000 fc81 	bl	800451e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003c1c:	e02d      	b.n	8003c7a <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003c1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d00e      	beq.n	8003c48 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003c2a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d008      	beq.n	8003c48 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d01c      	beq.n	8003c78 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003c42:	6878      	ldr	r0, [r7, #4]
 8003c44:	4798      	blx	r3
    }
    return;
 8003c46:	e017      	b.n	8003c78 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003c48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d012      	beq.n	8003c7a <HAL_UART_IRQHandler+0x5c6>
 8003c54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d00c      	beq.n	8003c7a <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8003c60:	6878      	ldr	r0, [r7, #4]
 8003c62:	f000 fc32 	bl	80044ca <UART_EndTransmit_IT>
    return;
 8003c66:	e008      	b.n	8003c7a <HAL_UART_IRQHandler+0x5c6>
      return;
 8003c68:	bf00      	nop
 8003c6a:	e006      	b.n	8003c7a <HAL_UART_IRQHandler+0x5c6>
    return;
 8003c6c:	bf00      	nop
 8003c6e:	e004      	b.n	8003c7a <HAL_UART_IRQHandler+0x5c6>
      return;
 8003c70:	bf00      	nop
 8003c72:	e002      	b.n	8003c7a <HAL_UART_IRQHandler+0x5c6>
      return;
 8003c74:	bf00      	nop
 8003c76:	e000      	b.n	8003c7a <HAL_UART_IRQHandler+0x5c6>
    return;
 8003c78:	bf00      	nop
  }

}
 8003c7a:	37e8      	adds	r7, #232	; 0xe8
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	bd80      	pop	{r7, pc}

08003c80 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003c80:	b480      	push	{r7}
 8003c82:	b083      	sub	sp, #12
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003c88:	bf00      	nop
 8003c8a:	370c      	adds	r7, #12
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c92:	4770      	bx	lr

08003c94 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003c94:	b480      	push	{r7}
 8003c96:	b083      	sub	sp, #12
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003c9c:	bf00      	nop
 8003c9e:	370c      	adds	r7, #12
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca6:	4770      	bx	lr

08003ca8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003ca8:	b480      	push	{r7}
 8003caa:	b083      	sub	sp, #12
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
 8003cb0:	460b      	mov	r3, r1
 8003cb2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003cb4:	bf00      	nop
 8003cb6:	370c      	adds	r7, #12
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cbe:	4770      	bx	lr

08003cc0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b088      	sub	sp, #32
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003cc8:	2300      	movs	r3, #0
 8003cca:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	689a      	ldr	r2, [r3, #8]
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	691b      	ldr	r3, [r3, #16]
 8003cd4:	431a      	orrs	r2, r3
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	695b      	ldr	r3, [r3, #20]
 8003cda:	431a      	orrs	r2, r3
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	69db      	ldr	r3, [r3, #28]
 8003ce0:	4313      	orrs	r3, r2
 8003ce2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	681a      	ldr	r2, [r3, #0]
 8003cea:	4b92      	ldr	r3, [pc, #584]	; (8003f34 <UART_SetConfig+0x274>)
 8003cec:	4013      	ands	r3, r2
 8003cee:	687a      	ldr	r2, [r7, #4]
 8003cf0:	6812      	ldr	r2, [r2, #0]
 8003cf2:	6979      	ldr	r1, [r7, #20]
 8003cf4:	430b      	orrs	r3, r1
 8003cf6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	685b      	ldr	r3, [r3, #4]
 8003cfe:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	68da      	ldr	r2, [r3, #12]
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	430a      	orrs	r2, r1
 8003d0c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	699b      	ldr	r3, [r3, #24]
 8003d12:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6a1b      	ldr	r3, [r3, #32]
 8003d18:	697a      	ldr	r2, [r7, #20]
 8003d1a:	4313      	orrs	r3, r2
 8003d1c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	689b      	ldr	r3, [r3, #8]
 8003d24:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	697a      	ldr	r2, [r7, #20]
 8003d2e:	430a      	orrs	r2, r1
 8003d30:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	4a80      	ldr	r2, [pc, #512]	; (8003f38 <UART_SetConfig+0x278>)
 8003d38:	4293      	cmp	r3, r2
 8003d3a:	d120      	bne.n	8003d7e <UART_SetConfig+0xbe>
 8003d3c:	4b7f      	ldr	r3, [pc, #508]	; (8003f3c <UART_SetConfig+0x27c>)
 8003d3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d40:	f003 0303 	and.w	r3, r3, #3
 8003d44:	2b03      	cmp	r3, #3
 8003d46:	d817      	bhi.n	8003d78 <UART_SetConfig+0xb8>
 8003d48:	a201      	add	r2, pc, #4	; (adr r2, 8003d50 <UART_SetConfig+0x90>)
 8003d4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d4e:	bf00      	nop
 8003d50:	08003d61 	.word	0x08003d61
 8003d54:	08003d6d 	.word	0x08003d6d
 8003d58:	08003d73 	.word	0x08003d73
 8003d5c:	08003d67 	.word	0x08003d67
 8003d60:	2301      	movs	r3, #1
 8003d62:	77fb      	strb	r3, [r7, #31]
 8003d64:	e0b5      	b.n	8003ed2 <UART_SetConfig+0x212>
 8003d66:	2302      	movs	r3, #2
 8003d68:	77fb      	strb	r3, [r7, #31]
 8003d6a:	e0b2      	b.n	8003ed2 <UART_SetConfig+0x212>
 8003d6c:	2304      	movs	r3, #4
 8003d6e:	77fb      	strb	r3, [r7, #31]
 8003d70:	e0af      	b.n	8003ed2 <UART_SetConfig+0x212>
 8003d72:	2308      	movs	r3, #8
 8003d74:	77fb      	strb	r3, [r7, #31]
 8003d76:	e0ac      	b.n	8003ed2 <UART_SetConfig+0x212>
 8003d78:	2310      	movs	r3, #16
 8003d7a:	77fb      	strb	r3, [r7, #31]
 8003d7c:	e0a9      	b.n	8003ed2 <UART_SetConfig+0x212>
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	4a6f      	ldr	r2, [pc, #444]	; (8003f40 <UART_SetConfig+0x280>)
 8003d84:	4293      	cmp	r3, r2
 8003d86:	d124      	bne.n	8003dd2 <UART_SetConfig+0x112>
 8003d88:	4b6c      	ldr	r3, [pc, #432]	; (8003f3c <UART_SetConfig+0x27c>)
 8003d8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d8c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003d90:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003d94:	d011      	beq.n	8003dba <UART_SetConfig+0xfa>
 8003d96:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003d9a:	d817      	bhi.n	8003dcc <UART_SetConfig+0x10c>
 8003d9c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003da0:	d011      	beq.n	8003dc6 <UART_SetConfig+0x106>
 8003da2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003da6:	d811      	bhi.n	8003dcc <UART_SetConfig+0x10c>
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d003      	beq.n	8003db4 <UART_SetConfig+0xf4>
 8003dac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003db0:	d006      	beq.n	8003dc0 <UART_SetConfig+0x100>
 8003db2:	e00b      	b.n	8003dcc <UART_SetConfig+0x10c>
 8003db4:	2300      	movs	r3, #0
 8003db6:	77fb      	strb	r3, [r7, #31]
 8003db8:	e08b      	b.n	8003ed2 <UART_SetConfig+0x212>
 8003dba:	2302      	movs	r3, #2
 8003dbc:	77fb      	strb	r3, [r7, #31]
 8003dbe:	e088      	b.n	8003ed2 <UART_SetConfig+0x212>
 8003dc0:	2304      	movs	r3, #4
 8003dc2:	77fb      	strb	r3, [r7, #31]
 8003dc4:	e085      	b.n	8003ed2 <UART_SetConfig+0x212>
 8003dc6:	2308      	movs	r3, #8
 8003dc8:	77fb      	strb	r3, [r7, #31]
 8003dca:	e082      	b.n	8003ed2 <UART_SetConfig+0x212>
 8003dcc:	2310      	movs	r3, #16
 8003dce:	77fb      	strb	r3, [r7, #31]
 8003dd0:	e07f      	b.n	8003ed2 <UART_SetConfig+0x212>
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	4a5b      	ldr	r2, [pc, #364]	; (8003f44 <UART_SetConfig+0x284>)
 8003dd8:	4293      	cmp	r3, r2
 8003dda:	d124      	bne.n	8003e26 <UART_SetConfig+0x166>
 8003ddc:	4b57      	ldr	r3, [pc, #348]	; (8003f3c <UART_SetConfig+0x27c>)
 8003dde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003de0:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8003de4:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003de8:	d011      	beq.n	8003e0e <UART_SetConfig+0x14e>
 8003dea:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003dee:	d817      	bhi.n	8003e20 <UART_SetConfig+0x160>
 8003df0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003df4:	d011      	beq.n	8003e1a <UART_SetConfig+0x15a>
 8003df6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003dfa:	d811      	bhi.n	8003e20 <UART_SetConfig+0x160>
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d003      	beq.n	8003e08 <UART_SetConfig+0x148>
 8003e00:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003e04:	d006      	beq.n	8003e14 <UART_SetConfig+0x154>
 8003e06:	e00b      	b.n	8003e20 <UART_SetConfig+0x160>
 8003e08:	2300      	movs	r3, #0
 8003e0a:	77fb      	strb	r3, [r7, #31]
 8003e0c:	e061      	b.n	8003ed2 <UART_SetConfig+0x212>
 8003e0e:	2302      	movs	r3, #2
 8003e10:	77fb      	strb	r3, [r7, #31]
 8003e12:	e05e      	b.n	8003ed2 <UART_SetConfig+0x212>
 8003e14:	2304      	movs	r3, #4
 8003e16:	77fb      	strb	r3, [r7, #31]
 8003e18:	e05b      	b.n	8003ed2 <UART_SetConfig+0x212>
 8003e1a:	2308      	movs	r3, #8
 8003e1c:	77fb      	strb	r3, [r7, #31]
 8003e1e:	e058      	b.n	8003ed2 <UART_SetConfig+0x212>
 8003e20:	2310      	movs	r3, #16
 8003e22:	77fb      	strb	r3, [r7, #31]
 8003e24:	e055      	b.n	8003ed2 <UART_SetConfig+0x212>
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	4a47      	ldr	r2, [pc, #284]	; (8003f48 <UART_SetConfig+0x288>)
 8003e2c:	4293      	cmp	r3, r2
 8003e2e:	d124      	bne.n	8003e7a <UART_SetConfig+0x1ba>
 8003e30:	4b42      	ldr	r3, [pc, #264]	; (8003f3c <UART_SetConfig+0x27c>)
 8003e32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e34:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8003e38:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003e3c:	d011      	beq.n	8003e62 <UART_SetConfig+0x1a2>
 8003e3e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003e42:	d817      	bhi.n	8003e74 <UART_SetConfig+0x1b4>
 8003e44:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003e48:	d011      	beq.n	8003e6e <UART_SetConfig+0x1ae>
 8003e4a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003e4e:	d811      	bhi.n	8003e74 <UART_SetConfig+0x1b4>
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d003      	beq.n	8003e5c <UART_SetConfig+0x19c>
 8003e54:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003e58:	d006      	beq.n	8003e68 <UART_SetConfig+0x1a8>
 8003e5a:	e00b      	b.n	8003e74 <UART_SetConfig+0x1b4>
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	77fb      	strb	r3, [r7, #31]
 8003e60:	e037      	b.n	8003ed2 <UART_SetConfig+0x212>
 8003e62:	2302      	movs	r3, #2
 8003e64:	77fb      	strb	r3, [r7, #31]
 8003e66:	e034      	b.n	8003ed2 <UART_SetConfig+0x212>
 8003e68:	2304      	movs	r3, #4
 8003e6a:	77fb      	strb	r3, [r7, #31]
 8003e6c:	e031      	b.n	8003ed2 <UART_SetConfig+0x212>
 8003e6e:	2308      	movs	r3, #8
 8003e70:	77fb      	strb	r3, [r7, #31]
 8003e72:	e02e      	b.n	8003ed2 <UART_SetConfig+0x212>
 8003e74:	2310      	movs	r3, #16
 8003e76:	77fb      	strb	r3, [r7, #31]
 8003e78:	e02b      	b.n	8003ed2 <UART_SetConfig+0x212>
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	4a33      	ldr	r2, [pc, #204]	; (8003f4c <UART_SetConfig+0x28c>)
 8003e80:	4293      	cmp	r3, r2
 8003e82:	d124      	bne.n	8003ece <UART_SetConfig+0x20e>
 8003e84:	4b2d      	ldr	r3, [pc, #180]	; (8003f3c <UART_SetConfig+0x27c>)
 8003e86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e88:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8003e8c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003e90:	d011      	beq.n	8003eb6 <UART_SetConfig+0x1f6>
 8003e92:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003e96:	d817      	bhi.n	8003ec8 <UART_SetConfig+0x208>
 8003e98:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003e9c:	d011      	beq.n	8003ec2 <UART_SetConfig+0x202>
 8003e9e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003ea2:	d811      	bhi.n	8003ec8 <UART_SetConfig+0x208>
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d003      	beq.n	8003eb0 <UART_SetConfig+0x1f0>
 8003ea8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003eac:	d006      	beq.n	8003ebc <UART_SetConfig+0x1fc>
 8003eae:	e00b      	b.n	8003ec8 <UART_SetConfig+0x208>
 8003eb0:	2300      	movs	r3, #0
 8003eb2:	77fb      	strb	r3, [r7, #31]
 8003eb4:	e00d      	b.n	8003ed2 <UART_SetConfig+0x212>
 8003eb6:	2302      	movs	r3, #2
 8003eb8:	77fb      	strb	r3, [r7, #31]
 8003eba:	e00a      	b.n	8003ed2 <UART_SetConfig+0x212>
 8003ebc:	2304      	movs	r3, #4
 8003ebe:	77fb      	strb	r3, [r7, #31]
 8003ec0:	e007      	b.n	8003ed2 <UART_SetConfig+0x212>
 8003ec2:	2308      	movs	r3, #8
 8003ec4:	77fb      	strb	r3, [r7, #31]
 8003ec6:	e004      	b.n	8003ed2 <UART_SetConfig+0x212>
 8003ec8:	2310      	movs	r3, #16
 8003eca:	77fb      	strb	r3, [r7, #31]
 8003ecc:	e001      	b.n	8003ed2 <UART_SetConfig+0x212>
 8003ece:	2310      	movs	r3, #16
 8003ed0:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	69db      	ldr	r3, [r3, #28]
 8003ed6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003eda:	d16b      	bne.n	8003fb4 <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 8003edc:	7ffb      	ldrb	r3, [r7, #31]
 8003ede:	2b08      	cmp	r3, #8
 8003ee0:	d838      	bhi.n	8003f54 <UART_SetConfig+0x294>
 8003ee2:	a201      	add	r2, pc, #4	; (adr r2, 8003ee8 <UART_SetConfig+0x228>)
 8003ee4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ee8:	08003f0d 	.word	0x08003f0d
 8003eec:	08003f15 	.word	0x08003f15
 8003ef0:	08003f1d 	.word	0x08003f1d
 8003ef4:	08003f55 	.word	0x08003f55
 8003ef8:	08003f23 	.word	0x08003f23
 8003efc:	08003f55 	.word	0x08003f55
 8003f00:	08003f55 	.word	0x08003f55
 8003f04:	08003f55 	.word	0x08003f55
 8003f08:	08003f2b 	.word	0x08003f2b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003f0c:	f7fe fd98 	bl	8002a40 <HAL_RCC_GetPCLK1Freq>
 8003f10:	61b8      	str	r0, [r7, #24]
        break;
 8003f12:	e024      	b.n	8003f5e <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003f14:	f7fe fdb6 	bl	8002a84 <HAL_RCC_GetPCLK2Freq>
 8003f18:	61b8      	str	r0, [r7, #24]
        break;
 8003f1a:	e020      	b.n	8003f5e <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003f1c:	4b0c      	ldr	r3, [pc, #48]	; (8003f50 <UART_SetConfig+0x290>)
 8003f1e:	61bb      	str	r3, [r7, #24]
        break;
 8003f20:	e01d      	b.n	8003f5e <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003f22:	f7fe fd2d 	bl	8002980 <HAL_RCC_GetSysClockFreq>
 8003f26:	61b8      	str	r0, [r7, #24]
        break;
 8003f28:	e019      	b.n	8003f5e <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003f2a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003f2e:	61bb      	str	r3, [r7, #24]
        break;
 8003f30:	e015      	b.n	8003f5e <UART_SetConfig+0x29e>
 8003f32:	bf00      	nop
 8003f34:	efff69f3 	.word	0xefff69f3
 8003f38:	40013800 	.word	0x40013800
 8003f3c:	40021000 	.word	0x40021000
 8003f40:	40004400 	.word	0x40004400
 8003f44:	40004800 	.word	0x40004800
 8003f48:	40004c00 	.word	0x40004c00
 8003f4c:	40005000 	.word	0x40005000
 8003f50:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 8003f54:	2300      	movs	r3, #0
 8003f56:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003f58:	2301      	movs	r3, #1
 8003f5a:	77bb      	strb	r3, [r7, #30]
        break;
 8003f5c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003f5e:	69bb      	ldr	r3, [r7, #24]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d073      	beq.n	800404c <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003f64:	69bb      	ldr	r3, [r7, #24]
 8003f66:	005a      	lsls	r2, r3, #1
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	685b      	ldr	r3, [r3, #4]
 8003f6c:	085b      	lsrs	r3, r3, #1
 8003f6e:	441a      	add	r2, r3
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	685b      	ldr	r3, [r3, #4]
 8003f74:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f78:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003f7a:	693b      	ldr	r3, [r7, #16]
 8003f7c:	2b0f      	cmp	r3, #15
 8003f7e:	d916      	bls.n	8003fae <UART_SetConfig+0x2ee>
 8003f80:	693b      	ldr	r3, [r7, #16]
 8003f82:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f86:	d212      	bcs.n	8003fae <UART_SetConfig+0x2ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003f88:	693b      	ldr	r3, [r7, #16]
 8003f8a:	b29b      	uxth	r3, r3
 8003f8c:	f023 030f 	bic.w	r3, r3, #15
 8003f90:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003f92:	693b      	ldr	r3, [r7, #16]
 8003f94:	085b      	lsrs	r3, r3, #1
 8003f96:	b29b      	uxth	r3, r3
 8003f98:	f003 0307 	and.w	r3, r3, #7
 8003f9c:	b29a      	uxth	r2, r3
 8003f9e:	89fb      	ldrh	r3, [r7, #14]
 8003fa0:	4313      	orrs	r3, r2
 8003fa2:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	89fa      	ldrh	r2, [r7, #14]
 8003faa:	60da      	str	r2, [r3, #12]
 8003fac:	e04e      	b.n	800404c <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8003fae:	2301      	movs	r3, #1
 8003fb0:	77bb      	strb	r3, [r7, #30]
 8003fb2:	e04b      	b.n	800404c <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003fb4:	7ffb      	ldrb	r3, [r7, #31]
 8003fb6:	2b08      	cmp	r3, #8
 8003fb8:	d827      	bhi.n	800400a <UART_SetConfig+0x34a>
 8003fba:	a201      	add	r2, pc, #4	; (adr r2, 8003fc0 <UART_SetConfig+0x300>)
 8003fbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fc0:	08003fe5 	.word	0x08003fe5
 8003fc4:	08003fed 	.word	0x08003fed
 8003fc8:	08003ff5 	.word	0x08003ff5
 8003fcc:	0800400b 	.word	0x0800400b
 8003fd0:	08003ffb 	.word	0x08003ffb
 8003fd4:	0800400b 	.word	0x0800400b
 8003fd8:	0800400b 	.word	0x0800400b
 8003fdc:	0800400b 	.word	0x0800400b
 8003fe0:	08004003 	.word	0x08004003
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003fe4:	f7fe fd2c 	bl	8002a40 <HAL_RCC_GetPCLK1Freq>
 8003fe8:	61b8      	str	r0, [r7, #24]
        break;
 8003fea:	e013      	b.n	8004014 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003fec:	f7fe fd4a 	bl	8002a84 <HAL_RCC_GetPCLK2Freq>
 8003ff0:	61b8      	str	r0, [r7, #24]
        break;
 8003ff2:	e00f      	b.n	8004014 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003ff4:	4b1b      	ldr	r3, [pc, #108]	; (8004064 <UART_SetConfig+0x3a4>)
 8003ff6:	61bb      	str	r3, [r7, #24]
        break;
 8003ff8:	e00c      	b.n	8004014 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003ffa:	f7fe fcc1 	bl	8002980 <HAL_RCC_GetSysClockFreq>
 8003ffe:	61b8      	str	r0, [r7, #24]
        break;
 8004000:	e008      	b.n	8004014 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004002:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004006:	61bb      	str	r3, [r7, #24]
        break;
 8004008:	e004      	b.n	8004014 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 800400a:	2300      	movs	r3, #0
 800400c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800400e:	2301      	movs	r3, #1
 8004010:	77bb      	strb	r3, [r7, #30]
        break;
 8004012:	bf00      	nop
    }

    if (pclk != 0U)
 8004014:	69bb      	ldr	r3, [r7, #24]
 8004016:	2b00      	cmp	r3, #0
 8004018:	d018      	beq.n	800404c <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	685b      	ldr	r3, [r3, #4]
 800401e:	085a      	lsrs	r2, r3, #1
 8004020:	69bb      	ldr	r3, [r7, #24]
 8004022:	441a      	add	r2, r3
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	685b      	ldr	r3, [r3, #4]
 8004028:	fbb2 f3f3 	udiv	r3, r2, r3
 800402c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800402e:	693b      	ldr	r3, [r7, #16]
 8004030:	2b0f      	cmp	r3, #15
 8004032:	d909      	bls.n	8004048 <UART_SetConfig+0x388>
 8004034:	693b      	ldr	r3, [r7, #16]
 8004036:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800403a:	d205      	bcs.n	8004048 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800403c:	693b      	ldr	r3, [r7, #16]
 800403e:	b29a      	uxth	r2, r3
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	60da      	str	r2, [r3, #12]
 8004046:	e001      	b.n	800404c <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8004048:	2301      	movs	r3, #1
 800404a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2200      	movs	r2, #0
 8004050:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	2200      	movs	r2, #0
 8004056:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004058:	7fbb      	ldrb	r3, [r7, #30]
}
 800405a:	4618      	mov	r0, r3
 800405c:	3720      	adds	r7, #32
 800405e:	46bd      	mov	sp, r7
 8004060:	bd80      	pop	{r7, pc}
 8004062:	bf00      	nop
 8004064:	007a1200 	.word	0x007a1200

08004068 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004068:	b480      	push	{r7}
 800406a:	b083      	sub	sp, #12
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004074:	f003 0308 	and.w	r3, r3, #8
 8004078:	2b00      	cmp	r3, #0
 800407a:	d00a      	beq.n	8004092 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	685b      	ldr	r3, [r3, #4]
 8004082:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	430a      	orrs	r2, r1
 8004090:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004096:	f003 0301 	and.w	r3, r3, #1
 800409a:	2b00      	cmp	r3, #0
 800409c:	d00a      	beq.n	80040b4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	685b      	ldr	r3, [r3, #4]
 80040a4:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	430a      	orrs	r2, r1
 80040b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040b8:	f003 0302 	and.w	r3, r3, #2
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d00a      	beq.n	80040d6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	685b      	ldr	r3, [r3, #4]
 80040c6:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	430a      	orrs	r2, r1
 80040d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040da:	f003 0304 	and.w	r3, r3, #4
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d00a      	beq.n	80040f8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	685b      	ldr	r3, [r3, #4]
 80040e8:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	430a      	orrs	r2, r1
 80040f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040fc:	f003 0310 	and.w	r3, r3, #16
 8004100:	2b00      	cmp	r3, #0
 8004102:	d00a      	beq.n	800411a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	689b      	ldr	r3, [r3, #8]
 800410a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	430a      	orrs	r2, r1
 8004118:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800411e:	f003 0320 	and.w	r3, r3, #32
 8004122:	2b00      	cmp	r3, #0
 8004124:	d00a      	beq.n	800413c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	689b      	ldr	r3, [r3, #8]
 800412c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	430a      	orrs	r2, r1
 800413a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004140:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004144:	2b00      	cmp	r3, #0
 8004146:	d01a      	beq.n	800417e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	685b      	ldr	r3, [r3, #4]
 800414e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	430a      	orrs	r2, r1
 800415c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004162:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004166:	d10a      	bne.n	800417e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	685b      	ldr	r3, [r3, #4]
 800416e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	430a      	orrs	r2, r1
 800417c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004182:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004186:	2b00      	cmp	r3, #0
 8004188:	d00a      	beq.n	80041a0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	685b      	ldr	r3, [r3, #4]
 8004190:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	430a      	orrs	r2, r1
 800419e:	605a      	str	r2, [r3, #4]
  }
}
 80041a0:	bf00      	nop
 80041a2:	370c      	adds	r7, #12
 80041a4:	46bd      	mov	sp, r7
 80041a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041aa:	4770      	bx	lr

080041ac <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	b098      	sub	sp, #96	; 0x60
 80041b0:	af02      	add	r7, sp, #8
 80041b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2200      	movs	r2, #0
 80041b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80041bc:	f7fc fee0 	bl	8000f80 <HAL_GetTick>
 80041c0:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f003 0308 	and.w	r3, r3, #8
 80041cc:	2b08      	cmp	r3, #8
 80041ce:	d12e      	bne.n	800422e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80041d0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80041d4:	9300      	str	r3, [sp, #0]
 80041d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80041d8:	2200      	movs	r2, #0
 80041da:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80041de:	6878      	ldr	r0, [r7, #4]
 80041e0:	f000 f88c 	bl	80042fc <UART_WaitOnFlagUntilTimeout>
 80041e4:	4603      	mov	r3, r0
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d021      	beq.n	800422e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041f2:	e853 3f00 	ldrex	r3, [r3]
 80041f6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80041f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041fa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80041fe:	653b      	str	r3, [r7, #80]	; 0x50
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	461a      	mov	r2, r3
 8004206:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004208:	647b      	str	r3, [r7, #68]	; 0x44
 800420a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800420c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800420e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004210:	e841 2300 	strex	r3, r2, [r1]
 8004214:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004216:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004218:	2b00      	cmp	r3, #0
 800421a:	d1e6      	bne.n	80041ea <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2220      	movs	r2, #32
 8004220:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	2200      	movs	r2, #0
 8004226:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800422a:	2303      	movs	r3, #3
 800422c:	e062      	b.n	80042f4 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f003 0304 	and.w	r3, r3, #4
 8004238:	2b04      	cmp	r3, #4
 800423a:	d149      	bne.n	80042d0 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800423c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004240:	9300      	str	r3, [sp, #0]
 8004242:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004244:	2200      	movs	r2, #0
 8004246:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800424a:	6878      	ldr	r0, [r7, #4]
 800424c:	f000 f856 	bl	80042fc <UART_WaitOnFlagUntilTimeout>
 8004250:	4603      	mov	r3, r0
 8004252:	2b00      	cmp	r3, #0
 8004254:	d03c      	beq.n	80042d0 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800425c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800425e:	e853 3f00 	ldrex	r3, [r3]
 8004262:	623b      	str	r3, [r7, #32]
   return(result);
 8004264:	6a3b      	ldr	r3, [r7, #32]
 8004266:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800426a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	461a      	mov	r2, r3
 8004272:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004274:	633b      	str	r3, [r7, #48]	; 0x30
 8004276:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004278:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800427a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800427c:	e841 2300 	strex	r3, r2, [r1]
 8004280:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004282:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004284:	2b00      	cmp	r3, #0
 8004286:	d1e6      	bne.n	8004256 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	3308      	adds	r3, #8
 800428e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004290:	693b      	ldr	r3, [r7, #16]
 8004292:	e853 3f00 	ldrex	r3, [r3]
 8004296:	60fb      	str	r3, [r7, #12]
   return(result);
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	f023 0301 	bic.w	r3, r3, #1
 800429e:	64bb      	str	r3, [r7, #72]	; 0x48
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	3308      	adds	r3, #8
 80042a6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80042a8:	61fa      	str	r2, [r7, #28]
 80042aa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042ac:	69b9      	ldr	r1, [r7, #24]
 80042ae:	69fa      	ldr	r2, [r7, #28]
 80042b0:	e841 2300 	strex	r3, r2, [r1]
 80042b4:	617b      	str	r3, [r7, #20]
   return(result);
 80042b6:	697b      	ldr	r3, [r7, #20]
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d1e5      	bne.n	8004288 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2220      	movs	r2, #32
 80042c0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2200      	movs	r2, #0
 80042c8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80042cc:	2303      	movs	r3, #3
 80042ce:	e011      	b.n	80042f4 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2220      	movs	r2, #32
 80042d4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	2220      	movs	r2, #32
 80042da:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	2200      	movs	r2, #0
 80042e2:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2200      	movs	r2, #0
 80042e8:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	2200      	movs	r2, #0
 80042ee:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80042f2:	2300      	movs	r3, #0
}
 80042f4:	4618      	mov	r0, r3
 80042f6:	3758      	adds	r7, #88	; 0x58
 80042f8:	46bd      	mov	sp, r7
 80042fa:	bd80      	pop	{r7, pc}

080042fc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	b084      	sub	sp, #16
 8004300:	af00      	add	r7, sp, #0
 8004302:	60f8      	str	r0, [r7, #12]
 8004304:	60b9      	str	r1, [r7, #8]
 8004306:	603b      	str	r3, [r7, #0]
 8004308:	4613      	mov	r3, r2
 800430a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800430c:	e04f      	b.n	80043ae <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800430e:	69bb      	ldr	r3, [r7, #24]
 8004310:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004314:	d04b      	beq.n	80043ae <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004316:	f7fc fe33 	bl	8000f80 <HAL_GetTick>
 800431a:	4602      	mov	r2, r0
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	1ad3      	subs	r3, r2, r3
 8004320:	69ba      	ldr	r2, [r7, #24]
 8004322:	429a      	cmp	r2, r3
 8004324:	d302      	bcc.n	800432c <UART_WaitOnFlagUntilTimeout+0x30>
 8004326:	69bb      	ldr	r3, [r7, #24]
 8004328:	2b00      	cmp	r3, #0
 800432a:	d101      	bne.n	8004330 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800432c:	2303      	movs	r3, #3
 800432e:	e04e      	b.n	80043ce <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f003 0304 	and.w	r3, r3, #4
 800433a:	2b00      	cmp	r3, #0
 800433c:	d037      	beq.n	80043ae <UART_WaitOnFlagUntilTimeout+0xb2>
 800433e:	68bb      	ldr	r3, [r7, #8]
 8004340:	2b80      	cmp	r3, #128	; 0x80
 8004342:	d034      	beq.n	80043ae <UART_WaitOnFlagUntilTimeout+0xb2>
 8004344:	68bb      	ldr	r3, [r7, #8]
 8004346:	2b40      	cmp	r3, #64	; 0x40
 8004348:	d031      	beq.n	80043ae <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	69db      	ldr	r3, [r3, #28]
 8004350:	f003 0308 	and.w	r3, r3, #8
 8004354:	2b08      	cmp	r3, #8
 8004356:	d110      	bne.n	800437a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	2208      	movs	r2, #8
 800435e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004360:	68f8      	ldr	r0, [r7, #12]
 8004362:	f000 f838 	bl	80043d6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	2208      	movs	r2, #8
 800436a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	2200      	movs	r2, #0
 8004372:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8004376:	2301      	movs	r3, #1
 8004378:	e029      	b.n	80043ce <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	69db      	ldr	r3, [r3, #28]
 8004380:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004384:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004388:	d111      	bne.n	80043ae <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004392:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004394:	68f8      	ldr	r0, [r7, #12]
 8004396:	f000 f81e 	bl	80043d6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	2220      	movs	r2, #32
 800439e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	2200      	movs	r2, #0
 80043a6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80043aa:	2303      	movs	r3, #3
 80043ac:	e00f      	b.n	80043ce <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	69da      	ldr	r2, [r3, #28]
 80043b4:	68bb      	ldr	r3, [r7, #8]
 80043b6:	4013      	ands	r3, r2
 80043b8:	68ba      	ldr	r2, [r7, #8]
 80043ba:	429a      	cmp	r2, r3
 80043bc:	bf0c      	ite	eq
 80043be:	2301      	moveq	r3, #1
 80043c0:	2300      	movne	r3, #0
 80043c2:	b2db      	uxtb	r3, r3
 80043c4:	461a      	mov	r2, r3
 80043c6:	79fb      	ldrb	r3, [r7, #7]
 80043c8:	429a      	cmp	r2, r3
 80043ca:	d0a0      	beq.n	800430e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80043cc:	2300      	movs	r3, #0
}
 80043ce:	4618      	mov	r0, r3
 80043d0:	3710      	adds	r7, #16
 80043d2:	46bd      	mov	sp, r7
 80043d4:	bd80      	pop	{r7, pc}

080043d6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80043d6:	b480      	push	{r7}
 80043d8:	b095      	sub	sp, #84	; 0x54
 80043da:	af00      	add	r7, sp, #0
 80043dc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043e6:	e853 3f00 	ldrex	r3, [r3]
 80043ea:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80043ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043ee:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80043f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	461a      	mov	r2, r3
 80043fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80043fc:	643b      	str	r3, [r7, #64]	; 0x40
 80043fe:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004400:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004402:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004404:	e841 2300 	strex	r3, r2, [r1]
 8004408:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800440a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800440c:	2b00      	cmp	r3, #0
 800440e:	d1e6      	bne.n	80043de <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	3308      	adds	r3, #8
 8004416:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004418:	6a3b      	ldr	r3, [r7, #32]
 800441a:	e853 3f00 	ldrex	r3, [r3]
 800441e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004420:	69fb      	ldr	r3, [r7, #28]
 8004422:	f023 0301 	bic.w	r3, r3, #1
 8004426:	64bb      	str	r3, [r7, #72]	; 0x48
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	3308      	adds	r3, #8
 800442e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004430:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004432:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004434:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004436:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004438:	e841 2300 	strex	r3, r2, [r1]
 800443c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800443e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004440:	2b00      	cmp	r3, #0
 8004442:	d1e5      	bne.n	8004410 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004448:	2b01      	cmp	r3, #1
 800444a:	d118      	bne.n	800447e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	e853 3f00 	ldrex	r3, [r3]
 8004458:	60bb      	str	r3, [r7, #8]
   return(result);
 800445a:	68bb      	ldr	r3, [r7, #8]
 800445c:	f023 0310 	bic.w	r3, r3, #16
 8004460:	647b      	str	r3, [r7, #68]	; 0x44
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	461a      	mov	r2, r3
 8004468:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800446a:	61bb      	str	r3, [r7, #24]
 800446c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800446e:	6979      	ldr	r1, [r7, #20]
 8004470:	69ba      	ldr	r2, [r7, #24]
 8004472:	e841 2300 	strex	r3, r2, [r1]
 8004476:	613b      	str	r3, [r7, #16]
   return(result);
 8004478:	693b      	ldr	r3, [r7, #16]
 800447a:	2b00      	cmp	r3, #0
 800447c:	d1e6      	bne.n	800444c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	2220      	movs	r2, #32
 8004482:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	2200      	movs	r2, #0
 800448a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2200      	movs	r2, #0
 8004490:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004492:	bf00      	nop
 8004494:	3754      	adds	r7, #84	; 0x54
 8004496:	46bd      	mov	sp, r7
 8004498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449c:	4770      	bx	lr

0800449e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800449e:	b580      	push	{r7, lr}
 80044a0:	b084      	sub	sp, #16
 80044a2:	af00      	add	r7, sp, #0
 80044a4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044aa:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	2200      	movs	r2, #0
 80044b0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	2200      	movs	r2, #0
 80044b8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80044bc:	68f8      	ldr	r0, [r7, #12]
 80044be:	f7ff fbe9 	bl	8003c94 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80044c2:	bf00      	nop
 80044c4:	3710      	adds	r7, #16
 80044c6:	46bd      	mov	sp, r7
 80044c8:	bd80      	pop	{r7, pc}

080044ca <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80044ca:	b580      	push	{r7, lr}
 80044cc:	b088      	sub	sp, #32
 80044ce:	af00      	add	r7, sp, #0
 80044d0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	e853 3f00 	ldrex	r3, [r3]
 80044de:	60bb      	str	r3, [r7, #8]
   return(result);
 80044e0:	68bb      	ldr	r3, [r7, #8]
 80044e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80044e6:	61fb      	str	r3, [r7, #28]
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	461a      	mov	r2, r3
 80044ee:	69fb      	ldr	r3, [r7, #28]
 80044f0:	61bb      	str	r3, [r7, #24]
 80044f2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044f4:	6979      	ldr	r1, [r7, #20]
 80044f6:	69ba      	ldr	r2, [r7, #24]
 80044f8:	e841 2300 	strex	r3, r2, [r1]
 80044fc:	613b      	str	r3, [r7, #16]
   return(result);
 80044fe:	693b      	ldr	r3, [r7, #16]
 8004500:	2b00      	cmp	r3, #0
 8004502:	d1e6      	bne.n	80044d2 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2220      	movs	r2, #32
 8004508:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	2200      	movs	r2, #0
 800450e:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004510:	6878      	ldr	r0, [r7, #4]
 8004512:	f7ff fbb5 	bl	8003c80 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004516:	bf00      	nop
 8004518:	3720      	adds	r7, #32
 800451a:	46bd      	mov	sp, r7
 800451c:	bd80      	pop	{r7, pc}

0800451e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800451e:	b480      	push	{r7}
 8004520:	b083      	sub	sp, #12
 8004522:	af00      	add	r7, sp, #0
 8004524:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004526:	bf00      	nop
 8004528:	370c      	adds	r7, #12
 800452a:	46bd      	mov	sp, r7
 800452c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004530:	4770      	bx	lr

08004532 <HAL_WWDG_Init>:
  * @param  hwwdg  pointer to a WWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified WWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_WWDG_Init(WWDG_HandleTypeDef *hwwdg)
{
 8004532:	b580      	push	{r7, lr}
 8004534:	b082      	sub	sp, #8
 8004536:	af00      	add	r7, sp, #0
 8004538:	6078      	str	r0, [r7, #4]
  /* Check the WWDG handle allocation */
  if (hwwdg == NULL)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	2b00      	cmp	r3, #0
 800453e:	d101      	bne.n	8004544 <HAL_WWDG_Init+0x12>
  {
    return HAL_ERROR;
 8004540:	2301      	movs	r3, #1
 8004542:	e016      	b.n	8004572 <HAL_WWDG_Init+0x40>

  /* Init the low level hardware */
  hwwdg->MspInitCallback(hwwdg);
#else
  /* Init the low level hardware */
  HAL_WWDG_MspInit(hwwdg);
 8004544:	6878      	ldr	r0, [r7, #4]
 8004546:	f7fc fbd9 	bl	8000cfc <HAL_WWDG_MspInit>
#endif /* USE_HAL_WWDG_REGISTER_CALLBACKS */

  /* Set WWDG Counter */
  WRITE_REG(hwwdg->Instance->CR, (WWDG_CR_WDGA | hwwdg->Init.Counter));
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	68da      	ldr	r2, [r3, #12]
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004556:	601a      	str	r2, [r3, #0]

  /* Set WWDG Prescaler and Window */
  WRITE_REG(hwwdg->Instance->CFR, (hwwdg->Init.EWIMode | hwwdg->Init.Prescaler | hwwdg->Init.Window));
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	691a      	ldr	r2, [r3, #16]
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	685b      	ldr	r3, [r3, #4]
 8004560:	ea42 0103 	orr.w	r1, r2, r3
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	689a      	ldr	r2, [r3, #8]
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	430a      	orrs	r2, r1
 800456e:	605a      	str	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8004570:	2300      	movs	r3, #0
}
 8004572:	4618      	mov	r0, r3
 8004574:	3708      	adds	r7, #8
 8004576:	46bd      	mov	sp, r7
 8004578:	bd80      	pop	{r7, pc}

0800457a <HAL_WWDG_Refresh>:
  * @param  hwwdg  pointer to a WWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified WWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_WWDG_Refresh(WWDG_HandleTypeDef *hwwdg)
{
 800457a:	b480      	push	{r7}
 800457c:	b083      	sub	sp, #12
 800457e:	af00      	add	r7, sp, #0
 8004580:	6078      	str	r0, [r7, #4]
  /* Write to WWDG CR the WWDG Counter value to refresh with */
  WRITE_REG(hwwdg->Instance->CR, (hwwdg->Init.Counter));
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	687a      	ldr	r2, [r7, #4]
 8004588:	68d2      	ldr	r2, [r2, #12]
 800458a:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800458c:	2300      	movs	r3, #0
}
 800458e:	4618      	mov	r0, r3
 8004590:	370c      	adds	r7, #12
 8004592:	46bd      	mov	sp, r7
 8004594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004598:	4770      	bx	lr

0800459a <LL_TIM_SetPrescaler>:
{
 800459a:	b480      	push	{r7}
 800459c:	b083      	sub	sp, #12
 800459e:	af00      	add	r7, sp, #0
 80045a0:	6078      	str	r0, [r7, #4]
 80045a2:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	683a      	ldr	r2, [r7, #0]
 80045a8:	629a      	str	r2, [r3, #40]	; 0x28
}
 80045aa:	bf00      	nop
 80045ac:	370c      	adds	r7, #12
 80045ae:	46bd      	mov	sp, r7
 80045b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b4:	4770      	bx	lr

080045b6 <LL_TIM_SetAutoReload>:
{
 80045b6:	b480      	push	{r7}
 80045b8:	b083      	sub	sp, #12
 80045ba:	af00      	add	r7, sp, #0
 80045bc:	6078      	str	r0, [r7, #4]
 80045be:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	683a      	ldr	r2, [r7, #0]
 80045c4:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80045c6:	bf00      	nop
 80045c8:	370c      	adds	r7, #12
 80045ca:	46bd      	mov	sp, r7
 80045cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d0:	4770      	bx	lr

080045d2 <LL_TIM_SetRepetitionCounter>:
{
 80045d2:	b480      	push	{r7}
 80045d4:	b083      	sub	sp, #12
 80045d6:	af00      	add	r7, sp, #0
 80045d8:	6078      	str	r0, [r7, #4]
 80045da:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	683a      	ldr	r2, [r7, #0]
 80045e0:	631a      	str	r2, [r3, #48]	; 0x30
}
 80045e2:	bf00      	nop
 80045e4:	370c      	adds	r7, #12
 80045e6:	46bd      	mov	sp, r7
 80045e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ec:	4770      	bx	lr

080045ee <LL_TIM_GenerateEvent_UPDATE>:
{
 80045ee:	b480      	push	{r7}
 80045f0:	b083      	sub	sp, #12
 80045f2:	af00      	add	r7, sp, #0
 80045f4:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	695b      	ldr	r3, [r3, #20]
 80045fa:	f043 0201 	orr.w	r2, r3, #1
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	615a      	str	r2, [r3, #20]
}
 8004602:	bf00      	nop
 8004604:	370c      	adds	r7, #12
 8004606:	46bd      	mov	sp, r7
 8004608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460c:	4770      	bx	lr
	...

08004610 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, const LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8004610:	b580      	push	{r7, lr}
 8004612:	b084      	sub	sp, #16
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]
 8004618:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	4a3f      	ldr	r2, [pc, #252]	; (8004720 <LL_TIM_Init+0x110>)
 8004624:	4293      	cmp	r3, r2
 8004626:	d013      	beq.n	8004650 <LL_TIM_Init+0x40>
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800462e:	d00f      	beq.n	8004650 <LL_TIM_Init+0x40>
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	4a3c      	ldr	r2, [pc, #240]	; (8004724 <LL_TIM_Init+0x114>)
 8004634:	4293      	cmp	r3, r2
 8004636:	d00b      	beq.n	8004650 <LL_TIM_Init+0x40>
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	4a3b      	ldr	r2, [pc, #236]	; (8004728 <LL_TIM_Init+0x118>)
 800463c:	4293      	cmp	r3, r2
 800463e:	d007      	beq.n	8004650 <LL_TIM_Init+0x40>
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	4a3a      	ldr	r2, [pc, #232]	; (800472c <LL_TIM_Init+0x11c>)
 8004644:	4293      	cmp	r3, r2
 8004646:	d003      	beq.n	8004650 <LL_TIM_Init+0x40>
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	4a39      	ldr	r2, [pc, #228]	; (8004730 <LL_TIM_Init+0x120>)
 800464c:	4293      	cmp	r3, r2
 800464e:	d106      	bne.n	800465e <LL_TIM_Init+0x4e>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	685b      	ldr	r3, [r3, #4]
 800465a:	4313      	orrs	r3, r2
 800465c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	4a2f      	ldr	r2, [pc, #188]	; (8004720 <LL_TIM_Init+0x110>)
 8004662:	4293      	cmp	r3, r2
 8004664:	d01f      	beq.n	80046a6 <LL_TIM_Init+0x96>
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800466c:	d01b      	beq.n	80046a6 <LL_TIM_Init+0x96>
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	4a2c      	ldr	r2, [pc, #176]	; (8004724 <LL_TIM_Init+0x114>)
 8004672:	4293      	cmp	r3, r2
 8004674:	d017      	beq.n	80046a6 <LL_TIM_Init+0x96>
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	4a2b      	ldr	r2, [pc, #172]	; (8004728 <LL_TIM_Init+0x118>)
 800467a:	4293      	cmp	r3, r2
 800467c:	d013      	beq.n	80046a6 <LL_TIM_Init+0x96>
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	4a2a      	ldr	r2, [pc, #168]	; (800472c <LL_TIM_Init+0x11c>)
 8004682:	4293      	cmp	r3, r2
 8004684:	d00f      	beq.n	80046a6 <LL_TIM_Init+0x96>
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	4a2a      	ldr	r2, [pc, #168]	; (8004734 <LL_TIM_Init+0x124>)
 800468a:	4293      	cmp	r3, r2
 800468c:	d00b      	beq.n	80046a6 <LL_TIM_Init+0x96>
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	4a29      	ldr	r2, [pc, #164]	; (8004738 <LL_TIM_Init+0x128>)
 8004692:	4293      	cmp	r3, r2
 8004694:	d007      	beq.n	80046a6 <LL_TIM_Init+0x96>
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	4a28      	ldr	r2, [pc, #160]	; (800473c <LL_TIM_Init+0x12c>)
 800469a:	4293      	cmp	r3, r2
 800469c:	d003      	beq.n	80046a6 <LL_TIM_Init+0x96>
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	4a23      	ldr	r2, [pc, #140]	; (8004730 <LL_TIM_Init+0x120>)
 80046a2:	4293      	cmp	r3, r2
 80046a4:	d106      	bne.n	80046b4 <LL_TIM_Init+0xa4>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	68db      	ldr	r3, [r3, #12]
 80046b0:	4313      	orrs	r3, r2
 80046b2:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	68fa      	ldr	r2, [r7, #12]
 80046b8:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	689b      	ldr	r3, [r3, #8]
 80046be:	4619      	mov	r1, r3
 80046c0:	6878      	ldr	r0, [r7, #4]
 80046c2:	f7ff ff78 	bl	80045b6 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 80046c6:	683b      	ldr	r3, [r7, #0]
 80046c8:	881b      	ldrh	r3, [r3, #0]
 80046ca:	4619      	mov	r1, r3
 80046cc:	6878      	ldr	r0, [r7, #4]
 80046ce:	f7ff ff64 	bl	800459a <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	4a12      	ldr	r2, [pc, #72]	; (8004720 <LL_TIM_Init+0x110>)
 80046d6:	4293      	cmp	r3, r2
 80046d8:	d013      	beq.n	8004702 <LL_TIM_Init+0xf2>
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	4a13      	ldr	r2, [pc, #76]	; (800472c <LL_TIM_Init+0x11c>)
 80046de:	4293      	cmp	r3, r2
 80046e0:	d00f      	beq.n	8004702 <LL_TIM_Init+0xf2>
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	4a13      	ldr	r2, [pc, #76]	; (8004734 <LL_TIM_Init+0x124>)
 80046e6:	4293      	cmp	r3, r2
 80046e8:	d00b      	beq.n	8004702 <LL_TIM_Init+0xf2>
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	4a12      	ldr	r2, [pc, #72]	; (8004738 <LL_TIM_Init+0x128>)
 80046ee:	4293      	cmp	r3, r2
 80046f0:	d007      	beq.n	8004702 <LL_TIM_Init+0xf2>
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	4a11      	ldr	r2, [pc, #68]	; (800473c <LL_TIM_Init+0x12c>)
 80046f6:	4293      	cmp	r3, r2
 80046f8:	d003      	beq.n	8004702 <LL_TIM_Init+0xf2>
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	4a0c      	ldr	r2, [pc, #48]	; (8004730 <LL_TIM_Init+0x120>)
 80046fe:	4293      	cmp	r3, r2
 8004700:	d105      	bne.n	800470e <LL_TIM_Init+0xfe>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	691b      	ldr	r3, [r3, #16]
 8004706:	4619      	mov	r1, r3
 8004708:	6878      	ldr	r0, [r7, #4]
 800470a:	f7ff ff62 	bl	80045d2 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 800470e:	6878      	ldr	r0, [r7, #4]
 8004710:	f7ff ff6d 	bl	80045ee <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8004714:	2300      	movs	r3, #0
}
 8004716:	4618      	mov	r0, r3
 8004718:	3710      	adds	r7, #16
 800471a:	46bd      	mov	sp, r7
 800471c:	bd80      	pop	{r7, pc}
 800471e:	bf00      	nop
 8004720:	40012c00 	.word	0x40012c00
 8004724:	40000400 	.word	0x40000400
 8004728:	40000800 	.word	0x40000800
 800472c:	40013400 	.word	0x40013400
 8004730:	40015000 	.word	0x40015000
 8004734:	40014000 	.word	0x40014000
 8004738:	40014400 	.word	0x40014400
 800473c:	40014800 	.word	0x40014800

08004740 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004740:	b480      	push	{r7}
 8004742:	b085      	sub	sp, #20
 8004744:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004746:	f3ef 8305 	mrs	r3, IPSR
 800474a:	60bb      	str	r3, [r7, #8]
  return(result);
 800474c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800474e:	2b00      	cmp	r3, #0
 8004750:	d10f      	bne.n	8004772 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004752:	f3ef 8310 	mrs	r3, PRIMASK
 8004756:	607b      	str	r3, [r7, #4]
  return(result);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2b00      	cmp	r3, #0
 800475c:	d109      	bne.n	8004772 <osKernelInitialize+0x32>
 800475e:	4b11      	ldr	r3, [pc, #68]	; (80047a4 <osKernelInitialize+0x64>)
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	2b02      	cmp	r3, #2
 8004764:	d109      	bne.n	800477a <osKernelInitialize+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004766:	f3ef 8311 	mrs	r3, BASEPRI
 800476a:	603b      	str	r3, [r7, #0]
  return(result);
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	2b00      	cmp	r3, #0
 8004770:	d003      	beq.n	800477a <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8004772:	f06f 0305 	mvn.w	r3, #5
 8004776:	60fb      	str	r3, [r7, #12]
 8004778:	e00c      	b.n	8004794 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800477a:	4b0a      	ldr	r3, [pc, #40]	; (80047a4 <osKernelInitialize+0x64>)
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	2b00      	cmp	r3, #0
 8004780:	d105      	bne.n	800478e <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8004782:	4b08      	ldr	r3, [pc, #32]	; (80047a4 <osKernelInitialize+0x64>)
 8004784:	2201      	movs	r2, #1
 8004786:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004788:	2300      	movs	r3, #0
 800478a:	60fb      	str	r3, [r7, #12]
 800478c:	e002      	b.n	8004794 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800478e:	f04f 33ff 	mov.w	r3, #4294967295
 8004792:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8004794:	68fb      	ldr	r3, [r7, #12]
}
 8004796:	4618      	mov	r0, r3
 8004798:	3714      	adds	r7, #20
 800479a:	46bd      	mov	sp, r7
 800479c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a0:	4770      	bx	lr
 80047a2:	bf00      	nop
 80047a4:	20000244 	.word	0x20000244

080047a8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80047a8:	b580      	push	{r7, lr}
 80047aa:	b084      	sub	sp, #16
 80047ac:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80047ae:	f3ef 8305 	mrs	r3, IPSR
 80047b2:	60bb      	str	r3, [r7, #8]
  return(result);
 80047b4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d10f      	bne.n	80047da <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80047ba:	f3ef 8310 	mrs	r3, PRIMASK
 80047be:	607b      	str	r3, [r7, #4]
  return(result);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d109      	bne.n	80047da <osKernelStart+0x32>
 80047c6:	4b11      	ldr	r3, [pc, #68]	; (800480c <osKernelStart+0x64>)
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	2b02      	cmp	r3, #2
 80047cc:	d109      	bne.n	80047e2 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80047ce:	f3ef 8311 	mrs	r3, BASEPRI
 80047d2:	603b      	str	r3, [r7, #0]
  return(result);
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d003      	beq.n	80047e2 <osKernelStart+0x3a>
    stat = osErrorISR;
 80047da:	f06f 0305 	mvn.w	r3, #5
 80047de:	60fb      	str	r3, [r7, #12]
 80047e0:	e00e      	b.n	8004800 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 80047e2:	4b0a      	ldr	r3, [pc, #40]	; (800480c <osKernelStart+0x64>)
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	2b01      	cmp	r3, #1
 80047e8:	d107      	bne.n	80047fa <osKernelStart+0x52>
      KernelState = osKernelRunning;
 80047ea:	4b08      	ldr	r3, [pc, #32]	; (800480c <osKernelStart+0x64>)
 80047ec:	2202      	movs	r2, #2
 80047ee:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 80047f0:	f001 f880 	bl	80058f4 <vTaskStartScheduler>
      stat = osOK;
 80047f4:	2300      	movs	r3, #0
 80047f6:	60fb      	str	r3, [r7, #12]
 80047f8:	e002      	b.n	8004800 <osKernelStart+0x58>
    } else {
      stat = osError;
 80047fa:	f04f 33ff 	mov.w	r3, #4294967295
 80047fe:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8004800:	68fb      	ldr	r3, [r7, #12]
}
 8004802:	4618      	mov	r0, r3
 8004804:	3710      	adds	r7, #16
 8004806:	46bd      	mov	sp, r7
 8004808:	bd80      	pop	{r7, pc}
 800480a:	bf00      	nop
 800480c:	20000244 	.word	0x20000244

08004810 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004810:	b580      	push	{r7, lr}
 8004812:	b092      	sub	sp, #72	; 0x48
 8004814:	af04      	add	r7, sp, #16
 8004816:	60f8      	str	r0, [r7, #12]
 8004818:	60b9      	str	r1, [r7, #8]
 800481a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800481c:	2300      	movs	r3, #0
 800481e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004820:	f3ef 8305 	mrs	r3, IPSR
 8004824:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8004826:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8004828:	2b00      	cmp	r3, #0
 800482a:	f040 8094 	bne.w	8004956 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800482e:	f3ef 8310 	mrs	r3, PRIMASK
 8004832:	623b      	str	r3, [r7, #32]
  return(result);
 8004834:	6a3b      	ldr	r3, [r7, #32]
 8004836:	2b00      	cmp	r3, #0
 8004838:	f040 808d 	bne.w	8004956 <osThreadNew+0x146>
 800483c:	4b48      	ldr	r3, [pc, #288]	; (8004960 <osThreadNew+0x150>)
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	2b02      	cmp	r3, #2
 8004842:	d106      	bne.n	8004852 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004844:	f3ef 8311 	mrs	r3, BASEPRI
 8004848:	61fb      	str	r3, [r7, #28]
  return(result);
 800484a:	69fb      	ldr	r3, [r7, #28]
 800484c:	2b00      	cmp	r3, #0
 800484e:	f040 8082 	bne.w	8004956 <osThreadNew+0x146>
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	2b00      	cmp	r3, #0
 8004856:	d07e      	beq.n	8004956 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8004858:	2380      	movs	r3, #128	; 0x80
 800485a:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 800485c:	2318      	movs	r3, #24
 800485e:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8004860:	2300      	movs	r3, #0
 8004862:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8004864:	f107 031b 	add.w	r3, r7, #27
 8004868:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 800486a:	f04f 33ff 	mov.w	r3, #4294967295
 800486e:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2b00      	cmp	r3, #0
 8004874:	d045      	beq.n	8004902 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	2b00      	cmp	r3, #0
 800487c:	d002      	beq.n	8004884 <osThreadNew+0x74>
        name = attr->name;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	699b      	ldr	r3, [r3, #24]
 8004888:	2b00      	cmp	r3, #0
 800488a:	d002      	beq.n	8004892 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	699b      	ldr	r3, [r3, #24]
 8004890:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004892:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004894:	2b00      	cmp	r3, #0
 8004896:	d008      	beq.n	80048aa <osThreadNew+0x9a>
 8004898:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800489a:	2b38      	cmp	r3, #56	; 0x38
 800489c:	d805      	bhi.n	80048aa <osThreadNew+0x9a>
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	685b      	ldr	r3, [r3, #4]
 80048a2:	f003 0301 	and.w	r3, r3, #1
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d001      	beq.n	80048ae <osThreadNew+0x9e>
        return (NULL);
 80048aa:	2300      	movs	r3, #0
 80048ac:	e054      	b.n	8004958 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	695b      	ldr	r3, [r3, #20]
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d003      	beq.n	80048be <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	695b      	ldr	r3, [r3, #20]
 80048ba:	089b      	lsrs	r3, r3, #2
 80048bc:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	689b      	ldr	r3, [r3, #8]
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d00e      	beq.n	80048e4 <osThreadNew+0xd4>
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	68db      	ldr	r3, [r3, #12]
 80048ca:	2b5b      	cmp	r3, #91	; 0x5b
 80048cc:	d90a      	bls.n	80048e4 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d006      	beq.n	80048e4 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	695b      	ldr	r3, [r3, #20]
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d002      	beq.n	80048e4 <osThreadNew+0xd4>
        mem = 1;
 80048de:	2301      	movs	r3, #1
 80048e0:	62bb      	str	r3, [r7, #40]	; 0x28
 80048e2:	e010      	b.n	8004906 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	689b      	ldr	r3, [r3, #8]
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d10c      	bne.n	8004906 <osThreadNew+0xf6>
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	68db      	ldr	r3, [r3, #12]
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d108      	bne.n	8004906 <osThreadNew+0xf6>
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	691b      	ldr	r3, [r3, #16]
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d104      	bne.n	8004906 <osThreadNew+0xf6>
          mem = 0;
 80048fc:	2300      	movs	r3, #0
 80048fe:	62bb      	str	r3, [r7, #40]	; 0x28
 8004900:	e001      	b.n	8004906 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8004902:	2300      	movs	r3, #0
 8004904:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8004906:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004908:	2b01      	cmp	r3, #1
 800490a:	d110      	bne.n	800492e <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8004910:	687a      	ldr	r2, [r7, #4]
 8004912:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004914:	9202      	str	r2, [sp, #8]
 8004916:	9301      	str	r3, [sp, #4]
 8004918:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800491a:	9300      	str	r3, [sp, #0]
 800491c:	68bb      	ldr	r3, [r7, #8]
 800491e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004920:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004922:	68f8      	ldr	r0, [r7, #12]
 8004924:	f000 fe1a 	bl	800555c <xTaskCreateStatic>
 8004928:	4603      	mov	r3, r0
 800492a:	617b      	str	r3, [r7, #20]
 800492c:	e013      	b.n	8004956 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 800492e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004930:	2b00      	cmp	r3, #0
 8004932:	d110      	bne.n	8004956 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004934:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004936:	b29a      	uxth	r2, r3
 8004938:	f107 0314 	add.w	r3, r7, #20
 800493c:	9301      	str	r3, [sp, #4]
 800493e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004940:	9300      	str	r3, [sp, #0]
 8004942:	68bb      	ldr	r3, [r7, #8]
 8004944:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004946:	68f8      	ldr	r0, [r7, #12]
 8004948:	f000 fe64 	bl	8005614 <xTaskCreate>
 800494c:	4603      	mov	r3, r0
 800494e:	2b01      	cmp	r3, #1
 8004950:	d001      	beq.n	8004956 <osThreadNew+0x146>
          hTask = NULL;
 8004952:	2300      	movs	r3, #0
 8004954:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004956:	697b      	ldr	r3, [r7, #20]
}
 8004958:	4618      	mov	r0, r3
 800495a:	3738      	adds	r7, #56	; 0x38
 800495c:	46bd      	mov	sp, r7
 800495e:	bd80      	pop	{r7, pc}
 8004960:	20000244 	.word	0x20000244

08004964 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8004964:	b580      	push	{r7, lr}
 8004966:	b086      	sub	sp, #24
 8004968:	af00      	add	r7, sp, #0
 800496a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800496c:	f3ef 8305 	mrs	r3, IPSR
 8004970:	613b      	str	r3, [r7, #16]
  return(result);
 8004972:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004974:	2b00      	cmp	r3, #0
 8004976:	d10f      	bne.n	8004998 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004978:	f3ef 8310 	mrs	r3, PRIMASK
 800497c:	60fb      	str	r3, [r7, #12]
  return(result);
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	2b00      	cmp	r3, #0
 8004982:	d109      	bne.n	8004998 <osDelay+0x34>
 8004984:	4b0d      	ldr	r3, [pc, #52]	; (80049bc <osDelay+0x58>)
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	2b02      	cmp	r3, #2
 800498a:	d109      	bne.n	80049a0 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800498c:	f3ef 8311 	mrs	r3, BASEPRI
 8004990:	60bb      	str	r3, [r7, #8]
  return(result);
 8004992:	68bb      	ldr	r3, [r7, #8]
 8004994:	2b00      	cmp	r3, #0
 8004996:	d003      	beq.n	80049a0 <osDelay+0x3c>
    stat = osErrorISR;
 8004998:	f06f 0305 	mvn.w	r3, #5
 800499c:	617b      	str	r3, [r7, #20]
 800499e:	e007      	b.n	80049b0 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 80049a0:	2300      	movs	r3, #0
 80049a2:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d002      	beq.n	80049b0 <osDelay+0x4c>
      vTaskDelay(ticks);
 80049aa:	6878      	ldr	r0, [r7, #4]
 80049ac:	f000 ff6e 	bl	800588c <vTaskDelay>
    }
  }

  return (stat);
 80049b0:	697b      	ldr	r3, [r7, #20]
}
 80049b2:	4618      	mov	r0, r3
 80049b4:	3718      	adds	r7, #24
 80049b6:	46bd      	mov	sp, r7
 80049b8:	bd80      	pop	{r7, pc}
 80049ba:	bf00      	nop
 80049bc:	20000244 	.word	0x20000244

080049c0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80049c0:	b480      	push	{r7}
 80049c2:	b085      	sub	sp, #20
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	60f8      	str	r0, [r7, #12]
 80049c8:	60b9      	str	r1, [r7, #8]
 80049ca:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	4a07      	ldr	r2, [pc, #28]	; (80049ec <vApplicationGetIdleTaskMemory+0x2c>)
 80049d0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80049d2:	68bb      	ldr	r3, [r7, #8]
 80049d4:	4a06      	ldr	r2, [pc, #24]	; (80049f0 <vApplicationGetIdleTaskMemory+0x30>)
 80049d6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2280      	movs	r2, #128	; 0x80
 80049dc:	601a      	str	r2, [r3, #0]
}
 80049de:	bf00      	nop
 80049e0:	3714      	adds	r7, #20
 80049e2:	46bd      	mov	sp, r7
 80049e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e8:	4770      	bx	lr
 80049ea:	bf00      	nop
 80049ec:	20000248 	.word	0x20000248
 80049f0:	200002a4 	.word	0x200002a4

080049f4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80049f4:	b480      	push	{r7}
 80049f6:	b085      	sub	sp, #20
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	60f8      	str	r0, [r7, #12]
 80049fc:	60b9      	str	r1, [r7, #8]
 80049fe:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	4a07      	ldr	r2, [pc, #28]	; (8004a20 <vApplicationGetTimerTaskMemory+0x2c>)
 8004a04:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004a06:	68bb      	ldr	r3, [r7, #8]
 8004a08:	4a06      	ldr	r2, [pc, #24]	; (8004a24 <vApplicationGetTimerTaskMemory+0x30>)
 8004a0a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004a12:	601a      	str	r2, [r3, #0]
}
 8004a14:	bf00      	nop
 8004a16:	3714      	adds	r7, #20
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1e:	4770      	bx	lr
 8004a20:	200004a4 	.word	0x200004a4
 8004a24:	20000500 	.word	0x20000500

08004a28 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004a28:	b480      	push	{r7}
 8004a2a:	b083      	sub	sp, #12
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	f103 0208 	add.w	r2, r3, #8
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	f04f 32ff 	mov.w	r2, #4294967295
 8004a40:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	f103 0208 	add.w	r2, r3, #8
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	f103 0208 	add.w	r2, r3, #8
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	2200      	movs	r2, #0
 8004a5a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004a5c:	bf00      	nop
 8004a5e:	370c      	adds	r7, #12
 8004a60:	46bd      	mov	sp, r7
 8004a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a66:	4770      	bx	lr

08004a68 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004a68:	b480      	push	{r7}
 8004a6a:	b083      	sub	sp, #12
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2200      	movs	r2, #0
 8004a74:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004a76:	bf00      	nop
 8004a78:	370c      	adds	r7, #12
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a80:	4770      	bx	lr

08004a82 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004a82:	b480      	push	{r7}
 8004a84:	b085      	sub	sp, #20
 8004a86:	af00      	add	r7, sp, #0
 8004a88:	6078      	str	r0, [r7, #4]
 8004a8a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	685b      	ldr	r3, [r3, #4]
 8004a90:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004a92:	683b      	ldr	r3, [r7, #0]
 8004a94:	68fa      	ldr	r2, [r7, #12]
 8004a96:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	689a      	ldr	r2, [r3, #8]
 8004a9c:	683b      	ldr	r3, [r7, #0]
 8004a9e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	689b      	ldr	r3, [r3, #8]
 8004aa4:	683a      	ldr	r2, [r7, #0]
 8004aa6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	683a      	ldr	r2, [r7, #0]
 8004aac:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004aae:	683b      	ldr	r3, [r7, #0]
 8004ab0:	687a      	ldr	r2, [r7, #4]
 8004ab2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	1c5a      	adds	r2, r3, #1
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	601a      	str	r2, [r3, #0]
}
 8004abe:	bf00      	nop
 8004ac0:	3714      	adds	r7, #20
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac8:	4770      	bx	lr

08004aca <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004aca:	b480      	push	{r7}
 8004acc:	b085      	sub	sp, #20
 8004ace:	af00      	add	r7, sp, #0
 8004ad0:	6078      	str	r0, [r7, #4]
 8004ad2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004ad4:	683b      	ldr	r3, [r7, #0]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004ada:	68bb      	ldr	r3, [r7, #8]
 8004adc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ae0:	d103      	bne.n	8004aea <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	691b      	ldr	r3, [r3, #16]
 8004ae6:	60fb      	str	r3, [r7, #12]
 8004ae8:	e00c      	b.n	8004b04 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	3308      	adds	r3, #8
 8004aee:	60fb      	str	r3, [r7, #12]
 8004af0:	e002      	b.n	8004af8 <vListInsert+0x2e>
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	685b      	ldr	r3, [r3, #4]
 8004af6:	60fb      	str	r3, [r7, #12]
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	685b      	ldr	r3, [r3, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	68ba      	ldr	r2, [r7, #8]
 8004b00:	429a      	cmp	r2, r3
 8004b02:	d2f6      	bcs.n	8004af2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	685a      	ldr	r2, [r3, #4]
 8004b08:	683b      	ldr	r3, [r7, #0]
 8004b0a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004b0c:	683b      	ldr	r3, [r7, #0]
 8004b0e:	685b      	ldr	r3, [r3, #4]
 8004b10:	683a      	ldr	r2, [r7, #0]
 8004b12:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004b14:	683b      	ldr	r3, [r7, #0]
 8004b16:	68fa      	ldr	r2, [r7, #12]
 8004b18:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	683a      	ldr	r2, [r7, #0]
 8004b1e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004b20:	683b      	ldr	r3, [r7, #0]
 8004b22:	687a      	ldr	r2, [r7, #4]
 8004b24:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	1c5a      	adds	r2, r3, #1
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	601a      	str	r2, [r3, #0]
}
 8004b30:	bf00      	nop
 8004b32:	3714      	adds	r7, #20
 8004b34:	46bd      	mov	sp, r7
 8004b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3a:	4770      	bx	lr

08004b3c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004b3c:	b480      	push	{r7}
 8004b3e:	b085      	sub	sp, #20
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	691b      	ldr	r3, [r3, #16]
 8004b48:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	685b      	ldr	r3, [r3, #4]
 8004b4e:	687a      	ldr	r2, [r7, #4]
 8004b50:	6892      	ldr	r2, [r2, #8]
 8004b52:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	689b      	ldr	r3, [r3, #8]
 8004b58:	687a      	ldr	r2, [r7, #4]
 8004b5a:	6852      	ldr	r2, [r2, #4]
 8004b5c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	685b      	ldr	r3, [r3, #4]
 8004b62:	687a      	ldr	r2, [r7, #4]
 8004b64:	429a      	cmp	r2, r3
 8004b66:	d103      	bne.n	8004b70 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	689a      	ldr	r2, [r3, #8]
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2200      	movs	r2, #0
 8004b74:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	1e5a      	subs	r2, r3, #1
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	681b      	ldr	r3, [r3, #0]
}
 8004b84:	4618      	mov	r0, r3
 8004b86:	3714      	adds	r7, #20
 8004b88:	46bd      	mov	sp, r7
 8004b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8e:	4770      	bx	lr

08004b90 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004b90:	b580      	push	{r7, lr}
 8004b92:	b084      	sub	sp, #16
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]
 8004b98:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d10a      	bne.n	8004bba <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004ba4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ba8:	f383 8811 	msr	BASEPRI, r3
 8004bac:	f3bf 8f6f 	isb	sy
 8004bb0:	f3bf 8f4f 	dsb	sy
 8004bb4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004bb6:	bf00      	nop
 8004bb8:	e7fe      	b.n	8004bb8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004bba:	f002 f80b 	bl	8006bd4 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	681a      	ldr	r2, [r3, #0]
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bc6:	68f9      	ldr	r1, [r7, #12]
 8004bc8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004bca:	fb01 f303 	mul.w	r3, r1, r3
 8004bce:	441a      	add	r2, r3
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	681a      	ldr	r2, [r3, #0]
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	681a      	ldr	r2, [r3, #0]
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bea:	3b01      	subs	r3, #1
 8004bec:	68f9      	ldr	r1, [r7, #12]
 8004bee:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004bf0:	fb01 f303 	mul.w	r3, r1, r3
 8004bf4:	441a      	add	r2, r3
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	22ff      	movs	r2, #255	; 0xff
 8004bfe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	22ff      	movs	r2, #255	; 0xff
 8004c06:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004c0a:	683b      	ldr	r3, [r7, #0]
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d114      	bne.n	8004c3a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	691b      	ldr	r3, [r3, #16]
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d01a      	beq.n	8004c4e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	3310      	adds	r3, #16
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	f001 f8f7 	bl	8005e10 <xTaskRemoveFromEventList>
 8004c22:	4603      	mov	r3, r0
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d012      	beq.n	8004c4e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004c28:	4b0c      	ldr	r3, [pc, #48]	; (8004c5c <xQueueGenericReset+0xcc>)
 8004c2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c2e:	601a      	str	r2, [r3, #0]
 8004c30:	f3bf 8f4f 	dsb	sy
 8004c34:	f3bf 8f6f 	isb	sy
 8004c38:	e009      	b.n	8004c4e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	3310      	adds	r3, #16
 8004c3e:	4618      	mov	r0, r3
 8004c40:	f7ff fef2 	bl	8004a28 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	3324      	adds	r3, #36	; 0x24
 8004c48:	4618      	mov	r0, r3
 8004c4a:	f7ff feed 	bl	8004a28 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004c4e:	f001 fff1 	bl	8006c34 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004c52:	2301      	movs	r3, #1
}
 8004c54:	4618      	mov	r0, r3
 8004c56:	3710      	adds	r7, #16
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	bd80      	pop	{r7, pc}
 8004c5c:	e000ed04 	.word	0xe000ed04

08004c60 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004c60:	b580      	push	{r7, lr}
 8004c62:	b08e      	sub	sp, #56	; 0x38
 8004c64:	af02      	add	r7, sp, #8
 8004c66:	60f8      	str	r0, [r7, #12]
 8004c68:	60b9      	str	r1, [r7, #8]
 8004c6a:	607a      	str	r2, [r7, #4]
 8004c6c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d10a      	bne.n	8004c8a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8004c74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c78:	f383 8811 	msr	BASEPRI, r3
 8004c7c:	f3bf 8f6f 	isb	sy
 8004c80:	f3bf 8f4f 	dsb	sy
 8004c84:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004c86:	bf00      	nop
 8004c88:	e7fe      	b.n	8004c88 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004c8a:	683b      	ldr	r3, [r7, #0]
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d10a      	bne.n	8004ca6 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8004c90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c94:	f383 8811 	msr	BASEPRI, r3
 8004c98:	f3bf 8f6f 	isb	sy
 8004c9c:	f3bf 8f4f 	dsb	sy
 8004ca0:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004ca2:	bf00      	nop
 8004ca4:	e7fe      	b.n	8004ca4 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d002      	beq.n	8004cb2 <xQueueGenericCreateStatic+0x52>
 8004cac:	68bb      	ldr	r3, [r7, #8]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d001      	beq.n	8004cb6 <xQueueGenericCreateStatic+0x56>
 8004cb2:	2301      	movs	r3, #1
 8004cb4:	e000      	b.n	8004cb8 <xQueueGenericCreateStatic+0x58>
 8004cb6:	2300      	movs	r3, #0
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d10a      	bne.n	8004cd2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8004cbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cc0:	f383 8811 	msr	BASEPRI, r3
 8004cc4:	f3bf 8f6f 	isb	sy
 8004cc8:	f3bf 8f4f 	dsb	sy
 8004ccc:	623b      	str	r3, [r7, #32]
}
 8004cce:	bf00      	nop
 8004cd0:	e7fe      	b.n	8004cd0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d102      	bne.n	8004cde <xQueueGenericCreateStatic+0x7e>
 8004cd8:	68bb      	ldr	r3, [r7, #8]
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d101      	bne.n	8004ce2 <xQueueGenericCreateStatic+0x82>
 8004cde:	2301      	movs	r3, #1
 8004ce0:	e000      	b.n	8004ce4 <xQueueGenericCreateStatic+0x84>
 8004ce2:	2300      	movs	r3, #0
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d10a      	bne.n	8004cfe <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8004ce8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cec:	f383 8811 	msr	BASEPRI, r3
 8004cf0:	f3bf 8f6f 	isb	sy
 8004cf4:	f3bf 8f4f 	dsb	sy
 8004cf8:	61fb      	str	r3, [r7, #28]
}
 8004cfa:	bf00      	nop
 8004cfc:	e7fe      	b.n	8004cfc <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004cfe:	2350      	movs	r3, #80	; 0x50
 8004d00:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004d02:	697b      	ldr	r3, [r7, #20]
 8004d04:	2b50      	cmp	r3, #80	; 0x50
 8004d06:	d00a      	beq.n	8004d1e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8004d08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d0c:	f383 8811 	msr	BASEPRI, r3
 8004d10:	f3bf 8f6f 	isb	sy
 8004d14:	f3bf 8f4f 	dsb	sy
 8004d18:	61bb      	str	r3, [r7, #24]
}
 8004d1a:	bf00      	nop
 8004d1c:	e7fe      	b.n	8004d1c <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004d1e:	683b      	ldr	r3, [r7, #0]
 8004d20:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004d22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d00d      	beq.n	8004d44 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004d28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d2a:	2201      	movs	r2, #1
 8004d2c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004d30:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8004d34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d36:	9300      	str	r3, [sp, #0]
 8004d38:	4613      	mov	r3, r2
 8004d3a:	687a      	ldr	r2, [r7, #4]
 8004d3c:	68b9      	ldr	r1, [r7, #8]
 8004d3e:	68f8      	ldr	r0, [r7, #12]
 8004d40:	f000 f805 	bl	8004d4e <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8004d44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004d46:	4618      	mov	r0, r3
 8004d48:	3730      	adds	r7, #48	; 0x30
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	bd80      	pop	{r7, pc}

08004d4e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004d4e:	b580      	push	{r7, lr}
 8004d50:	b084      	sub	sp, #16
 8004d52:	af00      	add	r7, sp, #0
 8004d54:	60f8      	str	r0, [r7, #12]
 8004d56:	60b9      	str	r1, [r7, #8]
 8004d58:	607a      	str	r2, [r7, #4]
 8004d5a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004d5c:	68bb      	ldr	r3, [r7, #8]
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d103      	bne.n	8004d6a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004d62:	69bb      	ldr	r3, [r7, #24]
 8004d64:	69ba      	ldr	r2, [r7, #24]
 8004d66:	601a      	str	r2, [r3, #0]
 8004d68:	e002      	b.n	8004d70 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004d6a:	69bb      	ldr	r3, [r7, #24]
 8004d6c:	687a      	ldr	r2, [r7, #4]
 8004d6e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004d70:	69bb      	ldr	r3, [r7, #24]
 8004d72:	68fa      	ldr	r2, [r7, #12]
 8004d74:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004d76:	69bb      	ldr	r3, [r7, #24]
 8004d78:	68ba      	ldr	r2, [r7, #8]
 8004d7a:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004d7c:	2101      	movs	r1, #1
 8004d7e:	69b8      	ldr	r0, [r7, #24]
 8004d80:	f7ff ff06 	bl	8004b90 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004d84:	69bb      	ldr	r3, [r7, #24]
 8004d86:	78fa      	ldrb	r2, [r7, #3]
 8004d88:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004d8c:	bf00      	nop
 8004d8e:	3710      	adds	r7, #16
 8004d90:	46bd      	mov	sp, r7
 8004d92:	bd80      	pop	{r7, pc}

08004d94 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004d94:	b580      	push	{r7, lr}
 8004d96:	b08e      	sub	sp, #56	; 0x38
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	60f8      	str	r0, [r7, #12]
 8004d9c:	60b9      	str	r1, [r7, #8]
 8004d9e:	607a      	str	r2, [r7, #4]
 8004da0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004da2:	2300      	movs	r3, #0
 8004da4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004daa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d10a      	bne.n	8004dc6 <xQueueGenericSend+0x32>
	__asm volatile
 8004db0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004db4:	f383 8811 	msr	BASEPRI, r3
 8004db8:	f3bf 8f6f 	isb	sy
 8004dbc:	f3bf 8f4f 	dsb	sy
 8004dc0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004dc2:	bf00      	nop
 8004dc4:	e7fe      	b.n	8004dc4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004dc6:	68bb      	ldr	r3, [r7, #8]
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d103      	bne.n	8004dd4 <xQueueGenericSend+0x40>
 8004dcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d101      	bne.n	8004dd8 <xQueueGenericSend+0x44>
 8004dd4:	2301      	movs	r3, #1
 8004dd6:	e000      	b.n	8004dda <xQueueGenericSend+0x46>
 8004dd8:	2300      	movs	r3, #0
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d10a      	bne.n	8004df4 <xQueueGenericSend+0x60>
	__asm volatile
 8004dde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004de2:	f383 8811 	msr	BASEPRI, r3
 8004de6:	f3bf 8f6f 	isb	sy
 8004dea:	f3bf 8f4f 	dsb	sy
 8004dee:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004df0:	bf00      	nop
 8004df2:	e7fe      	b.n	8004df2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004df4:	683b      	ldr	r3, [r7, #0]
 8004df6:	2b02      	cmp	r3, #2
 8004df8:	d103      	bne.n	8004e02 <xQueueGenericSend+0x6e>
 8004dfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dfe:	2b01      	cmp	r3, #1
 8004e00:	d101      	bne.n	8004e06 <xQueueGenericSend+0x72>
 8004e02:	2301      	movs	r3, #1
 8004e04:	e000      	b.n	8004e08 <xQueueGenericSend+0x74>
 8004e06:	2300      	movs	r3, #0
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d10a      	bne.n	8004e22 <xQueueGenericSend+0x8e>
	__asm volatile
 8004e0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e10:	f383 8811 	msr	BASEPRI, r3
 8004e14:	f3bf 8f6f 	isb	sy
 8004e18:	f3bf 8f4f 	dsb	sy
 8004e1c:	623b      	str	r3, [r7, #32]
}
 8004e1e:	bf00      	nop
 8004e20:	e7fe      	b.n	8004e20 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004e22:	f001 f9b9 	bl	8006198 <xTaskGetSchedulerState>
 8004e26:	4603      	mov	r3, r0
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d102      	bne.n	8004e32 <xQueueGenericSend+0x9e>
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d101      	bne.n	8004e36 <xQueueGenericSend+0xa2>
 8004e32:	2301      	movs	r3, #1
 8004e34:	e000      	b.n	8004e38 <xQueueGenericSend+0xa4>
 8004e36:	2300      	movs	r3, #0
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d10a      	bne.n	8004e52 <xQueueGenericSend+0xbe>
	__asm volatile
 8004e3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e40:	f383 8811 	msr	BASEPRI, r3
 8004e44:	f3bf 8f6f 	isb	sy
 8004e48:	f3bf 8f4f 	dsb	sy
 8004e4c:	61fb      	str	r3, [r7, #28]
}
 8004e4e:	bf00      	nop
 8004e50:	e7fe      	b.n	8004e50 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004e52:	f001 febf 	bl	8006bd4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004e56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e58:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004e5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e5e:	429a      	cmp	r2, r3
 8004e60:	d302      	bcc.n	8004e68 <xQueueGenericSend+0xd4>
 8004e62:	683b      	ldr	r3, [r7, #0]
 8004e64:	2b02      	cmp	r3, #2
 8004e66:	d129      	bne.n	8004ebc <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004e68:	683a      	ldr	r2, [r7, #0]
 8004e6a:	68b9      	ldr	r1, [r7, #8]
 8004e6c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004e6e:	f000 fa07 	bl	8005280 <prvCopyDataToQueue>
 8004e72:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004e74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d010      	beq.n	8004e9e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004e7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e7e:	3324      	adds	r3, #36	; 0x24
 8004e80:	4618      	mov	r0, r3
 8004e82:	f000 ffc5 	bl	8005e10 <xTaskRemoveFromEventList>
 8004e86:	4603      	mov	r3, r0
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d013      	beq.n	8004eb4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004e8c:	4b3f      	ldr	r3, [pc, #252]	; (8004f8c <xQueueGenericSend+0x1f8>)
 8004e8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e92:	601a      	str	r2, [r3, #0]
 8004e94:	f3bf 8f4f 	dsb	sy
 8004e98:	f3bf 8f6f 	isb	sy
 8004e9c:	e00a      	b.n	8004eb4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004e9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d007      	beq.n	8004eb4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004ea4:	4b39      	ldr	r3, [pc, #228]	; (8004f8c <xQueueGenericSend+0x1f8>)
 8004ea6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004eaa:	601a      	str	r2, [r3, #0]
 8004eac:	f3bf 8f4f 	dsb	sy
 8004eb0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004eb4:	f001 febe 	bl	8006c34 <vPortExitCritical>
				return pdPASS;
 8004eb8:	2301      	movs	r3, #1
 8004eba:	e063      	b.n	8004f84 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d103      	bne.n	8004eca <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004ec2:	f001 feb7 	bl	8006c34 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004ec6:	2300      	movs	r3, #0
 8004ec8:	e05c      	b.n	8004f84 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004eca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d106      	bne.n	8004ede <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004ed0:	f107 0314 	add.w	r3, r7, #20
 8004ed4:	4618      	mov	r0, r3
 8004ed6:	f000 ffff 	bl	8005ed8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004eda:	2301      	movs	r3, #1
 8004edc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004ede:	f001 fea9 	bl	8006c34 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004ee2:	f000 fd6d 	bl	80059c0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004ee6:	f001 fe75 	bl	8006bd4 <vPortEnterCritical>
 8004eea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004eec:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004ef0:	b25b      	sxtb	r3, r3
 8004ef2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ef6:	d103      	bne.n	8004f00 <xQueueGenericSend+0x16c>
 8004ef8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004efa:	2200      	movs	r2, #0
 8004efc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004f00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f02:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004f06:	b25b      	sxtb	r3, r3
 8004f08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f0c:	d103      	bne.n	8004f16 <xQueueGenericSend+0x182>
 8004f0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f10:	2200      	movs	r2, #0
 8004f12:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004f16:	f001 fe8d 	bl	8006c34 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004f1a:	1d3a      	adds	r2, r7, #4
 8004f1c:	f107 0314 	add.w	r3, r7, #20
 8004f20:	4611      	mov	r1, r2
 8004f22:	4618      	mov	r0, r3
 8004f24:	f000 ffee 	bl	8005f04 <xTaskCheckForTimeOut>
 8004f28:	4603      	mov	r3, r0
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d124      	bne.n	8004f78 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004f2e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004f30:	f000 fa9e 	bl	8005470 <prvIsQueueFull>
 8004f34:	4603      	mov	r3, r0
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d018      	beq.n	8004f6c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004f3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f3c:	3310      	adds	r3, #16
 8004f3e:	687a      	ldr	r2, [r7, #4]
 8004f40:	4611      	mov	r1, r2
 8004f42:	4618      	mov	r0, r3
 8004f44:	f000 ff14 	bl	8005d70 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004f48:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004f4a:	f000 fa29 	bl	80053a0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004f4e:	f000 fd45 	bl	80059dc <xTaskResumeAll>
 8004f52:	4603      	mov	r3, r0
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	f47f af7c 	bne.w	8004e52 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8004f5a:	4b0c      	ldr	r3, [pc, #48]	; (8004f8c <xQueueGenericSend+0x1f8>)
 8004f5c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f60:	601a      	str	r2, [r3, #0]
 8004f62:	f3bf 8f4f 	dsb	sy
 8004f66:	f3bf 8f6f 	isb	sy
 8004f6a:	e772      	b.n	8004e52 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004f6c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004f6e:	f000 fa17 	bl	80053a0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004f72:	f000 fd33 	bl	80059dc <xTaskResumeAll>
 8004f76:	e76c      	b.n	8004e52 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004f78:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004f7a:	f000 fa11 	bl	80053a0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004f7e:	f000 fd2d 	bl	80059dc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004f82:	2300      	movs	r3, #0
		}
	}
}
 8004f84:	4618      	mov	r0, r3
 8004f86:	3738      	adds	r7, #56	; 0x38
 8004f88:	46bd      	mov	sp, r7
 8004f8a:	bd80      	pop	{r7, pc}
 8004f8c:	e000ed04 	.word	0xe000ed04

08004f90 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004f90:	b580      	push	{r7, lr}
 8004f92:	b08e      	sub	sp, #56	; 0x38
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	60f8      	str	r0, [r7, #12]
 8004f98:	60b9      	str	r1, [r7, #8]
 8004f9a:	607a      	str	r2, [r7, #4]
 8004f9c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004fa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d10a      	bne.n	8004fbe <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8004fa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fac:	f383 8811 	msr	BASEPRI, r3
 8004fb0:	f3bf 8f6f 	isb	sy
 8004fb4:	f3bf 8f4f 	dsb	sy
 8004fb8:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004fba:	bf00      	nop
 8004fbc:	e7fe      	b.n	8004fbc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004fbe:	68bb      	ldr	r3, [r7, #8]
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d103      	bne.n	8004fcc <xQueueGenericSendFromISR+0x3c>
 8004fc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d101      	bne.n	8004fd0 <xQueueGenericSendFromISR+0x40>
 8004fcc:	2301      	movs	r3, #1
 8004fce:	e000      	b.n	8004fd2 <xQueueGenericSendFromISR+0x42>
 8004fd0:	2300      	movs	r3, #0
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d10a      	bne.n	8004fec <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8004fd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fda:	f383 8811 	msr	BASEPRI, r3
 8004fde:	f3bf 8f6f 	isb	sy
 8004fe2:	f3bf 8f4f 	dsb	sy
 8004fe6:	623b      	str	r3, [r7, #32]
}
 8004fe8:	bf00      	nop
 8004fea:	e7fe      	b.n	8004fea <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004fec:	683b      	ldr	r3, [r7, #0]
 8004fee:	2b02      	cmp	r3, #2
 8004ff0:	d103      	bne.n	8004ffa <xQueueGenericSendFromISR+0x6a>
 8004ff2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ff4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ff6:	2b01      	cmp	r3, #1
 8004ff8:	d101      	bne.n	8004ffe <xQueueGenericSendFromISR+0x6e>
 8004ffa:	2301      	movs	r3, #1
 8004ffc:	e000      	b.n	8005000 <xQueueGenericSendFromISR+0x70>
 8004ffe:	2300      	movs	r3, #0
 8005000:	2b00      	cmp	r3, #0
 8005002:	d10a      	bne.n	800501a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8005004:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005008:	f383 8811 	msr	BASEPRI, r3
 800500c:	f3bf 8f6f 	isb	sy
 8005010:	f3bf 8f4f 	dsb	sy
 8005014:	61fb      	str	r3, [r7, #28]
}
 8005016:	bf00      	nop
 8005018:	e7fe      	b.n	8005018 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800501a:	f001 febd 	bl	8006d98 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800501e:	f3ef 8211 	mrs	r2, BASEPRI
 8005022:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005026:	f383 8811 	msr	BASEPRI, r3
 800502a:	f3bf 8f6f 	isb	sy
 800502e:	f3bf 8f4f 	dsb	sy
 8005032:	61ba      	str	r2, [r7, #24]
 8005034:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005036:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005038:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800503a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800503c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800503e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005040:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005042:	429a      	cmp	r2, r3
 8005044:	d302      	bcc.n	800504c <xQueueGenericSendFromISR+0xbc>
 8005046:	683b      	ldr	r3, [r7, #0]
 8005048:	2b02      	cmp	r3, #2
 800504a:	d12c      	bne.n	80050a6 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800504c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800504e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005052:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005056:	683a      	ldr	r2, [r7, #0]
 8005058:	68b9      	ldr	r1, [r7, #8]
 800505a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800505c:	f000 f910 	bl	8005280 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005060:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8005064:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005068:	d112      	bne.n	8005090 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800506a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800506c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800506e:	2b00      	cmp	r3, #0
 8005070:	d016      	beq.n	80050a0 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005072:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005074:	3324      	adds	r3, #36	; 0x24
 8005076:	4618      	mov	r0, r3
 8005078:	f000 feca 	bl	8005e10 <xTaskRemoveFromEventList>
 800507c:	4603      	mov	r3, r0
 800507e:	2b00      	cmp	r3, #0
 8005080:	d00e      	beq.n	80050a0 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	2b00      	cmp	r3, #0
 8005086:	d00b      	beq.n	80050a0 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2201      	movs	r2, #1
 800508c:	601a      	str	r2, [r3, #0]
 800508e:	e007      	b.n	80050a0 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005090:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005094:	3301      	adds	r3, #1
 8005096:	b2db      	uxtb	r3, r3
 8005098:	b25a      	sxtb	r2, r3
 800509a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800509c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80050a0:	2301      	movs	r3, #1
 80050a2:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80050a4:	e001      	b.n	80050aa <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80050a6:	2300      	movs	r3, #0
 80050a8:	637b      	str	r3, [r7, #52]	; 0x34
 80050aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050ac:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80050ae:	693b      	ldr	r3, [r7, #16]
 80050b0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80050b4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80050b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80050b8:	4618      	mov	r0, r3
 80050ba:	3738      	adds	r7, #56	; 0x38
 80050bc:	46bd      	mov	sp, r7
 80050be:	bd80      	pop	{r7, pc}

080050c0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80050c0:	b580      	push	{r7, lr}
 80050c2:	b08c      	sub	sp, #48	; 0x30
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	60f8      	str	r0, [r7, #12]
 80050c8:	60b9      	str	r1, [r7, #8]
 80050ca:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80050cc:	2300      	movs	r3, #0
 80050ce:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80050d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d10a      	bne.n	80050f0 <xQueueReceive+0x30>
	__asm volatile
 80050da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050de:	f383 8811 	msr	BASEPRI, r3
 80050e2:	f3bf 8f6f 	isb	sy
 80050e6:	f3bf 8f4f 	dsb	sy
 80050ea:	623b      	str	r3, [r7, #32]
}
 80050ec:	bf00      	nop
 80050ee:	e7fe      	b.n	80050ee <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80050f0:	68bb      	ldr	r3, [r7, #8]
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d103      	bne.n	80050fe <xQueueReceive+0x3e>
 80050f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d101      	bne.n	8005102 <xQueueReceive+0x42>
 80050fe:	2301      	movs	r3, #1
 8005100:	e000      	b.n	8005104 <xQueueReceive+0x44>
 8005102:	2300      	movs	r3, #0
 8005104:	2b00      	cmp	r3, #0
 8005106:	d10a      	bne.n	800511e <xQueueReceive+0x5e>
	__asm volatile
 8005108:	f04f 0350 	mov.w	r3, #80	; 0x50
 800510c:	f383 8811 	msr	BASEPRI, r3
 8005110:	f3bf 8f6f 	isb	sy
 8005114:	f3bf 8f4f 	dsb	sy
 8005118:	61fb      	str	r3, [r7, #28]
}
 800511a:	bf00      	nop
 800511c:	e7fe      	b.n	800511c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800511e:	f001 f83b 	bl	8006198 <xTaskGetSchedulerState>
 8005122:	4603      	mov	r3, r0
 8005124:	2b00      	cmp	r3, #0
 8005126:	d102      	bne.n	800512e <xQueueReceive+0x6e>
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2b00      	cmp	r3, #0
 800512c:	d101      	bne.n	8005132 <xQueueReceive+0x72>
 800512e:	2301      	movs	r3, #1
 8005130:	e000      	b.n	8005134 <xQueueReceive+0x74>
 8005132:	2300      	movs	r3, #0
 8005134:	2b00      	cmp	r3, #0
 8005136:	d10a      	bne.n	800514e <xQueueReceive+0x8e>
	__asm volatile
 8005138:	f04f 0350 	mov.w	r3, #80	; 0x50
 800513c:	f383 8811 	msr	BASEPRI, r3
 8005140:	f3bf 8f6f 	isb	sy
 8005144:	f3bf 8f4f 	dsb	sy
 8005148:	61bb      	str	r3, [r7, #24]
}
 800514a:	bf00      	nop
 800514c:	e7fe      	b.n	800514c <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800514e:	f001 fd41 	bl	8006bd4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005152:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005154:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005156:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800515a:	2b00      	cmp	r3, #0
 800515c:	d01f      	beq.n	800519e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800515e:	68b9      	ldr	r1, [r7, #8]
 8005160:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005162:	f000 f8f7 	bl	8005354 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005168:	1e5a      	subs	r2, r3, #1
 800516a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800516c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800516e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005170:	691b      	ldr	r3, [r3, #16]
 8005172:	2b00      	cmp	r3, #0
 8005174:	d00f      	beq.n	8005196 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005176:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005178:	3310      	adds	r3, #16
 800517a:	4618      	mov	r0, r3
 800517c:	f000 fe48 	bl	8005e10 <xTaskRemoveFromEventList>
 8005180:	4603      	mov	r3, r0
 8005182:	2b00      	cmp	r3, #0
 8005184:	d007      	beq.n	8005196 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005186:	4b3d      	ldr	r3, [pc, #244]	; (800527c <xQueueReceive+0x1bc>)
 8005188:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800518c:	601a      	str	r2, [r3, #0]
 800518e:	f3bf 8f4f 	dsb	sy
 8005192:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005196:	f001 fd4d 	bl	8006c34 <vPortExitCritical>
				return pdPASS;
 800519a:	2301      	movs	r3, #1
 800519c:	e069      	b.n	8005272 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d103      	bne.n	80051ac <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80051a4:	f001 fd46 	bl	8006c34 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80051a8:	2300      	movs	r3, #0
 80051aa:	e062      	b.n	8005272 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80051ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d106      	bne.n	80051c0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80051b2:	f107 0310 	add.w	r3, r7, #16
 80051b6:	4618      	mov	r0, r3
 80051b8:	f000 fe8e 	bl	8005ed8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80051bc:	2301      	movs	r3, #1
 80051be:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80051c0:	f001 fd38 	bl	8006c34 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80051c4:	f000 fbfc 	bl	80059c0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80051c8:	f001 fd04 	bl	8006bd4 <vPortEnterCritical>
 80051cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051ce:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80051d2:	b25b      	sxtb	r3, r3
 80051d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051d8:	d103      	bne.n	80051e2 <xQueueReceive+0x122>
 80051da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051dc:	2200      	movs	r2, #0
 80051de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80051e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051e4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80051e8:	b25b      	sxtb	r3, r3
 80051ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051ee:	d103      	bne.n	80051f8 <xQueueReceive+0x138>
 80051f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051f2:	2200      	movs	r2, #0
 80051f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80051f8:	f001 fd1c 	bl	8006c34 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80051fc:	1d3a      	adds	r2, r7, #4
 80051fe:	f107 0310 	add.w	r3, r7, #16
 8005202:	4611      	mov	r1, r2
 8005204:	4618      	mov	r0, r3
 8005206:	f000 fe7d 	bl	8005f04 <xTaskCheckForTimeOut>
 800520a:	4603      	mov	r3, r0
 800520c:	2b00      	cmp	r3, #0
 800520e:	d123      	bne.n	8005258 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005210:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005212:	f000 f917 	bl	8005444 <prvIsQueueEmpty>
 8005216:	4603      	mov	r3, r0
 8005218:	2b00      	cmp	r3, #0
 800521a:	d017      	beq.n	800524c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800521c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800521e:	3324      	adds	r3, #36	; 0x24
 8005220:	687a      	ldr	r2, [r7, #4]
 8005222:	4611      	mov	r1, r2
 8005224:	4618      	mov	r0, r3
 8005226:	f000 fda3 	bl	8005d70 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800522a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800522c:	f000 f8b8 	bl	80053a0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005230:	f000 fbd4 	bl	80059dc <xTaskResumeAll>
 8005234:	4603      	mov	r3, r0
 8005236:	2b00      	cmp	r3, #0
 8005238:	d189      	bne.n	800514e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800523a:	4b10      	ldr	r3, [pc, #64]	; (800527c <xQueueReceive+0x1bc>)
 800523c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005240:	601a      	str	r2, [r3, #0]
 8005242:	f3bf 8f4f 	dsb	sy
 8005246:	f3bf 8f6f 	isb	sy
 800524a:	e780      	b.n	800514e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800524c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800524e:	f000 f8a7 	bl	80053a0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005252:	f000 fbc3 	bl	80059dc <xTaskResumeAll>
 8005256:	e77a      	b.n	800514e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005258:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800525a:	f000 f8a1 	bl	80053a0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800525e:	f000 fbbd 	bl	80059dc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005262:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005264:	f000 f8ee 	bl	8005444 <prvIsQueueEmpty>
 8005268:	4603      	mov	r3, r0
 800526a:	2b00      	cmp	r3, #0
 800526c:	f43f af6f 	beq.w	800514e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005270:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8005272:	4618      	mov	r0, r3
 8005274:	3730      	adds	r7, #48	; 0x30
 8005276:	46bd      	mov	sp, r7
 8005278:	bd80      	pop	{r7, pc}
 800527a:	bf00      	nop
 800527c:	e000ed04 	.word	0xe000ed04

08005280 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005280:	b580      	push	{r7, lr}
 8005282:	b086      	sub	sp, #24
 8005284:	af00      	add	r7, sp, #0
 8005286:	60f8      	str	r0, [r7, #12]
 8005288:	60b9      	str	r1, [r7, #8]
 800528a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800528c:	2300      	movs	r3, #0
 800528e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005294:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800529a:	2b00      	cmp	r3, #0
 800529c:	d10d      	bne.n	80052ba <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d14d      	bne.n	8005342 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	685b      	ldr	r3, [r3, #4]
 80052aa:	4618      	mov	r0, r3
 80052ac:	f000 ff92 	bl	80061d4 <xTaskPriorityDisinherit>
 80052b0:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	2200      	movs	r2, #0
 80052b6:	605a      	str	r2, [r3, #4]
 80052b8:	e043      	b.n	8005342 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d119      	bne.n	80052f4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	6898      	ldr	r0, [r3, #8]
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052c8:	461a      	mov	r2, r3
 80052ca:	68b9      	ldr	r1, [r7, #8]
 80052cc:	f001 ffaa 	bl	8007224 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	689a      	ldr	r2, [r3, #8]
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052d8:	441a      	add	r2, r3
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	689a      	ldr	r2, [r3, #8]
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	685b      	ldr	r3, [r3, #4]
 80052e6:	429a      	cmp	r2, r3
 80052e8:	d32b      	bcc.n	8005342 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	681a      	ldr	r2, [r3, #0]
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	609a      	str	r2, [r3, #8]
 80052f2:	e026      	b.n	8005342 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	68d8      	ldr	r0, [r3, #12]
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052fc:	461a      	mov	r2, r3
 80052fe:	68b9      	ldr	r1, [r7, #8]
 8005300:	f001 ff90 	bl	8007224 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	68da      	ldr	r2, [r3, #12]
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800530c:	425b      	negs	r3, r3
 800530e:	441a      	add	r2, r3
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	68da      	ldr	r2, [r3, #12]
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	429a      	cmp	r2, r3
 800531e:	d207      	bcs.n	8005330 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	685a      	ldr	r2, [r3, #4]
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005328:	425b      	negs	r3, r3
 800532a:	441a      	add	r2, r3
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2b02      	cmp	r3, #2
 8005334:	d105      	bne.n	8005342 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005336:	693b      	ldr	r3, [r7, #16]
 8005338:	2b00      	cmp	r3, #0
 800533a:	d002      	beq.n	8005342 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800533c:	693b      	ldr	r3, [r7, #16]
 800533e:	3b01      	subs	r3, #1
 8005340:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005342:	693b      	ldr	r3, [r7, #16]
 8005344:	1c5a      	adds	r2, r3, #1
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800534a:	697b      	ldr	r3, [r7, #20]
}
 800534c:	4618      	mov	r0, r3
 800534e:	3718      	adds	r7, #24
 8005350:	46bd      	mov	sp, r7
 8005352:	bd80      	pop	{r7, pc}

08005354 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005354:	b580      	push	{r7, lr}
 8005356:	b082      	sub	sp, #8
 8005358:	af00      	add	r7, sp, #0
 800535a:	6078      	str	r0, [r7, #4]
 800535c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005362:	2b00      	cmp	r3, #0
 8005364:	d018      	beq.n	8005398 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	68da      	ldr	r2, [r3, #12]
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800536e:	441a      	add	r2, r3
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	68da      	ldr	r2, [r3, #12]
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	685b      	ldr	r3, [r3, #4]
 800537c:	429a      	cmp	r2, r3
 800537e:	d303      	bcc.n	8005388 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681a      	ldr	r2, [r3, #0]
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	68d9      	ldr	r1, [r3, #12]
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005390:	461a      	mov	r2, r3
 8005392:	6838      	ldr	r0, [r7, #0]
 8005394:	f001 ff46 	bl	8007224 <memcpy>
	}
}
 8005398:	bf00      	nop
 800539a:	3708      	adds	r7, #8
 800539c:	46bd      	mov	sp, r7
 800539e:	bd80      	pop	{r7, pc}

080053a0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80053a0:	b580      	push	{r7, lr}
 80053a2:	b084      	sub	sp, #16
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80053a8:	f001 fc14 	bl	8006bd4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80053b2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80053b4:	e011      	b.n	80053da <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d012      	beq.n	80053e4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	3324      	adds	r3, #36	; 0x24
 80053c2:	4618      	mov	r0, r3
 80053c4:	f000 fd24 	bl	8005e10 <xTaskRemoveFromEventList>
 80053c8:	4603      	mov	r3, r0
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d001      	beq.n	80053d2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80053ce:	f000 fdfb 	bl	8005fc8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80053d2:	7bfb      	ldrb	r3, [r7, #15]
 80053d4:	3b01      	subs	r3, #1
 80053d6:	b2db      	uxtb	r3, r3
 80053d8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80053da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	dce9      	bgt.n	80053b6 <prvUnlockQueue+0x16>
 80053e2:	e000      	b.n	80053e6 <prvUnlockQueue+0x46>
					break;
 80053e4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	22ff      	movs	r2, #255	; 0xff
 80053ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80053ee:	f001 fc21 	bl	8006c34 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80053f2:	f001 fbef 	bl	8006bd4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80053fc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80053fe:	e011      	b.n	8005424 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	691b      	ldr	r3, [r3, #16]
 8005404:	2b00      	cmp	r3, #0
 8005406:	d012      	beq.n	800542e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	3310      	adds	r3, #16
 800540c:	4618      	mov	r0, r3
 800540e:	f000 fcff 	bl	8005e10 <xTaskRemoveFromEventList>
 8005412:	4603      	mov	r3, r0
 8005414:	2b00      	cmp	r3, #0
 8005416:	d001      	beq.n	800541c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005418:	f000 fdd6 	bl	8005fc8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800541c:	7bbb      	ldrb	r3, [r7, #14]
 800541e:	3b01      	subs	r3, #1
 8005420:	b2db      	uxtb	r3, r3
 8005422:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005424:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005428:	2b00      	cmp	r3, #0
 800542a:	dce9      	bgt.n	8005400 <prvUnlockQueue+0x60>
 800542c:	e000      	b.n	8005430 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800542e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	22ff      	movs	r2, #255	; 0xff
 8005434:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005438:	f001 fbfc 	bl	8006c34 <vPortExitCritical>
}
 800543c:	bf00      	nop
 800543e:	3710      	adds	r7, #16
 8005440:	46bd      	mov	sp, r7
 8005442:	bd80      	pop	{r7, pc}

08005444 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005444:	b580      	push	{r7, lr}
 8005446:	b084      	sub	sp, #16
 8005448:	af00      	add	r7, sp, #0
 800544a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800544c:	f001 fbc2 	bl	8006bd4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005454:	2b00      	cmp	r3, #0
 8005456:	d102      	bne.n	800545e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005458:	2301      	movs	r3, #1
 800545a:	60fb      	str	r3, [r7, #12]
 800545c:	e001      	b.n	8005462 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800545e:	2300      	movs	r3, #0
 8005460:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005462:	f001 fbe7 	bl	8006c34 <vPortExitCritical>

	return xReturn;
 8005466:	68fb      	ldr	r3, [r7, #12]
}
 8005468:	4618      	mov	r0, r3
 800546a:	3710      	adds	r7, #16
 800546c:	46bd      	mov	sp, r7
 800546e:	bd80      	pop	{r7, pc}

08005470 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005470:	b580      	push	{r7, lr}
 8005472:	b084      	sub	sp, #16
 8005474:	af00      	add	r7, sp, #0
 8005476:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005478:	f001 fbac 	bl	8006bd4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005484:	429a      	cmp	r2, r3
 8005486:	d102      	bne.n	800548e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005488:	2301      	movs	r3, #1
 800548a:	60fb      	str	r3, [r7, #12]
 800548c:	e001      	b.n	8005492 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800548e:	2300      	movs	r3, #0
 8005490:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005492:	f001 fbcf 	bl	8006c34 <vPortExitCritical>

	return xReturn;
 8005496:	68fb      	ldr	r3, [r7, #12]
}
 8005498:	4618      	mov	r0, r3
 800549a:	3710      	adds	r7, #16
 800549c:	46bd      	mov	sp, r7
 800549e:	bd80      	pop	{r7, pc}

080054a0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80054a0:	b480      	push	{r7}
 80054a2:	b085      	sub	sp, #20
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	6078      	str	r0, [r7, #4]
 80054a8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80054aa:	2300      	movs	r3, #0
 80054ac:	60fb      	str	r3, [r7, #12]
 80054ae:	e014      	b.n	80054da <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80054b0:	4a0f      	ldr	r2, [pc, #60]	; (80054f0 <vQueueAddToRegistry+0x50>)
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d10b      	bne.n	80054d4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80054bc:	490c      	ldr	r1, [pc, #48]	; (80054f0 <vQueueAddToRegistry+0x50>)
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	683a      	ldr	r2, [r7, #0]
 80054c2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80054c6:	4a0a      	ldr	r2, [pc, #40]	; (80054f0 <vQueueAddToRegistry+0x50>)
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	00db      	lsls	r3, r3, #3
 80054cc:	4413      	add	r3, r2
 80054ce:	687a      	ldr	r2, [r7, #4]
 80054d0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80054d2:	e006      	b.n	80054e2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	3301      	adds	r3, #1
 80054d8:	60fb      	str	r3, [r7, #12]
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	2b07      	cmp	r3, #7
 80054de:	d9e7      	bls.n	80054b0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80054e0:	bf00      	nop
 80054e2:	bf00      	nop
 80054e4:	3714      	adds	r7, #20
 80054e6:	46bd      	mov	sp, r7
 80054e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ec:	4770      	bx	lr
 80054ee:	bf00      	nop
 80054f0:	20000900 	.word	0x20000900

080054f4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80054f4:	b580      	push	{r7, lr}
 80054f6:	b086      	sub	sp, #24
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	60f8      	str	r0, [r7, #12]
 80054fc:	60b9      	str	r1, [r7, #8]
 80054fe:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005504:	f001 fb66 	bl	8006bd4 <vPortEnterCritical>
 8005508:	697b      	ldr	r3, [r7, #20]
 800550a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800550e:	b25b      	sxtb	r3, r3
 8005510:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005514:	d103      	bne.n	800551e <vQueueWaitForMessageRestricted+0x2a>
 8005516:	697b      	ldr	r3, [r7, #20]
 8005518:	2200      	movs	r2, #0
 800551a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800551e:	697b      	ldr	r3, [r7, #20]
 8005520:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005524:	b25b      	sxtb	r3, r3
 8005526:	f1b3 3fff 	cmp.w	r3, #4294967295
 800552a:	d103      	bne.n	8005534 <vQueueWaitForMessageRestricted+0x40>
 800552c:	697b      	ldr	r3, [r7, #20]
 800552e:	2200      	movs	r2, #0
 8005530:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005534:	f001 fb7e 	bl	8006c34 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005538:	697b      	ldr	r3, [r7, #20]
 800553a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800553c:	2b00      	cmp	r3, #0
 800553e:	d106      	bne.n	800554e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005540:	697b      	ldr	r3, [r7, #20]
 8005542:	3324      	adds	r3, #36	; 0x24
 8005544:	687a      	ldr	r2, [r7, #4]
 8005546:	68b9      	ldr	r1, [r7, #8]
 8005548:	4618      	mov	r0, r3
 800554a:	f000 fc35 	bl	8005db8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800554e:	6978      	ldr	r0, [r7, #20]
 8005550:	f7ff ff26 	bl	80053a0 <prvUnlockQueue>
	}
 8005554:	bf00      	nop
 8005556:	3718      	adds	r7, #24
 8005558:	46bd      	mov	sp, r7
 800555a:	bd80      	pop	{r7, pc}

0800555c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800555c:	b580      	push	{r7, lr}
 800555e:	b08e      	sub	sp, #56	; 0x38
 8005560:	af04      	add	r7, sp, #16
 8005562:	60f8      	str	r0, [r7, #12]
 8005564:	60b9      	str	r1, [r7, #8]
 8005566:	607a      	str	r2, [r7, #4]
 8005568:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800556a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800556c:	2b00      	cmp	r3, #0
 800556e:	d10a      	bne.n	8005586 <xTaskCreateStatic+0x2a>
	__asm volatile
 8005570:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005574:	f383 8811 	msr	BASEPRI, r3
 8005578:	f3bf 8f6f 	isb	sy
 800557c:	f3bf 8f4f 	dsb	sy
 8005580:	623b      	str	r3, [r7, #32]
}
 8005582:	bf00      	nop
 8005584:	e7fe      	b.n	8005584 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005586:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005588:	2b00      	cmp	r3, #0
 800558a:	d10a      	bne.n	80055a2 <xTaskCreateStatic+0x46>
	__asm volatile
 800558c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005590:	f383 8811 	msr	BASEPRI, r3
 8005594:	f3bf 8f6f 	isb	sy
 8005598:	f3bf 8f4f 	dsb	sy
 800559c:	61fb      	str	r3, [r7, #28]
}
 800559e:	bf00      	nop
 80055a0:	e7fe      	b.n	80055a0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80055a2:	235c      	movs	r3, #92	; 0x5c
 80055a4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80055a6:	693b      	ldr	r3, [r7, #16]
 80055a8:	2b5c      	cmp	r3, #92	; 0x5c
 80055aa:	d00a      	beq.n	80055c2 <xTaskCreateStatic+0x66>
	__asm volatile
 80055ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055b0:	f383 8811 	msr	BASEPRI, r3
 80055b4:	f3bf 8f6f 	isb	sy
 80055b8:	f3bf 8f4f 	dsb	sy
 80055bc:	61bb      	str	r3, [r7, #24]
}
 80055be:	bf00      	nop
 80055c0:	e7fe      	b.n	80055c0 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80055c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d01e      	beq.n	8005606 <xTaskCreateStatic+0xaa>
 80055c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d01b      	beq.n	8005606 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80055ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055d0:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80055d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055d4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80055d6:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80055d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055da:	2202      	movs	r2, #2
 80055dc:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80055e0:	2300      	movs	r3, #0
 80055e2:	9303      	str	r3, [sp, #12]
 80055e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055e6:	9302      	str	r3, [sp, #8]
 80055e8:	f107 0314 	add.w	r3, r7, #20
 80055ec:	9301      	str	r3, [sp, #4]
 80055ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055f0:	9300      	str	r3, [sp, #0]
 80055f2:	683b      	ldr	r3, [r7, #0]
 80055f4:	687a      	ldr	r2, [r7, #4]
 80055f6:	68b9      	ldr	r1, [r7, #8]
 80055f8:	68f8      	ldr	r0, [r7, #12]
 80055fa:	f000 f850 	bl	800569e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80055fe:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005600:	f000 f8d4 	bl	80057ac <prvAddNewTaskToReadyList>
 8005604:	e001      	b.n	800560a <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8005606:	2300      	movs	r3, #0
 8005608:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800560a:	697b      	ldr	r3, [r7, #20]
	}
 800560c:	4618      	mov	r0, r3
 800560e:	3728      	adds	r7, #40	; 0x28
 8005610:	46bd      	mov	sp, r7
 8005612:	bd80      	pop	{r7, pc}

08005614 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005614:	b580      	push	{r7, lr}
 8005616:	b08c      	sub	sp, #48	; 0x30
 8005618:	af04      	add	r7, sp, #16
 800561a:	60f8      	str	r0, [r7, #12]
 800561c:	60b9      	str	r1, [r7, #8]
 800561e:	603b      	str	r3, [r7, #0]
 8005620:	4613      	mov	r3, r2
 8005622:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005624:	88fb      	ldrh	r3, [r7, #6]
 8005626:	009b      	lsls	r3, r3, #2
 8005628:	4618      	mov	r0, r3
 800562a:	f001 fbf5 	bl	8006e18 <pvPortMalloc>
 800562e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005630:	697b      	ldr	r3, [r7, #20]
 8005632:	2b00      	cmp	r3, #0
 8005634:	d00e      	beq.n	8005654 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8005636:	205c      	movs	r0, #92	; 0x5c
 8005638:	f001 fbee 	bl	8006e18 <pvPortMalloc>
 800563c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800563e:	69fb      	ldr	r3, [r7, #28]
 8005640:	2b00      	cmp	r3, #0
 8005642:	d003      	beq.n	800564c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005644:	69fb      	ldr	r3, [r7, #28]
 8005646:	697a      	ldr	r2, [r7, #20]
 8005648:	631a      	str	r2, [r3, #48]	; 0x30
 800564a:	e005      	b.n	8005658 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800564c:	6978      	ldr	r0, [r7, #20]
 800564e:	f001 fca7 	bl	8006fa0 <vPortFree>
 8005652:	e001      	b.n	8005658 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005654:	2300      	movs	r3, #0
 8005656:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005658:	69fb      	ldr	r3, [r7, #28]
 800565a:	2b00      	cmp	r3, #0
 800565c:	d017      	beq.n	800568e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800565e:	69fb      	ldr	r3, [r7, #28]
 8005660:	2200      	movs	r2, #0
 8005662:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005666:	88fa      	ldrh	r2, [r7, #6]
 8005668:	2300      	movs	r3, #0
 800566a:	9303      	str	r3, [sp, #12]
 800566c:	69fb      	ldr	r3, [r7, #28]
 800566e:	9302      	str	r3, [sp, #8]
 8005670:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005672:	9301      	str	r3, [sp, #4]
 8005674:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005676:	9300      	str	r3, [sp, #0]
 8005678:	683b      	ldr	r3, [r7, #0]
 800567a:	68b9      	ldr	r1, [r7, #8]
 800567c:	68f8      	ldr	r0, [r7, #12]
 800567e:	f000 f80e 	bl	800569e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005682:	69f8      	ldr	r0, [r7, #28]
 8005684:	f000 f892 	bl	80057ac <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005688:	2301      	movs	r3, #1
 800568a:	61bb      	str	r3, [r7, #24]
 800568c:	e002      	b.n	8005694 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800568e:	f04f 33ff 	mov.w	r3, #4294967295
 8005692:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005694:	69bb      	ldr	r3, [r7, #24]
	}
 8005696:	4618      	mov	r0, r3
 8005698:	3720      	adds	r7, #32
 800569a:	46bd      	mov	sp, r7
 800569c:	bd80      	pop	{r7, pc}

0800569e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800569e:	b580      	push	{r7, lr}
 80056a0:	b088      	sub	sp, #32
 80056a2:	af00      	add	r7, sp, #0
 80056a4:	60f8      	str	r0, [r7, #12]
 80056a6:	60b9      	str	r1, [r7, #8]
 80056a8:	607a      	str	r2, [r7, #4]
 80056aa:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80056ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056ae:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	009b      	lsls	r3, r3, #2
 80056b4:	461a      	mov	r2, r3
 80056b6:	21a5      	movs	r1, #165	; 0xa5
 80056b8:	f001 fd88 	bl	80071cc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80056bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80056c6:	3b01      	subs	r3, #1
 80056c8:	009b      	lsls	r3, r3, #2
 80056ca:	4413      	add	r3, r2
 80056cc:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80056ce:	69bb      	ldr	r3, [r7, #24]
 80056d0:	f023 0307 	bic.w	r3, r3, #7
 80056d4:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80056d6:	69bb      	ldr	r3, [r7, #24]
 80056d8:	f003 0307 	and.w	r3, r3, #7
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d00a      	beq.n	80056f6 <prvInitialiseNewTask+0x58>
	__asm volatile
 80056e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056e4:	f383 8811 	msr	BASEPRI, r3
 80056e8:	f3bf 8f6f 	isb	sy
 80056ec:	f3bf 8f4f 	dsb	sy
 80056f0:	617b      	str	r3, [r7, #20]
}
 80056f2:	bf00      	nop
 80056f4:	e7fe      	b.n	80056f4 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80056f6:	2300      	movs	r3, #0
 80056f8:	61fb      	str	r3, [r7, #28]
 80056fa:	e012      	b.n	8005722 <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80056fc:	68ba      	ldr	r2, [r7, #8]
 80056fe:	69fb      	ldr	r3, [r7, #28]
 8005700:	4413      	add	r3, r2
 8005702:	7819      	ldrb	r1, [r3, #0]
 8005704:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005706:	69fb      	ldr	r3, [r7, #28]
 8005708:	4413      	add	r3, r2
 800570a:	3334      	adds	r3, #52	; 0x34
 800570c:	460a      	mov	r2, r1
 800570e:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8005710:	68ba      	ldr	r2, [r7, #8]
 8005712:	69fb      	ldr	r3, [r7, #28]
 8005714:	4413      	add	r3, r2
 8005716:	781b      	ldrb	r3, [r3, #0]
 8005718:	2b00      	cmp	r3, #0
 800571a:	d006      	beq.n	800572a <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800571c:	69fb      	ldr	r3, [r7, #28]
 800571e:	3301      	adds	r3, #1
 8005720:	61fb      	str	r3, [r7, #28]
 8005722:	69fb      	ldr	r3, [r7, #28]
 8005724:	2b0f      	cmp	r3, #15
 8005726:	d9e9      	bls.n	80056fc <prvInitialiseNewTask+0x5e>
 8005728:	e000      	b.n	800572c <prvInitialiseNewTask+0x8e>
		{
			break;
 800572a:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800572c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800572e:	2200      	movs	r2, #0
 8005730:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005734:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005736:	2b37      	cmp	r3, #55	; 0x37
 8005738:	d901      	bls.n	800573e <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800573a:	2337      	movs	r3, #55	; 0x37
 800573c:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800573e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005740:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005742:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005744:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005746:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005748:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800574a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800574c:	2200      	movs	r2, #0
 800574e:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005750:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005752:	3304      	adds	r3, #4
 8005754:	4618      	mov	r0, r3
 8005756:	f7ff f987 	bl	8004a68 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800575a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800575c:	3318      	adds	r3, #24
 800575e:	4618      	mov	r0, r3
 8005760:	f7ff f982 	bl	8004a68 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005764:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005766:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005768:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800576a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800576c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005770:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005772:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005774:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005776:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005778:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800577a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800577c:	2200      	movs	r2, #0
 800577e:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005780:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005782:	2200      	movs	r2, #0
 8005784:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005788:	683a      	ldr	r2, [r7, #0]
 800578a:	68f9      	ldr	r1, [r7, #12]
 800578c:	69b8      	ldr	r0, [r7, #24]
 800578e:	f001 f8f5 	bl	800697c <pxPortInitialiseStack>
 8005792:	4602      	mov	r2, r0
 8005794:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005796:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8005798:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800579a:	2b00      	cmp	r3, #0
 800579c:	d002      	beq.n	80057a4 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800579e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80057a2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80057a4:	bf00      	nop
 80057a6:	3720      	adds	r7, #32
 80057a8:	46bd      	mov	sp, r7
 80057aa:	bd80      	pop	{r7, pc}

080057ac <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80057ac:	b580      	push	{r7, lr}
 80057ae:	b082      	sub	sp, #8
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80057b4:	f001 fa0e 	bl	8006bd4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80057b8:	4b2d      	ldr	r3, [pc, #180]	; (8005870 <prvAddNewTaskToReadyList+0xc4>)
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	3301      	adds	r3, #1
 80057be:	4a2c      	ldr	r2, [pc, #176]	; (8005870 <prvAddNewTaskToReadyList+0xc4>)
 80057c0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80057c2:	4b2c      	ldr	r3, [pc, #176]	; (8005874 <prvAddNewTaskToReadyList+0xc8>)
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d109      	bne.n	80057de <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80057ca:	4a2a      	ldr	r2, [pc, #168]	; (8005874 <prvAddNewTaskToReadyList+0xc8>)
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80057d0:	4b27      	ldr	r3, [pc, #156]	; (8005870 <prvAddNewTaskToReadyList+0xc4>)
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	2b01      	cmp	r3, #1
 80057d6:	d110      	bne.n	80057fa <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80057d8:	f000 fc1a 	bl	8006010 <prvInitialiseTaskLists>
 80057dc:	e00d      	b.n	80057fa <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80057de:	4b26      	ldr	r3, [pc, #152]	; (8005878 <prvAddNewTaskToReadyList+0xcc>)
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d109      	bne.n	80057fa <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80057e6:	4b23      	ldr	r3, [pc, #140]	; (8005874 <prvAddNewTaskToReadyList+0xc8>)
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057f0:	429a      	cmp	r2, r3
 80057f2:	d802      	bhi.n	80057fa <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80057f4:	4a1f      	ldr	r2, [pc, #124]	; (8005874 <prvAddNewTaskToReadyList+0xc8>)
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80057fa:	4b20      	ldr	r3, [pc, #128]	; (800587c <prvAddNewTaskToReadyList+0xd0>)
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	3301      	adds	r3, #1
 8005800:	4a1e      	ldr	r2, [pc, #120]	; (800587c <prvAddNewTaskToReadyList+0xd0>)
 8005802:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005804:	4b1d      	ldr	r3, [pc, #116]	; (800587c <prvAddNewTaskToReadyList+0xd0>)
 8005806:	681a      	ldr	r2, [r3, #0]
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005810:	4b1b      	ldr	r3, [pc, #108]	; (8005880 <prvAddNewTaskToReadyList+0xd4>)
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	429a      	cmp	r2, r3
 8005816:	d903      	bls.n	8005820 <prvAddNewTaskToReadyList+0x74>
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800581c:	4a18      	ldr	r2, [pc, #96]	; (8005880 <prvAddNewTaskToReadyList+0xd4>)
 800581e:	6013      	str	r3, [r2, #0]
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005824:	4613      	mov	r3, r2
 8005826:	009b      	lsls	r3, r3, #2
 8005828:	4413      	add	r3, r2
 800582a:	009b      	lsls	r3, r3, #2
 800582c:	4a15      	ldr	r2, [pc, #84]	; (8005884 <prvAddNewTaskToReadyList+0xd8>)
 800582e:	441a      	add	r2, r3
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	3304      	adds	r3, #4
 8005834:	4619      	mov	r1, r3
 8005836:	4610      	mov	r0, r2
 8005838:	f7ff f923 	bl	8004a82 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800583c:	f001 f9fa 	bl	8006c34 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005840:	4b0d      	ldr	r3, [pc, #52]	; (8005878 <prvAddNewTaskToReadyList+0xcc>)
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	2b00      	cmp	r3, #0
 8005846:	d00e      	beq.n	8005866 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005848:	4b0a      	ldr	r3, [pc, #40]	; (8005874 <prvAddNewTaskToReadyList+0xc8>)
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005852:	429a      	cmp	r2, r3
 8005854:	d207      	bcs.n	8005866 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005856:	4b0c      	ldr	r3, [pc, #48]	; (8005888 <prvAddNewTaskToReadyList+0xdc>)
 8005858:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800585c:	601a      	str	r2, [r3, #0]
 800585e:	f3bf 8f4f 	dsb	sy
 8005862:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005866:	bf00      	nop
 8005868:	3708      	adds	r7, #8
 800586a:	46bd      	mov	sp, r7
 800586c:	bd80      	pop	{r7, pc}
 800586e:	bf00      	nop
 8005870:	20000e14 	.word	0x20000e14
 8005874:	20000940 	.word	0x20000940
 8005878:	20000e20 	.word	0x20000e20
 800587c:	20000e30 	.word	0x20000e30
 8005880:	20000e1c 	.word	0x20000e1c
 8005884:	20000944 	.word	0x20000944
 8005888:	e000ed04 	.word	0xe000ed04

0800588c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800588c:	b580      	push	{r7, lr}
 800588e:	b084      	sub	sp, #16
 8005890:	af00      	add	r7, sp, #0
 8005892:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005894:	2300      	movs	r3, #0
 8005896:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	2b00      	cmp	r3, #0
 800589c:	d017      	beq.n	80058ce <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800589e:	4b13      	ldr	r3, [pc, #76]	; (80058ec <vTaskDelay+0x60>)
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d00a      	beq.n	80058bc <vTaskDelay+0x30>
	__asm volatile
 80058a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058aa:	f383 8811 	msr	BASEPRI, r3
 80058ae:	f3bf 8f6f 	isb	sy
 80058b2:	f3bf 8f4f 	dsb	sy
 80058b6:	60bb      	str	r3, [r7, #8]
}
 80058b8:	bf00      	nop
 80058ba:	e7fe      	b.n	80058ba <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80058bc:	f000 f880 	bl	80059c0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80058c0:	2100      	movs	r1, #0
 80058c2:	6878      	ldr	r0, [r7, #4]
 80058c4:	f000 fcf4 	bl	80062b0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80058c8:	f000 f888 	bl	80059dc <xTaskResumeAll>
 80058cc:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d107      	bne.n	80058e4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80058d4:	4b06      	ldr	r3, [pc, #24]	; (80058f0 <vTaskDelay+0x64>)
 80058d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80058da:	601a      	str	r2, [r3, #0]
 80058dc:	f3bf 8f4f 	dsb	sy
 80058e0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80058e4:	bf00      	nop
 80058e6:	3710      	adds	r7, #16
 80058e8:	46bd      	mov	sp, r7
 80058ea:	bd80      	pop	{r7, pc}
 80058ec:	20000e3c 	.word	0x20000e3c
 80058f0:	e000ed04 	.word	0xe000ed04

080058f4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80058f4:	b580      	push	{r7, lr}
 80058f6:	b08a      	sub	sp, #40	; 0x28
 80058f8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80058fa:	2300      	movs	r3, #0
 80058fc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80058fe:	2300      	movs	r3, #0
 8005900:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005902:	463a      	mov	r2, r7
 8005904:	1d39      	adds	r1, r7, #4
 8005906:	f107 0308 	add.w	r3, r7, #8
 800590a:	4618      	mov	r0, r3
 800590c:	f7ff f858 	bl	80049c0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005910:	6839      	ldr	r1, [r7, #0]
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	68ba      	ldr	r2, [r7, #8]
 8005916:	9202      	str	r2, [sp, #8]
 8005918:	9301      	str	r3, [sp, #4]
 800591a:	2300      	movs	r3, #0
 800591c:	9300      	str	r3, [sp, #0]
 800591e:	2300      	movs	r3, #0
 8005920:	460a      	mov	r2, r1
 8005922:	4921      	ldr	r1, [pc, #132]	; (80059a8 <vTaskStartScheduler+0xb4>)
 8005924:	4821      	ldr	r0, [pc, #132]	; (80059ac <vTaskStartScheduler+0xb8>)
 8005926:	f7ff fe19 	bl	800555c <xTaskCreateStatic>
 800592a:	4603      	mov	r3, r0
 800592c:	4a20      	ldr	r2, [pc, #128]	; (80059b0 <vTaskStartScheduler+0xbc>)
 800592e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005930:	4b1f      	ldr	r3, [pc, #124]	; (80059b0 <vTaskStartScheduler+0xbc>)
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	2b00      	cmp	r3, #0
 8005936:	d002      	beq.n	800593e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005938:	2301      	movs	r3, #1
 800593a:	617b      	str	r3, [r7, #20]
 800593c:	e001      	b.n	8005942 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800593e:	2300      	movs	r3, #0
 8005940:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005942:	697b      	ldr	r3, [r7, #20]
 8005944:	2b01      	cmp	r3, #1
 8005946:	d102      	bne.n	800594e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005948:	f000 fd06 	bl	8006358 <xTimerCreateTimerTask>
 800594c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800594e:	697b      	ldr	r3, [r7, #20]
 8005950:	2b01      	cmp	r3, #1
 8005952:	d116      	bne.n	8005982 <vTaskStartScheduler+0x8e>
	__asm volatile
 8005954:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005958:	f383 8811 	msr	BASEPRI, r3
 800595c:	f3bf 8f6f 	isb	sy
 8005960:	f3bf 8f4f 	dsb	sy
 8005964:	613b      	str	r3, [r7, #16]
}
 8005966:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005968:	4b12      	ldr	r3, [pc, #72]	; (80059b4 <vTaskStartScheduler+0xc0>)
 800596a:	f04f 32ff 	mov.w	r2, #4294967295
 800596e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005970:	4b11      	ldr	r3, [pc, #68]	; (80059b8 <vTaskStartScheduler+0xc4>)
 8005972:	2201      	movs	r2, #1
 8005974:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8005976:	4b11      	ldr	r3, [pc, #68]	; (80059bc <vTaskStartScheduler+0xc8>)
 8005978:	2200      	movs	r2, #0
 800597a:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800597c:	f001 f888 	bl	8006a90 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005980:	e00e      	b.n	80059a0 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005982:	697b      	ldr	r3, [r7, #20]
 8005984:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005988:	d10a      	bne.n	80059a0 <vTaskStartScheduler+0xac>
	__asm volatile
 800598a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800598e:	f383 8811 	msr	BASEPRI, r3
 8005992:	f3bf 8f6f 	isb	sy
 8005996:	f3bf 8f4f 	dsb	sy
 800599a:	60fb      	str	r3, [r7, #12]
}
 800599c:	bf00      	nop
 800599e:	e7fe      	b.n	800599e <vTaskStartScheduler+0xaa>
}
 80059a0:	bf00      	nop
 80059a2:	3718      	adds	r7, #24
 80059a4:	46bd      	mov	sp, r7
 80059a6:	bd80      	pop	{r7, pc}
 80059a8:	08007270 	.word	0x08007270
 80059ac:	08005fe1 	.word	0x08005fe1
 80059b0:	20000e38 	.word	0x20000e38
 80059b4:	20000e34 	.word	0x20000e34
 80059b8:	20000e20 	.word	0x20000e20
 80059bc:	20000e18 	.word	0x20000e18

080059c0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80059c0:	b480      	push	{r7}
 80059c2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80059c4:	4b04      	ldr	r3, [pc, #16]	; (80059d8 <vTaskSuspendAll+0x18>)
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	3301      	adds	r3, #1
 80059ca:	4a03      	ldr	r2, [pc, #12]	; (80059d8 <vTaskSuspendAll+0x18>)
 80059cc:	6013      	str	r3, [r2, #0]
}
 80059ce:	bf00      	nop
 80059d0:	46bd      	mov	sp, r7
 80059d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d6:	4770      	bx	lr
 80059d8:	20000e3c 	.word	0x20000e3c

080059dc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80059dc:	b580      	push	{r7, lr}
 80059de:	b084      	sub	sp, #16
 80059e0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80059e2:	2300      	movs	r3, #0
 80059e4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80059e6:	2300      	movs	r3, #0
 80059e8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80059ea:	4b42      	ldr	r3, [pc, #264]	; (8005af4 <xTaskResumeAll+0x118>)
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d10a      	bne.n	8005a08 <xTaskResumeAll+0x2c>
	__asm volatile
 80059f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059f6:	f383 8811 	msr	BASEPRI, r3
 80059fa:	f3bf 8f6f 	isb	sy
 80059fe:	f3bf 8f4f 	dsb	sy
 8005a02:	603b      	str	r3, [r7, #0]
}
 8005a04:	bf00      	nop
 8005a06:	e7fe      	b.n	8005a06 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005a08:	f001 f8e4 	bl	8006bd4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005a0c:	4b39      	ldr	r3, [pc, #228]	; (8005af4 <xTaskResumeAll+0x118>)
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	3b01      	subs	r3, #1
 8005a12:	4a38      	ldr	r2, [pc, #224]	; (8005af4 <xTaskResumeAll+0x118>)
 8005a14:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005a16:	4b37      	ldr	r3, [pc, #220]	; (8005af4 <xTaskResumeAll+0x118>)
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d162      	bne.n	8005ae4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005a1e:	4b36      	ldr	r3, [pc, #216]	; (8005af8 <xTaskResumeAll+0x11c>)
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d05e      	beq.n	8005ae4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005a26:	e02f      	b.n	8005a88 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8005a28:	4b34      	ldr	r3, [pc, #208]	; (8005afc <xTaskResumeAll+0x120>)
 8005a2a:	68db      	ldr	r3, [r3, #12]
 8005a2c:	68db      	ldr	r3, [r3, #12]
 8005a2e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	3318      	adds	r3, #24
 8005a34:	4618      	mov	r0, r3
 8005a36:	f7ff f881 	bl	8004b3c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	3304      	adds	r3, #4
 8005a3e:	4618      	mov	r0, r3
 8005a40:	f7ff f87c 	bl	8004b3c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a48:	4b2d      	ldr	r3, [pc, #180]	; (8005b00 <xTaskResumeAll+0x124>)
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	429a      	cmp	r2, r3
 8005a4e:	d903      	bls.n	8005a58 <xTaskResumeAll+0x7c>
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a54:	4a2a      	ldr	r2, [pc, #168]	; (8005b00 <xTaskResumeAll+0x124>)
 8005a56:	6013      	str	r3, [r2, #0]
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a5c:	4613      	mov	r3, r2
 8005a5e:	009b      	lsls	r3, r3, #2
 8005a60:	4413      	add	r3, r2
 8005a62:	009b      	lsls	r3, r3, #2
 8005a64:	4a27      	ldr	r2, [pc, #156]	; (8005b04 <xTaskResumeAll+0x128>)
 8005a66:	441a      	add	r2, r3
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	3304      	adds	r3, #4
 8005a6c:	4619      	mov	r1, r3
 8005a6e:	4610      	mov	r0, r2
 8005a70:	f7ff f807 	bl	8004a82 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a78:	4b23      	ldr	r3, [pc, #140]	; (8005b08 <xTaskResumeAll+0x12c>)
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a7e:	429a      	cmp	r2, r3
 8005a80:	d302      	bcc.n	8005a88 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8005a82:	4b22      	ldr	r3, [pc, #136]	; (8005b0c <xTaskResumeAll+0x130>)
 8005a84:	2201      	movs	r2, #1
 8005a86:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005a88:	4b1c      	ldr	r3, [pc, #112]	; (8005afc <xTaskResumeAll+0x120>)
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d1cb      	bne.n	8005a28 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d001      	beq.n	8005a9a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005a96:	f000 fb59 	bl	800614c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8005a9a:	4b1d      	ldr	r3, [pc, #116]	; (8005b10 <xTaskResumeAll+0x134>)
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d010      	beq.n	8005ac8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005aa6:	f000 f847 	bl	8005b38 <xTaskIncrementTick>
 8005aaa:	4603      	mov	r3, r0
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d002      	beq.n	8005ab6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8005ab0:	4b16      	ldr	r3, [pc, #88]	; (8005b0c <xTaskResumeAll+0x130>)
 8005ab2:	2201      	movs	r2, #1
 8005ab4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	3b01      	subs	r3, #1
 8005aba:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d1f1      	bne.n	8005aa6 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8005ac2:	4b13      	ldr	r3, [pc, #76]	; (8005b10 <xTaskResumeAll+0x134>)
 8005ac4:	2200      	movs	r2, #0
 8005ac6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005ac8:	4b10      	ldr	r3, [pc, #64]	; (8005b0c <xTaskResumeAll+0x130>)
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d009      	beq.n	8005ae4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005ad0:	2301      	movs	r3, #1
 8005ad2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005ad4:	4b0f      	ldr	r3, [pc, #60]	; (8005b14 <xTaskResumeAll+0x138>)
 8005ad6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ada:	601a      	str	r2, [r3, #0]
 8005adc:	f3bf 8f4f 	dsb	sy
 8005ae0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005ae4:	f001 f8a6 	bl	8006c34 <vPortExitCritical>

	return xAlreadyYielded;
 8005ae8:	68bb      	ldr	r3, [r7, #8]
}
 8005aea:	4618      	mov	r0, r3
 8005aec:	3710      	adds	r7, #16
 8005aee:	46bd      	mov	sp, r7
 8005af0:	bd80      	pop	{r7, pc}
 8005af2:	bf00      	nop
 8005af4:	20000e3c 	.word	0x20000e3c
 8005af8:	20000e14 	.word	0x20000e14
 8005afc:	20000dd4 	.word	0x20000dd4
 8005b00:	20000e1c 	.word	0x20000e1c
 8005b04:	20000944 	.word	0x20000944
 8005b08:	20000940 	.word	0x20000940
 8005b0c:	20000e28 	.word	0x20000e28
 8005b10:	20000e24 	.word	0x20000e24
 8005b14:	e000ed04 	.word	0xe000ed04

08005b18 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005b18:	b480      	push	{r7}
 8005b1a:	b083      	sub	sp, #12
 8005b1c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005b1e:	4b05      	ldr	r3, [pc, #20]	; (8005b34 <xTaskGetTickCount+0x1c>)
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005b24:	687b      	ldr	r3, [r7, #4]
}
 8005b26:	4618      	mov	r0, r3
 8005b28:	370c      	adds	r7, #12
 8005b2a:	46bd      	mov	sp, r7
 8005b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b30:	4770      	bx	lr
 8005b32:	bf00      	nop
 8005b34:	20000e18 	.word	0x20000e18

08005b38 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005b38:	b580      	push	{r7, lr}
 8005b3a:	b086      	sub	sp, #24
 8005b3c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005b3e:	2300      	movs	r3, #0
 8005b40:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005b42:	4b51      	ldr	r3, [pc, #324]	; (8005c88 <xTaskIncrementTick+0x150>)
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	f040 808e 	bne.w	8005c68 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005b4c:	4b4f      	ldr	r3, [pc, #316]	; (8005c8c <xTaskIncrementTick+0x154>)
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	3301      	adds	r3, #1
 8005b52:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005b54:	4a4d      	ldr	r2, [pc, #308]	; (8005c8c <xTaskIncrementTick+0x154>)
 8005b56:	693b      	ldr	r3, [r7, #16]
 8005b58:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005b5a:	693b      	ldr	r3, [r7, #16]
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d120      	bne.n	8005ba2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005b60:	4b4b      	ldr	r3, [pc, #300]	; (8005c90 <xTaskIncrementTick+0x158>)
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d00a      	beq.n	8005b80 <xTaskIncrementTick+0x48>
	__asm volatile
 8005b6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b6e:	f383 8811 	msr	BASEPRI, r3
 8005b72:	f3bf 8f6f 	isb	sy
 8005b76:	f3bf 8f4f 	dsb	sy
 8005b7a:	603b      	str	r3, [r7, #0]
}
 8005b7c:	bf00      	nop
 8005b7e:	e7fe      	b.n	8005b7e <xTaskIncrementTick+0x46>
 8005b80:	4b43      	ldr	r3, [pc, #268]	; (8005c90 <xTaskIncrementTick+0x158>)
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	60fb      	str	r3, [r7, #12]
 8005b86:	4b43      	ldr	r3, [pc, #268]	; (8005c94 <xTaskIncrementTick+0x15c>)
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	4a41      	ldr	r2, [pc, #260]	; (8005c90 <xTaskIncrementTick+0x158>)
 8005b8c:	6013      	str	r3, [r2, #0]
 8005b8e:	4a41      	ldr	r2, [pc, #260]	; (8005c94 <xTaskIncrementTick+0x15c>)
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	6013      	str	r3, [r2, #0]
 8005b94:	4b40      	ldr	r3, [pc, #256]	; (8005c98 <xTaskIncrementTick+0x160>)
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	3301      	adds	r3, #1
 8005b9a:	4a3f      	ldr	r2, [pc, #252]	; (8005c98 <xTaskIncrementTick+0x160>)
 8005b9c:	6013      	str	r3, [r2, #0]
 8005b9e:	f000 fad5 	bl	800614c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005ba2:	4b3e      	ldr	r3, [pc, #248]	; (8005c9c <xTaskIncrementTick+0x164>)
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	693a      	ldr	r2, [r7, #16]
 8005ba8:	429a      	cmp	r2, r3
 8005baa:	d34e      	bcc.n	8005c4a <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005bac:	4b38      	ldr	r3, [pc, #224]	; (8005c90 <xTaskIncrementTick+0x158>)
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d101      	bne.n	8005bba <xTaskIncrementTick+0x82>
 8005bb6:	2301      	movs	r3, #1
 8005bb8:	e000      	b.n	8005bbc <xTaskIncrementTick+0x84>
 8005bba:	2300      	movs	r3, #0
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d004      	beq.n	8005bca <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005bc0:	4b36      	ldr	r3, [pc, #216]	; (8005c9c <xTaskIncrementTick+0x164>)
 8005bc2:	f04f 32ff 	mov.w	r2, #4294967295
 8005bc6:	601a      	str	r2, [r3, #0]
					break;
 8005bc8:	e03f      	b.n	8005c4a <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005bca:	4b31      	ldr	r3, [pc, #196]	; (8005c90 <xTaskIncrementTick+0x158>)
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	68db      	ldr	r3, [r3, #12]
 8005bd0:	68db      	ldr	r3, [r3, #12]
 8005bd2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005bd4:	68bb      	ldr	r3, [r7, #8]
 8005bd6:	685b      	ldr	r3, [r3, #4]
 8005bd8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005bda:	693a      	ldr	r2, [r7, #16]
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	429a      	cmp	r2, r3
 8005be0:	d203      	bcs.n	8005bea <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005be2:	4a2e      	ldr	r2, [pc, #184]	; (8005c9c <xTaskIncrementTick+0x164>)
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	6013      	str	r3, [r2, #0]
						break;
 8005be8:	e02f      	b.n	8005c4a <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005bea:	68bb      	ldr	r3, [r7, #8]
 8005bec:	3304      	adds	r3, #4
 8005bee:	4618      	mov	r0, r3
 8005bf0:	f7fe ffa4 	bl	8004b3c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005bf4:	68bb      	ldr	r3, [r7, #8]
 8005bf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d004      	beq.n	8005c06 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005bfc:	68bb      	ldr	r3, [r7, #8]
 8005bfe:	3318      	adds	r3, #24
 8005c00:	4618      	mov	r0, r3
 8005c02:	f7fe ff9b 	bl	8004b3c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005c06:	68bb      	ldr	r3, [r7, #8]
 8005c08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c0a:	4b25      	ldr	r3, [pc, #148]	; (8005ca0 <xTaskIncrementTick+0x168>)
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	429a      	cmp	r2, r3
 8005c10:	d903      	bls.n	8005c1a <xTaskIncrementTick+0xe2>
 8005c12:	68bb      	ldr	r3, [r7, #8]
 8005c14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c16:	4a22      	ldr	r2, [pc, #136]	; (8005ca0 <xTaskIncrementTick+0x168>)
 8005c18:	6013      	str	r3, [r2, #0]
 8005c1a:	68bb      	ldr	r3, [r7, #8]
 8005c1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c1e:	4613      	mov	r3, r2
 8005c20:	009b      	lsls	r3, r3, #2
 8005c22:	4413      	add	r3, r2
 8005c24:	009b      	lsls	r3, r3, #2
 8005c26:	4a1f      	ldr	r2, [pc, #124]	; (8005ca4 <xTaskIncrementTick+0x16c>)
 8005c28:	441a      	add	r2, r3
 8005c2a:	68bb      	ldr	r3, [r7, #8]
 8005c2c:	3304      	adds	r3, #4
 8005c2e:	4619      	mov	r1, r3
 8005c30:	4610      	mov	r0, r2
 8005c32:	f7fe ff26 	bl	8004a82 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005c36:	68bb      	ldr	r3, [r7, #8]
 8005c38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c3a:	4b1b      	ldr	r3, [pc, #108]	; (8005ca8 <xTaskIncrementTick+0x170>)
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c40:	429a      	cmp	r2, r3
 8005c42:	d3b3      	bcc.n	8005bac <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8005c44:	2301      	movs	r3, #1
 8005c46:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005c48:	e7b0      	b.n	8005bac <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005c4a:	4b17      	ldr	r3, [pc, #92]	; (8005ca8 <xTaskIncrementTick+0x170>)
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c50:	4914      	ldr	r1, [pc, #80]	; (8005ca4 <xTaskIncrementTick+0x16c>)
 8005c52:	4613      	mov	r3, r2
 8005c54:	009b      	lsls	r3, r3, #2
 8005c56:	4413      	add	r3, r2
 8005c58:	009b      	lsls	r3, r3, #2
 8005c5a:	440b      	add	r3, r1
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	2b01      	cmp	r3, #1
 8005c60:	d907      	bls.n	8005c72 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8005c62:	2301      	movs	r3, #1
 8005c64:	617b      	str	r3, [r7, #20]
 8005c66:	e004      	b.n	8005c72 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8005c68:	4b10      	ldr	r3, [pc, #64]	; (8005cac <xTaskIncrementTick+0x174>)
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	3301      	adds	r3, #1
 8005c6e:	4a0f      	ldr	r2, [pc, #60]	; (8005cac <xTaskIncrementTick+0x174>)
 8005c70:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8005c72:	4b0f      	ldr	r3, [pc, #60]	; (8005cb0 <xTaskIncrementTick+0x178>)
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d001      	beq.n	8005c7e <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 8005c7a:	2301      	movs	r3, #1
 8005c7c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8005c7e:	697b      	ldr	r3, [r7, #20]
}
 8005c80:	4618      	mov	r0, r3
 8005c82:	3718      	adds	r7, #24
 8005c84:	46bd      	mov	sp, r7
 8005c86:	bd80      	pop	{r7, pc}
 8005c88:	20000e3c 	.word	0x20000e3c
 8005c8c:	20000e18 	.word	0x20000e18
 8005c90:	20000dcc 	.word	0x20000dcc
 8005c94:	20000dd0 	.word	0x20000dd0
 8005c98:	20000e2c 	.word	0x20000e2c
 8005c9c:	20000e34 	.word	0x20000e34
 8005ca0:	20000e1c 	.word	0x20000e1c
 8005ca4:	20000944 	.word	0x20000944
 8005ca8:	20000940 	.word	0x20000940
 8005cac:	20000e24 	.word	0x20000e24
 8005cb0:	20000e28 	.word	0x20000e28

08005cb4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005cb4:	b480      	push	{r7}
 8005cb6:	b085      	sub	sp, #20
 8005cb8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005cba:	4b28      	ldr	r3, [pc, #160]	; (8005d5c <vTaskSwitchContext+0xa8>)
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d003      	beq.n	8005cca <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005cc2:	4b27      	ldr	r3, [pc, #156]	; (8005d60 <vTaskSwitchContext+0xac>)
 8005cc4:	2201      	movs	r2, #1
 8005cc6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005cc8:	e041      	b.n	8005d4e <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8005cca:	4b25      	ldr	r3, [pc, #148]	; (8005d60 <vTaskSwitchContext+0xac>)
 8005ccc:	2200      	movs	r2, #0
 8005cce:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8005cd0:	4b24      	ldr	r3, [pc, #144]	; (8005d64 <vTaskSwitchContext+0xb0>)
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	60fb      	str	r3, [r7, #12]
 8005cd6:	e010      	b.n	8005cfa <vTaskSwitchContext+0x46>
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d10a      	bne.n	8005cf4 <vTaskSwitchContext+0x40>
	__asm volatile
 8005cde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ce2:	f383 8811 	msr	BASEPRI, r3
 8005ce6:	f3bf 8f6f 	isb	sy
 8005cea:	f3bf 8f4f 	dsb	sy
 8005cee:	607b      	str	r3, [r7, #4]
}
 8005cf0:	bf00      	nop
 8005cf2:	e7fe      	b.n	8005cf2 <vTaskSwitchContext+0x3e>
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	3b01      	subs	r3, #1
 8005cf8:	60fb      	str	r3, [r7, #12]
 8005cfa:	491b      	ldr	r1, [pc, #108]	; (8005d68 <vTaskSwitchContext+0xb4>)
 8005cfc:	68fa      	ldr	r2, [r7, #12]
 8005cfe:	4613      	mov	r3, r2
 8005d00:	009b      	lsls	r3, r3, #2
 8005d02:	4413      	add	r3, r2
 8005d04:	009b      	lsls	r3, r3, #2
 8005d06:	440b      	add	r3, r1
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d0e4      	beq.n	8005cd8 <vTaskSwitchContext+0x24>
 8005d0e:	68fa      	ldr	r2, [r7, #12]
 8005d10:	4613      	mov	r3, r2
 8005d12:	009b      	lsls	r3, r3, #2
 8005d14:	4413      	add	r3, r2
 8005d16:	009b      	lsls	r3, r3, #2
 8005d18:	4a13      	ldr	r2, [pc, #76]	; (8005d68 <vTaskSwitchContext+0xb4>)
 8005d1a:	4413      	add	r3, r2
 8005d1c:	60bb      	str	r3, [r7, #8]
 8005d1e:	68bb      	ldr	r3, [r7, #8]
 8005d20:	685b      	ldr	r3, [r3, #4]
 8005d22:	685a      	ldr	r2, [r3, #4]
 8005d24:	68bb      	ldr	r3, [r7, #8]
 8005d26:	605a      	str	r2, [r3, #4]
 8005d28:	68bb      	ldr	r3, [r7, #8]
 8005d2a:	685a      	ldr	r2, [r3, #4]
 8005d2c:	68bb      	ldr	r3, [r7, #8]
 8005d2e:	3308      	adds	r3, #8
 8005d30:	429a      	cmp	r2, r3
 8005d32:	d104      	bne.n	8005d3e <vTaskSwitchContext+0x8a>
 8005d34:	68bb      	ldr	r3, [r7, #8]
 8005d36:	685b      	ldr	r3, [r3, #4]
 8005d38:	685a      	ldr	r2, [r3, #4]
 8005d3a:	68bb      	ldr	r3, [r7, #8]
 8005d3c:	605a      	str	r2, [r3, #4]
 8005d3e:	68bb      	ldr	r3, [r7, #8]
 8005d40:	685b      	ldr	r3, [r3, #4]
 8005d42:	68db      	ldr	r3, [r3, #12]
 8005d44:	4a09      	ldr	r2, [pc, #36]	; (8005d6c <vTaskSwitchContext+0xb8>)
 8005d46:	6013      	str	r3, [r2, #0]
 8005d48:	4a06      	ldr	r2, [pc, #24]	; (8005d64 <vTaskSwitchContext+0xb0>)
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	6013      	str	r3, [r2, #0]
}
 8005d4e:	bf00      	nop
 8005d50:	3714      	adds	r7, #20
 8005d52:	46bd      	mov	sp, r7
 8005d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d58:	4770      	bx	lr
 8005d5a:	bf00      	nop
 8005d5c:	20000e3c 	.word	0x20000e3c
 8005d60:	20000e28 	.word	0x20000e28
 8005d64:	20000e1c 	.word	0x20000e1c
 8005d68:	20000944 	.word	0x20000944
 8005d6c:	20000940 	.word	0x20000940

08005d70 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005d70:	b580      	push	{r7, lr}
 8005d72:	b084      	sub	sp, #16
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	6078      	str	r0, [r7, #4]
 8005d78:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d10a      	bne.n	8005d96 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8005d80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d84:	f383 8811 	msr	BASEPRI, r3
 8005d88:	f3bf 8f6f 	isb	sy
 8005d8c:	f3bf 8f4f 	dsb	sy
 8005d90:	60fb      	str	r3, [r7, #12]
}
 8005d92:	bf00      	nop
 8005d94:	e7fe      	b.n	8005d94 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005d96:	4b07      	ldr	r3, [pc, #28]	; (8005db4 <vTaskPlaceOnEventList+0x44>)
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	3318      	adds	r3, #24
 8005d9c:	4619      	mov	r1, r3
 8005d9e:	6878      	ldr	r0, [r7, #4]
 8005da0:	f7fe fe93 	bl	8004aca <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005da4:	2101      	movs	r1, #1
 8005da6:	6838      	ldr	r0, [r7, #0]
 8005da8:	f000 fa82 	bl	80062b0 <prvAddCurrentTaskToDelayedList>
}
 8005dac:	bf00      	nop
 8005dae:	3710      	adds	r7, #16
 8005db0:	46bd      	mov	sp, r7
 8005db2:	bd80      	pop	{r7, pc}
 8005db4:	20000940 	.word	0x20000940

08005db8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005db8:	b580      	push	{r7, lr}
 8005dba:	b086      	sub	sp, #24
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	60f8      	str	r0, [r7, #12]
 8005dc0:	60b9      	str	r1, [r7, #8]
 8005dc2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d10a      	bne.n	8005de0 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8005dca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dce:	f383 8811 	msr	BASEPRI, r3
 8005dd2:	f3bf 8f6f 	isb	sy
 8005dd6:	f3bf 8f4f 	dsb	sy
 8005dda:	617b      	str	r3, [r7, #20]
}
 8005ddc:	bf00      	nop
 8005dde:	e7fe      	b.n	8005dde <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005de0:	4b0a      	ldr	r3, [pc, #40]	; (8005e0c <vTaskPlaceOnEventListRestricted+0x54>)
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	3318      	adds	r3, #24
 8005de6:	4619      	mov	r1, r3
 8005de8:	68f8      	ldr	r0, [r7, #12]
 8005dea:	f7fe fe4a 	bl	8004a82 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d002      	beq.n	8005dfa <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8005df4:	f04f 33ff 	mov.w	r3, #4294967295
 8005df8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005dfa:	6879      	ldr	r1, [r7, #4]
 8005dfc:	68b8      	ldr	r0, [r7, #8]
 8005dfe:	f000 fa57 	bl	80062b0 <prvAddCurrentTaskToDelayedList>
	}
 8005e02:	bf00      	nop
 8005e04:	3718      	adds	r7, #24
 8005e06:	46bd      	mov	sp, r7
 8005e08:	bd80      	pop	{r7, pc}
 8005e0a:	bf00      	nop
 8005e0c:	20000940 	.word	0x20000940

08005e10 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005e10:	b580      	push	{r7, lr}
 8005e12:	b086      	sub	sp, #24
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	68db      	ldr	r3, [r3, #12]
 8005e1c:	68db      	ldr	r3, [r3, #12]
 8005e1e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005e20:	693b      	ldr	r3, [r7, #16]
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d10a      	bne.n	8005e3c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8005e26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e2a:	f383 8811 	msr	BASEPRI, r3
 8005e2e:	f3bf 8f6f 	isb	sy
 8005e32:	f3bf 8f4f 	dsb	sy
 8005e36:	60fb      	str	r3, [r7, #12]
}
 8005e38:	bf00      	nop
 8005e3a:	e7fe      	b.n	8005e3a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005e3c:	693b      	ldr	r3, [r7, #16]
 8005e3e:	3318      	adds	r3, #24
 8005e40:	4618      	mov	r0, r3
 8005e42:	f7fe fe7b 	bl	8004b3c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005e46:	4b1e      	ldr	r3, [pc, #120]	; (8005ec0 <xTaskRemoveFromEventList+0xb0>)
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d11d      	bne.n	8005e8a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005e4e:	693b      	ldr	r3, [r7, #16]
 8005e50:	3304      	adds	r3, #4
 8005e52:	4618      	mov	r0, r3
 8005e54:	f7fe fe72 	bl	8004b3c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005e58:	693b      	ldr	r3, [r7, #16]
 8005e5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e5c:	4b19      	ldr	r3, [pc, #100]	; (8005ec4 <xTaskRemoveFromEventList+0xb4>)
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	429a      	cmp	r2, r3
 8005e62:	d903      	bls.n	8005e6c <xTaskRemoveFromEventList+0x5c>
 8005e64:	693b      	ldr	r3, [r7, #16]
 8005e66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e68:	4a16      	ldr	r2, [pc, #88]	; (8005ec4 <xTaskRemoveFromEventList+0xb4>)
 8005e6a:	6013      	str	r3, [r2, #0]
 8005e6c:	693b      	ldr	r3, [r7, #16]
 8005e6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e70:	4613      	mov	r3, r2
 8005e72:	009b      	lsls	r3, r3, #2
 8005e74:	4413      	add	r3, r2
 8005e76:	009b      	lsls	r3, r3, #2
 8005e78:	4a13      	ldr	r2, [pc, #76]	; (8005ec8 <xTaskRemoveFromEventList+0xb8>)
 8005e7a:	441a      	add	r2, r3
 8005e7c:	693b      	ldr	r3, [r7, #16]
 8005e7e:	3304      	adds	r3, #4
 8005e80:	4619      	mov	r1, r3
 8005e82:	4610      	mov	r0, r2
 8005e84:	f7fe fdfd 	bl	8004a82 <vListInsertEnd>
 8005e88:	e005      	b.n	8005e96 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005e8a:	693b      	ldr	r3, [r7, #16]
 8005e8c:	3318      	adds	r3, #24
 8005e8e:	4619      	mov	r1, r3
 8005e90:	480e      	ldr	r0, [pc, #56]	; (8005ecc <xTaskRemoveFromEventList+0xbc>)
 8005e92:	f7fe fdf6 	bl	8004a82 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005e96:	693b      	ldr	r3, [r7, #16]
 8005e98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e9a:	4b0d      	ldr	r3, [pc, #52]	; (8005ed0 <xTaskRemoveFromEventList+0xc0>)
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ea0:	429a      	cmp	r2, r3
 8005ea2:	d905      	bls.n	8005eb0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005ea4:	2301      	movs	r3, #1
 8005ea6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005ea8:	4b0a      	ldr	r3, [pc, #40]	; (8005ed4 <xTaskRemoveFromEventList+0xc4>)
 8005eaa:	2201      	movs	r2, #1
 8005eac:	601a      	str	r2, [r3, #0]
 8005eae:	e001      	b.n	8005eb4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8005eb0:	2300      	movs	r3, #0
 8005eb2:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8005eb4:	697b      	ldr	r3, [r7, #20]
}
 8005eb6:	4618      	mov	r0, r3
 8005eb8:	3718      	adds	r7, #24
 8005eba:	46bd      	mov	sp, r7
 8005ebc:	bd80      	pop	{r7, pc}
 8005ebe:	bf00      	nop
 8005ec0:	20000e3c 	.word	0x20000e3c
 8005ec4:	20000e1c 	.word	0x20000e1c
 8005ec8:	20000944 	.word	0x20000944
 8005ecc:	20000dd4 	.word	0x20000dd4
 8005ed0:	20000940 	.word	0x20000940
 8005ed4:	20000e28 	.word	0x20000e28

08005ed8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005ed8:	b480      	push	{r7}
 8005eda:	b083      	sub	sp, #12
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005ee0:	4b06      	ldr	r3, [pc, #24]	; (8005efc <vTaskInternalSetTimeOutState+0x24>)
 8005ee2:	681a      	ldr	r2, [r3, #0]
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005ee8:	4b05      	ldr	r3, [pc, #20]	; (8005f00 <vTaskInternalSetTimeOutState+0x28>)
 8005eea:	681a      	ldr	r2, [r3, #0]
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	605a      	str	r2, [r3, #4]
}
 8005ef0:	bf00      	nop
 8005ef2:	370c      	adds	r7, #12
 8005ef4:	46bd      	mov	sp, r7
 8005ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005efa:	4770      	bx	lr
 8005efc:	20000e2c 	.word	0x20000e2c
 8005f00:	20000e18 	.word	0x20000e18

08005f04 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005f04:	b580      	push	{r7, lr}
 8005f06:	b088      	sub	sp, #32
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	6078      	str	r0, [r7, #4]
 8005f0c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d10a      	bne.n	8005f2a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8005f14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f18:	f383 8811 	msr	BASEPRI, r3
 8005f1c:	f3bf 8f6f 	isb	sy
 8005f20:	f3bf 8f4f 	dsb	sy
 8005f24:	613b      	str	r3, [r7, #16]
}
 8005f26:	bf00      	nop
 8005f28:	e7fe      	b.n	8005f28 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005f2a:	683b      	ldr	r3, [r7, #0]
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d10a      	bne.n	8005f46 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8005f30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f34:	f383 8811 	msr	BASEPRI, r3
 8005f38:	f3bf 8f6f 	isb	sy
 8005f3c:	f3bf 8f4f 	dsb	sy
 8005f40:	60fb      	str	r3, [r7, #12]
}
 8005f42:	bf00      	nop
 8005f44:	e7fe      	b.n	8005f44 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8005f46:	f000 fe45 	bl	8006bd4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005f4a:	4b1d      	ldr	r3, [pc, #116]	; (8005fc0 <xTaskCheckForTimeOut+0xbc>)
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	685b      	ldr	r3, [r3, #4]
 8005f54:	69ba      	ldr	r2, [r7, #24]
 8005f56:	1ad3      	subs	r3, r2, r3
 8005f58:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005f5a:	683b      	ldr	r3, [r7, #0]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f62:	d102      	bne.n	8005f6a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005f64:	2300      	movs	r3, #0
 8005f66:	61fb      	str	r3, [r7, #28]
 8005f68:	e023      	b.n	8005fb2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681a      	ldr	r2, [r3, #0]
 8005f6e:	4b15      	ldr	r3, [pc, #84]	; (8005fc4 <xTaskCheckForTimeOut+0xc0>)
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	429a      	cmp	r2, r3
 8005f74:	d007      	beq.n	8005f86 <xTaskCheckForTimeOut+0x82>
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	685b      	ldr	r3, [r3, #4]
 8005f7a:	69ba      	ldr	r2, [r7, #24]
 8005f7c:	429a      	cmp	r2, r3
 8005f7e:	d302      	bcc.n	8005f86 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005f80:	2301      	movs	r3, #1
 8005f82:	61fb      	str	r3, [r7, #28]
 8005f84:	e015      	b.n	8005fb2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005f86:	683b      	ldr	r3, [r7, #0]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	697a      	ldr	r2, [r7, #20]
 8005f8c:	429a      	cmp	r2, r3
 8005f8e:	d20b      	bcs.n	8005fa8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005f90:	683b      	ldr	r3, [r7, #0]
 8005f92:	681a      	ldr	r2, [r3, #0]
 8005f94:	697b      	ldr	r3, [r7, #20]
 8005f96:	1ad2      	subs	r2, r2, r3
 8005f98:	683b      	ldr	r3, [r7, #0]
 8005f9a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005f9c:	6878      	ldr	r0, [r7, #4]
 8005f9e:	f7ff ff9b 	bl	8005ed8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005fa2:	2300      	movs	r3, #0
 8005fa4:	61fb      	str	r3, [r7, #28]
 8005fa6:	e004      	b.n	8005fb2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8005fa8:	683b      	ldr	r3, [r7, #0]
 8005faa:	2200      	movs	r2, #0
 8005fac:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005fae:	2301      	movs	r3, #1
 8005fb0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005fb2:	f000 fe3f 	bl	8006c34 <vPortExitCritical>

	return xReturn;
 8005fb6:	69fb      	ldr	r3, [r7, #28]
}
 8005fb8:	4618      	mov	r0, r3
 8005fba:	3720      	adds	r7, #32
 8005fbc:	46bd      	mov	sp, r7
 8005fbe:	bd80      	pop	{r7, pc}
 8005fc0:	20000e18 	.word	0x20000e18
 8005fc4:	20000e2c 	.word	0x20000e2c

08005fc8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005fc8:	b480      	push	{r7}
 8005fca:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005fcc:	4b03      	ldr	r3, [pc, #12]	; (8005fdc <vTaskMissedYield+0x14>)
 8005fce:	2201      	movs	r2, #1
 8005fd0:	601a      	str	r2, [r3, #0]
}
 8005fd2:	bf00      	nop
 8005fd4:	46bd      	mov	sp, r7
 8005fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fda:	4770      	bx	lr
 8005fdc:	20000e28 	.word	0x20000e28

08005fe0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005fe0:	b580      	push	{r7, lr}
 8005fe2:	b082      	sub	sp, #8
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005fe8:	f000 f852 	bl	8006090 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005fec:	4b06      	ldr	r3, [pc, #24]	; (8006008 <prvIdleTask+0x28>)
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	2b01      	cmp	r3, #1
 8005ff2:	d9f9      	bls.n	8005fe8 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005ff4:	4b05      	ldr	r3, [pc, #20]	; (800600c <prvIdleTask+0x2c>)
 8005ff6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ffa:	601a      	str	r2, [r3, #0]
 8005ffc:	f3bf 8f4f 	dsb	sy
 8006000:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006004:	e7f0      	b.n	8005fe8 <prvIdleTask+0x8>
 8006006:	bf00      	nop
 8006008:	20000944 	.word	0x20000944
 800600c:	e000ed04 	.word	0xe000ed04

08006010 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006010:	b580      	push	{r7, lr}
 8006012:	b082      	sub	sp, #8
 8006014:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006016:	2300      	movs	r3, #0
 8006018:	607b      	str	r3, [r7, #4]
 800601a:	e00c      	b.n	8006036 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800601c:	687a      	ldr	r2, [r7, #4]
 800601e:	4613      	mov	r3, r2
 8006020:	009b      	lsls	r3, r3, #2
 8006022:	4413      	add	r3, r2
 8006024:	009b      	lsls	r3, r3, #2
 8006026:	4a12      	ldr	r2, [pc, #72]	; (8006070 <prvInitialiseTaskLists+0x60>)
 8006028:	4413      	add	r3, r2
 800602a:	4618      	mov	r0, r3
 800602c:	f7fe fcfc 	bl	8004a28 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	3301      	adds	r3, #1
 8006034:	607b      	str	r3, [r7, #4]
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	2b37      	cmp	r3, #55	; 0x37
 800603a:	d9ef      	bls.n	800601c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800603c:	480d      	ldr	r0, [pc, #52]	; (8006074 <prvInitialiseTaskLists+0x64>)
 800603e:	f7fe fcf3 	bl	8004a28 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006042:	480d      	ldr	r0, [pc, #52]	; (8006078 <prvInitialiseTaskLists+0x68>)
 8006044:	f7fe fcf0 	bl	8004a28 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006048:	480c      	ldr	r0, [pc, #48]	; (800607c <prvInitialiseTaskLists+0x6c>)
 800604a:	f7fe fced 	bl	8004a28 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800604e:	480c      	ldr	r0, [pc, #48]	; (8006080 <prvInitialiseTaskLists+0x70>)
 8006050:	f7fe fcea 	bl	8004a28 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006054:	480b      	ldr	r0, [pc, #44]	; (8006084 <prvInitialiseTaskLists+0x74>)
 8006056:	f7fe fce7 	bl	8004a28 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800605a:	4b0b      	ldr	r3, [pc, #44]	; (8006088 <prvInitialiseTaskLists+0x78>)
 800605c:	4a05      	ldr	r2, [pc, #20]	; (8006074 <prvInitialiseTaskLists+0x64>)
 800605e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006060:	4b0a      	ldr	r3, [pc, #40]	; (800608c <prvInitialiseTaskLists+0x7c>)
 8006062:	4a05      	ldr	r2, [pc, #20]	; (8006078 <prvInitialiseTaskLists+0x68>)
 8006064:	601a      	str	r2, [r3, #0]
}
 8006066:	bf00      	nop
 8006068:	3708      	adds	r7, #8
 800606a:	46bd      	mov	sp, r7
 800606c:	bd80      	pop	{r7, pc}
 800606e:	bf00      	nop
 8006070:	20000944 	.word	0x20000944
 8006074:	20000da4 	.word	0x20000da4
 8006078:	20000db8 	.word	0x20000db8
 800607c:	20000dd4 	.word	0x20000dd4
 8006080:	20000de8 	.word	0x20000de8
 8006084:	20000e00 	.word	0x20000e00
 8006088:	20000dcc 	.word	0x20000dcc
 800608c:	20000dd0 	.word	0x20000dd0

08006090 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006090:	b580      	push	{r7, lr}
 8006092:	b082      	sub	sp, #8
 8006094:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006096:	e019      	b.n	80060cc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006098:	f000 fd9c 	bl	8006bd4 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800609c:	4b10      	ldr	r3, [pc, #64]	; (80060e0 <prvCheckTasksWaitingTermination+0x50>)
 800609e:	68db      	ldr	r3, [r3, #12]
 80060a0:	68db      	ldr	r3, [r3, #12]
 80060a2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	3304      	adds	r3, #4
 80060a8:	4618      	mov	r0, r3
 80060aa:	f7fe fd47 	bl	8004b3c <uxListRemove>
				--uxCurrentNumberOfTasks;
 80060ae:	4b0d      	ldr	r3, [pc, #52]	; (80060e4 <prvCheckTasksWaitingTermination+0x54>)
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	3b01      	subs	r3, #1
 80060b4:	4a0b      	ldr	r2, [pc, #44]	; (80060e4 <prvCheckTasksWaitingTermination+0x54>)
 80060b6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80060b8:	4b0b      	ldr	r3, [pc, #44]	; (80060e8 <prvCheckTasksWaitingTermination+0x58>)
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	3b01      	subs	r3, #1
 80060be:	4a0a      	ldr	r2, [pc, #40]	; (80060e8 <prvCheckTasksWaitingTermination+0x58>)
 80060c0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80060c2:	f000 fdb7 	bl	8006c34 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80060c6:	6878      	ldr	r0, [r7, #4]
 80060c8:	f000 f810 	bl	80060ec <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80060cc:	4b06      	ldr	r3, [pc, #24]	; (80060e8 <prvCheckTasksWaitingTermination+0x58>)
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d1e1      	bne.n	8006098 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80060d4:	bf00      	nop
 80060d6:	bf00      	nop
 80060d8:	3708      	adds	r7, #8
 80060da:	46bd      	mov	sp, r7
 80060dc:	bd80      	pop	{r7, pc}
 80060de:	bf00      	nop
 80060e0:	20000de8 	.word	0x20000de8
 80060e4:	20000e14 	.word	0x20000e14
 80060e8:	20000dfc 	.word	0x20000dfc

080060ec <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80060ec:	b580      	push	{r7, lr}
 80060ee:	b084      	sub	sp, #16
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d108      	bne.n	8006110 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006102:	4618      	mov	r0, r3
 8006104:	f000 ff4c 	bl	8006fa0 <vPortFree>
				vPortFree( pxTCB );
 8006108:	6878      	ldr	r0, [r7, #4]
 800610a:	f000 ff49 	bl	8006fa0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800610e:	e018      	b.n	8006142 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006116:	2b01      	cmp	r3, #1
 8006118:	d103      	bne.n	8006122 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800611a:	6878      	ldr	r0, [r7, #4]
 800611c:	f000 ff40 	bl	8006fa0 <vPortFree>
	}
 8006120:	e00f      	b.n	8006142 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006128:	2b02      	cmp	r3, #2
 800612a:	d00a      	beq.n	8006142 <prvDeleteTCB+0x56>
	__asm volatile
 800612c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006130:	f383 8811 	msr	BASEPRI, r3
 8006134:	f3bf 8f6f 	isb	sy
 8006138:	f3bf 8f4f 	dsb	sy
 800613c:	60fb      	str	r3, [r7, #12]
}
 800613e:	bf00      	nop
 8006140:	e7fe      	b.n	8006140 <prvDeleteTCB+0x54>
	}
 8006142:	bf00      	nop
 8006144:	3710      	adds	r7, #16
 8006146:	46bd      	mov	sp, r7
 8006148:	bd80      	pop	{r7, pc}
	...

0800614c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800614c:	b480      	push	{r7}
 800614e:	b083      	sub	sp, #12
 8006150:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006152:	4b0f      	ldr	r3, [pc, #60]	; (8006190 <prvResetNextTaskUnblockTime+0x44>)
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	2b00      	cmp	r3, #0
 800615a:	d101      	bne.n	8006160 <prvResetNextTaskUnblockTime+0x14>
 800615c:	2301      	movs	r3, #1
 800615e:	e000      	b.n	8006162 <prvResetNextTaskUnblockTime+0x16>
 8006160:	2300      	movs	r3, #0
 8006162:	2b00      	cmp	r3, #0
 8006164:	d004      	beq.n	8006170 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006166:	4b0b      	ldr	r3, [pc, #44]	; (8006194 <prvResetNextTaskUnblockTime+0x48>)
 8006168:	f04f 32ff 	mov.w	r2, #4294967295
 800616c:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800616e:	e008      	b.n	8006182 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006170:	4b07      	ldr	r3, [pc, #28]	; (8006190 <prvResetNextTaskUnblockTime+0x44>)
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	68db      	ldr	r3, [r3, #12]
 8006176:	68db      	ldr	r3, [r3, #12]
 8006178:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	685b      	ldr	r3, [r3, #4]
 800617e:	4a05      	ldr	r2, [pc, #20]	; (8006194 <prvResetNextTaskUnblockTime+0x48>)
 8006180:	6013      	str	r3, [r2, #0]
}
 8006182:	bf00      	nop
 8006184:	370c      	adds	r7, #12
 8006186:	46bd      	mov	sp, r7
 8006188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800618c:	4770      	bx	lr
 800618e:	bf00      	nop
 8006190:	20000dcc 	.word	0x20000dcc
 8006194:	20000e34 	.word	0x20000e34

08006198 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006198:	b480      	push	{r7}
 800619a:	b083      	sub	sp, #12
 800619c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800619e:	4b0b      	ldr	r3, [pc, #44]	; (80061cc <xTaskGetSchedulerState+0x34>)
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d102      	bne.n	80061ac <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80061a6:	2301      	movs	r3, #1
 80061a8:	607b      	str	r3, [r7, #4]
 80061aa:	e008      	b.n	80061be <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80061ac:	4b08      	ldr	r3, [pc, #32]	; (80061d0 <xTaskGetSchedulerState+0x38>)
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d102      	bne.n	80061ba <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80061b4:	2302      	movs	r3, #2
 80061b6:	607b      	str	r3, [r7, #4]
 80061b8:	e001      	b.n	80061be <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80061ba:	2300      	movs	r3, #0
 80061bc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80061be:	687b      	ldr	r3, [r7, #4]
	}
 80061c0:	4618      	mov	r0, r3
 80061c2:	370c      	adds	r7, #12
 80061c4:	46bd      	mov	sp, r7
 80061c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ca:	4770      	bx	lr
 80061cc:	20000e20 	.word	0x20000e20
 80061d0:	20000e3c 	.word	0x20000e3c

080061d4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80061d4:	b580      	push	{r7, lr}
 80061d6:	b086      	sub	sp, #24
 80061d8:	af00      	add	r7, sp, #0
 80061da:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80061e0:	2300      	movs	r3, #0
 80061e2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d056      	beq.n	8006298 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80061ea:	4b2e      	ldr	r3, [pc, #184]	; (80062a4 <xTaskPriorityDisinherit+0xd0>)
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	693a      	ldr	r2, [r7, #16]
 80061f0:	429a      	cmp	r2, r3
 80061f2:	d00a      	beq.n	800620a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80061f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061f8:	f383 8811 	msr	BASEPRI, r3
 80061fc:	f3bf 8f6f 	isb	sy
 8006200:	f3bf 8f4f 	dsb	sy
 8006204:	60fb      	str	r3, [r7, #12]
}
 8006206:	bf00      	nop
 8006208:	e7fe      	b.n	8006208 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800620a:	693b      	ldr	r3, [r7, #16]
 800620c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800620e:	2b00      	cmp	r3, #0
 8006210:	d10a      	bne.n	8006228 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8006212:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006216:	f383 8811 	msr	BASEPRI, r3
 800621a:	f3bf 8f6f 	isb	sy
 800621e:	f3bf 8f4f 	dsb	sy
 8006222:	60bb      	str	r3, [r7, #8]
}
 8006224:	bf00      	nop
 8006226:	e7fe      	b.n	8006226 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8006228:	693b      	ldr	r3, [r7, #16]
 800622a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800622c:	1e5a      	subs	r2, r3, #1
 800622e:	693b      	ldr	r3, [r7, #16]
 8006230:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006232:	693b      	ldr	r3, [r7, #16]
 8006234:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006236:	693b      	ldr	r3, [r7, #16]
 8006238:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800623a:	429a      	cmp	r2, r3
 800623c:	d02c      	beq.n	8006298 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800623e:	693b      	ldr	r3, [r7, #16]
 8006240:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006242:	2b00      	cmp	r3, #0
 8006244:	d128      	bne.n	8006298 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006246:	693b      	ldr	r3, [r7, #16]
 8006248:	3304      	adds	r3, #4
 800624a:	4618      	mov	r0, r3
 800624c:	f7fe fc76 	bl	8004b3c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006250:	693b      	ldr	r3, [r7, #16]
 8006252:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006254:	693b      	ldr	r3, [r7, #16]
 8006256:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006258:	693b      	ldr	r3, [r7, #16]
 800625a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800625c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006260:	693b      	ldr	r3, [r7, #16]
 8006262:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006264:	693b      	ldr	r3, [r7, #16]
 8006266:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006268:	4b0f      	ldr	r3, [pc, #60]	; (80062a8 <xTaskPriorityDisinherit+0xd4>)
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	429a      	cmp	r2, r3
 800626e:	d903      	bls.n	8006278 <xTaskPriorityDisinherit+0xa4>
 8006270:	693b      	ldr	r3, [r7, #16]
 8006272:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006274:	4a0c      	ldr	r2, [pc, #48]	; (80062a8 <xTaskPriorityDisinherit+0xd4>)
 8006276:	6013      	str	r3, [r2, #0]
 8006278:	693b      	ldr	r3, [r7, #16]
 800627a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800627c:	4613      	mov	r3, r2
 800627e:	009b      	lsls	r3, r3, #2
 8006280:	4413      	add	r3, r2
 8006282:	009b      	lsls	r3, r3, #2
 8006284:	4a09      	ldr	r2, [pc, #36]	; (80062ac <xTaskPriorityDisinherit+0xd8>)
 8006286:	441a      	add	r2, r3
 8006288:	693b      	ldr	r3, [r7, #16]
 800628a:	3304      	adds	r3, #4
 800628c:	4619      	mov	r1, r3
 800628e:	4610      	mov	r0, r2
 8006290:	f7fe fbf7 	bl	8004a82 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006294:	2301      	movs	r3, #1
 8006296:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006298:	697b      	ldr	r3, [r7, #20]
	}
 800629a:	4618      	mov	r0, r3
 800629c:	3718      	adds	r7, #24
 800629e:	46bd      	mov	sp, r7
 80062a0:	bd80      	pop	{r7, pc}
 80062a2:	bf00      	nop
 80062a4:	20000940 	.word	0x20000940
 80062a8:	20000e1c 	.word	0x20000e1c
 80062ac:	20000944 	.word	0x20000944

080062b0 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80062b0:	b580      	push	{r7, lr}
 80062b2:	b084      	sub	sp, #16
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	6078      	str	r0, [r7, #4]
 80062b8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80062ba:	4b21      	ldr	r3, [pc, #132]	; (8006340 <prvAddCurrentTaskToDelayedList+0x90>)
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80062c0:	4b20      	ldr	r3, [pc, #128]	; (8006344 <prvAddCurrentTaskToDelayedList+0x94>)
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	3304      	adds	r3, #4
 80062c6:	4618      	mov	r0, r3
 80062c8:	f7fe fc38 	bl	8004b3c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062d2:	d10a      	bne.n	80062ea <prvAddCurrentTaskToDelayedList+0x3a>
 80062d4:	683b      	ldr	r3, [r7, #0]
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d007      	beq.n	80062ea <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80062da:	4b1a      	ldr	r3, [pc, #104]	; (8006344 <prvAddCurrentTaskToDelayedList+0x94>)
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	3304      	adds	r3, #4
 80062e0:	4619      	mov	r1, r3
 80062e2:	4819      	ldr	r0, [pc, #100]	; (8006348 <prvAddCurrentTaskToDelayedList+0x98>)
 80062e4:	f7fe fbcd 	bl	8004a82 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80062e8:	e026      	b.n	8006338 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80062ea:	68fa      	ldr	r2, [r7, #12]
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	4413      	add	r3, r2
 80062f0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80062f2:	4b14      	ldr	r3, [pc, #80]	; (8006344 <prvAddCurrentTaskToDelayedList+0x94>)
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	68ba      	ldr	r2, [r7, #8]
 80062f8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80062fa:	68ba      	ldr	r2, [r7, #8]
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	429a      	cmp	r2, r3
 8006300:	d209      	bcs.n	8006316 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006302:	4b12      	ldr	r3, [pc, #72]	; (800634c <prvAddCurrentTaskToDelayedList+0x9c>)
 8006304:	681a      	ldr	r2, [r3, #0]
 8006306:	4b0f      	ldr	r3, [pc, #60]	; (8006344 <prvAddCurrentTaskToDelayedList+0x94>)
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	3304      	adds	r3, #4
 800630c:	4619      	mov	r1, r3
 800630e:	4610      	mov	r0, r2
 8006310:	f7fe fbdb 	bl	8004aca <vListInsert>
}
 8006314:	e010      	b.n	8006338 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006316:	4b0e      	ldr	r3, [pc, #56]	; (8006350 <prvAddCurrentTaskToDelayedList+0xa0>)
 8006318:	681a      	ldr	r2, [r3, #0]
 800631a:	4b0a      	ldr	r3, [pc, #40]	; (8006344 <prvAddCurrentTaskToDelayedList+0x94>)
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	3304      	adds	r3, #4
 8006320:	4619      	mov	r1, r3
 8006322:	4610      	mov	r0, r2
 8006324:	f7fe fbd1 	bl	8004aca <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006328:	4b0a      	ldr	r3, [pc, #40]	; (8006354 <prvAddCurrentTaskToDelayedList+0xa4>)
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	68ba      	ldr	r2, [r7, #8]
 800632e:	429a      	cmp	r2, r3
 8006330:	d202      	bcs.n	8006338 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006332:	4a08      	ldr	r2, [pc, #32]	; (8006354 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006334:	68bb      	ldr	r3, [r7, #8]
 8006336:	6013      	str	r3, [r2, #0]
}
 8006338:	bf00      	nop
 800633a:	3710      	adds	r7, #16
 800633c:	46bd      	mov	sp, r7
 800633e:	bd80      	pop	{r7, pc}
 8006340:	20000e18 	.word	0x20000e18
 8006344:	20000940 	.word	0x20000940
 8006348:	20000e00 	.word	0x20000e00
 800634c:	20000dd0 	.word	0x20000dd0
 8006350:	20000dcc 	.word	0x20000dcc
 8006354:	20000e34 	.word	0x20000e34

08006358 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006358:	b580      	push	{r7, lr}
 800635a:	b08a      	sub	sp, #40	; 0x28
 800635c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800635e:	2300      	movs	r3, #0
 8006360:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006362:	f000 facb 	bl	80068fc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006366:	4b1c      	ldr	r3, [pc, #112]	; (80063d8 <xTimerCreateTimerTask+0x80>)
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	2b00      	cmp	r3, #0
 800636c:	d021      	beq.n	80063b2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800636e:	2300      	movs	r3, #0
 8006370:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006372:	2300      	movs	r3, #0
 8006374:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006376:	1d3a      	adds	r2, r7, #4
 8006378:	f107 0108 	add.w	r1, r7, #8
 800637c:	f107 030c 	add.w	r3, r7, #12
 8006380:	4618      	mov	r0, r3
 8006382:	f7fe fb37 	bl	80049f4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006386:	6879      	ldr	r1, [r7, #4]
 8006388:	68bb      	ldr	r3, [r7, #8]
 800638a:	68fa      	ldr	r2, [r7, #12]
 800638c:	9202      	str	r2, [sp, #8]
 800638e:	9301      	str	r3, [sp, #4]
 8006390:	2302      	movs	r3, #2
 8006392:	9300      	str	r3, [sp, #0]
 8006394:	2300      	movs	r3, #0
 8006396:	460a      	mov	r2, r1
 8006398:	4910      	ldr	r1, [pc, #64]	; (80063dc <xTimerCreateTimerTask+0x84>)
 800639a:	4811      	ldr	r0, [pc, #68]	; (80063e0 <xTimerCreateTimerTask+0x88>)
 800639c:	f7ff f8de 	bl	800555c <xTaskCreateStatic>
 80063a0:	4603      	mov	r3, r0
 80063a2:	4a10      	ldr	r2, [pc, #64]	; (80063e4 <xTimerCreateTimerTask+0x8c>)
 80063a4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80063a6:	4b0f      	ldr	r3, [pc, #60]	; (80063e4 <xTimerCreateTimerTask+0x8c>)
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d001      	beq.n	80063b2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80063ae:	2301      	movs	r3, #1
 80063b0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80063b2:	697b      	ldr	r3, [r7, #20]
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d10a      	bne.n	80063ce <xTimerCreateTimerTask+0x76>
	__asm volatile
 80063b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063bc:	f383 8811 	msr	BASEPRI, r3
 80063c0:	f3bf 8f6f 	isb	sy
 80063c4:	f3bf 8f4f 	dsb	sy
 80063c8:	613b      	str	r3, [r7, #16]
}
 80063ca:	bf00      	nop
 80063cc:	e7fe      	b.n	80063cc <xTimerCreateTimerTask+0x74>
	return xReturn;
 80063ce:	697b      	ldr	r3, [r7, #20]
}
 80063d0:	4618      	mov	r0, r3
 80063d2:	3718      	adds	r7, #24
 80063d4:	46bd      	mov	sp, r7
 80063d6:	bd80      	pop	{r7, pc}
 80063d8:	20000e70 	.word	0x20000e70
 80063dc:	08007278 	.word	0x08007278
 80063e0:	08006505 	.word	0x08006505
 80063e4:	20000e74 	.word	0x20000e74

080063e8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80063e8:	b580      	push	{r7, lr}
 80063ea:	b08a      	sub	sp, #40	; 0x28
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	60f8      	str	r0, [r7, #12]
 80063f0:	60b9      	str	r1, [r7, #8]
 80063f2:	607a      	str	r2, [r7, #4]
 80063f4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80063f6:	2300      	movs	r3, #0
 80063f8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d10a      	bne.n	8006416 <xTimerGenericCommand+0x2e>
	__asm volatile
 8006400:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006404:	f383 8811 	msr	BASEPRI, r3
 8006408:	f3bf 8f6f 	isb	sy
 800640c:	f3bf 8f4f 	dsb	sy
 8006410:	623b      	str	r3, [r7, #32]
}
 8006412:	bf00      	nop
 8006414:	e7fe      	b.n	8006414 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006416:	4b1a      	ldr	r3, [pc, #104]	; (8006480 <xTimerGenericCommand+0x98>)
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	2b00      	cmp	r3, #0
 800641c:	d02a      	beq.n	8006474 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800641e:	68bb      	ldr	r3, [r7, #8]
 8006420:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800642a:	68bb      	ldr	r3, [r7, #8]
 800642c:	2b05      	cmp	r3, #5
 800642e:	dc18      	bgt.n	8006462 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006430:	f7ff feb2 	bl	8006198 <xTaskGetSchedulerState>
 8006434:	4603      	mov	r3, r0
 8006436:	2b02      	cmp	r3, #2
 8006438:	d109      	bne.n	800644e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800643a:	4b11      	ldr	r3, [pc, #68]	; (8006480 <xTimerGenericCommand+0x98>)
 800643c:	6818      	ldr	r0, [r3, #0]
 800643e:	f107 0110 	add.w	r1, r7, #16
 8006442:	2300      	movs	r3, #0
 8006444:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006446:	f7fe fca5 	bl	8004d94 <xQueueGenericSend>
 800644a:	6278      	str	r0, [r7, #36]	; 0x24
 800644c:	e012      	b.n	8006474 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800644e:	4b0c      	ldr	r3, [pc, #48]	; (8006480 <xTimerGenericCommand+0x98>)
 8006450:	6818      	ldr	r0, [r3, #0]
 8006452:	f107 0110 	add.w	r1, r7, #16
 8006456:	2300      	movs	r3, #0
 8006458:	2200      	movs	r2, #0
 800645a:	f7fe fc9b 	bl	8004d94 <xQueueGenericSend>
 800645e:	6278      	str	r0, [r7, #36]	; 0x24
 8006460:	e008      	b.n	8006474 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006462:	4b07      	ldr	r3, [pc, #28]	; (8006480 <xTimerGenericCommand+0x98>)
 8006464:	6818      	ldr	r0, [r3, #0]
 8006466:	f107 0110 	add.w	r1, r7, #16
 800646a:	2300      	movs	r3, #0
 800646c:	683a      	ldr	r2, [r7, #0]
 800646e:	f7fe fd8f 	bl	8004f90 <xQueueGenericSendFromISR>
 8006472:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006476:	4618      	mov	r0, r3
 8006478:	3728      	adds	r7, #40	; 0x28
 800647a:	46bd      	mov	sp, r7
 800647c:	bd80      	pop	{r7, pc}
 800647e:	bf00      	nop
 8006480:	20000e70 	.word	0x20000e70

08006484 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006484:	b580      	push	{r7, lr}
 8006486:	b088      	sub	sp, #32
 8006488:	af02      	add	r7, sp, #8
 800648a:	6078      	str	r0, [r7, #4]
 800648c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800648e:	4b1c      	ldr	r3, [pc, #112]	; (8006500 <prvProcessExpiredTimer+0x7c>)
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	68db      	ldr	r3, [r3, #12]
 8006494:	68db      	ldr	r3, [r3, #12]
 8006496:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006498:	697b      	ldr	r3, [r7, #20]
 800649a:	3304      	adds	r3, #4
 800649c:	4618      	mov	r0, r3
 800649e:	f7fe fb4d 	bl	8004b3c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80064a2:	697b      	ldr	r3, [r7, #20]
 80064a4:	69db      	ldr	r3, [r3, #28]
 80064a6:	2b01      	cmp	r3, #1
 80064a8:	d122      	bne.n	80064f0 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80064aa:	697b      	ldr	r3, [r7, #20]
 80064ac:	699a      	ldr	r2, [r3, #24]
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	18d1      	adds	r1, r2, r3
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	683a      	ldr	r2, [r7, #0]
 80064b6:	6978      	ldr	r0, [r7, #20]
 80064b8:	f000 f8c8 	bl	800664c <prvInsertTimerInActiveList>
 80064bc:	4603      	mov	r3, r0
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d016      	beq.n	80064f0 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80064c2:	2300      	movs	r3, #0
 80064c4:	9300      	str	r3, [sp, #0]
 80064c6:	2300      	movs	r3, #0
 80064c8:	687a      	ldr	r2, [r7, #4]
 80064ca:	2100      	movs	r1, #0
 80064cc:	6978      	ldr	r0, [r7, #20]
 80064ce:	f7ff ff8b 	bl	80063e8 <xTimerGenericCommand>
 80064d2:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80064d4:	693b      	ldr	r3, [r7, #16]
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d10a      	bne.n	80064f0 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 80064da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064de:	f383 8811 	msr	BASEPRI, r3
 80064e2:	f3bf 8f6f 	isb	sy
 80064e6:	f3bf 8f4f 	dsb	sy
 80064ea:	60fb      	str	r3, [r7, #12]
}
 80064ec:	bf00      	nop
 80064ee:	e7fe      	b.n	80064ee <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80064f0:	697b      	ldr	r3, [r7, #20]
 80064f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064f4:	6978      	ldr	r0, [r7, #20]
 80064f6:	4798      	blx	r3
}
 80064f8:	bf00      	nop
 80064fa:	3718      	adds	r7, #24
 80064fc:	46bd      	mov	sp, r7
 80064fe:	bd80      	pop	{r7, pc}
 8006500:	20000e68 	.word	0x20000e68

08006504 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8006504:	b580      	push	{r7, lr}
 8006506:	b084      	sub	sp, #16
 8006508:	af00      	add	r7, sp, #0
 800650a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800650c:	f107 0308 	add.w	r3, r7, #8
 8006510:	4618      	mov	r0, r3
 8006512:	f000 f857 	bl	80065c4 <prvGetNextExpireTime>
 8006516:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006518:	68bb      	ldr	r3, [r7, #8]
 800651a:	4619      	mov	r1, r3
 800651c:	68f8      	ldr	r0, [r7, #12]
 800651e:	f000 f803 	bl	8006528 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006522:	f000 f8d5 	bl	80066d0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006526:	e7f1      	b.n	800650c <prvTimerTask+0x8>

08006528 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006528:	b580      	push	{r7, lr}
 800652a:	b084      	sub	sp, #16
 800652c:	af00      	add	r7, sp, #0
 800652e:	6078      	str	r0, [r7, #4]
 8006530:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006532:	f7ff fa45 	bl	80059c0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006536:	f107 0308 	add.w	r3, r7, #8
 800653a:	4618      	mov	r0, r3
 800653c:	f000 f866 	bl	800660c <prvSampleTimeNow>
 8006540:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006542:	68bb      	ldr	r3, [r7, #8]
 8006544:	2b00      	cmp	r3, #0
 8006546:	d130      	bne.n	80065aa <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006548:	683b      	ldr	r3, [r7, #0]
 800654a:	2b00      	cmp	r3, #0
 800654c:	d10a      	bne.n	8006564 <prvProcessTimerOrBlockTask+0x3c>
 800654e:	687a      	ldr	r2, [r7, #4]
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	429a      	cmp	r2, r3
 8006554:	d806      	bhi.n	8006564 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006556:	f7ff fa41 	bl	80059dc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800655a:	68f9      	ldr	r1, [r7, #12]
 800655c:	6878      	ldr	r0, [r7, #4]
 800655e:	f7ff ff91 	bl	8006484 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006562:	e024      	b.n	80065ae <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006564:	683b      	ldr	r3, [r7, #0]
 8006566:	2b00      	cmp	r3, #0
 8006568:	d008      	beq.n	800657c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800656a:	4b13      	ldr	r3, [pc, #76]	; (80065b8 <prvProcessTimerOrBlockTask+0x90>)
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	2b00      	cmp	r3, #0
 8006572:	bf0c      	ite	eq
 8006574:	2301      	moveq	r3, #1
 8006576:	2300      	movne	r3, #0
 8006578:	b2db      	uxtb	r3, r3
 800657a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800657c:	4b0f      	ldr	r3, [pc, #60]	; (80065bc <prvProcessTimerOrBlockTask+0x94>)
 800657e:	6818      	ldr	r0, [r3, #0]
 8006580:	687a      	ldr	r2, [r7, #4]
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	1ad3      	subs	r3, r2, r3
 8006586:	683a      	ldr	r2, [r7, #0]
 8006588:	4619      	mov	r1, r3
 800658a:	f7fe ffb3 	bl	80054f4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800658e:	f7ff fa25 	bl	80059dc <xTaskResumeAll>
 8006592:	4603      	mov	r3, r0
 8006594:	2b00      	cmp	r3, #0
 8006596:	d10a      	bne.n	80065ae <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006598:	4b09      	ldr	r3, [pc, #36]	; (80065c0 <prvProcessTimerOrBlockTask+0x98>)
 800659a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800659e:	601a      	str	r2, [r3, #0]
 80065a0:	f3bf 8f4f 	dsb	sy
 80065a4:	f3bf 8f6f 	isb	sy
}
 80065a8:	e001      	b.n	80065ae <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80065aa:	f7ff fa17 	bl	80059dc <xTaskResumeAll>
}
 80065ae:	bf00      	nop
 80065b0:	3710      	adds	r7, #16
 80065b2:	46bd      	mov	sp, r7
 80065b4:	bd80      	pop	{r7, pc}
 80065b6:	bf00      	nop
 80065b8:	20000e6c 	.word	0x20000e6c
 80065bc:	20000e70 	.word	0x20000e70
 80065c0:	e000ed04 	.word	0xe000ed04

080065c4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80065c4:	b480      	push	{r7}
 80065c6:	b085      	sub	sp, #20
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80065cc:	4b0e      	ldr	r3, [pc, #56]	; (8006608 <prvGetNextExpireTime+0x44>)
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	bf0c      	ite	eq
 80065d6:	2301      	moveq	r3, #1
 80065d8:	2300      	movne	r3, #0
 80065da:	b2db      	uxtb	r3, r3
 80065dc:	461a      	mov	r2, r3
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d105      	bne.n	80065f6 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80065ea:	4b07      	ldr	r3, [pc, #28]	; (8006608 <prvGetNextExpireTime+0x44>)
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	68db      	ldr	r3, [r3, #12]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	60fb      	str	r3, [r7, #12]
 80065f4:	e001      	b.n	80065fa <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80065f6:	2300      	movs	r3, #0
 80065f8:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80065fa:	68fb      	ldr	r3, [r7, #12]
}
 80065fc:	4618      	mov	r0, r3
 80065fe:	3714      	adds	r7, #20
 8006600:	46bd      	mov	sp, r7
 8006602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006606:	4770      	bx	lr
 8006608:	20000e68 	.word	0x20000e68

0800660c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800660c:	b580      	push	{r7, lr}
 800660e:	b084      	sub	sp, #16
 8006610:	af00      	add	r7, sp, #0
 8006612:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006614:	f7ff fa80 	bl	8005b18 <xTaskGetTickCount>
 8006618:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800661a:	4b0b      	ldr	r3, [pc, #44]	; (8006648 <prvSampleTimeNow+0x3c>)
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	68fa      	ldr	r2, [r7, #12]
 8006620:	429a      	cmp	r2, r3
 8006622:	d205      	bcs.n	8006630 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006624:	f000 f908 	bl	8006838 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	2201      	movs	r2, #1
 800662c:	601a      	str	r2, [r3, #0]
 800662e:	e002      	b.n	8006636 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	2200      	movs	r2, #0
 8006634:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006636:	4a04      	ldr	r2, [pc, #16]	; (8006648 <prvSampleTimeNow+0x3c>)
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800663c:	68fb      	ldr	r3, [r7, #12]
}
 800663e:	4618      	mov	r0, r3
 8006640:	3710      	adds	r7, #16
 8006642:	46bd      	mov	sp, r7
 8006644:	bd80      	pop	{r7, pc}
 8006646:	bf00      	nop
 8006648:	20000e78 	.word	0x20000e78

0800664c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800664c:	b580      	push	{r7, lr}
 800664e:	b086      	sub	sp, #24
 8006650:	af00      	add	r7, sp, #0
 8006652:	60f8      	str	r0, [r7, #12]
 8006654:	60b9      	str	r1, [r7, #8]
 8006656:	607a      	str	r2, [r7, #4]
 8006658:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800665a:	2300      	movs	r3, #0
 800665c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	68ba      	ldr	r2, [r7, #8]
 8006662:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	68fa      	ldr	r2, [r7, #12]
 8006668:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800666a:	68ba      	ldr	r2, [r7, #8]
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	429a      	cmp	r2, r3
 8006670:	d812      	bhi.n	8006698 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006672:	687a      	ldr	r2, [r7, #4]
 8006674:	683b      	ldr	r3, [r7, #0]
 8006676:	1ad2      	subs	r2, r2, r3
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	699b      	ldr	r3, [r3, #24]
 800667c:	429a      	cmp	r2, r3
 800667e:	d302      	bcc.n	8006686 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006680:	2301      	movs	r3, #1
 8006682:	617b      	str	r3, [r7, #20]
 8006684:	e01b      	b.n	80066be <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006686:	4b10      	ldr	r3, [pc, #64]	; (80066c8 <prvInsertTimerInActiveList+0x7c>)
 8006688:	681a      	ldr	r2, [r3, #0]
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	3304      	adds	r3, #4
 800668e:	4619      	mov	r1, r3
 8006690:	4610      	mov	r0, r2
 8006692:	f7fe fa1a 	bl	8004aca <vListInsert>
 8006696:	e012      	b.n	80066be <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006698:	687a      	ldr	r2, [r7, #4]
 800669a:	683b      	ldr	r3, [r7, #0]
 800669c:	429a      	cmp	r2, r3
 800669e:	d206      	bcs.n	80066ae <prvInsertTimerInActiveList+0x62>
 80066a0:	68ba      	ldr	r2, [r7, #8]
 80066a2:	683b      	ldr	r3, [r7, #0]
 80066a4:	429a      	cmp	r2, r3
 80066a6:	d302      	bcc.n	80066ae <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80066a8:	2301      	movs	r3, #1
 80066aa:	617b      	str	r3, [r7, #20]
 80066ac:	e007      	b.n	80066be <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80066ae:	4b07      	ldr	r3, [pc, #28]	; (80066cc <prvInsertTimerInActiveList+0x80>)
 80066b0:	681a      	ldr	r2, [r3, #0]
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	3304      	adds	r3, #4
 80066b6:	4619      	mov	r1, r3
 80066b8:	4610      	mov	r0, r2
 80066ba:	f7fe fa06 	bl	8004aca <vListInsert>
		}
	}

	return xProcessTimerNow;
 80066be:	697b      	ldr	r3, [r7, #20]
}
 80066c0:	4618      	mov	r0, r3
 80066c2:	3718      	adds	r7, #24
 80066c4:	46bd      	mov	sp, r7
 80066c6:	bd80      	pop	{r7, pc}
 80066c8:	20000e6c 	.word	0x20000e6c
 80066cc:	20000e68 	.word	0x20000e68

080066d0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80066d0:	b580      	push	{r7, lr}
 80066d2:	b08e      	sub	sp, #56	; 0x38
 80066d4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80066d6:	e09d      	b.n	8006814 <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	2b00      	cmp	r3, #0
 80066dc:	da18      	bge.n	8006710 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80066de:	1d3b      	adds	r3, r7, #4
 80066e0:	3304      	adds	r3, #4
 80066e2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80066e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d10a      	bne.n	8006700 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80066ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066ee:	f383 8811 	msr	BASEPRI, r3
 80066f2:	f3bf 8f6f 	isb	sy
 80066f6:	f3bf 8f4f 	dsb	sy
 80066fa:	61fb      	str	r3, [r7, #28]
}
 80066fc:	bf00      	nop
 80066fe:	e7fe      	b.n	80066fe <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006700:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006706:	6850      	ldr	r0, [r2, #4]
 8006708:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800670a:	6892      	ldr	r2, [r2, #8]
 800670c:	4611      	mov	r1, r2
 800670e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	2b00      	cmp	r3, #0
 8006714:	db7e      	blt.n	8006814 <prvProcessReceivedCommands+0x144>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800671a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800671c:	695b      	ldr	r3, [r3, #20]
 800671e:	2b00      	cmp	r3, #0
 8006720:	d004      	beq.n	800672c <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006722:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006724:	3304      	adds	r3, #4
 8006726:	4618      	mov	r0, r3
 8006728:	f7fe fa08 	bl	8004b3c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800672c:	463b      	mov	r3, r7
 800672e:	4618      	mov	r0, r3
 8006730:	f7ff ff6c 	bl	800660c <prvSampleTimeNow>
 8006734:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	2b09      	cmp	r3, #9
 800673a:	d86a      	bhi.n	8006812 <prvProcessReceivedCommands+0x142>
 800673c:	a201      	add	r2, pc, #4	; (adr r2, 8006744 <prvProcessReceivedCommands+0x74>)
 800673e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006742:	bf00      	nop
 8006744:	0800676d 	.word	0x0800676d
 8006748:	0800676d 	.word	0x0800676d
 800674c:	0800676d 	.word	0x0800676d
 8006750:	08006815 	.word	0x08006815
 8006754:	080067c9 	.word	0x080067c9
 8006758:	08006801 	.word	0x08006801
 800675c:	0800676d 	.word	0x0800676d
 8006760:	0800676d 	.word	0x0800676d
 8006764:	08006815 	.word	0x08006815
 8006768:	080067c9 	.word	0x080067c9
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800676c:	68ba      	ldr	r2, [r7, #8]
 800676e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006770:	699b      	ldr	r3, [r3, #24]
 8006772:	18d1      	adds	r1, r2, r3
 8006774:	68bb      	ldr	r3, [r7, #8]
 8006776:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006778:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800677a:	f7ff ff67 	bl	800664c <prvInsertTimerInActiveList>
 800677e:	4603      	mov	r3, r0
 8006780:	2b00      	cmp	r3, #0
 8006782:	d047      	beq.n	8006814 <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006784:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006788:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800678a:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800678c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800678e:	69db      	ldr	r3, [r3, #28]
 8006790:	2b01      	cmp	r3, #1
 8006792:	d13f      	bne.n	8006814 <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006794:	68ba      	ldr	r2, [r7, #8]
 8006796:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006798:	699b      	ldr	r3, [r3, #24]
 800679a:	441a      	add	r2, r3
 800679c:	2300      	movs	r3, #0
 800679e:	9300      	str	r3, [sp, #0]
 80067a0:	2300      	movs	r3, #0
 80067a2:	2100      	movs	r1, #0
 80067a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80067a6:	f7ff fe1f 	bl	80063e8 <xTimerGenericCommand>
 80067aa:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80067ac:	6a3b      	ldr	r3, [r7, #32]
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d130      	bne.n	8006814 <prvProcessReceivedCommands+0x144>
	__asm volatile
 80067b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067b6:	f383 8811 	msr	BASEPRI, r3
 80067ba:	f3bf 8f6f 	isb	sy
 80067be:	f3bf 8f4f 	dsb	sy
 80067c2:	61bb      	str	r3, [r7, #24]
}
 80067c4:	bf00      	nop
 80067c6:	e7fe      	b.n	80067c6 <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80067c8:	68ba      	ldr	r2, [r7, #8]
 80067ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067cc:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80067ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067d0:	699b      	ldr	r3, [r3, #24]
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d10a      	bne.n	80067ec <prvProcessReceivedCommands+0x11c>
	__asm volatile
 80067d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067da:	f383 8811 	msr	BASEPRI, r3
 80067de:	f3bf 8f6f 	isb	sy
 80067e2:	f3bf 8f4f 	dsb	sy
 80067e6:	617b      	str	r3, [r7, #20]
}
 80067e8:	bf00      	nop
 80067ea:	e7fe      	b.n	80067ea <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80067ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067ee:	699a      	ldr	r2, [r3, #24]
 80067f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067f2:	18d1      	adds	r1, r2, r3
 80067f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80067f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80067fa:	f7ff ff27 	bl	800664c <prvInsertTimerInActiveList>
					break;
 80067fe:	e009      	b.n	8006814 <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8006800:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006802:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006806:	2b00      	cmp	r3, #0
 8006808:	d104      	bne.n	8006814 <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 800680a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800680c:	f000 fbc8 	bl	8006fa0 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006810:	e000      	b.n	8006814 <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
 8006812:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006814:	4b07      	ldr	r3, [pc, #28]	; (8006834 <prvProcessReceivedCommands+0x164>)
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	1d39      	adds	r1, r7, #4
 800681a:	2200      	movs	r2, #0
 800681c:	4618      	mov	r0, r3
 800681e:	f7fe fc4f 	bl	80050c0 <xQueueReceive>
 8006822:	4603      	mov	r3, r0
 8006824:	2b00      	cmp	r3, #0
 8006826:	f47f af57 	bne.w	80066d8 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800682a:	bf00      	nop
 800682c:	bf00      	nop
 800682e:	3730      	adds	r7, #48	; 0x30
 8006830:	46bd      	mov	sp, r7
 8006832:	bd80      	pop	{r7, pc}
 8006834:	20000e70 	.word	0x20000e70

08006838 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006838:	b580      	push	{r7, lr}
 800683a:	b088      	sub	sp, #32
 800683c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800683e:	e045      	b.n	80068cc <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006840:	4b2c      	ldr	r3, [pc, #176]	; (80068f4 <prvSwitchTimerLists+0xbc>)
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	68db      	ldr	r3, [r3, #12]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800684a:	4b2a      	ldr	r3, [pc, #168]	; (80068f4 <prvSwitchTimerLists+0xbc>)
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	68db      	ldr	r3, [r3, #12]
 8006850:	68db      	ldr	r3, [r3, #12]
 8006852:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	3304      	adds	r3, #4
 8006858:	4618      	mov	r0, r3
 800685a:	f7fe f96f 	bl	8004b3c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006862:	68f8      	ldr	r0, [r7, #12]
 8006864:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	69db      	ldr	r3, [r3, #28]
 800686a:	2b01      	cmp	r3, #1
 800686c:	d12e      	bne.n	80068cc <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	699b      	ldr	r3, [r3, #24]
 8006872:	693a      	ldr	r2, [r7, #16]
 8006874:	4413      	add	r3, r2
 8006876:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006878:	68ba      	ldr	r2, [r7, #8]
 800687a:	693b      	ldr	r3, [r7, #16]
 800687c:	429a      	cmp	r2, r3
 800687e:	d90e      	bls.n	800689e <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	68ba      	ldr	r2, [r7, #8]
 8006884:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	68fa      	ldr	r2, [r7, #12]
 800688a:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800688c:	4b19      	ldr	r3, [pc, #100]	; (80068f4 <prvSwitchTimerLists+0xbc>)
 800688e:	681a      	ldr	r2, [r3, #0]
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	3304      	adds	r3, #4
 8006894:	4619      	mov	r1, r3
 8006896:	4610      	mov	r0, r2
 8006898:	f7fe f917 	bl	8004aca <vListInsert>
 800689c:	e016      	b.n	80068cc <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800689e:	2300      	movs	r3, #0
 80068a0:	9300      	str	r3, [sp, #0]
 80068a2:	2300      	movs	r3, #0
 80068a4:	693a      	ldr	r2, [r7, #16]
 80068a6:	2100      	movs	r1, #0
 80068a8:	68f8      	ldr	r0, [r7, #12]
 80068aa:	f7ff fd9d 	bl	80063e8 <xTimerGenericCommand>
 80068ae:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d10a      	bne.n	80068cc <prvSwitchTimerLists+0x94>
	__asm volatile
 80068b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068ba:	f383 8811 	msr	BASEPRI, r3
 80068be:	f3bf 8f6f 	isb	sy
 80068c2:	f3bf 8f4f 	dsb	sy
 80068c6:	603b      	str	r3, [r7, #0]
}
 80068c8:	bf00      	nop
 80068ca:	e7fe      	b.n	80068ca <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80068cc:	4b09      	ldr	r3, [pc, #36]	; (80068f4 <prvSwitchTimerLists+0xbc>)
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d1b4      	bne.n	8006840 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80068d6:	4b07      	ldr	r3, [pc, #28]	; (80068f4 <prvSwitchTimerLists+0xbc>)
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80068dc:	4b06      	ldr	r3, [pc, #24]	; (80068f8 <prvSwitchTimerLists+0xc0>)
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	4a04      	ldr	r2, [pc, #16]	; (80068f4 <prvSwitchTimerLists+0xbc>)
 80068e2:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80068e4:	4a04      	ldr	r2, [pc, #16]	; (80068f8 <prvSwitchTimerLists+0xc0>)
 80068e6:	697b      	ldr	r3, [r7, #20]
 80068e8:	6013      	str	r3, [r2, #0]
}
 80068ea:	bf00      	nop
 80068ec:	3718      	adds	r7, #24
 80068ee:	46bd      	mov	sp, r7
 80068f0:	bd80      	pop	{r7, pc}
 80068f2:	bf00      	nop
 80068f4:	20000e68 	.word	0x20000e68
 80068f8:	20000e6c 	.word	0x20000e6c

080068fc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80068fc:	b580      	push	{r7, lr}
 80068fe:	b082      	sub	sp, #8
 8006900:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006902:	f000 f967 	bl	8006bd4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006906:	4b15      	ldr	r3, [pc, #84]	; (800695c <prvCheckForValidListAndQueue+0x60>)
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	2b00      	cmp	r3, #0
 800690c:	d120      	bne.n	8006950 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800690e:	4814      	ldr	r0, [pc, #80]	; (8006960 <prvCheckForValidListAndQueue+0x64>)
 8006910:	f7fe f88a 	bl	8004a28 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006914:	4813      	ldr	r0, [pc, #76]	; (8006964 <prvCheckForValidListAndQueue+0x68>)
 8006916:	f7fe f887 	bl	8004a28 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800691a:	4b13      	ldr	r3, [pc, #76]	; (8006968 <prvCheckForValidListAndQueue+0x6c>)
 800691c:	4a10      	ldr	r2, [pc, #64]	; (8006960 <prvCheckForValidListAndQueue+0x64>)
 800691e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006920:	4b12      	ldr	r3, [pc, #72]	; (800696c <prvCheckForValidListAndQueue+0x70>)
 8006922:	4a10      	ldr	r2, [pc, #64]	; (8006964 <prvCheckForValidListAndQueue+0x68>)
 8006924:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006926:	2300      	movs	r3, #0
 8006928:	9300      	str	r3, [sp, #0]
 800692a:	4b11      	ldr	r3, [pc, #68]	; (8006970 <prvCheckForValidListAndQueue+0x74>)
 800692c:	4a11      	ldr	r2, [pc, #68]	; (8006974 <prvCheckForValidListAndQueue+0x78>)
 800692e:	2110      	movs	r1, #16
 8006930:	200a      	movs	r0, #10
 8006932:	f7fe f995 	bl	8004c60 <xQueueGenericCreateStatic>
 8006936:	4603      	mov	r3, r0
 8006938:	4a08      	ldr	r2, [pc, #32]	; (800695c <prvCheckForValidListAndQueue+0x60>)
 800693a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800693c:	4b07      	ldr	r3, [pc, #28]	; (800695c <prvCheckForValidListAndQueue+0x60>)
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	2b00      	cmp	r3, #0
 8006942:	d005      	beq.n	8006950 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006944:	4b05      	ldr	r3, [pc, #20]	; (800695c <prvCheckForValidListAndQueue+0x60>)
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	490b      	ldr	r1, [pc, #44]	; (8006978 <prvCheckForValidListAndQueue+0x7c>)
 800694a:	4618      	mov	r0, r3
 800694c:	f7fe fda8 	bl	80054a0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006950:	f000 f970 	bl	8006c34 <vPortExitCritical>
}
 8006954:	bf00      	nop
 8006956:	46bd      	mov	sp, r7
 8006958:	bd80      	pop	{r7, pc}
 800695a:	bf00      	nop
 800695c:	20000e70 	.word	0x20000e70
 8006960:	20000e40 	.word	0x20000e40
 8006964:	20000e54 	.word	0x20000e54
 8006968:	20000e68 	.word	0x20000e68
 800696c:	20000e6c 	.word	0x20000e6c
 8006970:	20000f1c 	.word	0x20000f1c
 8006974:	20000e7c 	.word	0x20000e7c
 8006978:	08007280 	.word	0x08007280

0800697c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800697c:	b480      	push	{r7}
 800697e:	b085      	sub	sp, #20
 8006980:	af00      	add	r7, sp, #0
 8006982:	60f8      	str	r0, [r7, #12]
 8006984:	60b9      	str	r1, [r7, #8]
 8006986:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	3b04      	subs	r3, #4
 800698c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006994:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	3b04      	subs	r3, #4
 800699a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800699c:	68bb      	ldr	r3, [r7, #8]
 800699e:	f023 0201 	bic.w	r2, r3, #1
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	3b04      	subs	r3, #4
 80069aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80069ac:	4a0c      	ldr	r2, [pc, #48]	; (80069e0 <pxPortInitialiseStack+0x64>)
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	3b14      	subs	r3, #20
 80069b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80069b8:	687a      	ldr	r2, [r7, #4]
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	3b04      	subs	r3, #4
 80069c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	f06f 0202 	mvn.w	r2, #2
 80069ca:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	3b20      	subs	r3, #32
 80069d0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80069d2:	68fb      	ldr	r3, [r7, #12]
}
 80069d4:	4618      	mov	r0, r3
 80069d6:	3714      	adds	r7, #20
 80069d8:	46bd      	mov	sp, r7
 80069da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069de:	4770      	bx	lr
 80069e0:	080069e5 	.word	0x080069e5

080069e4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80069e4:	b480      	push	{r7}
 80069e6:	b085      	sub	sp, #20
 80069e8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80069ea:	2300      	movs	r3, #0
 80069ec:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80069ee:	4b12      	ldr	r3, [pc, #72]	; (8006a38 <prvTaskExitError+0x54>)
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069f6:	d00a      	beq.n	8006a0e <prvTaskExitError+0x2a>
	__asm volatile
 80069f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069fc:	f383 8811 	msr	BASEPRI, r3
 8006a00:	f3bf 8f6f 	isb	sy
 8006a04:	f3bf 8f4f 	dsb	sy
 8006a08:	60fb      	str	r3, [r7, #12]
}
 8006a0a:	bf00      	nop
 8006a0c:	e7fe      	b.n	8006a0c <prvTaskExitError+0x28>
	__asm volatile
 8006a0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a12:	f383 8811 	msr	BASEPRI, r3
 8006a16:	f3bf 8f6f 	isb	sy
 8006a1a:	f3bf 8f4f 	dsb	sy
 8006a1e:	60bb      	str	r3, [r7, #8]
}
 8006a20:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006a22:	bf00      	nop
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d0fc      	beq.n	8006a24 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006a2a:	bf00      	nop
 8006a2c:	bf00      	nop
 8006a2e:	3714      	adds	r7, #20
 8006a30:	46bd      	mov	sp, r7
 8006a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a36:	4770      	bx	lr
 8006a38:	20000074 	.word	0x20000074
 8006a3c:	00000000 	.word	0x00000000

08006a40 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006a40:	4b07      	ldr	r3, [pc, #28]	; (8006a60 <pxCurrentTCBConst2>)
 8006a42:	6819      	ldr	r1, [r3, #0]
 8006a44:	6808      	ldr	r0, [r1, #0]
 8006a46:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a4a:	f380 8809 	msr	PSP, r0
 8006a4e:	f3bf 8f6f 	isb	sy
 8006a52:	f04f 0000 	mov.w	r0, #0
 8006a56:	f380 8811 	msr	BASEPRI, r0
 8006a5a:	4770      	bx	lr
 8006a5c:	f3af 8000 	nop.w

08006a60 <pxCurrentTCBConst2>:
 8006a60:	20000940 	.word	0x20000940
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006a64:	bf00      	nop
 8006a66:	bf00      	nop

08006a68 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006a68:	4808      	ldr	r0, [pc, #32]	; (8006a8c <prvPortStartFirstTask+0x24>)
 8006a6a:	6800      	ldr	r0, [r0, #0]
 8006a6c:	6800      	ldr	r0, [r0, #0]
 8006a6e:	f380 8808 	msr	MSP, r0
 8006a72:	f04f 0000 	mov.w	r0, #0
 8006a76:	f380 8814 	msr	CONTROL, r0
 8006a7a:	b662      	cpsie	i
 8006a7c:	b661      	cpsie	f
 8006a7e:	f3bf 8f4f 	dsb	sy
 8006a82:	f3bf 8f6f 	isb	sy
 8006a86:	df00      	svc	0
 8006a88:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006a8a:	bf00      	nop
 8006a8c:	e000ed08 	.word	0xe000ed08

08006a90 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006a90:	b580      	push	{r7, lr}
 8006a92:	b086      	sub	sp, #24
 8006a94:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006a96:	4b46      	ldr	r3, [pc, #280]	; (8006bb0 <xPortStartScheduler+0x120>)
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	4a46      	ldr	r2, [pc, #280]	; (8006bb4 <xPortStartScheduler+0x124>)
 8006a9c:	4293      	cmp	r3, r2
 8006a9e:	d10a      	bne.n	8006ab6 <xPortStartScheduler+0x26>
	__asm volatile
 8006aa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006aa4:	f383 8811 	msr	BASEPRI, r3
 8006aa8:	f3bf 8f6f 	isb	sy
 8006aac:	f3bf 8f4f 	dsb	sy
 8006ab0:	613b      	str	r3, [r7, #16]
}
 8006ab2:	bf00      	nop
 8006ab4:	e7fe      	b.n	8006ab4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006ab6:	4b3e      	ldr	r3, [pc, #248]	; (8006bb0 <xPortStartScheduler+0x120>)
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	4a3f      	ldr	r2, [pc, #252]	; (8006bb8 <xPortStartScheduler+0x128>)
 8006abc:	4293      	cmp	r3, r2
 8006abe:	d10a      	bne.n	8006ad6 <xPortStartScheduler+0x46>
	__asm volatile
 8006ac0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ac4:	f383 8811 	msr	BASEPRI, r3
 8006ac8:	f3bf 8f6f 	isb	sy
 8006acc:	f3bf 8f4f 	dsb	sy
 8006ad0:	60fb      	str	r3, [r7, #12]
}
 8006ad2:	bf00      	nop
 8006ad4:	e7fe      	b.n	8006ad4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006ad6:	4b39      	ldr	r3, [pc, #228]	; (8006bbc <xPortStartScheduler+0x12c>)
 8006ad8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006ada:	697b      	ldr	r3, [r7, #20]
 8006adc:	781b      	ldrb	r3, [r3, #0]
 8006ade:	b2db      	uxtb	r3, r3
 8006ae0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006ae2:	697b      	ldr	r3, [r7, #20]
 8006ae4:	22ff      	movs	r2, #255	; 0xff
 8006ae6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006ae8:	697b      	ldr	r3, [r7, #20]
 8006aea:	781b      	ldrb	r3, [r3, #0]
 8006aec:	b2db      	uxtb	r3, r3
 8006aee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006af0:	78fb      	ldrb	r3, [r7, #3]
 8006af2:	b2db      	uxtb	r3, r3
 8006af4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006af8:	b2da      	uxtb	r2, r3
 8006afa:	4b31      	ldr	r3, [pc, #196]	; (8006bc0 <xPortStartScheduler+0x130>)
 8006afc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006afe:	4b31      	ldr	r3, [pc, #196]	; (8006bc4 <xPortStartScheduler+0x134>)
 8006b00:	2207      	movs	r2, #7
 8006b02:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006b04:	e009      	b.n	8006b1a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8006b06:	4b2f      	ldr	r3, [pc, #188]	; (8006bc4 <xPortStartScheduler+0x134>)
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	3b01      	subs	r3, #1
 8006b0c:	4a2d      	ldr	r2, [pc, #180]	; (8006bc4 <xPortStartScheduler+0x134>)
 8006b0e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006b10:	78fb      	ldrb	r3, [r7, #3]
 8006b12:	b2db      	uxtb	r3, r3
 8006b14:	005b      	lsls	r3, r3, #1
 8006b16:	b2db      	uxtb	r3, r3
 8006b18:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006b1a:	78fb      	ldrb	r3, [r7, #3]
 8006b1c:	b2db      	uxtb	r3, r3
 8006b1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b22:	2b80      	cmp	r3, #128	; 0x80
 8006b24:	d0ef      	beq.n	8006b06 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006b26:	4b27      	ldr	r3, [pc, #156]	; (8006bc4 <xPortStartScheduler+0x134>)
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	f1c3 0307 	rsb	r3, r3, #7
 8006b2e:	2b04      	cmp	r3, #4
 8006b30:	d00a      	beq.n	8006b48 <xPortStartScheduler+0xb8>
	__asm volatile
 8006b32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b36:	f383 8811 	msr	BASEPRI, r3
 8006b3a:	f3bf 8f6f 	isb	sy
 8006b3e:	f3bf 8f4f 	dsb	sy
 8006b42:	60bb      	str	r3, [r7, #8]
}
 8006b44:	bf00      	nop
 8006b46:	e7fe      	b.n	8006b46 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006b48:	4b1e      	ldr	r3, [pc, #120]	; (8006bc4 <xPortStartScheduler+0x134>)
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	021b      	lsls	r3, r3, #8
 8006b4e:	4a1d      	ldr	r2, [pc, #116]	; (8006bc4 <xPortStartScheduler+0x134>)
 8006b50:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006b52:	4b1c      	ldr	r3, [pc, #112]	; (8006bc4 <xPortStartScheduler+0x134>)
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006b5a:	4a1a      	ldr	r2, [pc, #104]	; (8006bc4 <xPortStartScheduler+0x134>)
 8006b5c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	b2da      	uxtb	r2, r3
 8006b62:	697b      	ldr	r3, [r7, #20]
 8006b64:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006b66:	4b18      	ldr	r3, [pc, #96]	; (8006bc8 <xPortStartScheduler+0x138>)
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	4a17      	ldr	r2, [pc, #92]	; (8006bc8 <xPortStartScheduler+0x138>)
 8006b6c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006b70:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006b72:	4b15      	ldr	r3, [pc, #84]	; (8006bc8 <xPortStartScheduler+0x138>)
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	4a14      	ldr	r2, [pc, #80]	; (8006bc8 <xPortStartScheduler+0x138>)
 8006b78:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006b7c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006b7e:	f000 f8dd 	bl	8006d3c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006b82:	4b12      	ldr	r3, [pc, #72]	; (8006bcc <xPortStartScheduler+0x13c>)
 8006b84:	2200      	movs	r2, #0
 8006b86:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006b88:	f000 f8fc 	bl	8006d84 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006b8c:	4b10      	ldr	r3, [pc, #64]	; (8006bd0 <xPortStartScheduler+0x140>)
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	4a0f      	ldr	r2, [pc, #60]	; (8006bd0 <xPortStartScheduler+0x140>)
 8006b92:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006b96:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006b98:	f7ff ff66 	bl	8006a68 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006b9c:	f7ff f88a 	bl	8005cb4 <vTaskSwitchContext>
	prvTaskExitError();
 8006ba0:	f7ff ff20 	bl	80069e4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006ba4:	2300      	movs	r3, #0
}
 8006ba6:	4618      	mov	r0, r3
 8006ba8:	3718      	adds	r7, #24
 8006baa:	46bd      	mov	sp, r7
 8006bac:	bd80      	pop	{r7, pc}
 8006bae:	bf00      	nop
 8006bb0:	e000ed00 	.word	0xe000ed00
 8006bb4:	410fc271 	.word	0x410fc271
 8006bb8:	410fc270 	.word	0x410fc270
 8006bbc:	e000e400 	.word	0xe000e400
 8006bc0:	20000f6c 	.word	0x20000f6c
 8006bc4:	20000f70 	.word	0x20000f70
 8006bc8:	e000ed20 	.word	0xe000ed20
 8006bcc:	20000074 	.word	0x20000074
 8006bd0:	e000ef34 	.word	0xe000ef34

08006bd4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006bd4:	b480      	push	{r7}
 8006bd6:	b083      	sub	sp, #12
 8006bd8:	af00      	add	r7, sp, #0
	__asm volatile
 8006bda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bde:	f383 8811 	msr	BASEPRI, r3
 8006be2:	f3bf 8f6f 	isb	sy
 8006be6:	f3bf 8f4f 	dsb	sy
 8006bea:	607b      	str	r3, [r7, #4]
}
 8006bec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006bee:	4b0f      	ldr	r3, [pc, #60]	; (8006c2c <vPortEnterCritical+0x58>)
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	3301      	adds	r3, #1
 8006bf4:	4a0d      	ldr	r2, [pc, #52]	; (8006c2c <vPortEnterCritical+0x58>)
 8006bf6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006bf8:	4b0c      	ldr	r3, [pc, #48]	; (8006c2c <vPortEnterCritical+0x58>)
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	2b01      	cmp	r3, #1
 8006bfe:	d10f      	bne.n	8006c20 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006c00:	4b0b      	ldr	r3, [pc, #44]	; (8006c30 <vPortEnterCritical+0x5c>)
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	b2db      	uxtb	r3, r3
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d00a      	beq.n	8006c20 <vPortEnterCritical+0x4c>
	__asm volatile
 8006c0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c0e:	f383 8811 	msr	BASEPRI, r3
 8006c12:	f3bf 8f6f 	isb	sy
 8006c16:	f3bf 8f4f 	dsb	sy
 8006c1a:	603b      	str	r3, [r7, #0]
}
 8006c1c:	bf00      	nop
 8006c1e:	e7fe      	b.n	8006c1e <vPortEnterCritical+0x4a>
	}
}
 8006c20:	bf00      	nop
 8006c22:	370c      	adds	r7, #12
 8006c24:	46bd      	mov	sp, r7
 8006c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c2a:	4770      	bx	lr
 8006c2c:	20000074 	.word	0x20000074
 8006c30:	e000ed04 	.word	0xe000ed04

08006c34 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006c34:	b480      	push	{r7}
 8006c36:	b083      	sub	sp, #12
 8006c38:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006c3a:	4b12      	ldr	r3, [pc, #72]	; (8006c84 <vPortExitCritical+0x50>)
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d10a      	bne.n	8006c58 <vPortExitCritical+0x24>
	__asm volatile
 8006c42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c46:	f383 8811 	msr	BASEPRI, r3
 8006c4a:	f3bf 8f6f 	isb	sy
 8006c4e:	f3bf 8f4f 	dsb	sy
 8006c52:	607b      	str	r3, [r7, #4]
}
 8006c54:	bf00      	nop
 8006c56:	e7fe      	b.n	8006c56 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006c58:	4b0a      	ldr	r3, [pc, #40]	; (8006c84 <vPortExitCritical+0x50>)
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	3b01      	subs	r3, #1
 8006c5e:	4a09      	ldr	r2, [pc, #36]	; (8006c84 <vPortExitCritical+0x50>)
 8006c60:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006c62:	4b08      	ldr	r3, [pc, #32]	; (8006c84 <vPortExitCritical+0x50>)
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d105      	bne.n	8006c76 <vPortExitCritical+0x42>
 8006c6a:	2300      	movs	r3, #0
 8006c6c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006c6e:	683b      	ldr	r3, [r7, #0]
 8006c70:	f383 8811 	msr	BASEPRI, r3
}
 8006c74:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006c76:	bf00      	nop
 8006c78:	370c      	adds	r7, #12
 8006c7a:	46bd      	mov	sp, r7
 8006c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c80:	4770      	bx	lr
 8006c82:	bf00      	nop
 8006c84:	20000074 	.word	0x20000074
	...

08006c90 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006c90:	f3ef 8009 	mrs	r0, PSP
 8006c94:	f3bf 8f6f 	isb	sy
 8006c98:	4b15      	ldr	r3, [pc, #84]	; (8006cf0 <pxCurrentTCBConst>)
 8006c9a:	681a      	ldr	r2, [r3, #0]
 8006c9c:	f01e 0f10 	tst.w	lr, #16
 8006ca0:	bf08      	it	eq
 8006ca2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006ca6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006caa:	6010      	str	r0, [r2, #0]
 8006cac:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006cb0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006cb4:	f380 8811 	msr	BASEPRI, r0
 8006cb8:	f3bf 8f4f 	dsb	sy
 8006cbc:	f3bf 8f6f 	isb	sy
 8006cc0:	f7fe fff8 	bl	8005cb4 <vTaskSwitchContext>
 8006cc4:	f04f 0000 	mov.w	r0, #0
 8006cc8:	f380 8811 	msr	BASEPRI, r0
 8006ccc:	bc09      	pop	{r0, r3}
 8006cce:	6819      	ldr	r1, [r3, #0]
 8006cd0:	6808      	ldr	r0, [r1, #0]
 8006cd2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006cd6:	f01e 0f10 	tst.w	lr, #16
 8006cda:	bf08      	it	eq
 8006cdc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006ce0:	f380 8809 	msr	PSP, r0
 8006ce4:	f3bf 8f6f 	isb	sy
 8006ce8:	4770      	bx	lr
 8006cea:	bf00      	nop
 8006cec:	f3af 8000 	nop.w

08006cf0 <pxCurrentTCBConst>:
 8006cf0:	20000940 	.word	0x20000940
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006cf4:	bf00      	nop
 8006cf6:	bf00      	nop

08006cf8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006cf8:	b580      	push	{r7, lr}
 8006cfa:	b082      	sub	sp, #8
 8006cfc:	af00      	add	r7, sp, #0
	__asm volatile
 8006cfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d02:	f383 8811 	msr	BASEPRI, r3
 8006d06:	f3bf 8f6f 	isb	sy
 8006d0a:	f3bf 8f4f 	dsb	sy
 8006d0e:	607b      	str	r3, [r7, #4]
}
 8006d10:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006d12:	f7fe ff11 	bl	8005b38 <xTaskIncrementTick>
 8006d16:	4603      	mov	r3, r0
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d003      	beq.n	8006d24 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006d1c:	4b06      	ldr	r3, [pc, #24]	; (8006d38 <SysTick_Handler+0x40>)
 8006d1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d22:	601a      	str	r2, [r3, #0]
 8006d24:	2300      	movs	r3, #0
 8006d26:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006d28:	683b      	ldr	r3, [r7, #0]
 8006d2a:	f383 8811 	msr	BASEPRI, r3
}
 8006d2e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006d30:	bf00      	nop
 8006d32:	3708      	adds	r7, #8
 8006d34:	46bd      	mov	sp, r7
 8006d36:	bd80      	pop	{r7, pc}
 8006d38:	e000ed04 	.word	0xe000ed04

08006d3c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006d3c:	b480      	push	{r7}
 8006d3e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006d40:	4b0b      	ldr	r3, [pc, #44]	; (8006d70 <vPortSetupTimerInterrupt+0x34>)
 8006d42:	2200      	movs	r2, #0
 8006d44:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006d46:	4b0b      	ldr	r3, [pc, #44]	; (8006d74 <vPortSetupTimerInterrupt+0x38>)
 8006d48:	2200      	movs	r2, #0
 8006d4a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006d4c:	4b0a      	ldr	r3, [pc, #40]	; (8006d78 <vPortSetupTimerInterrupt+0x3c>)
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	4a0a      	ldr	r2, [pc, #40]	; (8006d7c <vPortSetupTimerInterrupt+0x40>)
 8006d52:	fba2 2303 	umull	r2, r3, r2, r3
 8006d56:	099b      	lsrs	r3, r3, #6
 8006d58:	4a09      	ldr	r2, [pc, #36]	; (8006d80 <vPortSetupTimerInterrupt+0x44>)
 8006d5a:	3b01      	subs	r3, #1
 8006d5c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006d5e:	4b04      	ldr	r3, [pc, #16]	; (8006d70 <vPortSetupTimerInterrupt+0x34>)
 8006d60:	2207      	movs	r2, #7
 8006d62:	601a      	str	r2, [r3, #0]
}
 8006d64:	bf00      	nop
 8006d66:	46bd      	mov	sp, r7
 8006d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d6c:	4770      	bx	lr
 8006d6e:	bf00      	nop
 8006d70:	e000e010 	.word	0xe000e010
 8006d74:	e000e018 	.word	0xe000e018
 8006d78:	2000006c 	.word	0x2000006c
 8006d7c:	10624dd3 	.word	0x10624dd3
 8006d80:	e000e014 	.word	0xe000e014

08006d84 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006d84:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006d94 <vPortEnableVFP+0x10>
 8006d88:	6801      	ldr	r1, [r0, #0]
 8006d8a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8006d8e:	6001      	str	r1, [r0, #0]
 8006d90:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006d92:	bf00      	nop
 8006d94:	e000ed88 	.word	0xe000ed88

08006d98 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006d98:	b480      	push	{r7}
 8006d9a:	b085      	sub	sp, #20
 8006d9c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006d9e:	f3ef 8305 	mrs	r3, IPSR
 8006da2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	2b0f      	cmp	r3, #15
 8006da8:	d914      	bls.n	8006dd4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006daa:	4a17      	ldr	r2, [pc, #92]	; (8006e08 <vPortValidateInterruptPriority+0x70>)
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	4413      	add	r3, r2
 8006db0:	781b      	ldrb	r3, [r3, #0]
 8006db2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006db4:	4b15      	ldr	r3, [pc, #84]	; (8006e0c <vPortValidateInterruptPriority+0x74>)
 8006db6:	781b      	ldrb	r3, [r3, #0]
 8006db8:	7afa      	ldrb	r2, [r7, #11]
 8006dba:	429a      	cmp	r2, r3
 8006dbc:	d20a      	bcs.n	8006dd4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8006dbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dc2:	f383 8811 	msr	BASEPRI, r3
 8006dc6:	f3bf 8f6f 	isb	sy
 8006dca:	f3bf 8f4f 	dsb	sy
 8006dce:	607b      	str	r3, [r7, #4]
}
 8006dd0:	bf00      	nop
 8006dd2:	e7fe      	b.n	8006dd2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006dd4:	4b0e      	ldr	r3, [pc, #56]	; (8006e10 <vPortValidateInterruptPriority+0x78>)
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006ddc:	4b0d      	ldr	r3, [pc, #52]	; (8006e14 <vPortValidateInterruptPriority+0x7c>)
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	429a      	cmp	r2, r3
 8006de2:	d90a      	bls.n	8006dfa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8006de4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006de8:	f383 8811 	msr	BASEPRI, r3
 8006dec:	f3bf 8f6f 	isb	sy
 8006df0:	f3bf 8f4f 	dsb	sy
 8006df4:	603b      	str	r3, [r7, #0]
}
 8006df6:	bf00      	nop
 8006df8:	e7fe      	b.n	8006df8 <vPortValidateInterruptPriority+0x60>
	}
 8006dfa:	bf00      	nop
 8006dfc:	3714      	adds	r7, #20
 8006dfe:	46bd      	mov	sp, r7
 8006e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e04:	4770      	bx	lr
 8006e06:	bf00      	nop
 8006e08:	e000e3f0 	.word	0xe000e3f0
 8006e0c:	20000f6c 	.word	0x20000f6c
 8006e10:	e000ed0c 	.word	0xe000ed0c
 8006e14:	20000f70 	.word	0x20000f70

08006e18 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006e18:	b580      	push	{r7, lr}
 8006e1a:	b08a      	sub	sp, #40	; 0x28
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006e20:	2300      	movs	r3, #0
 8006e22:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006e24:	f7fe fdcc 	bl	80059c0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006e28:	4b58      	ldr	r3, [pc, #352]	; (8006f8c <pvPortMalloc+0x174>)
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d101      	bne.n	8006e34 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006e30:	f000 f910 	bl	8007054 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006e34:	4b56      	ldr	r3, [pc, #344]	; (8006f90 <pvPortMalloc+0x178>)
 8006e36:	681a      	ldr	r2, [r3, #0]
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	4013      	ands	r3, r2
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	f040 808e 	bne.w	8006f5e <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d01d      	beq.n	8006e84 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006e48:	2208      	movs	r2, #8
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	4413      	add	r3, r2
 8006e4e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	f003 0307 	and.w	r3, r3, #7
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d014      	beq.n	8006e84 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	f023 0307 	bic.w	r3, r3, #7
 8006e60:	3308      	adds	r3, #8
 8006e62:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	f003 0307 	and.w	r3, r3, #7
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d00a      	beq.n	8006e84 <pvPortMalloc+0x6c>
	__asm volatile
 8006e6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e72:	f383 8811 	msr	BASEPRI, r3
 8006e76:	f3bf 8f6f 	isb	sy
 8006e7a:	f3bf 8f4f 	dsb	sy
 8006e7e:	617b      	str	r3, [r7, #20]
}
 8006e80:	bf00      	nop
 8006e82:	e7fe      	b.n	8006e82 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d069      	beq.n	8006f5e <pvPortMalloc+0x146>
 8006e8a:	4b42      	ldr	r3, [pc, #264]	; (8006f94 <pvPortMalloc+0x17c>)
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	687a      	ldr	r2, [r7, #4]
 8006e90:	429a      	cmp	r2, r3
 8006e92:	d864      	bhi.n	8006f5e <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006e94:	4b40      	ldr	r3, [pc, #256]	; (8006f98 <pvPortMalloc+0x180>)
 8006e96:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006e98:	4b3f      	ldr	r3, [pc, #252]	; (8006f98 <pvPortMalloc+0x180>)
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006e9e:	e004      	b.n	8006eaa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ea2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eac:	685b      	ldr	r3, [r3, #4]
 8006eae:	687a      	ldr	r2, [r7, #4]
 8006eb0:	429a      	cmp	r2, r3
 8006eb2:	d903      	bls.n	8006ebc <pvPortMalloc+0xa4>
 8006eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d1f1      	bne.n	8006ea0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006ebc:	4b33      	ldr	r3, [pc, #204]	; (8006f8c <pvPortMalloc+0x174>)
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ec2:	429a      	cmp	r2, r3
 8006ec4:	d04b      	beq.n	8006f5e <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006ec6:	6a3b      	ldr	r3, [r7, #32]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	2208      	movs	r2, #8
 8006ecc:	4413      	add	r3, r2
 8006ece:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ed2:	681a      	ldr	r2, [r3, #0]
 8006ed4:	6a3b      	ldr	r3, [r7, #32]
 8006ed6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eda:	685a      	ldr	r2, [r3, #4]
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	1ad2      	subs	r2, r2, r3
 8006ee0:	2308      	movs	r3, #8
 8006ee2:	005b      	lsls	r3, r3, #1
 8006ee4:	429a      	cmp	r2, r3
 8006ee6:	d91f      	bls.n	8006f28 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006ee8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	4413      	add	r3, r2
 8006eee:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006ef0:	69bb      	ldr	r3, [r7, #24]
 8006ef2:	f003 0307 	and.w	r3, r3, #7
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d00a      	beq.n	8006f10 <pvPortMalloc+0xf8>
	__asm volatile
 8006efa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006efe:	f383 8811 	msr	BASEPRI, r3
 8006f02:	f3bf 8f6f 	isb	sy
 8006f06:	f3bf 8f4f 	dsb	sy
 8006f0a:	613b      	str	r3, [r7, #16]
}
 8006f0c:	bf00      	nop
 8006f0e:	e7fe      	b.n	8006f0e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f12:	685a      	ldr	r2, [r3, #4]
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	1ad2      	subs	r2, r2, r3
 8006f18:	69bb      	ldr	r3, [r7, #24]
 8006f1a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f1e:	687a      	ldr	r2, [r7, #4]
 8006f20:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006f22:	69b8      	ldr	r0, [r7, #24]
 8006f24:	f000 f8f8 	bl	8007118 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006f28:	4b1a      	ldr	r3, [pc, #104]	; (8006f94 <pvPortMalloc+0x17c>)
 8006f2a:	681a      	ldr	r2, [r3, #0]
 8006f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f2e:	685b      	ldr	r3, [r3, #4]
 8006f30:	1ad3      	subs	r3, r2, r3
 8006f32:	4a18      	ldr	r2, [pc, #96]	; (8006f94 <pvPortMalloc+0x17c>)
 8006f34:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006f36:	4b17      	ldr	r3, [pc, #92]	; (8006f94 <pvPortMalloc+0x17c>)
 8006f38:	681a      	ldr	r2, [r3, #0]
 8006f3a:	4b18      	ldr	r3, [pc, #96]	; (8006f9c <pvPortMalloc+0x184>)
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	429a      	cmp	r2, r3
 8006f40:	d203      	bcs.n	8006f4a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006f42:	4b14      	ldr	r3, [pc, #80]	; (8006f94 <pvPortMalloc+0x17c>)
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	4a15      	ldr	r2, [pc, #84]	; (8006f9c <pvPortMalloc+0x184>)
 8006f48:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f4c:	685a      	ldr	r2, [r3, #4]
 8006f4e:	4b10      	ldr	r3, [pc, #64]	; (8006f90 <pvPortMalloc+0x178>)
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	431a      	orrs	r2, r3
 8006f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f56:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f5a:	2200      	movs	r2, #0
 8006f5c:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006f5e:	f7fe fd3d 	bl	80059dc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006f62:	69fb      	ldr	r3, [r7, #28]
 8006f64:	f003 0307 	and.w	r3, r3, #7
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d00a      	beq.n	8006f82 <pvPortMalloc+0x16a>
	__asm volatile
 8006f6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f70:	f383 8811 	msr	BASEPRI, r3
 8006f74:	f3bf 8f6f 	isb	sy
 8006f78:	f3bf 8f4f 	dsb	sy
 8006f7c:	60fb      	str	r3, [r7, #12]
}
 8006f7e:	bf00      	nop
 8006f80:	e7fe      	b.n	8006f80 <pvPortMalloc+0x168>
	return pvReturn;
 8006f82:	69fb      	ldr	r3, [r7, #28]
}
 8006f84:	4618      	mov	r0, r3
 8006f86:	3728      	adds	r7, #40	; 0x28
 8006f88:	46bd      	mov	sp, r7
 8006f8a:	bd80      	pop	{r7, pc}
 8006f8c:	20001b7c 	.word	0x20001b7c
 8006f90:	20001b88 	.word	0x20001b88
 8006f94:	20001b80 	.word	0x20001b80
 8006f98:	20001b74 	.word	0x20001b74
 8006f9c:	20001b84 	.word	0x20001b84

08006fa0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006fa0:	b580      	push	{r7, lr}
 8006fa2:	b086      	sub	sp, #24
 8006fa4:	af00      	add	r7, sp, #0
 8006fa6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d048      	beq.n	8007044 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006fb2:	2308      	movs	r3, #8
 8006fb4:	425b      	negs	r3, r3
 8006fb6:	697a      	ldr	r2, [r7, #20]
 8006fb8:	4413      	add	r3, r2
 8006fba:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006fbc:	697b      	ldr	r3, [r7, #20]
 8006fbe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006fc0:	693b      	ldr	r3, [r7, #16]
 8006fc2:	685a      	ldr	r2, [r3, #4]
 8006fc4:	4b21      	ldr	r3, [pc, #132]	; (800704c <vPortFree+0xac>)
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	4013      	ands	r3, r2
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d10a      	bne.n	8006fe4 <vPortFree+0x44>
	__asm volatile
 8006fce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fd2:	f383 8811 	msr	BASEPRI, r3
 8006fd6:	f3bf 8f6f 	isb	sy
 8006fda:	f3bf 8f4f 	dsb	sy
 8006fde:	60fb      	str	r3, [r7, #12]
}
 8006fe0:	bf00      	nop
 8006fe2:	e7fe      	b.n	8006fe2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006fe4:	693b      	ldr	r3, [r7, #16]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d00a      	beq.n	8007002 <vPortFree+0x62>
	__asm volatile
 8006fec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ff0:	f383 8811 	msr	BASEPRI, r3
 8006ff4:	f3bf 8f6f 	isb	sy
 8006ff8:	f3bf 8f4f 	dsb	sy
 8006ffc:	60bb      	str	r3, [r7, #8]
}
 8006ffe:	bf00      	nop
 8007000:	e7fe      	b.n	8007000 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007002:	693b      	ldr	r3, [r7, #16]
 8007004:	685a      	ldr	r2, [r3, #4]
 8007006:	4b11      	ldr	r3, [pc, #68]	; (800704c <vPortFree+0xac>)
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	4013      	ands	r3, r2
 800700c:	2b00      	cmp	r3, #0
 800700e:	d019      	beq.n	8007044 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007010:	693b      	ldr	r3, [r7, #16]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	2b00      	cmp	r3, #0
 8007016:	d115      	bne.n	8007044 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007018:	693b      	ldr	r3, [r7, #16]
 800701a:	685a      	ldr	r2, [r3, #4]
 800701c:	4b0b      	ldr	r3, [pc, #44]	; (800704c <vPortFree+0xac>)
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	43db      	mvns	r3, r3
 8007022:	401a      	ands	r2, r3
 8007024:	693b      	ldr	r3, [r7, #16]
 8007026:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007028:	f7fe fcca 	bl	80059c0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800702c:	693b      	ldr	r3, [r7, #16]
 800702e:	685a      	ldr	r2, [r3, #4]
 8007030:	4b07      	ldr	r3, [pc, #28]	; (8007050 <vPortFree+0xb0>)
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	4413      	add	r3, r2
 8007036:	4a06      	ldr	r2, [pc, #24]	; (8007050 <vPortFree+0xb0>)
 8007038:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800703a:	6938      	ldr	r0, [r7, #16]
 800703c:	f000 f86c 	bl	8007118 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8007040:	f7fe fccc 	bl	80059dc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007044:	bf00      	nop
 8007046:	3718      	adds	r7, #24
 8007048:	46bd      	mov	sp, r7
 800704a:	bd80      	pop	{r7, pc}
 800704c:	20001b88 	.word	0x20001b88
 8007050:	20001b80 	.word	0x20001b80

08007054 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007054:	b480      	push	{r7}
 8007056:	b085      	sub	sp, #20
 8007058:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800705a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800705e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007060:	4b27      	ldr	r3, [pc, #156]	; (8007100 <prvHeapInit+0xac>)
 8007062:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	f003 0307 	and.w	r3, r3, #7
 800706a:	2b00      	cmp	r3, #0
 800706c:	d00c      	beq.n	8007088 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	3307      	adds	r3, #7
 8007072:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	f023 0307 	bic.w	r3, r3, #7
 800707a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800707c:	68ba      	ldr	r2, [r7, #8]
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	1ad3      	subs	r3, r2, r3
 8007082:	4a1f      	ldr	r2, [pc, #124]	; (8007100 <prvHeapInit+0xac>)
 8007084:	4413      	add	r3, r2
 8007086:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800708c:	4a1d      	ldr	r2, [pc, #116]	; (8007104 <prvHeapInit+0xb0>)
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007092:	4b1c      	ldr	r3, [pc, #112]	; (8007104 <prvHeapInit+0xb0>)
 8007094:	2200      	movs	r2, #0
 8007096:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	68ba      	ldr	r2, [r7, #8]
 800709c:	4413      	add	r3, r2
 800709e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80070a0:	2208      	movs	r2, #8
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	1a9b      	subs	r3, r3, r2
 80070a6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	f023 0307 	bic.w	r3, r3, #7
 80070ae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	4a15      	ldr	r2, [pc, #84]	; (8007108 <prvHeapInit+0xb4>)
 80070b4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80070b6:	4b14      	ldr	r3, [pc, #80]	; (8007108 <prvHeapInit+0xb4>)
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	2200      	movs	r2, #0
 80070bc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80070be:	4b12      	ldr	r3, [pc, #72]	; (8007108 <prvHeapInit+0xb4>)
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	2200      	movs	r2, #0
 80070c4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80070ca:	683b      	ldr	r3, [r7, #0]
 80070cc:	68fa      	ldr	r2, [r7, #12]
 80070ce:	1ad2      	subs	r2, r2, r3
 80070d0:	683b      	ldr	r3, [r7, #0]
 80070d2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80070d4:	4b0c      	ldr	r3, [pc, #48]	; (8007108 <prvHeapInit+0xb4>)
 80070d6:	681a      	ldr	r2, [r3, #0]
 80070d8:	683b      	ldr	r3, [r7, #0]
 80070da:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80070dc:	683b      	ldr	r3, [r7, #0]
 80070de:	685b      	ldr	r3, [r3, #4]
 80070e0:	4a0a      	ldr	r2, [pc, #40]	; (800710c <prvHeapInit+0xb8>)
 80070e2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80070e4:	683b      	ldr	r3, [r7, #0]
 80070e6:	685b      	ldr	r3, [r3, #4]
 80070e8:	4a09      	ldr	r2, [pc, #36]	; (8007110 <prvHeapInit+0xbc>)
 80070ea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80070ec:	4b09      	ldr	r3, [pc, #36]	; (8007114 <prvHeapInit+0xc0>)
 80070ee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80070f2:	601a      	str	r2, [r3, #0]
}
 80070f4:	bf00      	nop
 80070f6:	3714      	adds	r7, #20
 80070f8:	46bd      	mov	sp, r7
 80070fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070fe:	4770      	bx	lr
 8007100:	20000f74 	.word	0x20000f74
 8007104:	20001b74 	.word	0x20001b74
 8007108:	20001b7c 	.word	0x20001b7c
 800710c:	20001b84 	.word	0x20001b84
 8007110:	20001b80 	.word	0x20001b80
 8007114:	20001b88 	.word	0x20001b88

08007118 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007118:	b480      	push	{r7}
 800711a:	b085      	sub	sp, #20
 800711c:	af00      	add	r7, sp, #0
 800711e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007120:	4b28      	ldr	r3, [pc, #160]	; (80071c4 <prvInsertBlockIntoFreeList+0xac>)
 8007122:	60fb      	str	r3, [r7, #12]
 8007124:	e002      	b.n	800712c <prvInsertBlockIntoFreeList+0x14>
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	60fb      	str	r3, [r7, #12]
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	687a      	ldr	r2, [r7, #4]
 8007132:	429a      	cmp	r2, r3
 8007134:	d8f7      	bhi.n	8007126 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	685b      	ldr	r3, [r3, #4]
 800713e:	68ba      	ldr	r2, [r7, #8]
 8007140:	4413      	add	r3, r2
 8007142:	687a      	ldr	r2, [r7, #4]
 8007144:	429a      	cmp	r2, r3
 8007146:	d108      	bne.n	800715a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	685a      	ldr	r2, [r3, #4]
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	685b      	ldr	r3, [r3, #4]
 8007150:	441a      	add	r2, r3
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	685b      	ldr	r3, [r3, #4]
 8007162:	68ba      	ldr	r2, [r7, #8]
 8007164:	441a      	add	r2, r3
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	429a      	cmp	r2, r3
 800716c:	d118      	bne.n	80071a0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	681a      	ldr	r2, [r3, #0]
 8007172:	4b15      	ldr	r3, [pc, #84]	; (80071c8 <prvInsertBlockIntoFreeList+0xb0>)
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	429a      	cmp	r2, r3
 8007178:	d00d      	beq.n	8007196 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	685a      	ldr	r2, [r3, #4]
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	685b      	ldr	r3, [r3, #4]
 8007184:	441a      	add	r2, r3
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	681a      	ldr	r2, [r3, #0]
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	601a      	str	r2, [r3, #0]
 8007194:	e008      	b.n	80071a8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007196:	4b0c      	ldr	r3, [pc, #48]	; (80071c8 <prvInsertBlockIntoFreeList+0xb0>)
 8007198:	681a      	ldr	r2, [r3, #0]
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	601a      	str	r2, [r3, #0]
 800719e:	e003      	b.n	80071a8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	681a      	ldr	r2, [r3, #0]
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80071a8:	68fa      	ldr	r2, [r7, #12]
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	429a      	cmp	r2, r3
 80071ae:	d002      	beq.n	80071b6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	687a      	ldr	r2, [r7, #4]
 80071b4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80071b6:	bf00      	nop
 80071b8:	3714      	adds	r7, #20
 80071ba:	46bd      	mov	sp, r7
 80071bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c0:	4770      	bx	lr
 80071c2:	bf00      	nop
 80071c4:	20001b74 	.word	0x20001b74
 80071c8:	20001b7c 	.word	0x20001b7c

080071cc <memset>:
 80071cc:	4402      	add	r2, r0
 80071ce:	4603      	mov	r3, r0
 80071d0:	4293      	cmp	r3, r2
 80071d2:	d100      	bne.n	80071d6 <memset+0xa>
 80071d4:	4770      	bx	lr
 80071d6:	f803 1b01 	strb.w	r1, [r3], #1
 80071da:	e7f9      	b.n	80071d0 <memset+0x4>

080071dc <__libc_init_array>:
 80071dc:	b570      	push	{r4, r5, r6, lr}
 80071de:	4d0d      	ldr	r5, [pc, #52]	; (8007214 <__libc_init_array+0x38>)
 80071e0:	4c0d      	ldr	r4, [pc, #52]	; (8007218 <__libc_init_array+0x3c>)
 80071e2:	1b64      	subs	r4, r4, r5
 80071e4:	10a4      	asrs	r4, r4, #2
 80071e6:	2600      	movs	r6, #0
 80071e8:	42a6      	cmp	r6, r4
 80071ea:	d109      	bne.n	8007200 <__libc_init_array+0x24>
 80071ec:	4d0b      	ldr	r5, [pc, #44]	; (800721c <__libc_init_array+0x40>)
 80071ee:	4c0c      	ldr	r4, [pc, #48]	; (8007220 <__libc_init_array+0x44>)
 80071f0:	f000 f826 	bl	8007240 <_init>
 80071f4:	1b64      	subs	r4, r4, r5
 80071f6:	10a4      	asrs	r4, r4, #2
 80071f8:	2600      	movs	r6, #0
 80071fa:	42a6      	cmp	r6, r4
 80071fc:	d105      	bne.n	800720a <__libc_init_array+0x2e>
 80071fe:	bd70      	pop	{r4, r5, r6, pc}
 8007200:	f855 3b04 	ldr.w	r3, [r5], #4
 8007204:	4798      	blx	r3
 8007206:	3601      	adds	r6, #1
 8007208:	e7ee      	b.n	80071e8 <__libc_init_array+0xc>
 800720a:	f855 3b04 	ldr.w	r3, [r5], #4
 800720e:	4798      	blx	r3
 8007210:	3601      	adds	r6, #1
 8007212:	e7f2      	b.n	80071fa <__libc_init_array+0x1e>
 8007214:	08007308 	.word	0x08007308
 8007218:	08007308 	.word	0x08007308
 800721c:	08007308 	.word	0x08007308
 8007220:	0800730c 	.word	0x0800730c

08007224 <memcpy>:
 8007224:	440a      	add	r2, r1
 8007226:	4291      	cmp	r1, r2
 8007228:	f100 33ff 	add.w	r3, r0, #4294967295
 800722c:	d100      	bne.n	8007230 <memcpy+0xc>
 800722e:	4770      	bx	lr
 8007230:	b510      	push	{r4, lr}
 8007232:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007236:	f803 4f01 	strb.w	r4, [r3, #1]!
 800723a:	4291      	cmp	r1, r2
 800723c:	d1f9      	bne.n	8007232 <memcpy+0xe>
 800723e:	bd10      	pop	{r4, pc}

08007240 <_init>:
 8007240:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007242:	bf00      	nop
 8007244:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007246:	bc08      	pop	{r3}
 8007248:	469e      	mov	lr, r3
 800724a:	4770      	bx	lr

0800724c <_fini>:
 800724c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800724e:	bf00      	nop
 8007250:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007252:	bc08      	pop	{r3}
 8007254:	469e      	mov	lr, r3
 8007256:	4770      	bx	lr
