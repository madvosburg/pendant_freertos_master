
freertos_master.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008128  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f4  080082c8  080082c8  000182c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080083bc  080083bc  0002007c  2**0
                  CONTENTS
  4 .ARM          00000000  080083bc  080083bc  0002007c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080083bc  080083bc  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080083bc  080083bc  000183bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080083c0  080083c0  000183c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  080083c4  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002007c  2**0
                  CONTENTS
 10 .bss          00001b40  20000080  20000080  00020080  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  20001bc0  20001bc0  00020080  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001c3fe  00000000  00000000  000200ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000041a4  00000000  00000000  0003c4ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001818  00000000  00000000  00040698  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000012b2  00000000  00000000  00041eb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00023abc  00000000  00000000  00043162  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001e0db  00000000  00000000  00066c1e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000e3c9d  00000000  00000000  00084cf9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000064b8  00000000  00000000  00168998  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006e  00000000  00000000  0016ee50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000080 	.word	0x20000080
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080082b0 	.word	0x080082b0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000084 	.word	0x20000084
 80001dc:	080082b0 	.word	0x080082b0

080001e0 <crc_append>:
uint64_t crc_key = 0xD;

/**
 * appends 3 zeros to end of data to prepare for division
 */
uint64_t crc_append(uint64_t crc_data){
 80001e0:	b480      	push	{r7}
 80001e2:	b083      	sub	sp, #12
 80001e4:	af00      	add	r7, sp, #0
 80001e6:	e9c7 0100 	strd	r0, r1, [r7]
	return crc_data << 3;
 80001ea:	e9d7 0100 	ldrd	r0, r1, [r7]
 80001ee:	f04f 0200 	mov.w	r2, #0
 80001f2:	f04f 0300 	mov.w	r3, #0
 80001f6:	00cb      	lsls	r3, r1, #3
 80001f8:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80001fc:	00c2      	lsls	r2, r0, #3
}
 80001fe:	4610      	mov	r0, r2
 8000200:	4619      	mov	r1, r3
 8000202:	370c      	adds	r7, #12
 8000204:	46bd      	mov	sp, r7
 8000206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800020a:	4770      	bx	lr

0800020c <crc_xor>:

/**
 * XOR logic used to divide data by key
 */
uint64_t crc_xor(uint64_t div_data){
 800020c:	b4b0      	push	{r4, r5, r7}
 800020e:	b085      	sub	sp, #20
 8000210:	af00      	add	r7, sp, #0
 8000212:	e9c7 0100 	strd	r0, r1, [r7]
	uint64_t ans = div_data;
 8000216:	e9d7 0100 	ldrd	r0, r1, [r7]
 800021a:	e9c7 0102 	strd	r0, r1, [r7, #8]
	if(ans & 0b1000){
 800021e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000222:	f000 0208 	and.w	r2, r0, #8
 8000226:	2300      	movs	r3, #0
 8000228:	4313      	orrs	r3, r2
 800022a:	d00a      	beq.n	8000242 <crc_xor+0x36>
		ans = ans ^ crc_key;		//if leftmost bit is 1, perform xor with key
 800022c:	4b09      	ldr	r3, [pc, #36]	; (8000254 <crc_xor+0x48>)
 800022e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000232:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000236:	ea80 0402 	eor.w	r4, r0, r2
 800023a:	ea81 0503 	eor.w	r5, r1, r3
 800023e:	e9c7 4502 	strd	r4, r5, [r7, #8]
	}else{
		ans = ans ^ 0b0000;			//if leftmost bit is 0, perform xor with all zeros
	}
	return ans;
 8000242:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
}
 8000246:	4610      	mov	r0, r2
 8000248:	4619      	mov	r1, r3
 800024a:	3714      	adds	r7, #20
 800024c:	46bd      	mov	sp, r7
 800024e:	bcb0      	pop	{r4, r5, r7}
 8000250:	4770      	bx	lr
 8000252:	bf00      	nop
 8000254:	20000000 	.word	0x20000000

08000258 <crc_division>:
/**
 * divides data by key to get remainder
 *
 * takes 4 bits at a time and XORs them until 4 bit remainder is left
 */
uint64_t crc_division(uint64_t data, int curs_pos, int shift_pos, uint64_t answer){
 8000258:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800025c:	b08f      	sub	sp, #60	; 0x3c
 800025e:	af00      	add	r7, sp, #0
 8000260:	e9c7 0106 	strd	r0, r1, [r7, #24]
 8000264:	617a      	str	r2, [r7, #20]
 8000266:	613b      	str	r3, [r7, #16]
	int cursor = curs_pos;
 8000268:	697b      	ldr	r3, [r7, #20]
 800026a:	637b      	str	r3, [r7, #52]	; 0x34
	int bit_shift = shift_pos;
 800026c:	693b      	ldr	r3, [r7, #16]
 800026e:	633b      	str	r3, [r7, #48]	; 0x30
	uint64_t remain = answer;
 8000270:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8000274:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	uint64_t dividend = 0;
 8000278:	f04f 0200 	mov.w	r2, #0
 800027c:	f04f 0300 	mov.w	r3, #0
 8000280:	e9c7 2308 	strd	r2, r3, [r7, #32]

	while(bit_shift > 0){
 8000284:	e057      	b.n	8000336 <crc_division+0xde>
		bit_shift--;
 8000286:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000288:	3b01      	subs	r3, #1
 800028a:	633b      	str	r3, [r7, #48]	; 0x30
		dividend = data & (0x0800000000000000 >> cursor);
 800028c:	f04f 0200 	mov.w	r2, #0
 8000290:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000294:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8000296:	f1c0 0120 	rsb	r1, r0, #32
 800029a:	f1b0 0420 	subs.w	r4, r0, #32
 800029e:	fa22 fa00 	lsr.w	sl, r2, r0
 80002a2:	fa03 f101 	lsl.w	r1, r3, r1
 80002a6:	ea4a 0a01 	orr.w	sl, sl, r1
 80002aa:	d403      	bmi.n	80002b4 <crc_division+0x5c>
 80002ac:	fa43 f404 	asr.w	r4, r3, r4
 80002b0:	ea4a 0a04 	orr.w	sl, sl, r4
 80002b4:	fa43 fb00 	asr.w	fp, r3, r0
 80002b8:	4650      	mov	r0, sl
 80002ba:	4659      	mov	r1, fp
 80002bc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80002c0:	ea02 0500 	and.w	r5, r2, r0
 80002c4:	ea03 0601 	and.w	r6, r3, r1
 80002c8:	e9c7 5608 	strd	r5, r6, [r7, #32]
		dividend = dividend >> bit_shift;
 80002cc:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80002d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80002d2:	f1c0 0420 	rsb	r4, r0, #32
 80002d6:	f1a0 0120 	sub.w	r1, r0, #32
 80002da:	fa22 f800 	lsr.w	r8, r2, r0
 80002de:	fa03 f404 	lsl.w	r4, r3, r4
 80002e2:	ea48 0804 	orr.w	r8, r8, r4
 80002e6:	fa23 f101 	lsr.w	r1, r3, r1
 80002ea:	ea48 0801 	orr.w	r8, r8, r1
 80002ee:	fa23 f900 	lsr.w	r9, r3, r0
 80002f2:	e9c7 8908 	strd	r8, r9, [r7, #32]
		remain = remain << 1;
 80002f6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80002fa:	1891      	adds	r1, r2, r2
 80002fc:	60b9      	str	r1, [r7, #8]
 80002fe:	415b      	adcs	r3, r3
 8000300:	60fb      	str	r3, [r7, #12]
 8000302:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8000306:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
		remain += dividend;
 800030a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800030e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8000312:	1884      	adds	r4, r0, r2
 8000314:	603c      	str	r4, [r7, #0]
 8000316:	eb41 0303 	adc.w	r3, r1, r3
 800031a:	607b      	str	r3, [r7, #4]
 800031c:	e9d7 3400 	ldrd	r3, r4, [r7]
 8000320:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
		remain = crc_xor(remain);
 8000324:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8000328:	f7ff ff70 	bl	800020c <crc_xor>
 800032c:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
		cursor++;
 8000330:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000332:	3301      	adds	r3, #1
 8000334:	637b      	str	r3, [r7, #52]	; 0x34
	while(bit_shift > 0){
 8000336:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000338:	2b00      	cmp	r3, #0
 800033a:	dca4      	bgt.n	8000286 <crc_division+0x2e>
	}
	return remain;
 800033c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
}
 8000340:	4610      	mov	r0, r2
 8000342:	4619      	mov	r1, r3
 8000344:	373c      	adds	r7, #60	; 0x3c
 8000346:	46bd      	mov	sp, r7
 8000348:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800034c <flash_write>:
#include "flash_driver.h"

/**
* writes button press counts to flash memory
*/
HAL_StatusTypeDef flash_write(uint32_t address, uint32_t data, bool timer_flag, WWDG_HandleTypeDef *hwwdg){
 800034c:	b5b0      	push	{r4, r5, r7, lr}
 800034e:	b088      	sub	sp, #32
 8000350:	af00      	add	r7, sp, #0
 8000352:	60f8      	str	r0, [r7, #12]
 8000354:	60b9      	str	r1, [r7, #8]
 8000356:	603b      	str	r3, [r7, #0]
 8000358:	4613      	mov	r3, r2
 800035a:	71fb      	strb	r3, [r7, #7]
	HAL_FLASH_Unlock();
 800035c:	f001 f8ca 	bl	80014f4 <HAL_FLASH_Unlock>

	FLASH_EraseInitTypeDef FLASH_EraseInitStruct = {0};
 8000360:	f107 0314 	add.w	r3, r7, #20
 8000364:	2200      	movs	r2, #0
 8000366:	601a      	str	r2, [r3, #0]
 8000368:	605a      	str	r2, [r3, #4]
 800036a:	609a      	str	r2, [r3, #8]
	FLASH_EraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES;
 800036c:	2300      	movs	r3, #0
 800036e:	617b      	str	r3, [r7, #20]
	FLASH_EraseInitStruct.PageAddress = address;
 8000370:	68fb      	ldr	r3, [r7, #12]
 8000372:	61bb      	str	r3, [r7, #24]
	FLASH_EraseInitStruct.NbPages = 1;
 8000374:	2301      	movs	r3, #1
 8000376:	61fb      	str	r3, [r7, #28]
	uint32_t PageError;
	HAL_FLASHEx_Erase(&FLASH_EraseInitStruct, &PageError);
 8000378:	f107 0210 	add.w	r2, r7, #16
 800037c:	f107 0314 	add.w	r3, r7, #20
 8000380:	4611      	mov	r1, r2
 8000382:	4618      	mov	r0, r3
 8000384:	f001 f97a 	bl	800167c <HAL_FLASHEx_Erase>

	if(timer_flag){
 8000388:	79fb      	ldrb	r3, [r7, #7]
 800038a:	2b00      	cmp	r3, #0
 800038c:	d002      	beq.n	8000394 <flash_write+0x48>
		HAL_WWDG_Refresh(hwwdg);
 800038e:	6838      	ldr	r0, [r7, #0]
 8000390:	f004 fba1 	bl	8004ad6 <HAL_WWDG_Refresh>
	}

	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, address, (uint64_t)data);
 8000394:	68bb      	ldr	r3, [r7, #8]
 8000396:	2200      	movs	r2, #0
 8000398:	461c      	mov	r4, r3
 800039a:	4615      	mov	r5, r2
 800039c:	4622      	mov	r2, r4
 800039e:	462b      	mov	r3, r5
 80003a0:	68f9      	ldr	r1, [r7, #12]
 80003a2:	2002      	movs	r0, #2
 80003a4:	f001 f836 	bl	8001414 <HAL_FLASH_Program>
	HAL_FLASH_Lock();
 80003a8:	f001 f8ca 	bl	8001540 <HAL_FLASH_Lock>

	return HAL_OK;
 80003ac:	2300      	movs	r3, #0
}
 80003ae:	4618      	mov	r0, r3
 80003b0:	3720      	adds	r7, #32
 80003b2:	46bd      	mov	sp, r7
 80003b4:	bdb0      	pop	{r4, r5, r7, pc}

080003b6 <flash_read>:

/**
* reads button press counts from flash memory
*/
uint32_t flash_read(uint32_t address){
 80003b6:	b480      	push	{r7}
 80003b8:	b083      	sub	sp, #12
 80003ba:	af00      	add	r7, sp, #0
 80003bc:	6078      	str	r0, [r7, #4]
	return *(uint32_t*)address;
 80003be:	687b      	ldr	r3, [r7, #4]
 80003c0:	681b      	ldr	r3, [r3, #0]
}
 80003c2:	4618      	mov	r0, r3
 80003c4:	370c      	adds	r7, #12
 80003c6:	46bd      	mov	sp, r7
 80003c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003cc:	4770      	bx	lr
	...

080003d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80003d0:	b480      	push	{r7}
 80003d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80003d4:	4b04      	ldr	r3, [pc, #16]	; (80003e8 <__NVIC_GetPriorityGrouping+0x18>)
 80003d6:	68db      	ldr	r3, [r3, #12]
 80003d8:	0a1b      	lsrs	r3, r3, #8
 80003da:	f003 0307 	and.w	r3, r3, #7
}
 80003de:	4618      	mov	r0, r3
 80003e0:	46bd      	mov	sp, r7
 80003e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003e6:	4770      	bx	lr
 80003e8:	e000ed00 	.word	0xe000ed00

080003ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80003ec:	b480      	push	{r7}
 80003ee:	b083      	sub	sp, #12
 80003f0:	af00      	add	r7, sp, #0
 80003f2:	4603      	mov	r3, r0
 80003f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80003f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	db0b      	blt.n	8000416 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80003fe:	79fb      	ldrb	r3, [r7, #7]
 8000400:	f003 021f 	and.w	r2, r3, #31
 8000404:	4907      	ldr	r1, [pc, #28]	; (8000424 <__NVIC_EnableIRQ+0x38>)
 8000406:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800040a:	095b      	lsrs	r3, r3, #5
 800040c:	2001      	movs	r0, #1
 800040e:	fa00 f202 	lsl.w	r2, r0, r2
 8000412:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000416:	bf00      	nop
 8000418:	370c      	adds	r7, #12
 800041a:	46bd      	mov	sp, r7
 800041c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000420:	4770      	bx	lr
 8000422:	bf00      	nop
 8000424:	e000e100 	.word	0xe000e100

08000428 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000428:	b480      	push	{r7}
 800042a:	b083      	sub	sp, #12
 800042c:	af00      	add	r7, sp, #0
 800042e:	4603      	mov	r3, r0
 8000430:	6039      	str	r1, [r7, #0]
 8000432:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000434:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000438:	2b00      	cmp	r3, #0
 800043a:	db0a      	blt.n	8000452 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800043c:	683b      	ldr	r3, [r7, #0]
 800043e:	b2da      	uxtb	r2, r3
 8000440:	490c      	ldr	r1, [pc, #48]	; (8000474 <__NVIC_SetPriority+0x4c>)
 8000442:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000446:	0112      	lsls	r2, r2, #4
 8000448:	b2d2      	uxtb	r2, r2
 800044a:	440b      	add	r3, r1
 800044c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000450:	e00a      	b.n	8000468 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000452:	683b      	ldr	r3, [r7, #0]
 8000454:	b2da      	uxtb	r2, r3
 8000456:	4908      	ldr	r1, [pc, #32]	; (8000478 <__NVIC_SetPriority+0x50>)
 8000458:	79fb      	ldrb	r3, [r7, #7]
 800045a:	f003 030f 	and.w	r3, r3, #15
 800045e:	3b04      	subs	r3, #4
 8000460:	0112      	lsls	r2, r2, #4
 8000462:	b2d2      	uxtb	r2, r2
 8000464:	440b      	add	r3, r1
 8000466:	761a      	strb	r2, [r3, #24]
}
 8000468:	bf00      	nop
 800046a:	370c      	adds	r7, #12
 800046c:	46bd      	mov	sp, r7
 800046e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000472:	4770      	bx	lr
 8000474:	e000e100 	.word	0xe000e100
 8000478:	e000ed00 	.word	0xe000ed00

0800047c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800047c:	b480      	push	{r7}
 800047e:	b089      	sub	sp, #36	; 0x24
 8000480:	af00      	add	r7, sp, #0
 8000482:	60f8      	str	r0, [r7, #12]
 8000484:	60b9      	str	r1, [r7, #8]
 8000486:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000488:	68fb      	ldr	r3, [r7, #12]
 800048a:	f003 0307 	and.w	r3, r3, #7
 800048e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000490:	69fb      	ldr	r3, [r7, #28]
 8000492:	f1c3 0307 	rsb	r3, r3, #7
 8000496:	2b04      	cmp	r3, #4
 8000498:	bf28      	it	cs
 800049a:	2304      	movcs	r3, #4
 800049c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800049e:	69fb      	ldr	r3, [r7, #28]
 80004a0:	3304      	adds	r3, #4
 80004a2:	2b06      	cmp	r3, #6
 80004a4:	d902      	bls.n	80004ac <NVIC_EncodePriority+0x30>
 80004a6:	69fb      	ldr	r3, [r7, #28]
 80004a8:	3b03      	subs	r3, #3
 80004aa:	e000      	b.n	80004ae <NVIC_EncodePriority+0x32>
 80004ac:	2300      	movs	r3, #0
 80004ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80004b0:	f04f 32ff 	mov.w	r2, #4294967295
 80004b4:	69bb      	ldr	r3, [r7, #24]
 80004b6:	fa02 f303 	lsl.w	r3, r2, r3
 80004ba:	43da      	mvns	r2, r3
 80004bc:	68bb      	ldr	r3, [r7, #8]
 80004be:	401a      	ands	r2, r3
 80004c0:	697b      	ldr	r3, [r7, #20]
 80004c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80004c4:	f04f 31ff 	mov.w	r1, #4294967295
 80004c8:	697b      	ldr	r3, [r7, #20]
 80004ca:	fa01 f303 	lsl.w	r3, r1, r3
 80004ce:	43d9      	mvns	r1, r3
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80004d4:	4313      	orrs	r3, r2
         );
}
 80004d6:	4618      	mov	r0, r3
 80004d8:	3724      	adds	r7, #36	; 0x24
 80004da:	46bd      	mov	sp, r7
 80004dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e0:	4770      	bx	lr

080004e2 <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 80004e2:	b480      	push	{r7}
 80004e4:	b083      	sub	sp, #12
 80004e6:	af00      	add	r7, sp, #0
 80004e8:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	681b      	ldr	r3, [r3, #0]
 80004ee:	f043 0201 	orr.w	r2, r3, #1
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	601a      	str	r2, [r3, #0]
}
 80004f6:	bf00      	nop
 80004f8:	370c      	adds	r7, #12
 80004fa:	46bd      	mov	sp, r7
 80004fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000500:	4770      	bx	lr

08000502 <LL_TIM_DisableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_DisableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableCounter(TIM_TypeDef *TIMx)
{
 8000502:	b480      	push	{r7}
 8000504:	b083      	sub	sp, #12
 8000506:	af00      	add	r7, sp, #0
 8000508:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_CEN);
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	681b      	ldr	r3, [r3, #0]
 800050e:	f023 0201 	bic.w	r2, r3, #1
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	601a      	str	r2, [r3, #0]
}
 8000516:	bf00      	nop
 8000518:	370c      	adds	r7, #12
 800051a:	46bd      	mov	sp, r7
 800051c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000520:	4770      	bx	lr

08000522 <LL_TIM_DisableARRPreload>:
  * @rmtoll CR1          ARPE          LL_TIM_DisableARRPreload
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableARRPreload(TIM_TypeDef *TIMx)
{
 8000522:	b480      	push	{r7}
 8000524:	b083      	sub	sp, #12
 8000526:	af00      	add	r7, sp, #0
 8000528:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	681b      	ldr	r3, [r3, #0]
 800052e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	601a      	str	r2, [r3, #0]
}
 8000536:	bf00      	nop
 8000538:	370c      	adds	r7, #12
 800053a:	46bd      	mov	sp, r7
 800053c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000540:	4770      	bx	lr

08000542 <LL_TIM_ClearFlag_UPDATE>:
  * @rmtoll SR           UIF           LL_TIM_ClearFlag_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_UPDATE(TIM_TypeDef *TIMx)
{
 8000542:	b480      	push	{r7}
 8000544:	b083      	sub	sp, #12
 8000546:	af00      	add	r7, sp, #0
 8000548:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	f06f 0201 	mvn.w	r2, #1
 8000550:	611a      	str	r2, [r3, #16]
}
 8000552:	bf00      	nop
 8000554:	370c      	adds	r7, #12
 8000556:	46bd      	mov	sp, r7
 8000558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800055c:	4770      	bx	lr

0800055e <LL_TIM_IsActiveFlag_UPDATE>:
  * @rmtoll SR           UIF           LL_TIM_IsActiveFlag_UPDATE
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_UPDATE(const TIM_TypeDef *TIMx)
{
 800055e:	b480      	push	{r7}
 8000560:	b083      	sub	sp, #12
 8000562:	af00      	add	r7, sp, #0
 8000564:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	691b      	ldr	r3, [r3, #16]
 800056a:	f003 0301 	and.w	r3, r3, #1
 800056e:	2b01      	cmp	r3, #1
 8000570:	d101      	bne.n	8000576 <LL_TIM_IsActiveFlag_UPDATE+0x18>
 8000572:	2301      	movs	r3, #1
 8000574:	e000      	b.n	8000578 <LL_TIM_IsActiveFlag_UPDATE+0x1a>
 8000576:	2300      	movs	r3, #0
}
 8000578:	4618      	mov	r0, r3
 800057a:	370c      	adds	r7, #12
 800057c:	46bd      	mov	sp, r7
 800057e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000582:	4770      	bx	lr

08000584 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8000584:	b480      	push	{r7}
 8000586:	b083      	sub	sp, #12
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	695b      	ldr	r3, [r3, #20]
 8000590:	f043 0201 	orr.w	r2, r3, #1
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	615a      	str	r2, [r3, #20]
}
 8000598:	bf00      	nop
 800059a:	370c      	adds	r7, #12
 800059c:	46bd      	mov	sp, r7
 800059e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a2:	4770      	bx	lr

080005a4 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80005a4:	b480      	push	{r7}
 80005a6:	b085      	sub	sp, #20
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80005ac:	4b08      	ldr	r3, [pc, #32]	; (80005d0 <LL_APB2_GRP1_EnableClock+0x2c>)
 80005ae:	699a      	ldr	r2, [r3, #24]
 80005b0:	4907      	ldr	r1, [pc, #28]	; (80005d0 <LL_APB2_GRP1_EnableClock+0x2c>)
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	4313      	orrs	r3, r2
 80005b6:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80005b8:	4b05      	ldr	r3, [pc, #20]	; (80005d0 <LL_APB2_GRP1_EnableClock+0x2c>)
 80005ba:	699a      	ldr	r2, [r3, #24]
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	4013      	ands	r3, r2
 80005c0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80005c2:	68fb      	ldr	r3, [r7, #12]
}
 80005c4:	bf00      	nop
 80005c6:	3714      	adds	r7, #20
 80005c8:	46bd      	mov	sp, r7
 80005ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ce:	4770      	bx	lr
 80005d0:	40021000 	.word	0x40021000

080005d4 <crc_encode>:
uint8_t wwdg_msg[20] = "Watchdog init\n\r";

/**
 * initializes values for division and carries out the encoding of each crc value
 */
void crc_encode(){
 80005d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80005d8:	b08d      	sub	sp, #52	; 0x34
 80005da:	af02      	add	r7, sp, #8
	int shift = 60;
 80005dc:	233c      	movs	r3, #60	; 0x3c
 80005de:	627b      	str	r3, [r7, #36]	; 0x24
	int position = 0;
 80005e0:	2300      	movs	r3, #0
 80005e2:	623b      	str	r3, [r7, #32]
	uint64_t appended_data = crc_append(data);
 80005e4:	4b25      	ldr	r3, [pc, #148]	; (800067c <crc_encode+0xa8>)
 80005e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80005ea:	4610      	mov	r0, r2
 80005ec:	4619      	mov	r1, r3
 80005ee:	f7ff fdf7 	bl	80001e0 <crc_append>
 80005f2:	e9c7 0106 	strd	r0, r1, [r7, #24]
	uint64_t dividend = appended_data & 0xF000000000000000;
 80005f6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80005fa:	f04f 0a00 	mov.w	sl, #0
 80005fe:	f003 4b70 	and.w	fp, r3, #4026531840	; 0xf0000000
 8000602:	e9c7 ab04 	strd	sl, fp, [r7, #16]
	dividend = dividend >> shift;
 8000606:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800060a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800060c:	f1c1 0620 	rsb	r6, r1, #32
 8000610:	f1a1 0020 	sub.w	r0, r1, #32
 8000614:	fa22 f401 	lsr.w	r4, r2, r1
 8000618:	fa03 f606 	lsl.w	r6, r3, r6
 800061c:	4334      	orrs	r4, r6
 800061e:	fa23 f000 	lsr.w	r0, r3, r0
 8000622:	4304      	orrs	r4, r0
 8000624:	fa23 f501 	lsr.w	r5, r3, r1
 8000628:	e9c7 4504 	strd	r4, r5, [r7, #16]
	uint64_t ans = crc_xor(dividend);
 800062c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8000630:	f7ff fdec 	bl	800020c <crc_xor>
 8000634:	e9c7 0102 	strd	r0, r1, [r7, #8]

	uint64_t remain = crc_division(appended_data, position, shift, ans);
 8000638:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800063c:	e9cd 2300 	strd	r2, r3, [sp]
 8000640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000642:	6a3a      	ldr	r2, [r7, #32]
 8000644:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8000648:	f7ff fe06 	bl	8000258 <crc_division>
 800064c:	e9c7 0100 	strd	r0, r1, [r7]
	TxData[0] = data;
 8000650:	4b0a      	ldr	r3, [pc, #40]	; (800067c <crc_encode+0xa8>)
 8000652:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000656:	490a      	ldr	r1, [pc, #40]	; (8000680 <crc_encode+0xac>)
 8000658:	e9c1 2300 	strd	r2, r3, [r1]
	TxData[1] = appended_data + remain;
 800065c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8000660:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000664:	eb10 0802 	adds.w	r8, r0, r2
 8000668:	eb41 0903 	adc.w	r9, r1, r3
 800066c:	4b04      	ldr	r3, [pc, #16]	; (8000680 <crc_encode+0xac>)
 800066e:	e9c3 8902 	strd	r8, r9, [r3, #8]
}
 8000672:	bf00      	nop
 8000674:	372c      	adds	r7, #44	; 0x2c
 8000676:	46bd      	mov	sp, r7
 8000678:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800067c:	200001e8 	.word	0x200001e8
 8000680:	200001d0 	.word	0x200001d0

08000684 <send_data>:

/**
 * sends data with crc to receiver every 10ms
 */
void send_data(){
 8000684:	b580      	push	{r7, lr}
 8000686:	af00      	add	r7, sp, #0
	crc_encode();
 8000688:	f7ff ffa4 	bl	80005d4 <crc_encode>

	osDelay(10);
 800068c:	200a      	movs	r0, #10
 800068e:	f004 fc17 	bl	8004ec0 <osDelay>
	if(timer_flag){
 8000692:	4b08      	ldr	r3, [pc, #32]	; (80006b4 <send_data+0x30>)
 8000694:	781b      	ldrb	r3, [r3, #0]
 8000696:	2b00      	cmp	r3, #0
 8000698:	d002      	beq.n	80006a0 <send_data+0x1c>
		HAL_WWDG_Refresh(&hwwdg);		//transmitting timeout
 800069a:	4807      	ldr	r0, [pc, #28]	; (80006b8 <send_data+0x34>)
 800069c:	f004 fa1b 	bl	8004ad6 <HAL_WWDG_Refresh>
	}
	HAL_UART_Transmit(&huart1, (uint8_t*)TxData, sizeof(TxData), 1000);
 80006a0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006a4:	2218      	movs	r2, #24
 80006a6:	4905      	ldr	r1, [pc, #20]	; (80006bc <send_data+0x38>)
 80006a8:	4805      	ldr	r0, [pc, #20]	; (80006c0 <send_data+0x3c>)
 80006aa:	f003 fa27 	bl	8003afc <HAL_UART_Transmit>
}
 80006ae:	bf00      	nop
 80006b0:	bd80      	pop	{r7, pc}
 80006b2:	bf00      	nop
 80006b4:	200001f0 	.word	0x200001f0
 80006b8:	200001ac 	.word	0x200001ac
 80006bc:	200001d0 	.word	0x200001d0
 80006c0:	2000009c 	.word	0x2000009c

080006c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006c8:	f000 fd10 	bl	80010ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006cc:	f000 f848 	bl	8000760 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006d0:	f000 f95c 	bl	800098c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80006d4:	f000 f8da 	bl	800088c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80006d8:	f000 f908 	bl	80008ec <MX_USART2_UART_Init>
  MX_TIM16_Init();
 80006dc:	f000 f898 	bl	8000810 <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */
  LL_TIM_EnableCounter(TIM16);
 80006e0:	4813      	ldr	r0, [pc, #76]	; (8000730 <main+0x6c>)
 80006e2:	f7ff fefe 	bl	80004e2 <LL_TIM_EnableCounter>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80006e6:	f004 fad9 	bl	8004c9c <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of BinSem */
  BinSemHandle = osSemaphoreNew(1, 1, &BinSem_attributes);
 80006ea:	4a12      	ldr	r2, [pc, #72]	; (8000734 <main+0x70>)
 80006ec:	2101      	movs	r1, #1
 80006ee:	2001      	movs	r0, #1
 80006f0:	f004 fc14 	bl	8004f1c <osSemaphoreNew>
 80006f4:	4603      	mov	r3, r0
 80006f6:	4a10      	ldr	r2, [pc, #64]	; (8000738 <main+0x74>)
 80006f8:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of read_pins */
  read_pinsHandle = osThreadNew(StartRead02, NULL, &read_pins_attributes);
 80006fa:	4a10      	ldr	r2, [pc, #64]	; (800073c <main+0x78>)
 80006fc:	2100      	movs	r1, #0
 80006fe:	4810      	ldr	r0, [pc, #64]	; (8000740 <main+0x7c>)
 8000700:	f004 fb34 	bl	8004d6c <osThreadNew>
 8000704:	4603      	mov	r3, r0
 8000706:	4a0f      	ldr	r2, [pc, #60]	; (8000744 <main+0x80>)
 8000708:	6013      	str	r3, [r2, #0]

  /* creation of watchdog */
  watchdogHandle = osThreadNew(StartWatchdog01, NULL, &watchdog_attributes);
 800070a:	4a0f      	ldr	r2, [pc, #60]	; (8000748 <main+0x84>)
 800070c:	2100      	movs	r1, #0
 800070e:	480f      	ldr	r0, [pc, #60]	; (800074c <main+0x88>)
 8000710:	f004 fb2c 	bl	8004d6c <osThreadNew>
 8000714:	4603      	mov	r3, r0
 8000716:	4a0e      	ldr	r2, [pc, #56]	; (8000750 <main+0x8c>)
 8000718:	6013      	str	r3, [r2, #0]

  /* creation of flash */
  flashHandle = osThreadNew(StartFlash03, NULL, &flash_attributes);
 800071a:	4a0e      	ldr	r2, [pc, #56]	; (8000754 <main+0x90>)
 800071c:	2100      	movs	r1, #0
 800071e:	480e      	ldr	r0, [pc, #56]	; (8000758 <main+0x94>)
 8000720:	f004 fb24 	bl	8004d6c <osThreadNew>
 8000724:	4603      	mov	r3, r0
 8000726:	4a0d      	ldr	r2, [pc, #52]	; (800075c <main+0x98>)
 8000728:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800072a:	f004 faeb 	bl	8004d04 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800072e:	e7fe      	b.n	800072e <main+0x6a>
 8000730:	40014400 	.word	0x40014400
 8000734:	08008374 	.word	0x08008374
 8000738:	200001cc 	.word	0x200001cc
 800073c:	08008308 	.word	0x08008308
 8000740:	08000a65 	.word	0x08000a65
 8000744:	200001c0 	.word	0x200001c0
 8000748:	0800832c 	.word	0x0800832c
 800074c:	08000c25 	.word	0x08000c25
 8000750:	200001c4 	.word	0x200001c4
 8000754:	08008350 	.word	0x08008350
 8000758:	08000c6d 	.word	0x08000c6d
 800075c:	200001c8 	.word	0x200001c8

08000760 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b0a6      	sub	sp, #152	; 0x98
 8000764:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000766:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800076a:	2228      	movs	r2, #40	; 0x28
 800076c:	2100      	movs	r1, #0
 800076e:	4618      	mov	r0, r3
 8000770:	f007 fd64 	bl	800823c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000774:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000778:	2200      	movs	r2, #0
 800077a:	601a      	str	r2, [r3, #0]
 800077c:	605a      	str	r2, [r3, #4]
 800077e:	609a      	str	r2, [r3, #8]
 8000780:	60da      	str	r2, [r3, #12]
 8000782:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000784:	1d3b      	adds	r3, r7, #4
 8000786:	2258      	movs	r2, #88	; 0x58
 8000788:	2100      	movs	r1, #0
 800078a:	4618      	mov	r0, r3
 800078c:	f007 fd56 	bl	800823c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000790:	2302      	movs	r3, #2
 8000792:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000794:	2301      	movs	r3, #1
 8000796:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000798:	2310      	movs	r3, #16
 800079a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800079e:	2300      	movs	r3, #0
 80007a0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007a4:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80007a8:	4618      	mov	r0, r3
 80007aa:	f001 f9d1 	bl	8001b50 <HAL_RCC_OscConfig>
 80007ae:	4603      	mov	r3, r0
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d001      	beq.n	80007b8 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80007b4:	f000 fabc 	bl	8000d30 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007b8:	230f      	movs	r3, #15
 80007ba:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80007bc:	2300      	movs	r3, #0
 80007be:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007c0:	2300      	movs	r3, #0
 80007c2:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007c4:	2300      	movs	r3, #0
 80007c6:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007c8:	2300      	movs	r3, #0
 80007ca:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80007cc:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80007d0:	2100      	movs	r1, #0
 80007d2:	4618      	mov	r0, r3
 80007d4:	f002 fa10 	bl	8002bf8 <HAL_RCC_ClockConfig>
 80007d8:	4603      	mov	r3, r0
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d001      	beq.n	80007e2 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80007de:	f000 faa7 	bl	8000d30 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2
 80007e2:	4b0a      	ldr	r3, [pc, #40]	; (800080c <SystemClock_Config+0xac>)
 80007e4:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_TIM16;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80007e6:	2300      	movs	r3, #0
 80007e8:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80007ea:	2300      	movs	r3, #0
 80007ec:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Tim16ClockSelection = RCC_TIM16CLK_HCLK;
 80007ee:	2300      	movs	r3, #0
 80007f0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80007f2:	1d3b      	adds	r3, r7, #4
 80007f4:	4618      	mov	r0, r3
 80007f6:	f002 fc51 	bl	800309c <HAL_RCCEx_PeriphCLKConfig>
 80007fa:	4603      	mov	r3, r0
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d001      	beq.n	8000804 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8000800:	f000 fa96 	bl	8000d30 <Error_Handler>
  }
}
 8000804:	bf00      	nop
 8000806:	3798      	adds	r7, #152	; 0x98
 8000808:	46bd      	mov	sp, r7
 800080a:	bd80      	pop	{r7, pc}
 800080c:	00800003 	.word	0x00800003

08000810 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b086      	sub	sp, #24
 8000814:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_Init 0 */
	//f = 8MHz / PSC					PSC = 367
	//T = (1 / f) * period = 3s			Period = 65216
  /* USER CODE END TIM16_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8000816:	1d3b      	adds	r3, r7, #4
 8000818:	2200      	movs	r2, #0
 800081a:	601a      	str	r2, [r3, #0]
 800081c:	605a      	str	r2, [r3, #4]
 800081e:	609a      	str	r2, [r3, #8]
 8000820:	60da      	str	r2, [r3, #12]
 8000822:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_TIM16);
 8000824:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000828:	f7ff febc 	bl	80005a4 <LL_APB2_GRP1_EnableClock>

  /* TIM16 interrupt Init */
  NVIC_SetPriority(TIM1_UP_TIM16_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 800082c:	f7ff fdd0 	bl	80003d0 <__NVIC_GetPriorityGrouping>
 8000830:	4603      	mov	r3, r0
 8000832:	2200      	movs	r2, #0
 8000834:	2105      	movs	r1, #5
 8000836:	4618      	mov	r0, r3
 8000838:	f7ff fe20 	bl	800047c <NVIC_EncodePriority>
 800083c:	4603      	mov	r3, r0
 800083e:	4619      	mov	r1, r3
 8000840:	2019      	movs	r0, #25
 8000842:	f7ff fdf1 	bl	8000428 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000846:	2019      	movs	r0, #25
 8000848:	f7ff fdd0 	bl	80003ec <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  TIM_InitStruct.Prescaler = 367;
 800084c:	f240 136f 	movw	r3, #367	; 0x16f
 8000850:	80bb      	strh	r3, [r7, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8000852:	2300      	movs	r3, #0
 8000854:	60bb      	str	r3, [r7, #8]
  TIM_InitStruct.Autoreload = 65216;
 8000856:	f64f 63c0 	movw	r3, #65216	; 0xfec0
 800085a:	60fb      	str	r3, [r7, #12]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 800085c:	2300      	movs	r3, #0
 800085e:	613b      	str	r3, [r7, #16]
  TIM_InitStruct.RepetitionCounter = 0;
 8000860:	2300      	movs	r3, #0
 8000862:	617b      	str	r3, [r7, #20]
  LL_TIM_Init(TIM16, &TIM_InitStruct);
 8000864:	1d3b      	adds	r3, r7, #4
 8000866:	4619      	mov	r1, r3
 8000868:	4807      	ldr	r0, [pc, #28]	; (8000888 <MX_TIM16_Init+0x78>)
 800086a:	f004 f97f 	bl	8004b6c <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM16);
 800086e:	4806      	ldr	r0, [pc, #24]	; (8000888 <MX_TIM16_Init+0x78>)
 8000870:	f7ff fe57 	bl	8000522 <LL_TIM_DisableARRPreload>
  /* USER CODE BEGIN TIM16_Init 2 */

	LL_TIM_GenerateEvent_UPDATE(TIM16);
 8000874:	4804      	ldr	r0, [pc, #16]	; (8000888 <MX_TIM16_Init+0x78>)
 8000876:	f7ff fe85 	bl	8000584 <LL_TIM_GenerateEvent_UPDATE>

	LL_TIM_ClearFlag_UPDATE(TIM16);
 800087a:	4803      	ldr	r0, [pc, #12]	; (8000888 <MX_TIM16_Init+0x78>)
 800087c:	f7ff fe61 	bl	8000542 <LL_TIM_ClearFlag_UPDATE>
  /* USER CODE END TIM16_Init 2 */

}
 8000880:	bf00      	nop
 8000882:	3718      	adds	r7, #24
 8000884:	46bd      	mov	sp, r7
 8000886:	bd80      	pop	{r7, pc}
 8000888:	40014400 	.word	0x40014400

0800088c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000890:	4b14      	ldr	r3, [pc, #80]	; (80008e4 <MX_USART1_UART_Init+0x58>)
 8000892:	4a15      	ldr	r2, [pc, #84]	; (80008e8 <MX_USART1_UART_Init+0x5c>)
 8000894:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000896:	4b13      	ldr	r3, [pc, #76]	; (80008e4 <MX_USART1_UART_Init+0x58>)
 8000898:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800089c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800089e:	4b11      	ldr	r3, [pc, #68]	; (80008e4 <MX_USART1_UART_Init+0x58>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80008a4:	4b0f      	ldr	r3, [pc, #60]	; (80008e4 <MX_USART1_UART_Init+0x58>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80008aa:	4b0e      	ldr	r3, [pc, #56]	; (80008e4 <MX_USART1_UART_Init+0x58>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80008b0:	4b0c      	ldr	r3, [pc, #48]	; (80008e4 <MX_USART1_UART_Init+0x58>)
 80008b2:	220c      	movs	r2, #12
 80008b4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008b6:	4b0b      	ldr	r3, [pc, #44]	; (80008e4 <MX_USART1_UART_Init+0x58>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80008bc:	4b09      	ldr	r3, [pc, #36]	; (80008e4 <MX_USART1_UART_Init+0x58>)
 80008be:	2200      	movs	r2, #0
 80008c0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008c2:	4b08      	ldr	r3, [pc, #32]	; (80008e4 <MX_USART1_UART_Init+0x58>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008c8:	4b06      	ldr	r3, [pc, #24]	; (80008e4 <MX_USART1_UART_Init+0x58>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80008ce:	4805      	ldr	r0, [pc, #20]	; (80008e4 <MX_USART1_UART_Init+0x58>)
 80008d0:	f003 f8c6 	bl	8003a60 <HAL_UART_Init>
 80008d4:	4603      	mov	r3, r0
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d001      	beq.n	80008de <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80008da:	f000 fa29 	bl	8000d30 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80008de:	bf00      	nop
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	bf00      	nop
 80008e4:	2000009c 	.word	0x2000009c
 80008e8:	40013800 	.word	0x40013800

080008ec <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80008f0:	4b14      	ldr	r3, [pc, #80]	; (8000944 <MX_USART2_UART_Init+0x58>)
 80008f2:	4a15      	ldr	r2, [pc, #84]	; (8000948 <MX_USART2_UART_Init+0x5c>)
 80008f4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80008f6:	4b13      	ldr	r3, [pc, #76]	; (8000944 <MX_USART2_UART_Init+0x58>)
 80008f8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008fc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008fe:	4b11      	ldr	r3, [pc, #68]	; (8000944 <MX_USART2_UART_Init+0x58>)
 8000900:	2200      	movs	r2, #0
 8000902:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000904:	4b0f      	ldr	r3, [pc, #60]	; (8000944 <MX_USART2_UART_Init+0x58>)
 8000906:	2200      	movs	r2, #0
 8000908:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800090a:	4b0e      	ldr	r3, [pc, #56]	; (8000944 <MX_USART2_UART_Init+0x58>)
 800090c:	2200      	movs	r2, #0
 800090e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000910:	4b0c      	ldr	r3, [pc, #48]	; (8000944 <MX_USART2_UART_Init+0x58>)
 8000912:	220c      	movs	r2, #12
 8000914:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000916:	4b0b      	ldr	r3, [pc, #44]	; (8000944 <MX_USART2_UART_Init+0x58>)
 8000918:	2200      	movs	r2, #0
 800091a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800091c:	4b09      	ldr	r3, [pc, #36]	; (8000944 <MX_USART2_UART_Init+0x58>)
 800091e:	2200      	movs	r2, #0
 8000920:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000922:	4b08      	ldr	r3, [pc, #32]	; (8000944 <MX_USART2_UART_Init+0x58>)
 8000924:	2200      	movs	r2, #0
 8000926:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000928:	4b06      	ldr	r3, [pc, #24]	; (8000944 <MX_USART2_UART_Init+0x58>)
 800092a:	2200      	movs	r2, #0
 800092c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800092e:	4805      	ldr	r0, [pc, #20]	; (8000944 <MX_USART2_UART_Init+0x58>)
 8000930:	f003 f896 	bl	8003a60 <HAL_UART_Init>
 8000934:	4603      	mov	r3, r0
 8000936:	2b00      	cmp	r3, #0
 8000938:	d001      	beq.n	800093e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800093a:	f000 f9f9 	bl	8000d30 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800093e:	bf00      	nop
 8000940:	bd80      	pop	{r7, pc}
 8000942:	bf00      	nop
 8000944:	20000124 	.word	0x20000124
 8000948:	40004400 	.word	0x40004400

0800094c <MX_WWDG_Init>:
  * @brief WWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_WWDG_Init(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	af00      	add	r7, sp, #0
  /* USER CODE END WWDG_Init 0 */

  /* USER CODE BEGIN WWDG_Init 1 */
	//5-15ms window
  /* USER CODE END WWDG_Init 1 */
  hwwdg.Instance = WWDG;
 8000950:	4b0c      	ldr	r3, [pc, #48]	; (8000984 <MX_WWDG_Init+0x38>)
 8000952:	4a0d      	ldr	r2, [pc, #52]	; (8000988 <MX_WWDG_Init+0x3c>)
 8000954:	601a      	str	r2, [r3, #0]
  hwwdg.Init.Prescaler = WWDG_PRESCALER_4;
 8000956:	4b0b      	ldr	r3, [pc, #44]	; (8000984 <MX_WWDG_Init+0x38>)
 8000958:	f44f 7280 	mov.w	r2, #256	; 0x100
 800095c:	605a      	str	r2, [r3, #4]
  hwwdg.Init.Window = 70;
 800095e:	4b09      	ldr	r3, [pc, #36]	; (8000984 <MX_WWDG_Init+0x38>)
 8000960:	2246      	movs	r2, #70	; 0x46
 8000962:	609a      	str	r2, [r3, #8]
  hwwdg.Init.Counter = 72;
 8000964:	4b07      	ldr	r3, [pc, #28]	; (8000984 <MX_WWDG_Init+0x38>)
 8000966:	2248      	movs	r2, #72	; 0x48
 8000968:	60da      	str	r2, [r3, #12]
  hwwdg.Init.EWIMode = WWDG_EWI_DISABLE;
 800096a:	4b06      	ldr	r3, [pc, #24]	; (8000984 <MX_WWDG_Init+0x38>)
 800096c:	2200      	movs	r2, #0
 800096e:	611a      	str	r2, [r3, #16]
  if (HAL_WWDG_Init(&hwwdg) != HAL_OK)
 8000970:	4804      	ldr	r0, [pc, #16]	; (8000984 <MX_WWDG_Init+0x38>)
 8000972:	f004 f88c 	bl	8004a8e <HAL_WWDG_Init>
 8000976:	4603      	mov	r3, r0
 8000978:	2b00      	cmp	r3, #0
 800097a:	d001      	beq.n	8000980 <MX_WWDG_Init+0x34>
  {
    Error_Handler();
 800097c:	f000 f9d8 	bl	8000d30 <Error_Handler>
  }
  /* USER CODE BEGIN WWDG_Init 2 */

  /* USER CODE END WWDG_Init 2 */

}
 8000980:	bf00      	nop
 8000982:	bd80      	pop	{r7, pc}
 8000984:	200001ac 	.word	0x200001ac
 8000988:	40002c00 	.word	0x40002c00

0800098c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b088      	sub	sp, #32
 8000990:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000992:	f107 030c 	add.w	r3, r7, #12
 8000996:	2200      	movs	r2, #0
 8000998:	601a      	str	r2, [r3, #0]
 800099a:	605a      	str	r2, [r3, #4]
 800099c:	609a      	str	r2, [r3, #8]
 800099e:	60da      	str	r2, [r3, #12]
 80009a0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009a2:	4b2d      	ldr	r3, [pc, #180]	; (8000a58 <MX_GPIO_Init+0xcc>)
 80009a4:	695b      	ldr	r3, [r3, #20]
 80009a6:	4a2c      	ldr	r2, [pc, #176]	; (8000a58 <MX_GPIO_Init+0xcc>)
 80009a8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80009ac:	6153      	str	r3, [r2, #20]
 80009ae:	4b2a      	ldr	r3, [pc, #168]	; (8000a58 <MX_GPIO_Init+0xcc>)
 80009b0:	695b      	ldr	r3, [r3, #20]
 80009b2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80009b6:	60bb      	str	r3, [r7, #8]
 80009b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ba:	4b27      	ldr	r3, [pc, #156]	; (8000a58 <MX_GPIO_Init+0xcc>)
 80009bc:	695b      	ldr	r3, [r3, #20]
 80009be:	4a26      	ldr	r2, [pc, #152]	; (8000a58 <MX_GPIO_Init+0xcc>)
 80009c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009c4:	6153      	str	r3, [r2, #20]
 80009c6:	4b24      	ldr	r3, [pc, #144]	; (8000a58 <MX_GPIO_Init+0xcc>)
 80009c8:	695b      	ldr	r3, [r3, #20]
 80009ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009ce:	607b      	str	r3, [r7, #4]
 80009d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009d2:	4b21      	ldr	r3, [pc, #132]	; (8000a58 <MX_GPIO_Init+0xcc>)
 80009d4:	695b      	ldr	r3, [r3, #20]
 80009d6:	4a20      	ldr	r2, [pc, #128]	; (8000a58 <MX_GPIO_Init+0xcc>)
 80009d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80009dc:	6153      	str	r3, [r2, #20]
 80009de:	4b1e      	ldr	r3, [pc, #120]	; (8000a58 <MX_GPIO_Init+0xcc>)
 80009e0:	695b      	ldr	r3, [r3, #20]
 80009e2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80009e6:	603b      	str	r3, [r7, #0]
 80009e8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pins : PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80009ea:	230c      	movs	r3, #12
 80009ec:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80009ee:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80009f2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009f4:	2301      	movs	r3, #1
 80009f6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009f8:	f107 030c 	add.w	r3, r7, #12
 80009fc:	4619      	mov	r1, r3
 80009fe:	4817      	ldr	r0, [pc, #92]	; (8000a5c <MX_GPIO_Init+0xd0>)
 8000a00:	f000 fee0 	bl	80017c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8000a04:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000a08:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a0a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000a0e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a10:	2301      	movs	r3, #1
 8000a12:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a14:	f107 030c 	add.w	r3, r7, #12
 8000a18:	4619      	mov	r1, r3
 8000a1a:	4811      	ldr	r0, [pc, #68]	; (8000a60 <MX_GPIO_Init+0xd4>)
 8000a1c:	f000 fed2 	bl	80017c4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_TSC_IRQn, 5, 0);
 8000a20:	2200      	movs	r2, #0
 8000a22:	2105      	movs	r1, #5
 8000a24:	2008      	movs	r0, #8
 8000a26:	f000 fc4f 	bl	80012c8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_TSC_IRQn);
 8000a2a:	2008      	movs	r0, #8
 8000a2c:	f000 fc68 	bl	8001300 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 5, 0);
 8000a30:	2200      	movs	r2, #0
 8000a32:	2105      	movs	r1, #5
 8000a34:	2009      	movs	r0, #9
 8000a36:	f000 fc47 	bl	80012c8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8000a3a:	2009      	movs	r0, #9
 8000a3c:	f000 fc60 	bl	8001300 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000a40:	2200      	movs	r2, #0
 8000a42:	2105      	movs	r1, #5
 8000a44:	2028      	movs	r0, #40	; 0x28
 8000a46:	f000 fc3f 	bl	80012c8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000a4a:	2028      	movs	r0, #40	; 0x28
 8000a4c:	f000 fc58 	bl	8001300 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a50:	bf00      	nop
 8000a52:	3720      	adds	r7, #32
 8000a54:	46bd      	mov	sp, r7
 8000a56:	bd80      	pop	{r7, pc}
 8000a58:	40021000 	.word	0x40021000
 8000a5c:	48000800 	.word	0x48000800
 8000a60:	48000400 	.word	0x48000400

08000a64 <StartRead02>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartRead02 */
void StartRead02(void *argument)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b082      	sub	sp, #8
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  osSemaphoreAcquire(BinSemHandle, osWaitForever);		//wait for semaphore
 8000a6c:	4b60      	ldr	r3, [pc, #384]	; (8000bf0 <StartRead02+0x18c>)
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	f04f 31ff 	mov.w	r1, #4294967295
 8000a74:	4618      	mov	r0, r3
 8000a76:	f004 faed 	bl	8005054 <osSemaphoreAcquire>

		//button logic
		if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_2) == 0)
 8000a7a:	2104      	movs	r1, #4
 8000a7c:	485d      	ldr	r0, [pc, #372]	; (8000bf4 <StartRead02+0x190>)
 8000a7e:	f001 f82b 	bl	8001ad8 <HAL_GPIO_ReadPin>
 8000a82:	4603      	mov	r3, r0
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d114      	bne.n	8000ab2 <StartRead02+0x4e>
		{
			data = RELAY1_ON;
 8000a88:	495b      	ldr	r1, [pc, #364]	; (8000bf8 <StartRead02+0x194>)
 8000a8a:	f04f 0201 	mov.w	r2, #1
 8000a8e:	f04f 0300 	mov.w	r3, #0
 8000a92:	e9c1 2300 	strd	r2, r3, [r1]
			send_data();
 8000a96:	f7ff fdf5 	bl	8000684 <send_data>
			HAL_UART_Transmit(&huart2, relay1_msg, 20, 10);
 8000a9a:	230a      	movs	r3, #10
 8000a9c:	2214      	movs	r2, #20
 8000a9e:	4957      	ldr	r1, [pc, #348]	; (8000bfc <StartRead02+0x198>)
 8000aa0:	4857      	ldr	r0, [pc, #348]	; (8000c00 <StartRead02+0x19c>)
 8000aa2:	f003 f82b 	bl	8003afc <HAL_UART_Transmit>
			relay1_count++;
 8000aa6:	4b57      	ldr	r3, [pc, #348]	; (8000c04 <StartRead02+0x1a0>)
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	3301      	adds	r3, #1
 8000aac:	4a55      	ldr	r2, [pc, #340]	; (8000c04 <StartRead02+0x1a0>)
 8000aae:	6013      	str	r3, [r2, #0]
 8000ab0:	e00f      	b.n	8000ad2 <StartRead02+0x6e>
		}else if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_2) == 1){
 8000ab2:	2104      	movs	r1, #4
 8000ab4:	484f      	ldr	r0, [pc, #316]	; (8000bf4 <StartRead02+0x190>)
 8000ab6:	f001 f80f 	bl	8001ad8 <HAL_GPIO_ReadPin>
 8000aba:	4603      	mov	r3, r0
 8000abc:	2b01      	cmp	r3, #1
 8000abe:	d108      	bne.n	8000ad2 <StartRead02+0x6e>
			data = RELAY1_OFF;
 8000ac0:	494d      	ldr	r1, [pc, #308]	; (8000bf8 <StartRead02+0x194>)
 8000ac2:	f04f 0202 	mov.w	r2, #2
 8000ac6:	f04f 0300 	mov.w	r3, #0
 8000aca:	e9c1 2300 	strd	r2, r3, [r1]
			send_data();
 8000ace:	f7ff fdd9 	bl	8000684 <send_data>
		}

		if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_3) == 0)
 8000ad2:	2108      	movs	r1, #8
 8000ad4:	4847      	ldr	r0, [pc, #284]	; (8000bf4 <StartRead02+0x190>)
 8000ad6:	f000 ffff 	bl	8001ad8 <HAL_GPIO_ReadPin>
 8000ada:	4603      	mov	r3, r0
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d114      	bne.n	8000b0a <StartRead02+0xa6>
		{
			data = RELAY2_ON;
 8000ae0:	4945      	ldr	r1, [pc, #276]	; (8000bf8 <StartRead02+0x194>)
 8000ae2:	f04f 0203 	mov.w	r2, #3
 8000ae6:	f04f 0300 	mov.w	r3, #0
 8000aea:	e9c1 2300 	strd	r2, r3, [r1]
			send_data();
 8000aee:	f7ff fdc9 	bl	8000684 <send_data>
			HAL_UART_Transmit(&huart2, relay2_msg, 20, 10);
 8000af2:	230a      	movs	r3, #10
 8000af4:	2214      	movs	r2, #20
 8000af6:	4944      	ldr	r1, [pc, #272]	; (8000c08 <StartRead02+0x1a4>)
 8000af8:	4841      	ldr	r0, [pc, #260]	; (8000c00 <StartRead02+0x19c>)
 8000afa:	f002 ffff 	bl	8003afc <HAL_UART_Transmit>
			relay2_count++;
 8000afe:	4b43      	ldr	r3, [pc, #268]	; (8000c0c <StartRead02+0x1a8>)
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	3301      	adds	r3, #1
 8000b04:	4a41      	ldr	r2, [pc, #260]	; (8000c0c <StartRead02+0x1a8>)
 8000b06:	6013      	str	r3, [r2, #0]
 8000b08:	e00f      	b.n	8000b2a <StartRead02+0xc6>
		}else if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_3) == 1){
 8000b0a:	2108      	movs	r1, #8
 8000b0c:	4839      	ldr	r0, [pc, #228]	; (8000bf4 <StartRead02+0x190>)
 8000b0e:	f000 ffe3 	bl	8001ad8 <HAL_GPIO_ReadPin>
 8000b12:	4603      	mov	r3, r0
 8000b14:	2b01      	cmp	r3, #1
 8000b16:	d108      	bne.n	8000b2a <StartRead02+0xc6>
			data = RELAY2_OFF;
 8000b18:	4937      	ldr	r1, [pc, #220]	; (8000bf8 <StartRead02+0x194>)
 8000b1a:	f04f 0204 	mov.w	r2, #4
 8000b1e:	f04f 0300 	mov.w	r3, #0
 8000b22:	e9c1 2300 	strd	r2, r3, [r1]
			send_data();
 8000b26:	f7ff fdad 	bl	8000684 <send_data>
		}

		if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14) == 0)
 8000b2a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b2e:	4838      	ldr	r0, [pc, #224]	; (8000c10 <StartRead02+0x1ac>)
 8000b30:	f000 ffd2 	bl	8001ad8 <HAL_GPIO_ReadPin>
 8000b34:	4603      	mov	r3, r0
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d114      	bne.n	8000b64 <StartRead02+0x100>
		{
			data = RELAY3_ON;
 8000b3a:	492f      	ldr	r1, [pc, #188]	; (8000bf8 <StartRead02+0x194>)
 8000b3c:	f04f 0205 	mov.w	r2, #5
 8000b40:	f04f 0300 	mov.w	r3, #0
 8000b44:	e9c1 2300 	strd	r2, r3, [r1]
			send_data();
 8000b48:	f7ff fd9c 	bl	8000684 <send_data>
			HAL_UART_Transmit(&huart2, relay3_msg, 20, 10);
 8000b4c:	230a      	movs	r3, #10
 8000b4e:	2214      	movs	r2, #20
 8000b50:	4930      	ldr	r1, [pc, #192]	; (8000c14 <StartRead02+0x1b0>)
 8000b52:	482b      	ldr	r0, [pc, #172]	; (8000c00 <StartRead02+0x19c>)
 8000b54:	f002 ffd2 	bl	8003afc <HAL_UART_Transmit>
			relay3_count++;
 8000b58:	4b2f      	ldr	r3, [pc, #188]	; (8000c18 <StartRead02+0x1b4>)
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	3301      	adds	r3, #1
 8000b5e:	4a2e      	ldr	r2, [pc, #184]	; (8000c18 <StartRead02+0x1b4>)
 8000b60:	6013      	str	r3, [r2, #0]
 8000b62:	e010      	b.n	8000b86 <StartRead02+0x122>
		}else if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14) == 1){
 8000b64:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b68:	4829      	ldr	r0, [pc, #164]	; (8000c10 <StartRead02+0x1ac>)
 8000b6a:	f000 ffb5 	bl	8001ad8 <HAL_GPIO_ReadPin>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	2b01      	cmp	r3, #1
 8000b72:	d108      	bne.n	8000b86 <StartRead02+0x122>
			data = RELAY3_OFF;
 8000b74:	4920      	ldr	r1, [pc, #128]	; (8000bf8 <StartRead02+0x194>)
 8000b76:	f04f 0206 	mov.w	r2, #6
 8000b7a:	f04f 0300 	mov.w	r3, #0
 8000b7e:	e9c1 2300 	strd	r2, r3, [r1]
			send_data();
 8000b82:	f7ff fd7f 	bl	8000684 <send_data>
		}

		if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15) == 0)
 8000b86:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b8a:	4821      	ldr	r0, [pc, #132]	; (8000c10 <StartRead02+0x1ac>)
 8000b8c:	f000 ffa4 	bl	8001ad8 <HAL_GPIO_ReadPin>
 8000b90:	4603      	mov	r3, r0
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d114      	bne.n	8000bc0 <StartRead02+0x15c>
		{
			data = RELAY4_ON;
 8000b96:	4918      	ldr	r1, [pc, #96]	; (8000bf8 <StartRead02+0x194>)
 8000b98:	f04f 0207 	mov.w	r2, #7
 8000b9c:	f04f 0300 	mov.w	r3, #0
 8000ba0:	e9c1 2300 	strd	r2, r3, [r1]
			send_data();
 8000ba4:	f7ff fd6e 	bl	8000684 <send_data>
			HAL_UART_Transmit(&huart2, relay4_msg, 20, 10);
 8000ba8:	230a      	movs	r3, #10
 8000baa:	2214      	movs	r2, #20
 8000bac:	491b      	ldr	r1, [pc, #108]	; (8000c1c <StartRead02+0x1b8>)
 8000bae:	4814      	ldr	r0, [pc, #80]	; (8000c00 <StartRead02+0x19c>)
 8000bb0:	f002 ffa4 	bl	8003afc <HAL_UART_Transmit>
			relay4_count++;
 8000bb4:	4b1a      	ldr	r3, [pc, #104]	; (8000c20 <StartRead02+0x1bc>)
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	3301      	adds	r3, #1
 8000bba:	4a19      	ldr	r2, [pc, #100]	; (8000c20 <StartRead02+0x1bc>)
 8000bbc:	6013      	str	r3, [r2, #0]
 8000bbe:	e010      	b.n	8000be2 <StartRead02+0x17e>
		}else if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15) == 1){
 8000bc0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000bc4:	4812      	ldr	r0, [pc, #72]	; (8000c10 <StartRead02+0x1ac>)
 8000bc6:	f000 ff87 	bl	8001ad8 <HAL_GPIO_ReadPin>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	2b01      	cmp	r3, #1
 8000bce:	d108      	bne.n	8000be2 <StartRead02+0x17e>
			data = RELAY4_OFF;
 8000bd0:	4909      	ldr	r1, [pc, #36]	; (8000bf8 <StartRead02+0x194>)
 8000bd2:	f04f 0208 	mov.w	r2, #8
 8000bd6:	f04f 0300 	mov.w	r3, #0
 8000bda:	e9c1 2300 	strd	r2, r3, [r1]
			send_data();
 8000bde:	f7ff fd51 	bl	8000684 <send_data>
		}

		  osSemaphoreRelease(BinSemHandle);		//release semaphore
 8000be2:	4b03      	ldr	r3, [pc, #12]	; (8000bf0 <StartRead02+0x18c>)
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	4618      	mov	r0, r3
 8000be8:	f004 fa9a 	bl	8005120 <osSemaphoreRelease>
	  osSemaphoreAcquire(BinSemHandle, osWaitForever);		//wait for semaphore
 8000bec:	e73e      	b.n	8000a6c <StartRead02+0x8>
 8000bee:	bf00      	nop
 8000bf0:	200001cc 	.word	0x200001cc
 8000bf4:	48000800 	.word	0x48000800
 8000bf8:	200001e8 	.word	0x200001e8
 8000bfc:	20000008 	.word	0x20000008
 8000c00:	20000124 	.word	0x20000124
 8000c04:	200001f4 	.word	0x200001f4
 8000c08:	2000001c 	.word	0x2000001c
 8000c0c:	200001f8 	.word	0x200001f8
 8000c10:	48000400 	.word	0x48000400
 8000c14:	20000030 	.word	0x20000030
 8000c18:	200001fc 	.word	0x200001fc
 8000c1c:	20000044 	.word	0x20000044
 8000c20:	20000200 	.word	0x20000200

08000c24 <StartWatchdog01>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartWatchdog01 */
void StartWatchdog01(void *argument)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b082      	sub	sp, #8
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartWatchdog01 */
  /* Infinite loop */
  for(;;)
  {
		if(LL_TIM_IsActiveFlag_UPDATE(TIM16)){
 8000c2c:	480b      	ldr	r0, [pc, #44]	; (8000c5c <StartWatchdog01+0x38>)
 8000c2e:	f7ff fc96 	bl	800055e <LL_TIM_IsActiveFlag_UPDATE>
 8000c32:	4603      	mov	r3, r0
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d0f9      	beq.n	8000c2c <StartWatchdog01+0x8>
			LL_TIM_ClearFlag_UPDATE(TIM16);
 8000c38:	4808      	ldr	r0, [pc, #32]	; (8000c5c <StartWatchdog01+0x38>)
 8000c3a:	f7ff fc82 	bl	8000542 <LL_TIM_ClearFlag_UPDATE>
			LL_TIM_DisableCounter(TIM16);
 8000c3e:	4807      	ldr	r0, [pc, #28]	; (8000c5c <StartWatchdog01+0x38>)
 8000c40:	f7ff fc5f 	bl	8000502 <LL_TIM_DisableCounter>
			MX_WWDG_Init();
 8000c44:	f7ff fe82 	bl	800094c <MX_WWDG_Init>
			timer_flag = true;
 8000c48:	4b05      	ldr	r3, [pc, #20]	; (8000c60 <StartWatchdog01+0x3c>)
 8000c4a:	2201      	movs	r2, #1
 8000c4c:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart2, wwdg_msg, 20, 10);
 8000c4e:	230a      	movs	r3, #10
 8000c50:	2214      	movs	r2, #20
 8000c52:	4904      	ldr	r1, [pc, #16]	; (8000c64 <StartWatchdog01+0x40>)
 8000c54:	4804      	ldr	r0, [pc, #16]	; (8000c68 <StartWatchdog01+0x44>)
 8000c56:	f002 ff51 	bl	8003afc <HAL_UART_Transmit>
		if(LL_TIM_IsActiveFlag_UPDATE(TIM16)){
 8000c5a:	e7e7      	b.n	8000c2c <StartWatchdog01+0x8>
 8000c5c:	40014400 	.word	0x40014400
 8000c60:	200001f0 	.word	0x200001f0
 8000c64:	20000058 	.word	0x20000058
 8000c68:	20000124 	.word	0x20000124

08000c6c <StartFlash03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartFlash03 */
void StartFlash03(void *argument)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b082      	sub	sp, #8
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartFlash03 */
  /* Infinite loop */
  for(;;)
  {
	  osSemaphoreAcquire(BinSemHandle, osWaitForever);		//wait for semaphore
 8000c74:	4b19      	ldr	r3, [pc, #100]	; (8000cdc <StartFlash03+0x70>)
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	f04f 31ff 	mov.w	r1, #4294967295
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	f004 f9e9 	bl	8005054 <osSemaphoreAcquire>
	  flash_write(RELAY1_ADDRESS, relay1_count, timer_flag, &hwwdg);
 8000c82:	4b17      	ldr	r3, [pc, #92]	; (8000ce0 <StartFlash03+0x74>)
 8000c84:	6819      	ldr	r1, [r3, #0]
 8000c86:	4b17      	ldr	r3, [pc, #92]	; (8000ce4 <StartFlash03+0x78>)
 8000c88:	781a      	ldrb	r2, [r3, #0]
 8000c8a:	4b17      	ldr	r3, [pc, #92]	; (8000ce8 <StartFlash03+0x7c>)
 8000c8c:	4817      	ldr	r0, [pc, #92]	; (8000cec <StartFlash03+0x80>)
 8000c8e:	f7ff fb5d 	bl	800034c <flash_write>
	  flash_write(RELAY2_ADDRESS, relay2_count, timer_flag, &hwwdg);
 8000c92:	4b17      	ldr	r3, [pc, #92]	; (8000cf0 <StartFlash03+0x84>)
 8000c94:	6819      	ldr	r1, [r3, #0]
 8000c96:	4b13      	ldr	r3, [pc, #76]	; (8000ce4 <StartFlash03+0x78>)
 8000c98:	781a      	ldrb	r2, [r3, #0]
 8000c9a:	4b13      	ldr	r3, [pc, #76]	; (8000ce8 <StartFlash03+0x7c>)
 8000c9c:	4815      	ldr	r0, [pc, #84]	; (8000cf4 <StartFlash03+0x88>)
 8000c9e:	f7ff fb55 	bl	800034c <flash_write>
	  flash_write(RELAY3_ADDRESS, relay3_count, timer_flag, &hwwdg);
 8000ca2:	4b15      	ldr	r3, [pc, #84]	; (8000cf8 <StartFlash03+0x8c>)
 8000ca4:	6819      	ldr	r1, [r3, #0]
 8000ca6:	4b0f      	ldr	r3, [pc, #60]	; (8000ce4 <StartFlash03+0x78>)
 8000ca8:	781a      	ldrb	r2, [r3, #0]
 8000caa:	4b0f      	ldr	r3, [pc, #60]	; (8000ce8 <StartFlash03+0x7c>)
 8000cac:	4813      	ldr	r0, [pc, #76]	; (8000cfc <StartFlash03+0x90>)
 8000cae:	f7ff fb4d 	bl	800034c <flash_write>
	  flash_write(RELAY4_ADDRESS, relay4_count, timer_flag, &hwwdg);
 8000cb2:	4b13      	ldr	r3, [pc, #76]	; (8000d00 <StartFlash03+0x94>)
 8000cb4:	6819      	ldr	r1, [r3, #0]
 8000cb6:	4b0b      	ldr	r3, [pc, #44]	; (8000ce4 <StartFlash03+0x78>)
 8000cb8:	781a      	ldrb	r2, [r3, #0]
 8000cba:	4b0b      	ldr	r3, [pc, #44]	; (8000ce8 <StartFlash03+0x7c>)
 8000cbc:	4811      	ldr	r0, [pc, #68]	; (8000d04 <StartFlash03+0x98>)
 8000cbe:	f7ff fb45 	bl	800034c <flash_write>

	  test = flash_read(RELAY1_ADDRESS);
 8000cc2:	480a      	ldr	r0, [pc, #40]	; (8000cec <StartFlash03+0x80>)
 8000cc4:	f7ff fb77 	bl	80003b6 <flash_read>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	4a0f      	ldr	r2, [pc, #60]	; (8000d08 <StartFlash03+0x9c>)
 8000ccc:	6013      	str	r3, [r2, #0]
	  osSemaphoreRelease(BinSemHandle);		//release semaphore
 8000cce:	4b03      	ldr	r3, [pc, #12]	; (8000cdc <StartFlash03+0x70>)
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	f004 fa24 	bl	8005120 <osSemaphoreRelease>
	  osSemaphoreAcquire(BinSemHandle, osWaitForever);		//wait for semaphore
 8000cd8:	e7cc      	b.n	8000c74 <StartFlash03+0x8>
 8000cda:	bf00      	nop
 8000cdc:	200001cc 	.word	0x200001cc
 8000ce0:	200001f4 	.word	0x200001f4
 8000ce4:	200001f0 	.word	0x200001f0
 8000ce8:	200001ac 	.word	0x200001ac
 8000cec:	0803f800 	.word	0x0803f800
 8000cf0:	200001f8 	.word	0x200001f8
 8000cf4:	0803f000 	.word	0x0803f000
 8000cf8:	200001fc 	.word	0x200001fc
 8000cfc:	0803e800 	.word	0x0803e800
 8000d00:	20000200 	.word	0x20000200
 8000d04:	0803e000 	.word	0x0803e000
 8000d08:	20000204 	.word	0x20000204

08000d0c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b082      	sub	sp, #8
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	4a04      	ldr	r2, [pc, #16]	; (8000d2c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000d1a:	4293      	cmp	r3, r2
 8000d1c:	d101      	bne.n	8000d22 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000d1e:	f000 f9fb 	bl	8001118 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000d22:	bf00      	nop
 8000d24:	3708      	adds	r7, #8
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bd80      	pop	{r7, pc}
 8000d2a:	bf00      	nop
 8000d2c:	40001000 	.word	0x40001000

08000d30 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d30:	b480      	push	{r7}
 8000d32:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d34:	b672      	cpsid	i
}
 8000d36:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d38:	e7fe      	b.n	8000d38 <Error_Handler+0x8>
	...

08000d3c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b082      	sub	sp, #8
 8000d40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d42:	4b11      	ldr	r3, [pc, #68]	; (8000d88 <HAL_MspInit+0x4c>)
 8000d44:	699b      	ldr	r3, [r3, #24]
 8000d46:	4a10      	ldr	r2, [pc, #64]	; (8000d88 <HAL_MspInit+0x4c>)
 8000d48:	f043 0301 	orr.w	r3, r3, #1
 8000d4c:	6193      	str	r3, [r2, #24]
 8000d4e:	4b0e      	ldr	r3, [pc, #56]	; (8000d88 <HAL_MspInit+0x4c>)
 8000d50:	699b      	ldr	r3, [r3, #24]
 8000d52:	f003 0301 	and.w	r3, r3, #1
 8000d56:	607b      	str	r3, [r7, #4]
 8000d58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d5a:	4b0b      	ldr	r3, [pc, #44]	; (8000d88 <HAL_MspInit+0x4c>)
 8000d5c:	69db      	ldr	r3, [r3, #28]
 8000d5e:	4a0a      	ldr	r2, [pc, #40]	; (8000d88 <HAL_MspInit+0x4c>)
 8000d60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d64:	61d3      	str	r3, [r2, #28]
 8000d66:	4b08      	ldr	r3, [pc, #32]	; (8000d88 <HAL_MspInit+0x4c>)
 8000d68:	69db      	ldr	r3, [r3, #28]
 8000d6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d6e:	603b      	str	r3, [r7, #0]
 8000d70:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000d72:	2200      	movs	r2, #0
 8000d74:	210f      	movs	r1, #15
 8000d76:	f06f 0001 	mvn.w	r0, #1
 8000d7a:	f000 faa5 	bl	80012c8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d7e:	bf00      	nop
 8000d80:	3708      	adds	r7, #8
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	bf00      	nop
 8000d88:	40021000 	.word	0x40021000

08000d8c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b08c      	sub	sp, #48	; 0x30
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d94:	f107 031c 	add.w	r3, r7, #28
 8000d98:	2200      	movs	r2, #0
 8000d9a:	601a      	str	r2, [r3, #0]
 8000d9c:	605a      	str	r2, [r3, #4]
 8000d9e:	609a      	str	r2, [r3, #8]
 8000da0:	60da      	str	r2, [r3, #12]
 8000da2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	4a36      	ldr	r2, [pc, #216]	; (8000e84 <HAL_UART_MspInit+0xf8>)
 8000daa:	4293      	cmp	r3, r2
 8000dac:	d130      	bne.n	8000e10 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000dae:	4b36      	ldr	r3, [pc, #216]	; (8000e88 <HAL_UART_MspInit+0xfc>)
 8000db0:	699b      	ldr	r3, [r3, #24]
 8000db2:	4a35      	ldr	r2, [pc, #212]	; (8000e88 <HAL_UART_MspInit+0xfc>)
 8000db4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000db8:	6193      	str	r3, [r2, #24]
 8000dba:	4b33      	ldr	r3, [pc, #204]	; (8000e88 <HAL_UART_MspInit+0xfc>)
 8000dbc:	699b      	ldr	r3, [r3, #24]
 8000dbe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000dc2:	61bb      	str	r3, [r7, #24]
 8000dc4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dc6:	4b30      	ldr	r3, [pc, #192]	; (8000e88 <HAL_UART_MspInit+0xfc>)
 8000dc8:	695b      	ldr	r3, [r3, #20]
 8000dca:	4a2f      	ldr	r2, [pc, #188]	; (8000e88 <HAL_UART_MspInit+0xfc>)
 8000dcc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000dd0:	6153      	str	r3, [r2, #20]
 8000dd2:	4b2d      	ldr	r3, [pc, #180]	; (8000e88 <HAL_UART_MspInit+0xfc>)
 8000dd4:	695b      	ldr	r3, [r3, #20]
 8000dd6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000dda:	617b      	str	r3, [r7, #20]
 8000ddc:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000dde:	2330      	movs	r3, #48	; 0x30
 8000de0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000de2:	2302      	movs	r3, #2
 8000de4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de6:	2300      	movs	r3, #0
 8000de8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000dea:	2303      	movs	r3, #3
 8000dec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000dee:	2307      	movs	r3, #7
 8000df0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000df2:	f107 031c 	add.w	r3, r7, #28
 8000df6:	4619      	mov	r1, r3
 8000df8:	4824      	ldr	r0, [pc, #144]	; (8000e8c <HAL_UART_MspInit+0x100>)
 8000dfa:	f000 fce3 	bl	80017c4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8000dfe:	2200      	movs	r2, #0
 8000e00:	2105      	movs	r1, #5
 8000e02:	2025      	movs	r0, #37	; 0x25
 8000e04:	f000 fa60 	bl	80012c8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000e08:	2025      	movs	r0, #37	; 0x25
 8000e0a:	f000 fa79 	bl	8001300 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000e0e:	e035      	b.n	8000e7c <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART2)
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	4a1e      	ldr	r2, [pc, #120]	; (8000e90 <HAL_UART_MspInit+0x104>)
 8000e16:	4293      	cmp	r3, r2
 8000e18:	d130      	bne.n	8000e7c <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e1a:	4b1b      	ldr	r3, [pc, #108]	; (8000e88 <HAL_UART_MspInit+0xfc>)
 8000e1c:	69db      	ldr	r3, [r3, #28]
 8000e1e:	4a1a      	ldr	r2, [pc, #104]	; (8000e88 <HAL_UART_MspInit+0xfc>)
 8000e20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e24:	61d3      	str	r3, [r2, #28]
 8000e26:	4b18      	ldr	r3, [pc, #96]	; (8000e88 <HAL_UART_MspInit+0xfc>)
 8000e28:	69db      	ldr	r3, [r3, #28]
 8000e2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e2e:	613b      	str	r3, [r7, #16]
 8000e30:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e32:	4b15      	ldr	r3, [pc, #84]	; (8000e88 <HAL_UART_MspInit+0xfc>)
 8000e34:	695b      	ldr	r3, [r3, #20]
 8000e36:	4a14      	ldr	r2, [pc, #80]	; (8000e88 <HAL_UART_MspInit+0xfc>)
 8000e38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e3c:	6153      	str	r3, [r2, #20]
 8000e3e:	4b12      	ldr	r3, [pc, #72]	; (8000e88 <HAL_UART_MspInit+0xfc>)
 8000e40:	695b      	ldr	r3, [r3, #20]
 8000e42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e46:	60fb      	str	r3, [r7, #12]
 8000e48:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000e4a:	230c      	movs	r3, #12
 8000e4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e4e:	2302      	movs	r3, #2
 8000e50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e52:	2300      	movs	r3, #0
 8000e54:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e56:	2303      	movs	r3, #3
 8000e58:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e5a:	2307      	movs	r3, #7
 8000e5c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e5e:	f107 031c 	add.w	r3, r7, #28
 8000e62:	4619      	mov	r1, r3
 8000e64:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e68:	f000 fcac 	bl	80017c4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	2105      	movs	r1, #5
 8000e70:	2026      	movs	r0, #38	; 0x26
 8000e72:	f000 fa29 	bl	80012c8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000e76:	2026      	movs	r0, #38	; 0x26
 8000e78:	f000 fa42 	bl	8001300 <HAL_NVIC_EnableIRQ>
}
 8000e7c:	bf00      	nop
 8000e7e:	3730      	adds	r7, #48	; 0x30
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bd80      	pop	{r7, pc}
 8000e84:	40013800 	.word	0x40013800
 8000e88:	40021000 	.word	0x40021000
 8000e8c:	48000800 	.word	0x48000800
 8000e90:	40004400 	.word	0x40004400

08000e94 <HAL_WWDG_MspInit>:
* This function configures the hardware resources used in this example
* @param hwwdg: WWDG handle pointer
* @retval None
*/
void HAL_WWDG_MspInit(WWDG_HandleTypeDef* hwwdg)
{
 8000e94:	b480      	push	{r7}
 8000e96:	b085      	sub	sp, #20
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
  if(hwwdg->Instance==WWDG)
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	4a0a      	ldr	r2, [pc, #40]	; (8000ecc <HAL_WWDG_MspInit+0x38>)
 8000ea2:	4293      	cmp	r3, r2
 8000ea4:	d10b      	bne.n	8000ebe <HAL_WWDG_MspInit+0x2a>
  {
  /* USER CODE BEGIN WWDG_MspInit 0 */

  /* USER CODE END WWDG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_WWDG_CLK_ENABLE();
 8000ea6:	4b0a      	ldr	r3, [pc, #40]	; (8000ed0 <HAL_WWDG_MspInit+0x3c>)
 8000ea8:	69db      	ldr	r3, [r3, #28]
 8000eaa:	4a09      	ldr	r2, [pc, #36]	; (8000ed0 <HAL_WWDG_MspInit+0x3c>)
 8000eac:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000eb0:	61d3      	str	r3, [r2, #28]
 8000eb2:	4b07      	ldr	r3, [pc, #28]	; (8000ed0 <HAL_WWDG_MspInit+0x3c>)
 8000eb4:	69db      	ldr	r3, [r3, #28]
 8000eb6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000eba:	60fb      	str	r3, [r7, #12]
 8000ebc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN WWDG_MspInit 1 */

  /* USER CODE END WWDG_MspInit 1 */
  }

}
 8000ebe:	bf00      	nop
 8000ec0:	3714      	adds	r7, #20
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec8:	4770      	bx	lr
 8000eca:	bf00      	nop
 8000ecc:	40002c00 	.word	0x40002c00
 8000ed0:	40021000 	.word	0x40021000

08000ed4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b08e      	sub	sp, #56	; 0x38
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000edc:	2300      	movs	r3, #0
 8000ede:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000ee4:	4b33      	ldr	r3, [pc, #204]	; (8000fb4 <HAL_InitTick+0xe0>)
 8000ee6:	69db      	ldr	r3, [r3, #28]
 8000ee8:	4a32      	ldr	r2, [pc, #200]	; (8000fb4 <HAL_InitTick+0xe0>)
 8000eea:	f043 0310 	orr.w	r3, r3, #16
 8000eee:	61d3      	str	r3, [r2, #28]
 8000ef0:	4b30      	ldr	r3, [pc, #192]	; (8000fb4 <HAL_InitTick+0xe0>)
 8000ef2:	69db      	ldr	r3, [r3, #28]
 8000ef4:	f003 0310 	and.w	r3, r3, #16
 8000ef8:	60fb      	str	r3, [r7, #12]
 8000efa:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000efc:	f107 0210 	add.w	r2, r7, #16
 8000f00:	f107 0314 	add.w	r3, r7, #20
 8000f04:	4611      	mov	r1, r2
 8000f06:	4618      	mov	r0, r3
 8000f08:	f002 f896 	bl	8003038 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000f0c:	6a3b      	ldr	r3, [r7, #32]
 8000f0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000f10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d103      	bne.n	8000f1e <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000f16:	f002 f84b 	bl	8002fb0 <HAL_RCC_GetPCLK1Freq>
 8000f1a:	6378      	str	r0, [r7, #52]	; 0x34
 8000f1c:	e004      	b.n	8000f28 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000f1e:	f002 f847 	bl	8002fb0 <HAL_RCC_GetPCLK1Freq>
 8000f22:	4603      	mov	r3, r0
 8000f24:	005b      	lsls	r3, r3, #1
 8000f26:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000f28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f2a:	4a23      	ldr	r2, [pc, #140]	; (8000fb8 <HAL_InitTick+0xe4>)
 8000f2c:	fba2 2303 	umull	r2, r3, r2, r3
 8000f30:	0c9b      	lsrs	r3, r3, #18
 8000f32:	3b01      	subs	r3, #1
 8000f34:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000f36:	4b21      	ldr	r3, [pc, #132]	; (8000fbc <HAL_InitTick+0xe8>)
 8000f38:	4a21      	ldr	r2, [pc, #132]	; (8000fc0 <HAL_InitTick+0xec>)
 8000f3a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000f3c:	4b1f      	ldr	r3, [pc, #124]	; (8000fbc <HAL_InitTick+0xe8>)
 8000f3e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000f42:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000f44:	4a1d      	ldr	r2, [pc, #116]	; (8000fbc <HAL_InitTick+0xe8>)
 8000f46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f48:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000f4a:	4b1c      	ldr	r3, [pc, #112]	; (8000fbc <HAL_InitTick+0xe8>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f50:	4b1a      	ldr	r3, [pc, #104]	; (8000fbc <HAL_InitTick+0xe8>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f56:	4b19      	ldr	r3, [pc, #100]	; (8000fbc <HAL_InitTick+0xe8>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000f5c:	4817      	ldr	r0, [pc, #92]	; (8000fbc <HAL_InitTick+0xe8>)
 8000f5e:	f002 fabb 	bl	80034d8 <HAL_TIM_Base_Init>
 8000f62:	4603      	mov	r3, r0
 8000f64:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000f68:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d11b      	bne.n	8000fa8 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000f70:	4812      	ldr	r0, [pc, #72]	; (8000fbc <HAL_InitTick+0xe8>)
 8000f72:	f002 fb13 	bl	800359c <HAL_TIM_Base_Start_IT>
 8000f76:	4603      	mov	r3, r0
 8000f78:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000f7c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d111      	bne.n	8000fa8 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000f84:	2036      	movs	r0, #54	; 0x36
 8000f86:	f000 f9bb 	bl	8001300 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	2b0f      	cmp	r3, #15
 8000f8e:	d808      	bhi.n	8000fa2 <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000f90:	2200      	movs	r2, #0
 8000f92:	6879      	ldr	r1, [r7, #4]
 8000f94:	2036      	movs	r0, #54	; 0x36
 8000f96:	f000 f997 	bl	80012c8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f9a:	4a0a      	ldr	r2, [pc, #40]	; (8000fc4 <HAL_InitTick+0xf0>)
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	6013      	str	r3, [r2, #0]
 8000fa0:	e002      	b.n	8000fa8 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8000fa2:	2301      	movs	r3, #1
 8000fa4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000fa8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000fac:	4618      	mov	r0, r3
 8000fae:	3738      	adds	r7, #56	; 0x38
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}
 8000fb4:	40021000 	.word	0x40021000
 8000fb8:	431bde83 	.word	0x431bde83
 8000fbc:	20000208 	.word	0x20000208
 8000fc0:	40001000 	.word	0x40001000
 8000fc4:	20000070 	.word	0x20000070

08000fc8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000fcc:	e7fe      	b.n	8000fcc <NMI_Handler+0x4>

08000fce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fce:	b480      	push	{r7}
 8000fd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fd2:	e7fe      	b.n	8000fd2 <HardFault_Handler+0x4>

08000fd4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fd8:	e7fe      	b.n	8000fd8 <MemManage_Handler+0x4>

08000fda <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fda:	b480      	push	{r7}
 8000fdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fde:	e7fe      	b.n	8000fde <BusFault_Handler+0x4>

08000fe0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fe4:	e7fe      	b.n	8000fe4 <UsageFault_Handler+0x4>

08000fe6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fe6:	b480      	push	{r7}
 8000fe8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fea:	bf00      	nop
 8000fec:	46bd      	mov	sp, r7
 8000fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff2:	4770      	bx	lr

08000ff4 <EXTI2_TSC_IRQHandler>:

/**
  * @brief This function handles EXTI line2 and Touch Sense controller interrupts.
  */
void EXTI2_TSC_IRQHandler(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_TSC_IRQn 0 */

  /* USER CODE END EXTI2_TSC_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8000ff8:	2004      	movs	r0, #4
 8000ffa:	f000 fd85 	bl	8001b08 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_TSC_IRQn 1 */

  /* USER CODE END EXTI2_TSC_IRQn 1 */
}
 8000ffe:	bf00      	nop
 8001000:	bd80      	pop	{r7, pc}

08001002 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8001002:	b580      	push	{r7, lr}
 8001004:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8001006:	2008      	movs	r0, #8
 8001008:	f000 fd7e 	bl	8001b08 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 800100c:	bf00      	nop
 800100e:	bd80      	pop	{r7, pc}

08001010 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update and TIM16 interrupts.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001010:	b480      	push	{r7}
 8001012:	af00      	add	r7, sp, #0
  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8001014:	bf00      	nop
 8001016:	46bd      	mov	sp, r7
 8001018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101c:	4770      	bx	lr
	...

08001020 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001024:	4802      	ldr	r0, [pc, #8]	; (8001030 <USART1_IRQHandler+0x10>)
 8001026:	f002 fdf3 	bl	8003c10 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800102a:	bf00      	nop
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	2000009c 	.word	0x2000009c

08001034 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001038:	4802      	ldr	r0, [pc, #8]	; (8001044 <USART2_IRQHandler+0x10>)
 800103a:	f002 fde9 	bl	8003c10 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800103e:	bf00      	nop
 8001040:	bd80      	pop	{r7, pc}
 8001042:	bf00      	nop
 8001044:	20000124 	.word	0x20000124

08001048 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 800104c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001050:	f000 fd5a 	bl	8001b08 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8001054:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001058:	f000 fd56 	bl	8001b08 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800105c:	bf00      	nop
 800105e:	bd80      	pop	{r7, pc}

08001060 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1 underrun interrupt.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001064:	4802      	ldr	r0, [pc, #8]	; (8001070 <TIM6_DAC_IRQHandler+0x10>)
 8001066:	f002 fb09 	bl	800367c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800106a:	bf00      	nop
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	20000208 	.word	0x20000208

08001074 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001074:	b480      	push	{r7}
 8001076:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001078:	4b06      	ldr	r3, [pc, #24]	; (8001094 <SystemInit+0x20>)
 800107a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800107e:	4a05      	ldr	r2, [pc, #20]	; (8001094 <SystemInit+0x20>)
 8001080:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001084:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001088:	bf00      	nop
 800108a:	46bd      	mov	sp, r7
 800108c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop
 8001094:	e000ed00 	.word	0xe000ed00

08001098 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001098:	f8df d034 	ldr.w	sp, [pc, #52]	; 80010d0 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 800109c:	f7ff ffea 	bl	8001074 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80010a0:	480c      	ldr	r0, [pc, #48]	; (80010d4 <LoopForever+0x6>)
  ldr r1, =_edata
 80010a2:	490d      	ldr	r1, [pc, #52]	; (80010d8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80010a4:	4a0d      	ldr	r2, [pc, #52]	; (80010dc <LoopForever+0xe>)
  movs r3, #0
 80010a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010a8:	e002      	b.n	80010b0 <LoopCopyDataInit>

080010aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010ae:	3304      	adds	r3, #4

080010b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010b4:	d3f9      	bcc.n	80010aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010b6:	4a0a      	ldr	r2, [pc, #40]	; (80010e0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80010b8:	4c0a      	ldr	r4, [pc, #40]	; (80010e4 <LoopForever+0x16>)
  movs r3, #0
 80010ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010bc:	e001      	b.n	80010c2 <LoopFillZerobss>

080010be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010c0:	3204      	adds	r2, #4

080010c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010c4:	d3fb      	bcc.n	80010be <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80010c6:	f007 f8c1 	bl	800824c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80010ca:	f7ff fafb 	bl	80006c4 <main>

080010ce <LoopForever>:

LoopForever:
    b LoopForever
 80010ce:	e7fe      	b.n	80010ce <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80010d0:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80010d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010d8:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 80010dc:	080083c4 	.word	0x080083c4
  ldr r2, =_sbss
 80010e0:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 80010e4:	20001bc0 	.word	0x20001bc0

080010e8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80010e8:	e7fe      	b.n	80010e8 <ADC1_2_IRQHandler>
	...

080010ec <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010f0:	4b08      	ldr	r3, [pc, #32]	; (8001114 <HAL_Init+0x28>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	4a07      	ldr	r2, [pc, #28]	; (8001114 <HAL_Init+0x28>)
 80010f6:	f043 0310 	orr.w	r3, r3, #16
 80010fa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010fc:	2003      	movs	r0, #3
 80010fe:	f000 f8d8 	bl	80012b2 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001102:	200f      	movs	r0, #15
 8001104:	f7ff fee6 	bl	8000ed4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001108:	f7ff fe18 	bl	8000d3c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800110c:	2300      	movs	r3, #0
}
 800110e:	4618      	mov	r0, r3
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	40022000 	.word	0x40022000

08001118 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001118:	b480      	push	{r7}
 800111a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800111c:	4b06      	ldr	r3, [pc, #24]	; (8001138 <HAL_IncTick+0x20>)
 800111e:	781b      	ldrb	r3, [r3, #0]
 8001120:	461a      	mov	r2, r3
 8001122:	4b06      	ldr	r3, [pc, #24]	; (800113c <HAL_IncTick+0x24>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	4413      	add	r3, r2
 8001128:	4a04      	ldr	r2, [pc, #16]	; (800113c <HAL_IncTick+0x24>)
 800112a:	6013      	str	r3, [r2, #0]
}
 800112c:	bf00      	nop
 800112e:	46bd      	mov	sp, r7
 8001130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001134:	4770      	bx	lr
 8001136:	bf00      	nop
 8001138:	20000074 	.word	0x20000074
 800113c:	20000254 	.word	0x20000254

08001140 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001140:	b480      	push	{r7}
 8001142:	af00      	add	r7, sp, #0
  return uwTick;  
 8001144:	4b03      	ldr	r3, [pc, #12]	; (8001154 <HAL_GetTick+0x14>)
 8001146:	681b      	ldr	r3, [r3, #0]
}
 8001148:	4618      	mov	r0, r3
 800114a:	46bd      	mov	sp, r7
 800114c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001150:	4770      	bx	lr
 8001152:	bf00      	nop
 8001154:	20000254 	.word	0x20000254

08001158 <__NVIC_SetPriorityGrouping>:
{
 8001158:	b480      	push	{r7}
 800115a:	b085      	sub	sp, #20
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	f003 0307 	and.w	r3, r3, #7
 8001166:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001168:	4b0c      	ldr	r3, [pc, #48]	; (800119c <__NVIC_SetPriorityGrouping+0x44>)
 800116a:	68db      	ldr	r3, [r3, #12]
 800116c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800116e:	68ba      	ldr	r2, [r7, #8]
 8001170:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001174:	4013      	ands	r3, r2
 8001176:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800117c:	68bb      	ldr	r3, [r7, #8]
 800117e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001180:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001184:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001188:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800118a:	4a04      	ldr	r2, [pc, #16]	; (800119c <__NVIC_SetPriorityGrouping+0x44>)
 800118c:	68bb      	ldr	r3, [r7, #8]
 800118e:	60d3      	str	r3, [r2, #12]
}
 8001190:	bf00      	nop
 8001192:	3714      	adds	r7, #20
 8001194:	46bd      	mov	sp, r7
 8001196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119a:	4770      	bx	lr
 800119c:	e000ed00 	.word	0xe000ed00

080011a0 <__NVIC_GetPriorityGrouping>:
{
 80011a0:	b480      	push	{r7}
 80011a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011a4:	4b04      	ldr	r3, [pc, #16]	; (80011b8 <__NVIC_GetPriorityGrouping+0x18>)
 80011a6:	68db      	ldr	r3, [r3, #12]
 80011a8:	0a1b      	lsrs	r3, r3, #8
 80011aa:	f003 0307 	and.w	r3, r3, #7
}
 80011ae:	4618      	mov	r0, r3
 80011b0:	46bd      	mov	sp, r7
 80011b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b6:	4770      	bx	lr
 80011b8:	e000ed00 	.word	0xe000ed00

080011bc <__NVIC_EnableIRQ>:
{
 80011bc:	b480      	push	{r7}
 80011be:	b083      	sub	sp, #12
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	4603      	mov	r3, r0
 80011c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	db0b      	blt.n	80011e6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011ce:	79fb      	ldrb	r3, [r7, #7]
 80011d0:	f003 021f 	and.w	r2, r3, #31
 80011d4:	4907      	ldr	r1, [pc, #28]	; (80011f4 <__NVIC_EnableIRQ+0x38>)
 80011d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011da:	095b      	lsrs	r3, r3, #5
 80011dc:	2001      	movs	r0, #1
 80011de:	fa00 f202 	lsl.w	r2, r0, r2
 80011e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80011e6:	bf00      	nop
 80011e8:	370c      	adds	r7, #12
 80011ea:	46bd      	mov	sp, r7
 80011ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f0:	4770      	bx	lr
 80011f2:	bf00      	nop
 80011f4:	e000e100 	.word	0xe000e100

080011f8 <__NVIC_SetPriority>:
{
 80011f8:	b480      	push	{r7}
 80011fa:	b083      	sub	sp, #12
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	4603      	mov	r3, r0
 8001200:	6039      	str	r1, [r7, #0]
 8001202:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001204:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001208:	2b00      	cmp	r3, #0
 800120a:	db0a      	blt.n	8001222 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	b2da      	uxtb	r2, r3
 8001210:	490c      	ldr	r1, [pc, #48]	; (8001244 <__NVIC_SetPriority+0x4c>)
 8001212:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001216:	0112      	lsls	r2, r2, #4
 8001218:	b2d2      	uxtb	r2, r2
 800121a:	440b      	add	r3, r1
 800121c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001220:	e00a      	b.n	8001238 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	b2da      	uxtb	r2, r3
 8001226:	4908      	ldr	r1, [pc, #32]	; (8001248 <__NVIC_SetPriority+0x50>)
 8001228:	79fb      	ldrb	r3, [r7, #7]
 800122a:	f003 030f 	and.w	r3, r3, #15
 800122e:	3b04      	subs	r3, #4
 8001230:	0112      	lsls	r2, r2, #4
 8001232:	b2d2      	uxtb	r2, r2
 8001234:	440b      	add	r3, r1
 8001236:	761a      	strb	r2, [r3, #24]
}
 8001238:	bf00      	nop
 800123a:	370c      	adds	r7, #12
 800123c:	46bd      	mov	sp, r7
 800123e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001242:	4770      	bx	lr
 8001244:	e000e100 	.word	0xe000e100
 8001248:	e000ed00 	.word	0xe000ed00

0800124c <NVIC_EncodePriority>:
{
 800124c:	b480      	push	{r7}
 800124e:	b089      	sub	sp, #36	; 0x24
 8001250:	af00      	add	r7, sp, #0
 8001252:	60f8      	str	r0, [r7, #12]
 8001254:	60b9      	str	r1, [r7, #8]
 8001256:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	f003 0307 	and.w	r3, r3, #7
 800125e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001260:	69fb      	ldr	r3, [r7, #28]
 8001262:	f1c3 0307 	rsb	r3, r3, #7
 8001266:	2b04      	cmp	r3, #4
 8001268:	bf28      	it	cs
 800126a:	2304      	movcs	r3, #4
 800126c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800126e:	69fb      	ldr	r3, [r7, #28]
 8001270:	3304      	adds	r3, #4
 8001272:	2b06      	cmp	r3, #6
 8001274:	d902      	bls.n	800127c <NVIC_EncodePriority+0x30>
 8001276:	69fb      	ldr	r3, [r7, #28]
 8001278:	3b03      	subs	r3, #3
 800127a:	e000      	b.n	800127e <NVIC_EncodePriority+0x32>
 800127c:	2300      	movs	r3, #0
 800127e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001280:	f04f 32ff 	mov.w	r2, #4294967295
 8001284:	69bb      	ldr	r3, [r7, #24]
 8001286:	fa02 f303 	lsl.w	r3, r2, r3
 800128a:	43da      	mvns	r2, r3
 800128c:	68bb      	ldr	r3, [r7, #8]
 800128e:	401a      	ands	r2, r3
 8001290:	697b      	ldr	r3, [r7, #20]
 8001292:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001294:	f04f 31ff 	mov.w	r1, #4294967295
 8001298:	697b      	ldr	r3, [r7, #20]
 800129a:	fa01 f303 	lsl.w	r3, r1, r3
 800129e:	43d9      	mvns	r1, r3
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012a4:	4313      	orrs	r3, r2
}
 80012a6:	4618      	mov	r0, r3
 80012a8:	3724      	adds	r7, #36	; 0x24
 80012aa:	46bd      	mov	sp, r7
 80012ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b0:	4770      	bx	lr

080012b2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012b2:	b580      	push	{r7, lr}
 80012b4:	b082      	sub	sp, #8
 80012b6:	af00      	add	r7, sp, #0
 80012b8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012ba:	6878      	ldr	r0, [r7, #4]
 80012bc:	f7ff ff4c 	bl	8001158 <__NVIC_SetPriorityGrouping>
}
 80012c0:	bf00      	nop
 80012c2:	3708      	adds	r7, #8
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bd80      	pop	{r7, pc}

080012c8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b086      	sub	sp, #24
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	4603      	mov	r3, r0
 80012d0:	60b9      	str	r1, [r7, #8]
 80012d2:	607a      	str	r2, [r7, #4]
 80012d4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80012d6:	2300      	movs	r3, #0
 80012d8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80012da:	f7ff ff61 	bl	80011a0 <__NVIC_GetPriorityGrouping>
 80012de:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012e0:	687a      	ldr	r2, [r7, #4]
 80012e2:	68b9      	ldr	r1, [r7, #8]
 80012e4:	6978      	ldr	r0, [r7, #20]
 80012e6:	f7ff ffb1 	bl	800124c <NVIC_EncodePriority>
 80012ea:	4602      	mov	r2, r0
 80012ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012f0:	4611      	mov	r1, r2
 80012f2:	4618      	mov	r0, r3
 80012f4:	f7ff ff80 	bl	80011f8 <__NVIC_SetPriority>
}
 80012f8:	bf00      	nop
 80012fa:	3718      	adds	r7, #24
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}

08001300 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b082      	sub	sp, #8
 8001304:	af00      	add	r7, sp, #0
 8001306:	4603      	mov	r3, r0
 8001308:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800130a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800130e:	4618      	mov	r0, r3
 8001310:	f7ff ff54 	bl	80011bc <__NVIC_EnableIRQ>
}
 8001314:	bf00      	nop
 8001316:	3708      	adds	r7, #8
 8001318:	46bd      	mov	sp, r7
 800131a:	bd80      	pop	{r7, pc}

0800131c <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800131c:	b480      	push	{r7}
 800131e:	b083      	sub	sp, #12
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	2b00      	cmp	r3, #0
 8001328:	d101      	bne.n	800132e <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 800132a:	2301      	movs	r3, #1
 800132c:	e02e      	b.n	800138c <HAL_DMA_Abort+0x70>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001334:	2b02      	cmp	r3, #2
 8001336:	d008      	beq.n	800134a <HAL_DMA_Abort+0x2e>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	2204      	movs	r2, #4
 800133c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	2200      	movs	r2, #0
 8001342:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 8001346:	2301      	movs	r3, #1
 8001348:	e020      	b.n	800138c <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	681a      	ldr	r2, [r3, #0]
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	f022 020e 	bic.w	r2, r2, #14
 8001358:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	681a      	ldr	r2, [r3, #0]
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	f022 0201 	bic.w	r2, r2, #1
 8001368:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001372:	2101      	movs	r1, #1
 8001374:	fa01 f202 	lsl.w	r2, r1, r2
 8001378:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	2201      	movs	r2, #1
 800137e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	2200      	movs	r2, #0
 8001386:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800138a:	2300      	movs	r3, #0
}
 800138c:	4618      	mov	r0, r3
 800138e:	370c      	adds	r7, #12
 8001390:	46bd      	mov	sp, r7
 8001392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001396:	4770      	bx	lr

08001398 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b084      	sub	sp, #16
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80013a0:	2300      	movs	r3, #0
 80013a2:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80013aa:	2b02      	cmp	r3, #2
 80013ac:	d005      	beq.n	80013ba <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	2204      	movs	r2, #4
 80013b2:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 80013b4:	2301      	movs	r3, #1
 80013b6:	73fb      	strb	r3, [r7, #15]
 80013b8:	e027      	b.n	800140a <HAL_DMA_Abort_IT+0x72>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	681a      	ldr	r2, [r3, #0]
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	f022 020e 	bic.w	r2, r2, #14
 80013c8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	681a      	ldr	r2, [r3, #0]
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	f022 0201 	bic.w	r2, r2, #1
 80013d8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80013e2:	2101      	movs	r1, #1
 80013e4:	fa01 f202 	lsl.w	r2, r1, r2
 80013e8:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	2201      	movs	r2, #1
 80013ee:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	2200      	movs	r2, #0
 80013f6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d003      	beq.n	800140a <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001406:	6878      	ldr	r0, [r7, #4]
 8001408:	4798      	blx	r3
    }
  }
  return status;
 800140a:	7bfb      	ldrb	r3, [r7, #15]
}
 800140c:	4618      	mov	r0, r3
 800140e:	3710      	adds	r7, #16
 8001410:	46bd      	mov	sp, r7
 8001412:	bd80      	pop	{r7, pc}

08001414 <HAL_FLASH_Program>:
  * @param  Data          Specifie the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8001414:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001416:	b087      	sub	sp, #28
 8001418:	af00      	add	r7, sp, #0
 800141a:	60f8      	str	r0, [r7, #12]
 800141c:	60b9      	str	r1, [r7, #8]
 800141e:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001422:	2301      	movs	r3, #1
 8001424:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0U;
 8001426:	2300      	movs	r3, #0
 8001428:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0U;
 800142a:	2300      	movs	r3, #0
 800142c:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800142e:	4b2f      	ldr	r3, [pc, #188]	; (80014ec <HAL_FLASH_Program+0xd8>)
 8001430:	7e1b      	ldrb	r3, [r3, #24]
 8001432:	2b01      	cmp	r3, #1
 8001434:	d101      	bne.n	800143a <HAL_FLASH_Program+0x26>
 8001436:	2302      	movs	r3, #2
 8001438:	e054      	b.n	80014e4 <HAL_FLASH_Program+0xd0>
 800143a:	4b2c      	ldr	r3, [pc, #176]	; (80014ec <HAL_FLASH_Program+0xd8>)
 800143c:	2201      	movs	r2, #1
 800143e:	761a      	strb	r2, [r3, #24]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8001440:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001444:	f000 f8a8 	bl	8001598 <FLASH_WaitForLastOperation>
 8001448:	4603      	mov	r3, r0
 800144a:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 800144c:	7dfb      	ldrb	r3, [r7, #23]
 800144e:	2b00      	cmp	r3, #0
 8001450:	d144      	bne.n	80014dc <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	2b01      	cmp	r3, #1
 8001456:	d102      	bne.n	800145e <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8001458:	2301      	movs	r3, #1
 800145a:	757b      	strb	r3, [r7, #21]
 800145c:	e007      	b.n	800146e <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	2b02      	cmp	r3, #2
 8001462:	d102      	bne.n	800146a <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8001464:	2302      	movs	r3, #2
 8001466:	757b      	strb	r3, [r7, #21]
 8001468:	e001      	b.n	800146e <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 800146a:	2304      	movs	r3, #4
 800146c:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 800146e:	2300      	movs	r3, #0
 8001470:	75bb      	strb	r3, [r7, #22]
 8001472:	e02d      	b.n	80014d0 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8001474:	7dbb      	ldrb	r3, [r7, #22]
 8001476:	005a      	lsls	r2, r3, #1
 8001478:	68bb      	ldr	r3, [r7, #8]
 800147a:	eb02 0c03 	add.w	ip, r2, r3
 800147e:	7dbb      	ldrb	r3, [r7, #22]
 8001480:	0119      	lsls	r1, r3, #4
 8001482:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001486:	f1c1 0620 	rsb	r6, r1, #32
 800148a:	f1a1 0020 	sub.w	r0, r1, #32
 800148e:	fa22 f401 	lsr.w	r4, r2, r1
 8001492:	fa03 f606 	lsl.w	r6, r3, r6
 8001496:	4334      	orrs	r4, r6
 8001498:	fa23 f000 	lsr.w	r0, r3, r0
 800149c:	4304      	orrs	r4, r0
 800149e:	fa23 f501 	lsr.w	r5, r3, r1
 80014a2:	b2a3      	uxth	r3, r4
 80014a4:	4619      	mov	r1, r3
 80014a6:	4660      	mov	r0, ip
 80014a8:	f000 f85a 	bl	8001560 <FLASH_Program_HalfWord>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80014ac:	f24c 3050 	movw	r0, #50000	; 0xc350
 80014b0:	f000 f872 	bl	8001598 <FLASH_WaitForLastOperation>
 80014b4:	4603      	mov	r3, r0
 80014b6:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 80014b8:	4b0d      	ldr	r3, [pc, #52]	; (80014f0 <HAL_FLASH_Program+0xdc>)
 80014ba:	691b      	ldr	r3, [r3, #16]
 80014bc:	4a0c      	ldr	r2, [pc, #48]	; (80014f0 <HAL_FLASH_Program+0xdc>)
 80014be:	f023 0301 	bic.w	r3, r3, #1
 80014c2:	6113      	str	r3, [r2, #16]
      /* In case of error, stop programming procedure */
      if (status != HAL_OK)
 80014c4:	7dfb      	ldrb	r3, [r7, #23]
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d107      	bne.n	80014da <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 80014ca:	7dbb      	ldrb	r3, [r7, #22]
 80014cc:	3301      	adds	r3, #1
 80014ce:	75bb      	strb	r3, [r7, #22]
 80014d0:	7dba      	ldrb	r2, [r7, #22]
 80014d2:	7d7b      	ldrb	r3, [r7, #21]
 80014d4:	429a      	cmp	r2, r3
 80014d6:	d3cd      	bcc.n	8001474 <HAL_FLASH_Program+0x60>
 80014d8:	e000      	b.n	80014dc <HAL_FLASH_Program+0xc8>
      {
        break;
 80014da:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80014dc:	4b03      	ldr	r3, [pc, #12]	; (80014ec <HAL_FLASH_Program+0xd8>)
 80014de:	2200      	movs	r2, #0
 80014e0:	761a      	strb	r2, [r3, #24]

  return status;
 80014e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80014e4:	4618      	mov	r0, r3
 80014e6:	371c      	adds	r7, #28
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014ec:	20000258 	.word	0x20000258
 80014f0:	40022000 	.word	0x40022000

080014f4 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80014f4:	b480      	push	{r7}
 80014f6:	b083      	sub	sp, #12
 80014f8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80014fa:	2300      	movs	r3, #0
 80014fc:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80014fe:	4b0d      	ldr	r3, [pc, #52]	; (8001534 <HAL_FLASH_Unlock+0x40>)
 8001500:	691b      	ldr	r3, [r3, #16]
 8001502:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001506:	2b00      	cmp	r3, #0
 8001508:	d00d      	beq.n	8001526 <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800150a:	4b0a      	ldr	r3, [pc, #40]	; (8001534 <HAL_FLASH_Unlock+0x40>)
 800150c:	4a0a      	ldr	r2, [pc, #40]	; (8001538 <HAL_FLASH_Unlock+0x44>)
 800150e:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8001510:	4b08      	ldr	r3, [pc, #32]	; (8001534 <HAL_FLASH_Unlock+0x40>)
 8001512:	4a0a      	ldr	r2, [pc, #40]	; (800153c <HAL_FLASH_Unlock+0x48>)
 8001514:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001516:	4b07      	ldr	r3, [pc, #28]	; (8001534 <HAL_FLASH_Unlock+0x40>)
 8001518:	691b      	ldr	r3, [r3, #16]
 800151a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800151e:	2b00      	cmp	r3, #0
 8001520:	d001      	beq.n	8001526 <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 8001522:	2301      	movs	r3, #1
 8001524:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8001526:	79fb      	ldrb	r3, [r7, #7]
}
 8001528:	4618      	mov	r0, r3
 800152a:	370c      	adds	r7, #12
 800152c:	46bd      	mov	sp, r7
 800152e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001532:	4770      	bx	lr
 8001534:	40022000 	.word	0x40022000
 8001538:	45670123 	.word	0x45670123
 800153c:	cdef89ab 	.word	0xcdef89ab

08001540 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8001540:	b480      	push	{r7}
 8001542:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8001544:	4b05      	ldr	r3, [pc, #20]	; (800155c <HAL_FLASH_Lock+0x1c>)
 8001546:	691b      	ldr	r3, [r3, #16]
 8001548:	4a04      	ldr	r2, [pc, #16]	; (800155c <HAL_FLASH_Lock+0x1c>)
 800154a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800154e:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8001550:	2300      	movs	r3, #0
}
 8001552:	4618      	mov	r0, r3
 8001554:	46bd      	mov	sp, r7
 8001556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155a:	4770      	bx	lr
 800155c:	40022000 	.word	0x40022000

08001560 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8001560:	b480      	push	{r7}
 8001562:	b083      	sub	sp, #12
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
 8001568:	460b      	mov	r3, r1
 800156a:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800156c:	4b08      	ldr	r3, [pc, #32]	; (8001590 <FLASH_Program_HalfWord+0x30>)
 800156e:	2200      	movs	r2, #0
 8001570:	61da      	str	r2, [r3, #28]
  
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8001572:	4b08      	ldr	r3, [pc, #32]	; (8001594 <FLASH_Program_HalfWord+0x34>)
 8001574:	691b      	ldr	r3, [r3, #16]
 8001576:	4a07      	ldr	r2, [pc, #28]	; (8001594 <FLASH_Program_HalfWord+0x34>)
 8001578:	f043 0301 	orr.w	r3, r3, #1
 800157c:	6113      	str	r3, [r2, #16]

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	887a      	ldrh	r2, [r7, #2]
 8001582:	801a      	strh	r2, [r3, #0]
}
 8001584:	bf00      	nop
 8001586:	370c      	adds	r7, #12
 8001588:	46bd      	mov	sp, r7
 800158a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158e:	4770      	bx	lr
 8001590:	20000258 	.word	0x20000258
 8001594:	40022000 	.word	0x40022000

08001598 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b084      	sub	sp, #16
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 80015a0:	f7ff fdce 	bl	8001140 <HAL_GetTick>
 80015a4:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80015a6:	e010      	b.n	80015ca <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015ae:	d00c      	beq.n	80015ca <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d007      	beq.n	80015c6 <FLASH_WaitForLastOperation+0x2e>
 80015b6:	f7ff fdc3 	bl	8001140 <HAL_GetTick>
 80015ba:	4602      	mov	r2, r0
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	1ad3      	subs	r3, r2, r3
 80015c0:	687a      	ldr	r2, [r7, #4]
 80015c2:	429a      	cmp	r2, r3
 80015c4:	d201      	bcs.n	80015ca <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 80015c6:	2303      	movs	r3, #3
 80015c8:	e01f      	b.n	800160a <FLASH_WaitForLastOperation+0x72>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80015ca:	4b12      	ldr	r3, [pc, #72]	; (8001614 <FLASH_WaitForLastOperation+0x7c>)
 80015cc:	68db      	ldr	r3, [r3, #12]
 80015ce:	f003 0301 	and.w	r3, r3, #1
 80015d2:	2b01      	cmp	r3, #1
 80015d4:	d0e8      	beq.n	80015a8 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 80015d6:	4b0f      	ldr	r3, [pc, #60]	; (8001614 <FLASH_WaitForLastOperation+0x7c>)
 80015d8:	68db      	ldr	r3, [r3, #12]
 80015da:	f003 0320 	and.w	r3, r3, #32
 80015de:	2b20      	cmp	r3, #32
 80015e0:	d102      	bne.n	80015e8 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80015e2:	4b0c      	ldr	r3, [pc, #48]	; (8001614 <FLASH_WaitForLastOperation+0x7c>)
 80015e4:	2220      	movs	r2, #32
 80015e6:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 80015e8:	4b0a      	ldr	r3, [pc, #40]	; (8001614 <FLASH_WaitForLastOperation+0x7c>)
 80015ea:	68db      	ldr	r3, [r3, #12]
 80015ec:	f003 0310 	and.w	r3, r3, #16
 80015f0:	2b10      	cmp	r3, #16
 80015f2:	d005      	beq.n	8001600 <FLASH_WaitForLastOperation+0x68>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80015f4:	4b07      	ldr	r3, [pc, #28]	; (8001614 <FLASH_WaitForLastOperation+0x7c>)
 80015f6:	68db      	ldr	r3, [r3, #12]
 80015f8:	f003 0304 	and.w	r3, r3, #4
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 80015fc:	2b04      	cmp	r3, #4
 80015fe:	d103      	bne.n	8001608 <FLASH_WaitForLastOperation+0x70>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8001600:	f000 f80a 	bl	8001618 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8001604:	2301      	movs	r3, #1
 8001606:	e000      	b.n	800160a <FLASH_WaitForLastOperation+0x72>
  }

  /* There is no error flag set */
  return HAL_OK;
 8001608:	2300      	movs	r3, #0
}
 800160a:	4618      	mov	r0, r3
 800160c:	3710      	adds	r7, #16
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}
 8001612:	bf00      	nop
 8001614:	40022000 	.word	0x40022000

08001618 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8001618:	b480      	push	{r7}
 800161a:	b083      	sub	sp, #12
 800161c:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 800161e:	2300      	movs	r3, #0
 8001620:	607b      	str	r3, [r7, #4]
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8001622:	4b14      	ldr	r3, [pc, #80]	; (8001674 <FLASH_SetErrorCode+0x5c>)
 8001624:	68db      	ldr	r3, [r3, #12]
 8001626:	f003 0310 	and.w	r3, r3, #16
 800162a:	2b10      	cmp	r3, #16
 800162c:	d109      	bne.n	8001642 <FLASH_SetErrorCode+0x2a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800162e:	4b12      	ldr	r3, [pc, #72]	; (8001678 <FLASH_SetErrorCode+0x60>)
 8001630:	69db      	ldr	r3, [r3, #28]
 8001632:	f043 0302 	orr.w	r3, r3, #2
 8001636:	4a10      	ldr	r2, [pc, #64]	; (8001678 <FLASH_SetErrorCode+0x60>)
 8001638:	61d3      	str	r3, [r2, #28]
    flags |= FLASH_FLAG_WRPERR;
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	f043 0310 	orr.w	r3, r3, #16
 8001640:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8001642:	4b0c      	ldr	r3, [pc, #48]	; (8001674 <FLASH_SetErrorCode+0x5c>)
 8001644:	68db      	ldr	r3, [r3, #12]
 8001646:	f003 0304 	and.w	r3, r3, #4
 800164a:	2b04      	cmp	r3, #4
 800164c:	d109      	bne.n	8001662 <FLASH_SetErrorCode+0x4a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 800164e:	4b0a      	ldr	r3, [pc, #40]	; (8001678 <FLASH_SetErrorCode+0x60>)
 8001650:	69db      	ldr	r3, [r3, #28]
 8001652:	f043 0301 	orr.w	r3, r3, #1
 8001656:	4a08      	ldr	r2, [pc, #32]	; (8001678 <FLASH_SetErrorCode+0x60>)
 8001658:	61d3      	str	r3, [r2, #28]
    flags |= FLASH_FLAG_PGERR;
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	f043 0304 	orr.w	r3, r3, #4
 8001660:	607b      	str	r3, [r7, #4]
  }
  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8001662:	4a04      	ldr	r2, [pc, #16]	; (8001674 <FLASH_SetErrorCode+0x5c>)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	60d3      	str	r3, [r2, #12]
}  
 8001668:	bf00      	nop
 800166a:	370c      	adds	r7, #12
 800166c:	46bd      	mov	sp, r7
 800166e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001672:	4770      	bx	lr
 8001674:	40022000 	.word	0x40022000
 8001678:	20000258 	.word	0x20000258

0800167c <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b084      	sub	sp, #16
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
 8001684:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001686:	2301      	movs	r3, #1
 8001688:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 800168a:	2300      	movs	r3, #0
 800168c:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800168e:	4b2e      	ldr	r3, [pc, #184]	; (8001748 <HAL_FLASHEx_Erase+0xcc>)
 8001690:	7e1b      	ldrb	r3, [r3, #24]
 8001692:	2b01      	cmp	r3, #1
 8001694:	d101      	bne.n	800169a <HAL_FLASHEx_Erase+0x1e>
 8001696:	2302      	movs	r3, #2
 8001698:	e052      	b.n	8001740 <HAL_FLASHEx_Erase+0xc4>
 800169a:	4b2b      	ldr	r3, [pc, #172]	; (8001748 <HAL_FLASHEx_Erase+0xcc>)
 800169c:	2201      	movs	r2, #1
 800169e:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	2b01      	cmp	r3, #1
 80016a6:	d115      	bne.n	80016d4 <HAL_FLASHEx_Erase+0x58>
  {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80016a8:	f24c 3050 	movw	r0, #50000	; 0xc350
 80016ac:	f7ff ff74 	bl	8001598 <FLASH_WaitForLastOperation>
 80016b0:	4603      	mov	r3, r0
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d140      	bne.n	8001738 <HAL_FLASHEx_Erase+0xbc>
      {
        /*Mass erase to be done*/
        FLASH_MassErase();
 80016b6:	f000 f84b 	bl	8001750 <FLASH_MassErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80016ba:	f24c 3050 	movw	r0, #50000	; 0xc350
 80016be:	f7ff ff6b 	bl	8001598 <FLASH_WaitForLastOperation>
 80016c2:	4603      	mov	r3, r0
 80016c4:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 80016c6:	4b21      	ldr	r3, [pc, #132]	; (800174c <HAL_FLASHEx_Erase+0xd0>)
 80016c8:	691b      	ldr	r3, [r3, #16]
 80016ca:	4a20      	ldr	r2, [pc, #128]	; (800174c <HAL_FLASHEx_Erase+0xd0>)
 80016cc:	f023 0304 	bic.w	r3, r3, #4
 80016d0:	6113      	str	r3, [r2, #16]
 80016d2:	e031      	b.n	8001738 <HAL_FLASHEx_Erase+0xbc>
    assert_param(IS_FLASH_PROGRAM_ADDRESS(pEraseInit->PageAddress));
    assert_param(IS_FLASH_NB_PAGES(pEraseInit->PageAddress, pEraseInit->NbPages));

      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80016d4:	f24c 3050 	movw	r0, #50000	; 0xc350
 80016d8:	f7ff ff5e 	bl	8001598 <FLASH_WaitForLastOperation>
 80016dc:	4603      	mov	r3, r0
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d12a      	bne.n	8001738 <HAL_FLASHEx_Erase+0xbc>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	f04f 32ff 	mov.w	r2, #4294967295
 80016e8:	601a      	str	r2, [r3, #0]

        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	685b      	ldr	r3, [r3, #4]
 80016ee:	60bb      	str	r3, [r7, #8]
 80016f0:	e019      	b.n	8001726 <HAL_FLASHEx_Erase+0xaa>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 80016f2:	68b8      	ldr	r0, [r7, #8]
 80016f4:	f000 f846 	bl	8001784 <FLASH_PageErase>

          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80016f8:	f24c 3050 	movw	r0, #50000	; 0xc350
 80016fc:	f7ff ff4c 	bl	8001598 <FLASH_WaitForLastOperation>
 8001700:	4603      	mov	r3, r0
 8001702:	73fb      	strb	r3, [r7, #15]

          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8001704:	4b11      	ldr	r3, [pc, #68]	; (800174c <HAL_FLASHEx_Erase+0xd0>)
 8001706:	691b      	ldr	r3, [r3, #16]
 8001708:	4a10      	ldr	r2, [pc, #64]	; (800174c <HAL_FLASHEx_Erase+0xd0>)
 800170a:	f023 0302 	bic.w	r3, r3, #2
 800170e:	6113      	str	r3, [r2, #16]

          if (status != HAL_OK)
 8001710:	7bfb      	ldrb	r3, [r7, #15]
 8001712:	2b00      	cmp	r3, #0
 8001714:	d003      	beq.n	800171e <HAL_FLASHEx_Erase+0xa2>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 8001716:	683b      	ldr	r3, [r7, #0]
 8001718:	68ba      	ldr	r2, [r7, #8]
 800171a:	601a      	str	r2, [r3, #0]
            break;
 800171c:	e00c      	b.n	8001738 <HAL_FLASHEx_Erase+0xbc>
            address += FLASH_PAGE_SIZE)
 800171e:	68bb      	ldr	r3, [r7, #8]
 8001720:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001724:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	689b      	ldr	r3, [r3, #8]
 800172a:	02da      	lsls	r2, r3, #11
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	685b      	ldr	r3, [r3, #4]
 8001730:	4413      	add	r3, r2
 8001732:	68ba      	ldr	r2, [r7, #8]
 8001734:	429a      	cmp	r2, r3
 8001736:	d3dc      	bcc.n	80016f2 <HAL_FLASHEx_Erase+0x76>
        }
      }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001738:	4b03      	ldr	r3, [pc, #12]	; (8001748 <HAL_FLASHEx_Erase+0xcc>)
 800173a:	2200      	movs	r2, #0
 800173c:	761a      	strb	r2, [r3, #24]

  return status;
 800173e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001740:	4618      	mov	r0, r3
 8001742:	3710      	adds	r7, #16
 8001744:	46bd      	mov	sp, r7
 8001746:	bd80      	pop	{r7, pc}
 8001748:	20000258 	.word	0x20000258
 800174c:	40022000 	.word	0x40022000

08001750 <FLASH_MassErase>:
  * @brief  Full erase of FLASH memory Bank
  *
  * @retval None
  */
static void FLASH_MassErase(void)
{
 8001750:	b480      	push	{r7}
 8001752:	af00      	add	r7, sp, #0
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001754:	4b09      	ldr	r3, [pc, #36]	; (800177c <FLASH_MassErase+0x2c>)
 8001756:	2200      	movs	r2, #0
 8001758:	61da      	str	r2, [r3, #28]

    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 800175a:	4b09      	ldr	r3, [pc, #36]	; (8001780 <FLASH_MassErase+0x30>)
 800175c:	691b      	ldr	r3, [r3, #16]
 800175e:	4a08      	ldr	r2, [pc, #32]	; (8001780 <FLASH_MassErase+0x30>)
 8001760:	f043 0304 	orr.w	r3, r3, #4
 8001764:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8001766:	4b06      	ldr	r3, [pc, #24]	; (8001780 <FLASH_MassErase+0x30>)
 8001768:	691b      	ldr	r3, [r3, #16]
 800176a:	4a05      	ldr	r2, [pc, #20]	; (8001780 <FLASH_MassErase+0x30>)
 800176c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001770:	6113      	str	r3, [r2, #16]
}
 8001772:	bf00      	nop
 8001774:	46bd      	mov	sp, r7
 8001776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177a:	4770      	bx	lr
 800177c:	20000258 	.word	0x20000258
 8001780:	40022000 	.word	0x40022000

08001784 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series
  *
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8001784:	b480      	push	{r7}
 8001786:	b083      	sub	sp, #12
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800178c:	4b0b      	ldr	r3, [pc, #44]	; (80017bc <FLASH_PageErase+0x38>)
 800178e:	2200      	movs	r2, #0
 8001790:	61da      	str	r2, [r3, #28]

    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8001792:	4b0b      	ldr	r3, [pc, #44]	; (80017c0 <FLASH_PageErase+0x3c>)
 8001794:	691b      	ldr	r3, [r3, #16]
 8001796:	4a0a      	ldr	r2, [pc, #40]	; (80017c0 <FLASH_PageErase+0x3c>)
 8001798:	f043 0302 	orr.w	r3, r3, #2
 800179c:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 800179e:	4a08      	ldr	r2, [pc, #32]	; (80017c0 <FLASH_PageErase+0x3c>)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80017a4:	4b06      	ldr	r3, [pc, #24]	; (80017c0 <FLASH_PageErase+0x3c>)
 80017a6:	691b      	ldr	r3, [r3, #16]
 80017a8:	4a05      	ldr	r2, [pc, #20]	; (80017c0 <FLASH_PageErase+0x3c>)
 80017aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80017ae:	6113      	str	r3, [r2, #16]
}
 80017b0:	bf00      	nop
 80017b2:	370c      	adds	r7, #12
 80017b4:	46bd      	mov	sp, r7
 80017b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ba:	4770      	bx	lr
 80017bc:	20000258 	.word	0x20000258
 80017c0:	40022000 	.word	0x40022000

080017c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017c4:	b480      	push	{r7}
 80017c6:	b087      	sub	sp, #28
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
 80017cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80017ce:	2300      	movs	r3, #0
 80017d0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017d2:	e160      	b.n	8001a96 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	681a      	ldr	r2, [r3, #0]
 80017d8:	2101      	movs	r1, #1
 80017da:	697b      	ldr	r3, [r7, #20]
 80017dc:	fa01 f303 	lsl.w	r3, r1, r3
 80017e0:	4013      	ands	r3, r2
 80017e2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	f000 8152 	beq.w	8001a90 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	685b      	ldr	r3, [r3, #4]
 80017f0:	f003 0303 	and.w	r3, r3, #3
 80017f4:	2b01      	cmp	r3, #1
 80017f6:	d005      	beq.n	8001804 <HAL_GPIO_Init+0x40>
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	685b      	ldr	r3, [r3, #4]
 80017fc:	f003 0303 	and.w	r3, r3, #3
 8001800:	2b02      	cmp	r3, #2
 8001802:	d130      	bne.n	8001866 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	689b      	ldr	r3, [r3, #8]
 8001808:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800180a:	697b      	ldr	r3, [r7, #20]
 800180c:	005b      	lsls	r3, r3, #1
 800180e:	2203      	movs	r2, #3
 8001810:	fa02 f303 	lsl.w	r3, r2, r3
 8001814:	43db      	mvns	r3, r3
 8001816:	693a      	ldr	r2, [r7, #16]
 8001818:	4013      	ands	r3, r2
 800181a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	68da      	ldr	r2, [r3, #12]
 8001820:	697b      	ldr	r3, [r7, #20]
 8001822:	005b      	lsls	r3, r3, #1
 8001824:	fa02 f303 	lsl.w	r3, r2, r3
 8001828:	693a      	ldr	r2, [r7, #16]
 800182a:	4313      	orrs	r3, r2
 800182c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	693a      	ldr	r2, [r7, #16]
 8001832:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	685b      	ldr	r3, [r3, #4]
 8001838:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800183a:	2201      	movs	r2, #1
 800183c:	697b      	ldr	r3, [r7, #20]
 800183e:	fa02 f303 	lsl.w	r3, r2, r3
 8001842:	43db      	mvns	r3, r3
 8001844:	693a      	ldr	r2, [r7, #16]
 8001846:	4013      	ands	r3, r2
 8001848:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	685b      	ldr	r3, [r3, #4]
 800184e:	091b      	lsrs	r3, r3, #4
 8001850:	f003 0201 	and.w	r2, r3, #1
 8001854:	697b      	ldr	r3, [r7, #20]
 8001856:	fa02 f303 	lsl.w	r3, r2, r3
 800185a:	693a      	ldr	r2, [r7, #16]
 800185c:	4313      	orrs	r3, r2
 800185e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	693a      	ldr	r2, [r7, #16]
 8001864:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	685b      	ldr	r3, [r3, #4]
 800186a:	f003 0303 	and.w	r3, r3, #3
 800186e:	2b03      	cmp	r3, #3
 8001870:	d017      	beq.n	80018a2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	68db      	ldr	r3, [r3, #12]
 8001876:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001878:	697b      	ldr	r3, [r7, #20]
 800187a:	005b      	lsls	r3, r3, #1
 800187c:	2203      	movs	r2, #3
 800187e:	fa02 f303 	lsl.w	r3, r2, r3
 8001882:	43db      	mvns	r3, r3
 8001884:	693a      	ldr	r2, [r7, #16]
 8001886:	4013      	ands	r3, r2
 8001888:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	689a      	ldr	r2, [r3, #8]
 800188e:	697b      	ldr	r3, [r7, #20]
 8001890:	005b      	lsls	r3, r3, #1
 8001892:	fa02 f303 	lsl.w	r3, r2, r3
 8001896:	693a      	ldr	r2, [r7, #16]
 8001898:	4313      	orrs	r3, r2
 800189a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	693a      	ldr	r2, [r7, #16]
 80018a0:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	685b      	ldr	r3, [r3, #4]
 80018a6:	f003 0303 	and.w	r3, r3, #3
 80018aa:	2b02      	cmp	r3, #2
 80018ac:	d123      	bne.n	80018f6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80018ae:	697b      	ldr	r3, [r7, #20]
 80018b0:	08da      	lsrs	r2, r3, #3
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	3208      	adds	r2, #8
 80018b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018ba:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80018bc:	697b      	ldr	r3, [r7, #20]
 80018be:	f003 0307 	and.w	r3, r3, #7
 80018c2:	009b      	lsls	r3, r3, #2
 80018c4:	220f      	movs	r2, #15
 80018c6:	fa02 f303 	lsl.w	r3, r2, r3
 80018ca:	43db      	mvns	r3, r3
 80018cc:	693a      	ldr	r2, [r7, #16]
 80018ce:	4013      	ands	r3, r2
 80018d0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	691a      	ldr	r2, [r3, #16]
 80018d6:	697b      	ldr	r3, [r7, #20]
 80018d8:	f003 0307 	and.w	r3, r3, #7
 80018dc:	009b      	lsls	r3, r3, #2
 80018de:	fa02 f303 	lsl.w	r3, r2, r3
 80018e2:	693a      	ldr	r2, [r7, #16]
 80018e4:	4313      	orrs	r3, r2
 80018e6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80018e8:	697b      	ldr	r3, [r7, #20]
 80018ea:	08da      	lsrs	r2, r3, #3
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	3208      	adds	r2, #8
 80018f0:	6939      	ldr	r1, [r7, #16]
 80018f2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80018fc:	697b      	ldr	r3, [r7, #20]
 80018fe:	005b      	lsls	r3, r3, #1
 8001900:	2203      	movs	r2, #3
 8001902:	fa02 f303 	lsl.w	r3, r2, r3
 8001906:	43db      	mvns	r3, r3
 8001908:	693a      	ldr	r2, [r7, #16]
 800190a:	4013      	ands	r3, r2
 800190c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	685b      	ldr	r3, [r3, #4]
 8001912:	f003 0203 	and.w	r2, r3, #3
 8001916:	697b      	ldr	r3, [r7, #20]
 8001918:	005b      	lsls	r3, r3, #1
 800191a:	fa02 f303 	lsl.w	r3, r2, r3
 800191e:	693a      	ldr	r2, [r7, #16]
 8001920:	4313      	orrs	r3, r2
 8001922:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	693a      	ldr	r2, [r7, #16]
 8001928:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	685b      	ldr	r3, [r3, #4]
 800192e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001932:	2b00      	cmp	r3, #0
 8001934:	f000 80ac 	beq.w	8001a90 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001938:	4b5e      	ldr	r3, [pc, #376]	; (8001ab4 <HAL_GPIO_Init+0x2f0>)
 800193a:	699b      	ldr	r3, [r3, #24]
 800193c:	4a5d      	ldr	r2, [pc, #372]	; (8001ab4 <HAL_GPIO_Init+0x2f0>)
 800193e:	f043 0301 	orr.w	r3, r3, #1
 8001942:	6193      	str	r3, [r2, #24]
 8001944:	4b5b      	ldr	r3, [pc, #364]	; (8001ab4 <HAL_GPIO_Init+0x2f0>)
 8001946:	699b      	ldr	r3, [r3, #24]
 8001948:	f003 0301 	and.w	r3, r3, #1
 800194c:	60bb      	str	r3, [r7, #8]
 800194e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001950:	4a59      	ldr	r2, [pc, #356]	; (8001ab8 <HAL_GPIO_Init+0x2f4>)
 8001952:	697b      	ldr	r3, [r7, #20]
 8001954:	089b      	lsrs	r3, r3, #2
 8001956:	3302      	adds	r3, #2
 8001958:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800195c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800195e:	697b      	ldr	r3, [r7, #20]
 8001960:	f003 0303 	and.w	r3, r3, #3
 8001964:	009b      	lsls	r3, r3, #2
 8001966:	220f      	movs	r2, #15
 8001968:	fa02 f303 	lsl.w	r3, r2, r3
 800196c:	43db      	mvns	r3, r3
 800196e:	693a      	ldr	r2, [r7, #16]
 8001970:	4013      	ands	r3, r2
 8001972:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800197a:	d025      	beq.n	80019c8 <HAL_GPIO_Init+0x204>
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	4a4f      	ldr	r2, [pc, #316]	; (8001abc <HAL_GPIO_Init+0x2f8>)
 8001980:	4293      	cmp	r3, r2
 8001982:	d01f      	beq.n	80019c4 <HAL_GPIO_Init+0x200>
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	4a4e      	ldr	r2, [pc, #312]	; (8001ac0 <HAL_GPIO_Init+0x2fc>)
 8001988:	4293      	cmp	r3, r2
 800198a:	d019      	beq.n	80019c0 <HAL_GPIO_Init+0x1fc>
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	4a4d      	ldr	r2, [pc, #308]	; (8001ac4 <HAL_GPIO_Init+0x300>)
 8001990:	4293      	cmp	r3, r2
 8001992:	d013      	beq.n	80019bc <HAL_GPIO_Init+0x1f8>
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	4a4c      	ldr	r2, [pc, #304]	; (8001ac8 <HAL_GPIO_Init+0x304>)
 8001998:	4293      	cmp	r3, r2
 800199a:	d00d      	beq.n	80019b8 <HAL_GPIO_Init+0x1f4>
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	4a4b      	ldr	r2, [pc, #300]	; (8001acc <HAL_GPIO_Init+0x308>)
 80019a0:	4293      	cmp	r3, r2
 80019a2:	d007      	beq.n	80019b4 <HAL_GPIO_Init+0x1f0>
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	4a4a      	ldr	r2, [pc, #296]	; (8001ad0 <HAL_GPIO_Init+0x30c>)
 80019a8:	4293      	cmp	r3, r2
 80019aa:	d101      	bne.n	80019b0 <HAL_GPIO_Init+0x1ec>
 80019ac:	2306      	movs	r3, #6
 80019ae:	e00c      	b.n	80019ca <HAL_GPIO_Init+0x206>
 80019b0:	2307      	movs	r3, #7
 80019b2:	e00a      	b.n	80019ca <HAL_GPIO_Init+0x206>
 80019b4:	2305      	movs	r3, #5
 80019b6:	e008      	b.n	80019ca <HAL_GPIO_Init+0x206>
 80019b8:	2304      	movs	r3, #4
 80019ba:	e006      	b.n	80019ca <HAL_GPIO_Init+0x206>
 80019bc:	2303      	movs	r3, #3
 80019be:	e004      	b.n	80019ca <HAL_GPIO_Init+0x206>
 80019c0:	2302      	movs	r3, #2
 80019c2:	e002      	b.n	80019ca <HAL_GPIO_Init+0x206>
 80019c4:	2301      	movs	r3, #1
 80019c6:	e000      	b.n	80019ca <HAL_GPIO_Init+0x206>
 80019c8:	2300      	movs	r3, #0
 80019ca:	697a      	ldr	r2, [r7, #20]
 80019cc:	f002 0203 	and.w	r2, r2, #3
 80019d0:	0092      	lsls	r2, r2, #2
 80019d2:	4093      	lsls	r3, r2
 80019d4:	693a      	ldr	r2, [r7, #16]
 80019d6:	4313      	orrs	r3, r2
 80019d8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80019da:	4937      	ldr	r1, [pc, #220]	; (8001ab8 <HAL_GPIO_Init+0x2f4>)
 80019dc:	697b      	ldr	r3, [r7, #20]
 80019de:	089b      	lsrs	r3, r3, #2
 80019e0:	3302      	adds	r3, #2
 80019e2:	693a      	ldr	r2, [r7, #16]
 80019e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80019e8:	4b3a      	ldr	r3, [pc, #232]	; (8001ad4 <HAL_GPIO_Init+0x310>)
 80019ea:	689b      	ldr	r3, [r3, #8]
 80019ec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	43db      	mvns	r3, r3
 80019f2:	693a      	ldr	r2, [r7, #16]
 80019f4:	4013      	ands	r3, r2
 80019f6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	685b      	ldr	r3, [r3, #4]
 80019fc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d003      	beq.n	8001a0c <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8001a04:	693a      	ldr	r2, [r7, #16]
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	4313      	orrs	r3, r2
 8001a0a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001a0c:	4a31      	ldr	r2, [pc, #196]	; (8001ad4 <HAL_GPIO_Init+0x310>)
 8001a0e:	693b      	ldr	r3, [r7, #16]
 8001a10:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001a12:	4b30      	ldr	r3, [pc, #192]	; (8001ad4 <HAL_GPIO_Init+0x310>)
 8001a14:	68db      	ldr	r3, [r3, #12]
 8001a16:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	43db      	mvns	r3, r3
 8001a1c:	693a      	ldr	r2, [r7, #16]
 8001a1e:	4013      	ands	r3, r2
 8001a20:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001a22:	683b      	ldr	r3, [r7, #0]
 8001a24:	685b      	ldr	r3, [r3, #4]
 8001a26:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d003      	beq.n	8001a36 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8001a2e:	693a      	ldr	r2, [r7, #16]
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	4313      	orrs	r3, r2
 8001a34:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001a36:	4a27      	ldr	r2, [pc, #156]	; (8001ad4 <HAL_GPIO_Init+0x310>)
 8001a38:	693b      	ldr	r3, [r7, #16]
 8001a3a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001a3c:	4b25      	ldr	r3, [pc, #148]	; (8001ad4 <HAL_GPIO_Init+0x310>)
 8001a3e:	685b      	ldr	r3, [r3, #4]
 8001a40:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	43db      	mvns	r3, r3
 8001a46:	693a      	ldr	r2, [r7, #16]
 8001a48:	4013      	ands	r3, r2
 8001a4a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	685b      	ldr	r3, [r3, #4]
 8001a50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d003      	beq.n	8001a60 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8001a58:	693a      	ldr	r2, [r7, #16]
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	4313      	orrs	r3, r2
 8001a5e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001a60:	4a1c      	ldr	r2, [pc, #112]	; (8001ad4 <HAL_GPIO_Init+0x310>)
 8001a62:	693b      	ldr	r3, [r7, #16]
 8001a64:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a66:	4b1b      	ldr	r3, [pc, #108]	; (8001ad4 <HAL_GPIO_Init+0x310>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	43db      	mvns	r3, r3
 8001a70:	693a      	ldr	r2, [r7, #16]
 8001a72:	4013      	ands	r3, r2
 8001a74:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	685b      	ldr	r3, [r3, #4]
 8001a7a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d003      	beq.n	8001a8a <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8001a82:	693a      	ldr	r2, [r7, #16]
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	4313      	orrs	r3, r2
 8001a88:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001a8a:	4a12      	ldr	r2, [pc, #72]	; (8001ad4 <HAL_GPIO_Init+0x310>)
 8001a8c:	693b      	ldr	r3, [r7, #16]
 8001a8e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001a90:	697b      	ldr	r3, [r7, #20]
 8001a92:	3301      	adds	r3, #1
 8001a94:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	681a      	ldr	r2, [r3, #0]
 8001a9a:	697b      	ldr	r3, [r7, #20]
 8001a9c:	fa22 f303 	lsr.w	r3, r2, r3
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	f47f ae97 	bne.w	80017d4 <HAL_GPIO_Init+0x10>
  }
}
 8001aa6:	bf00      	nop
 8001aa8:	bf00      	nop
 8001aaa:	371c      	adds	r7, #28
 8001aac:	46bd      	mov	sp, r7
 8001aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab2:	4770      	bx	lr
 8001ab4:	40021000 	.word	0x40021000
 8001ab8:	40010000 	.word	0x40010000
 8001abc:	48000400 	.word	0x48000400
 8001ac0:	48000800 	.word	0x48000800
 8001ac4:	48000c00 	.word	0x48000c00
 8001ac8:	48001000 	.word	0x48001000
 8001acc:	48001400 	.word	0x48001400
 8001ad0:	48001800 	.word	0x48001800
 8001ad4:	40010400 	.word	0x40010400

08001ad8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	b085      	sub	sp, #20
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
 8001ae0:	460b      	mov	r3, r1
 8001ae2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	691a      	ldr	r2, [r3, #16]
 8001ae8:	887b      	ldrh	r3, [r7, #2]
 8001aea:	4013      	ands	r3, r2
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d002      	beq.n	8001af6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001af0:	2301      	movs	r3, #1
 8001af2:	73fb      	strb	r3, [r7, #15]
 8001af4:	e001      	b.n	8001afa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001af6:	2300      	movs	r3, #0
 8001af8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001afa:	7bfb      	ldrb	r3, [r7, #15]
}
 8001afc:	4618      	mov	r0, r3
 8001afe:	3714      	adds	r7, #20
 8001b00:	46bd      	mov	sp, r7
 8001b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b06:	4770      	bx	lr

08001b08 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b082      	sub	sp, #8
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	4603      	mov	r3, r0
 8001b10:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001b12:	4b08      	ldr	r3, [pc, #32]	; (8001b34 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001b14:	695a      	ldr	r2, [r3, #20]
 8001b16:	88fb      	ldrh	r3, [r7, #6]
 8001b18:	4013      	ands	r3, r2
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d006      	beq.n	8001b2c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001b1e:	4a05      	ldr	r2, [pc, #20]	; (8001b34 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001b20:	88fb      	ldrh	r3, [r7, #6]
 8001b22:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001b24:	88fb      	ldrh	r3, [r7, #6]
 8001b26:	4618      	mov	r0, r3
 8001b28:	f000 f806 	bl	8001b38 <HAL_GPIO_EXTI_Callback>
  }
}
 8001b2c:	bf00      	nop
 8001b2e:	3708      	adds	r7, #8
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bd80      	pop	{r7, pc}
 8001b34:	40010400 	.word	0x40010400

08001b38 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	b083      	sub	sp, #12
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	4603      	mov	r3, r0
 8001b40:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001b42:	bf00      	nop
 8001b44:	370c      	adds	r7, #12
 8001b46:	46bd      	mov	sp, r7
 8001b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4c:	4770      	bx	lr
	...

08001b50 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8001b56:	af00      	add	r7, sp, #0
 8001b58:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b5c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001b60:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001b62:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b66:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d102      	bne.n	8001b76 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001b70:	2301      	movs	r3, #1
 8001b72:	f001 b83a 	b.w	8002bea <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b76:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b7a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f003 0301 	and.w	r3, r3, #1
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	f000 816f 	beq.w	8001e6a <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001b8c:	4bb5      	ldr	r3, [pc, #724]	; (8001e64 <HAL_RCC_OscConfig+0x314>)
 8001b8e:	685b      	ldr	r3, [r3, #4]
 8001b90:	f003 030c 	and.w	r3, r3, #12
 8001b94:	2b04      	cmp	r3, #4
 8001b96:	d00c      	beq.n	8001bb2 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001b98:	4bb2      	ldr	r3, [pc, #712]	; (8001e64 <HAL_RCC_OscConfig+0x314>)
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	f003 030c 	and.w	r3, r3, #12
 8001ba0:	2b08      	cmp	r3, #8
 8001ba2:	d15c      	bne.n	8001c5e <HAL_RCC_OscConfig+0x10e>
 8001ba4:	4baf      	ldr	r3, [pc, #700]	; (8001e64 <HAL_RCC_OscConfig+0x314>)
 8001ba6:	685b      	ldr	r3, [r3, #4]
 8001ba8:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8001bac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001bb0:	d155      	bne.n	8001c5e <HAL_RCC_OscConfig+0x10e>
 8001bb2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001bb6:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bba:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001bbe:	fa93 f3a3 	rbit	r3, r3
 8001bc2:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001bc6:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bca:	fab3 f383 	clz	r3, r3
 8001bce:	b2db      	uxtb	r3, r3
 8001bd0:	095b      	lsrs	r3, r3, #5
 8001bd2:	b2db      	uxtb	r3, r3
 8001bd4:	f043 0301 	orr.w	r3, r3, #1
 8001bd8:	b2db      	uxtb	r3, r3
 8001bda:	2b01      	cmp	r3, #1
 8001bdc:	d102      	bne.n	8001be4 <HAL_RCC_OscConfig+0x94>
 8001bde:	4ba1      	ldr	r3, [pc, #644]	; (8001e64 <HAL_RCC_OscConfig+0x314>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	e015      	b.n	8001c10 <HAL_RCC_OscConfig+0xc0>
 8001be4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001be8:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bec:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8001bf0:	fa93 f3a3 	rbit	r3, r3
 8001bf4:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8001bf8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001bfc:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001c00:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8001c04:	fa93 f3a3 	rbit	r3, r3
 8001c08:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001c0c:	4b95      	ldr	r3, [pc, #596]	; (8001e64 <HAL_RCC_OscConfig+0x314>)
 8001c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c10:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001c14:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8001c18:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8001c1c:	fa92 f2a2 	rbit	r2, r2
 8001c20:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8001c24:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001c28:	fab2 f282 	clz	r2, r2
 8001c2c:	b2d2      	uxtb	r2, r2
 8001c2e:	f042 0220 	orr.w	r2, r2, #32
 8001c32:	b2d2      	uxtb	r2, r2
 8001c34:	f002 021f 	and.w	r2, r2, #31
 8001c38:	2101      	movs	r1, #1
 8001c3a:	fa01 f202 	lsl.w	r2, r1, r2
 8001c3e:	4013      	ands	r3, r2
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	f000 8111 	beq.w	8001e68 <HAL_RCC_OscConfig+0x318>
 8001c46:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c4a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	685b      	ldr	r3, [r3, #4]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	f040 8108 	bne.w	8001e68 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 8001c58:	2301      	movs	r3, #1
 8001c5a:	f000 bfc6 	b.w	8002bea <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c5e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c62:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	685b      	ldr	r3, [r3, #4]
 8001c6a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c6e:	d106      	bne.n	8001c7e <HAL_RCC_OscConfig+0x12e>
 8001c70:	4b7c      	ldr	r3, [pc, #496]	; (8001e64 <HAL_RCC_OscConfig+0x314>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	4a7b      	ldr	r2, [pc, #492]	; (8001e64 <HAL_RCC_OscConfig+0x314>)
 8001c76:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c7a:	6013      	str	r3, [r2, #0]
 8001c7c:	e036      	b.n	8001cec <HAL_RCC_OscConfig+0x19c>
 8001c7e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c82:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	685b      	ldr	r3, [r3, #4]
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d10c      	bne.n	8001ca8 <HAL_RCC_OscConfig+0x158>
 8001c8e:	4b75      	ldr	r3, [pc, #468]	; (8001e64 <HAL_RCC_OscConfig+0x314>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	4a74      	ldr	r2, [pc, #464]	; (8001e64 <HAL_RCC_OscConfig+0x314>)
 8001c94:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c98:	6013      	str	r3, [r2, #0]
 8001c9a:	4b72      	ldr	r3, [pc, #456]	; (8001e64 <HAL_RCC_OscConfig+0x314>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	4a71      	ldr	r2, [pc, #452]	; (8001e64 <HAL_RCC_OscConfig+0x314>)
 8001ca0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ca4:	6013      	str	r3, [r2, #0]
 8001ca6:	e021      	b.n	8001cec <HAL_RCC_OscConfig+0x19c>
 8001ca8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001cac:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001cb8:	d10c      	bne.n	8001cd4 <HAL_RCC_OscConfig+0x184>
 8001cba:	4b6a      	ldr	r3, [pc, #424]	; (8001e64 <HAL_RCC_OscConfig+0x314>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	4a69      	ldr	r2, [pc, #420]	; (8001e64 <HAL_RCC_OscConfig+0x314>)
 8001cc0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001cc4:	6013      	str	r3, [r2, #0]
 8001cc6:	4b67      	ldr	r3, [pc, #412]	; (8001e64 <HAL_RCC_OscConfig+0x314>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	4a66      	ldr	r2, [pc, #408]	; (8001e64 <HAL_RCC_OscConfig+0x314>)
 8001ccc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cd0:	6013      	str	r3, [r2, #0]
 8001cd2:	e00b      	b.n	8001cec <HAL_RCC_OscConfig+0x19c>
 8001cd4:	4b63      	ldr	r3, [pc, #396]	; (8001e64 <HAL_RCC_OscConfig+0x314>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4a62      	ldr	r2, [pc, #392]	; (8001e64 <HAL_RCC_OscConfig+0x314>)
 8001cda:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001cde:	6013      	str	r3, [r2, #0]
 8001ce0:	4b60      	ldr	r3, [pc, #384]	; (8001e64 <HAL_RCC_OscConfig+0x314>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4a5f      	ldr	r2, [pc, #380]	; (8001e64 <HAL_RCC_OscConfig+0x314>)
 8001ce6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001cea:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001cec:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001cf0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	685b      	ldr	r3, [r3, #4]
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d059      	beq.n	8001db0 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cfc:	f7ff fa20 	bl	8001140 <HAL_GetTick>
 8001d00:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d04:	e00a      	b.n	8001d1c <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d06:	f7ff fa1b 	bl	8001140 <HAL_GetTick>
 8001d0a:	4602      	mov	r2, r0
 8001d0c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001d10:	1ad3      	subs	r3, r2, r3
 8001d12:	2b64      	cmp	r3, #100	; 0x64
 8001d14:	d902      	bls.n	8001d1c <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8001d16:	2303      	movs	r3, #3
 8001d18:	f000 bf67 	b.w	8002bea <HAL_RCC_OscConfig+0x109a>
 8001d1c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d20:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d24:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8001d28:	fa93 f3a3 	rbit	r3, r3
 8001d2c:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8001d30:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d34:	fab3 f383 	clz	r3, r3
 8001d38:	b2db      	uxtb	r3, r3
 8001d3a:	095b      	lsrs	r3, r3, #5
 8001d3c:	b2db      	uxtb	r3, r3
 8001d3e:	f043 0301 	orr.w	r3, r3, #1
 8001d42:	b2db      	uxtb	r3, r3
 8001d44:	2b01      	cmp	r3, #1
 8001d46:	d102      	bne.n	8001d4e <HAL_RCC_OscConfig+0x1fe>
 8001d48:	4b46      	ldr	r3, [pc, #280]	; (8001e64 <HAL_RCC_OscConfig+0x314>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	e015      	b.n	8001d7a <HAL_RCC_OscConfig+0x22a>
 8001d4e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d52:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d56:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8001d5a:	fa93 f3a3 	rbit	r3, r3
 8001d5e:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8001d62:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d66:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001d6a:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8001d6e:	fa93 f3a3 	rbit	r3, r3
 8001d72:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001d76:	4b3b      	ldr	r3, [pc, #236]	; (8001e64 <HAL_RCC_OscConfig+0x314>)
 8001d78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d7a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001d7e:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8001d82:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8001d86:	fa92 f2a2 	rbit	r2, r2
 8001d8a:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8001d8e:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001d92:	fab2 f282 	clz	r2, r2
 8001d96:	b2d2      	uxtb	r2, r2
 8001d98:	f042 0220 	orr.w	r2, r2, #32
 8001d9c:	b2d2      	uxtb	r2, r2
 8001d9e:	f002 021f 	and.w	r2, r2, #31
 8001da2:	2101      	movs	r1, #1
 8001da4:	fa01 f202 	lsl.w	r2, r1, r2
 8001da8:	4013      	ands	r3, r2
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d0ab      	beq.n	8001d06 <HAL_RCC_OscConfig+0x1b6>
 8001dae:	e05c      	b.n	8001e6a <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001db0:	f7ff f9c6 	bl	8001140 <HAL_GetTick>
 8001db4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001db8:	e00a      	b.n	8001dd0 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001dba:	f7ff f9c1 	bl	8001140 <HAL_GetTick>
 8001dbe:	4602      	mov	r2, r0
 8001dc0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001dc4:	1ad3      	subs	r3, r2, r3
 8001dc6:	2b64      	cmp	r3, #100	; 0x64
 8001dc8:	d902      	bls.n	8001dd0 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 8001dca:	2303      	movs	r3, #3
 8001dcc:	f000 bf0d 	b.w	8002bea <HAL_RCC_OscConfig+0x109a>
 8001dd0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001dd4:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dd8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8001ddc:	fa93 f3a3 	rbit	r3, r3
 8001de0:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8001de4:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001de8:	fab3 f383 	clz	r3, r3
 8001dec:	b2db      	uxtb	r3, r3
 8001dee:	095b      	lsrs	r3, r3, #5
 8001df0:	b2db      	uxtb	r3, r3
 8001df2:	f043 0301 	orr.w	r3, r3, #1
 8001df6:	b2db      	uxtb	r3, r3
 8001df8:	2b01      	cmp	r3, #1
 8001dfa:	d102      	bne.n	8001e02 <HAL_RCC_OscConfig+0x2b2>
 8001dfc:	4b19      	ldr	r3, [pc, #100]	; (8001e64 <HAL_RCC_OscConfig+0x314>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	e015      	b.n	8001e2e <HAL_RCC_OscConfig+0x2de>
 8001e02:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e06:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e0a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8001e0e:	fa93 f3a3 	rbit	r3, r3
 8001e12:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8001e16:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e1a:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001e1e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8001e22:	fa93 f3a3 	rbit	r3, r3
 8001e26:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001e2a:	4b0e      	ldr	r3, [pc, #56]	; (8001e64 <HAL_RCC_OscConfig+0x314>)
 8001e2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e2e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001e32:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8001e36:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8001e3a:	fa92 f2a2 	rbit	r2, r2
 8001e3e:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8001e42:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001e46:	fab2 f282 	clz	r2, r2
 8001e4a:	b2d2      	uxtb	r2, r2
 8001e4c:	f042 0220 	orr.w	r2, r2, #32
 8001e50:	b2d2      	uxtb	r2, r2
 8001e52:	f002 021f 	and.w	r2, r2, #31
 8001e56:	2101      	movs	r1, #1
 8001e58:	fa01 f202 	lsl.w	r2, r1, r2
 8001e5c:	4013      	ands	r3, r2
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d1ab      	bne.n	8001dba <HAL_RCC_OscConfig+0x26a>
 8001e62:	e002      	b.n	8001e6a <HAL_RCC_OscConfig+0x31a>
 8001e64:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e68:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e6a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e6e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f003 0302 	and.w	r3, r3, #2
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	f000 817f 	beq.w	800217e <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001e80:	4ba7      	ldr	r3, [pc, #668]	; (8002120 <HAL_RCC_OscConfig+0x5d0>)
 8001e82:	685b      	ldr	r3, [r3, #4]
 8001e84:	f003 030c 	and.w	r3, r3, #12
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d00c      	beq.n	8001ea6 <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001e8c:	4ba4      	ldr	r3, [pc, #656]	; (8002120 <HAL_RCC_OscConfig+0x5d0>)
 8001e8e:	685b      	ldr	r3, [r3, #4]
 8001e90:	f003 030c 	and.w	r3, r3, #12
 8001e94:	2b08      	cmp	r3, #8
 8001e96:	d173      	bne.n	8001f80 <HAL_RCC_OscConfig+0x430>
 8001e98:	4ba1      	ldr	r3, [pc, #644]	; (8002120 <HAL_RCC_OscConfig+0x5d0>)
 8001e9a:	685b      	ldr	r3, [r3, #4]
 8001e9c:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8001ea0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001ea4:	d16c      	bne.n	8001f80 <HAL_RCC_OscConfig+0x430>
 8001ea6:	2302      	movs	r3, #2
 8001ea8:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eac:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8001eb0:	fa93 f3a3 	rbit	r3, r3
 8001eb4:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8001eb8:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ebc:	fab3 f383 	clz	r3, r3
 8001ec0:	b2db      	uxtb	r3, r3
 8001ec2:	095b      	lsrs	r3, r3, #5
 8001ec4:	b2db      	uxtb	r3, r3
 8001ec6:	f043 0301 	orr.w	r3, r3, #1
 8001eca:	b2db      	uxtb	r3, r3
 8001ecc:	2b01      	cmp	r3, #1
 8001ece:	d102      	bne.n	8001ed6 <HAL_RCC_OscConfig+0x386>
 8001ed0:	4b93      	ldr	r3, [pc, #588]	; (8002120 <HAL_RCC_OscConfig+0x5d0>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	e013      	b.n	8001efe <HAL_RCC_OscConfig+0x3ae>
 8001ed6:	2302      	movs	r3, #2
 8001ed8:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001edc:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8001ee0:	fa93 f3a3 	rbit	r3, r3
 8001ee4:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8001ee8:	2302      	movs	r3, #2
 8001eea:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001eee:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8001ef2:	fa93 f3a3 	rbit	r3, r3
 8001ef6:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001efa:	4b89      	ldr	r3, [pc, #548]	; (8002120 <HAL_RCC_OscConfig+0x5d0>)
 8001efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001efe:	2202      	movs	r2, #2
 8001f00:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8001f04:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8001f08:	fa92 f2a2 	rbit	r2, r2
 8001f0c:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8001f10:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001f14:	fab2 f282 	clz	r2, r2
 8001f18:	b2d2      	uxtb	r2, r2
 8001f1a:	f042 0220 	orr.w	r2, r2, #32
 8001f1e:	b2d2      	uxtb	r2, r2
 8001f20:	f002 021f 	and.w	r2, r2, #31
 8001f24:	2101      	movs	r1, #1
 8001f26:	fa01 f202 	lsl.w	r2, r1, r2
 8001f2a:	4013      	ands	r3, r2
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d00a      	beq.n	8001f46 <HAL_RCC_OscConfig+0x3f6>
 8001f30:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f34:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	68db      	ldr	r3, [r3, #12]
 8001f3c:	2b01      	cmp	r3, #1
 8001f3e:	d002      	beq.n	8001f46 <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 8001f40:	2301      	movs	r3, #1
 8001f42:	f000 be52 	b.w	8002bea <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f46:	4b76      	ldr	r3, [pc, #472]	; (8002120 <HAL_RCC_OscConfig+0x5d0>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f4e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f52:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	691b      	ldr	r3, [r3, #16]
 8001f5a:	21f8      	movs	r1, #248	; 0xf8
 8001f5c:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f60:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8001f64:	fa91 f1a1 	rbit	r1, r1
 8001f68:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8001f6c:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001f70:	fab1 f181 	clz	r1, r1
 8001f74:	b2c9      	uxtb	r1, r1
 8001f76:	408b      	lsls	r3, r1
 8001f78:	4969      	ldr	r1, [pc, #420]	; (8002120 <HAL_RCC_OscConfig+0x5d0>)
 8001f7a:	4313      	orrs	r3, r2
 8001f7c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f7e:	e0fe      	b.n	800217e <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f80:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f84:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	68db      	ldr	r3, [r3, #12]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	f000 8088 	beq.w	80020a2 <HAL_RCC_OscConfig+0x552>
 8001f92:	2301      	movs	r3, #1
 8001f94:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f98:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8001f9c:	fa93 f3a3 	rbit	r3, r3
 8001fa0:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8001fa4:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001fa8:	fab3 f383 	clz	r3, r3
 8001fac:	b2db      	uxtb	r3, r3
 8001fae:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001fb2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001fb6:	009b      	lsls	r3, r3, #2
 8001fb8:	461a      	mov	r2, r3
 8001fba:	2301      	movs	r3, #1
 8001fbc:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fbe:	f7ff f8bf 	bl	8001140 <HAL_GetTick>
 8001fc2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fc6:	e00a      	b.n	8001fde <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001fc8:	f7ff f8ba 	bl	8001140 <HAL_GetTick>
 8001fcc:	4602      	mov	r2, r0
 8001fce:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001fd2:	1ad3      	subs	r3, r2, r3
 8001fd4:	2b02      	cmp	r3, #2
 8001fd6:	d902      	bls.n	8001fde <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8001fd8:	2303      	movs	r3, #3
 8001fda:	f000 be06 	b.w	8002bea <HAL_RCC_OscConfig+0x109a>
 8001fde:	2302      	movs	r3, #2
 8001fe0:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fe4:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8001fe8:	fa93 f3a3 	rbit	r3, r3
 8001fec:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8001ff0:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ff4:	fab3 f383 	clz	r3, r3
 8001ff8:	b2db      	uxtb	r3, r3
 8001ffa:	095b      	lsrs	r3, r3, #5
 8001ffc:	b2db      	uxtb	r3, r3
 8001ffe:	f043 0301 	orr.w	r3, r3, #1
 8002002:	b2db      	uxtb	r3, r3
 8002004:	2b01      	cmp	r3, #1
 8002006:	d102      	bne.n	800200e <HAL_RCC_OscConfig+0x4be>
 8002008:	4b45      	ldr	r3, [pc, #276]	; (8002120 <HAL_RCC_OscConfig+0x5d0>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	e013      	b.n	8002036 <HAL_RCC_OscConfig+0x4e6>
 800200e:	2302      	movs	r3, #2
 8002010:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002014:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8002018:	fa93 f3a3 	rbit	r3, r3
 800201c:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8002020:	2302      	movs	r3, #2
 8002022:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002026:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800202a:	fa93 f3a3 	rbit	r3, r3
 800202e:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002032:	4b3b      	ldr	r3, [pc, #236]	; (8002120 <HAL_RCC_OscConfig+0x5d0>)
 8002034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002036:	2202      	movs	r2, #2
 8002038:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 800203c:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8002040:	fa92 f2a2 	rbit	r2, r2
 8002044:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8002048:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800204c:	fab2 f282 	clz	r2, r2
 8002050:	b2d2      	uxtb	r2, r2
 8002052:	f042 0220 	orr.w	r2, r2, #32
 8002056:	b2d2      	uxtb	r2, r2
 8002058:	f002 021f 	and.w	r2, r2, #31
 800205c:	2101      	movs	r1, #1
 800205e:	fa01 f202 	lsl.w	r2, r1, r2
 8002062:	4013      	ands	r3, r2
 8002064:	2b00      	cmp	r3, #0
 8002066:	d0af      	beq.n	8001fc8 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002068:	4b2d      	ldr	r3, [pc, #180]	; (8002120 <HAL_RCC_OscConfig+0x5d0>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002070:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002074:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	691b      	ldr	r3, [r3, #16]
 800207c:	21f8      	movs	r1, #248	; 0xf8
 800207e:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002082:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8002086:	fa91 f1a1 	rbit	r1, r1
 800208a:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 800208e:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002092:	fab1 f181 	clz	r1, r1
 8002096:	b2c9      	uxtb	r1, r1
 8002098:	408b      	lsls	r3, r1
 800209a:	4921      	ldr	r1, [pc, #132]	; (8002120 <HAL_RCC_OscConfig+0x5d0>)
 800209c:	4313      	orrs	r3, r2
 800209e:	600b      	str	r3, [r1, #0]
 80020a0:	e06d      	b.n	800217e <HAL_RCC_OscConfig+0x62e>
 80020a2:	2301      	movs	r3, #1
 80020a4:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020a8:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80020ac:	fa93 f3a3 	rbit	r3, r3
 80020b0:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 80020b4:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80020b8:	fab3 f383 	clz	r3, r3
 80020bc:	b2db      	uxtb	r3, r3
 80020be:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80020c2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80020c6:	009b      	lsls	r3, r3, #2
 80020c8:	461a      	mov	r2, r3
 80020ca:	2300      	movs	r3, #0
 80020cc:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020ce:	f7ff f837 	bl	8001140 <HAL_GetTick>
 80020d2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020d6:	e00a      	b.n	80020ee <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80020d8:	f7ff f832 	bl	8001140 <HAL_GetTick>
 80020dc:	4602      	mov	r2, r0
 80020de:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80020e2:	1ad3      	subs	r3, r2, r3
 80020e4:	2b02      	cmp	r3, #2
 80020e6:	d902      	bls.n	80020ee <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 80020e8:	2303      	movs	r3, #3
 80020ea:	f000 bd7e 	b.w	8002bea <HAL_RCC_OscConfig+0x109a>
 80020ee:	2302      	movs	r3, #2
 80020f0:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020f4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80020f8:	fa93 f3a3 	rbit	r3, r3
 80020fc:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8002100:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002104:	fab3 f383 	clz	r3, r3
 8002108:	b2db      	uxtb	r3, r3
 800210a:	095b      	lsrs	r3, r3, #5
 800210c:	b2db      	uxtb	r3, r3
 800210e:	f043 0301 	orr.w	r3, r3, #1
 8002112:	b2db      	uxtb	r3, r3
 8002114:	2b01      	cmp	r3, #1
 8002116:	d105      	bne.n	8002124 <HAL_RCC_OscConfig+0x5d4>
 8002118:	4b01      	ldr	r3, [pc, #4]	; (8002120 <HAL_RCC_OscConfig+0x5d0>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	e016      	b.n	800214c <HAL_RCC_OscConfig+0x5fc>
 800211e:	bf00      	nop
 8002120:	40021000 	.word	0x40021000
 8002124:	2302      	movs	r3, #2
 8002126:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800212a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800212e:	fa93 f3a3 	rbit	r3, r3
 8002132:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8002136:	2302      	movs	r3, #2
 8002138:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800213c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8002140:	fa93 f3a3 	rbit	r3, r3
 8002144:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002148:	4bbf      	ldr	r3, [pc, #764]	; (8002448 <HAL_RCC_OscConfig+0x8f8>)
 800214a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800214c:	2202      	movs	r2, #2
 800214e:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8002152:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8002156:	fa92 f2a2 	rbit	r2, r2
 800215a:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 800215e:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002162:	fab2 f282 	clz	r2, r2
 8002166:	b2d2      	uxtb	r2, r2
 8002168:	f042 0220 	orr.w	r2, r2, #32
 800216c:	b2d2      	uxtb	r2, r2
 800216e:	f002 021f 	and.w	r2, r2, #31
 8002172:	2101      	movs	r1, #1
 8002174:	fa01 f202 	lsl.w	r2, r1, r2
 8002178:	4013      	ands	r3, r2
 800217a:	2b00      	cmp	r3, #0
 800217c:	d1ac      	bne.n	80020d8 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800217e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002182:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f003 0308 	and.w	r3, r3, #8
 800218e:	2b00      	cmp	r3, #0
 8002190:	f000 8113 	beq.w	80023ba <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002194:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002198:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	695b      	ldr	r3, [r3, #20]
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d07c      	beq.n	800229e <HAL_RCC_OscConfig+0x74e>
 80021a4:	2301      	movs	r3, #1
 80021a6:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80021ae:	fa93 f3a3 	rbit	r3, r3
 80021b2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 80021b6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80021ba:	fab3 f383 	clz	r3, r3
 80021be:	b2db      	uxtb	r3, r3
 80021c0:	461a      	mov	r2, r3
 80021c2:	4ba2      	ldr	r3, [pc, #648]	; (800244c <HAL_RCC_OscConfig+0x8fc>)
 80021c4:	4413      	add	r3, r2
 80021c6:	009b      	lsls	r3, r3, #2
 80021c8:	461a      	mov	r2, r3
 80021ca:	2301      	movs	r3, #1
 80021cc:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021ce:	f7fe ffb7 	bl	8001140 <HAL_GetTick>
 80021d2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021d6:	e00a      	b.n	80021ee <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80021d8:	f7fe ffb2 	bl	8001140 <HAL_GetTick>
 80021dc:	4602      	mov	r2, r0
 80021de:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80021e2:	1ad3      	subs	r3, r2, r3
 80021e4:	2b02      	cmp	r3, #2
 80021e6:	d902      	bls.n	80021ee <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 80021e8:	2303      	movs	r3, #3
 80021ea:	f000 bcfe 	b.w	8002bea <HAL_RCC_OscConfig+0x109a>
 80021ee:	2302      	movs	r3, #2
 80021f0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80021f8:	fa93 f2a3 	rbit	r2, r3
 80021fc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002200:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002204:	601a      	str	r2, [r3, #0]
 8002206:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800220a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800220e:	2202      	movs	r2, #2
 8002210:	601a      	str	r2, [r3, #0]
 8002212:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002216:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	fa93 f2a3 	rbit	r2, r3
 8002220:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002224:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002228:	601a      	str	r2, [r3, #0]
 800222a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800222e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002232:	2202      	movs	r2, #2
 8002234:	601a      	str	r2, [r3, #0]
 8002236:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800223a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	fa93 f2a3 	rbit	r2, r3
 8002244:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002248:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800224c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800224e:	4b7e      	ldr	r3, [pc, #504]	; (8002448 <HAL_RCC_OscConfig+0x8f8>)
 8002250:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002252:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002256:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800225a:	2102      	movs	r1, #2
 800225c:	6019      	str	r1, [r3, #0]
 800225e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002262:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	fa93 f1a3 	rbit	r1, r3
 800226c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002270:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002274:	6019      	str	r1, [r3, #0]
  return result;
 8002276:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800227a:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	fab3 f383 	clz	r3, r3
 8002284:	b2db      	uxtb	r3, r3
 8002286:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800228a:	b2db      	uxtb	r3, r3
 800228c:	f003 031f 	and.w	r3, r3, #31
 8002290:	2101      	movs	r1, #1
 8002292:	fa01 f303 	lsl.w	r3, r1, r3
 8002296:	4013      	ands	r3, r2
 8002298:	2b00      	cmp	r3, #0
 800229a:	d09d      	beq.n	80021d8 <HAL_RCC_OscConfig+0x688>
 800229c:	e08d      	b.n	80023ba <HAL_RCC_OscConfig+0x86a>
 800229e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80022a2:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80022a6:	2201      	movs	r2, #1
 80022a8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022aa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80022ae:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	fa93 f2a3 	rbit	r2, r3
 80022b8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80022bc:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80022c0:	601a      	str	r2, [r3, #0]
  return result;
 80022c2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80022c6:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80022ca:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80022cc:	fab3 f383 	clz	r3, r3
 80022d0:	b2db      	uxtb	r3, r3
 80022d2:	461a      	mov	r2, r3
 80022d4:	4b5d      	ldr	r3, [pc, #372]	; (800244c <HAL_RCC_OscConfig+0x8fc>)
 80022d6:	4413      	add	r3, r2
 80022d8:	009b      	lsls	r3, r3, #2
 80022da:	461a      	mov	r2, r3
 80022dc:	2300      	movs	r3, #0
 80022de:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022e0:	f7fe ff2e 	bl	8001140 <HAL_GetTick>
 80022e4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022e8:	e00a      	b.n	8002300 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80022ea:	f7fe ff29 	bl	8001140 <HAL_GetTick>
 80022ee:	4602      	mov	r2, r0
 80022f0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80022f4:	1ad3      	subs	r3, r2, r3
 80022f6:	2b02      	cmp	r3, #2
 80022f8:	d902      	bls.n	8002300 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 80022fa:	2303      	movs	r3, #3
 80022fc:	f000 bc75 	b.w	8002bea <HAL_RCC_OscConfig+0x109a>
 8002300:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002304:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8002308:	2202      	movs	r2, #2
 800230a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800230c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002310:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	fa93 f2a3 	rbit	r2, r3
 800231a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800231e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002322:	601a      	str	r2, [r3, #0]
 8002324:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002328:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800232c:	2202      	movs	r2, #2
 800232e:	601a      	str	r2, [r3, #0]
 8002330:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002334:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	fa93 f2a3 	rbit	r2, r3
 800233e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002342:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002346:	601a      	str	r2, [r3, #0]
 8002348:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800234c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002350:	2202      	movs	r2, #2
 8002352:	601a      	str	r2, [r3, #0]
 8002354:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002358:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	fa93 f2a3 	rbit	r2, r3
 8002362:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002366:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800236a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800236c:	4b36      	ldr	r3, [pc, #216]	; (8002448 <HAL_RCC_OscConfig+0x8f8>)
 800236e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002370:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002374:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002378:	2102      	movs	r1, #2
 800237a:	6019      	str	r1, [r3, #0]
 800237c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002380:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	fa93 f1a3 	rbit	r1, r3
 800238a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800238e:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002392:	6019      	str	r1, [r3, #0]
  return result;
 8002394:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002398:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	fab3 f383 	clz	r3, r3
 80023a2:	b2db      	uxtb	r3, r3
 80023a4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80023a8:	b2db      	uxtb	r3, r3
 80023aa:	f003 031f 	and.w	r3, r3, #31
 80023ae:	2101      	movs	r1, #1
 80023b0:	fa01 f303 	lsl.w	r3, r1, r3
 80023b4:	4013      	ands	r3, r2
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d197      	bne.n	80022ea <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80023ba:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80023be:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f003 0304 	and.w	r3, r3, #4
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	f000 81a5 	beq.w	800271a <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023d0:	2300      	movs	r3, #0
 80023d2:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023d6:	4b1c      	ldr	r3, [pc, #112]	; (8002448 <HAL_RCC_OscConfig+0x8f8>)
 80023d8:	69db      	ldr	r3, [r3, #28]
 80023da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d116      	bne.n	8002410 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023e2:	4b19      	ldr	r3, [pc, #100]	; (8002448 <HAL_RCC_OscConfig+0x8f8>)
 80023e4:	69db      	ldr	r3, [r3, #28]
 80023e6:	4a18      	ldr	r2, [pc, #96]	; (8002448 <HAL_RCC_OscConfig+0x8f8>)
 80023e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023ec:	61d3      	str	r3, [r2, #28]
 80023ee:	4b16      	ldr	r3, [pc, #88]	; (8002448 <HAL_RCC_OscConfig+0x8f8>)
 80023f0:	69db      	ldr	r3, [r3, #28]
 80023f2:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80023f6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80023fa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80023fe:	601a      	str	r2, [r3, #0]
 8002400:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002404:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002408:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800240a:	2301      	movs	r3, #1
 800240c:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002410:	4b0f      	ldr	r3, [pc, #60]	; (8002450 <HAL_RCC_OscConfig+0x900>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002418:	2b00      	cmp	r3, #0
 800241a:	d121      	bne.n	8002460 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800241c:	4b0c      	ldr	r3, [pc, #48]	; (8002450 <HAL_RCC_OscConfig+0x900>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	4a0b      	ldr	r2, [pc, #44]	; (8002450 <HAL_RCC_OscConfig+0x900>)
 8002422:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002426:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002428:	f7fe fe8a 	bl	8001140 <HAL_GetTick>
 800242c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002430:	e010      	b.n	8002454 <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002432:	f7fe fe85 	bl	8001140 <HAL_GetTick>
 8002436:	4602      	mov	r2, r0
 8002438:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800243c:	1ad3      	subs	r3, r2, r3
 800243e:	2b64      	cmp	r3, #100	; 0x64
 8002440:	d908      	bls.n	8002454 <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 8002442:	2303      	movs	r3, #3
 8002444:	e3d1      	b.n	8002bea <HAL_RCC_OscConfig+0x109a>
 8002446:	bf00      	nop
 8002448:	40021000 	.word	0x40021000
 800244c:	10908120 	.word	0x10908120
 8002450:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002454:	4b8d      	ldr	r3, [pc, #564]	; (800268c <HAL_RCC_OscConfig+0xb3c>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800245c:	2b00      	cmp	r3, #0
 800245e:	d0e8      	beq.n	8002432 <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002460:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002464:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	689b      	ldr	r3, [r3, #8]
 800246c:	2b01      	cmp	r3, #1
 800246e:	d106      	bne.n	800247e <HAL_RCC_OscConfig+0x92e>
 8002470:	4b87      	ldr	r3, [pc, #540]	; (8002690 <HAL_RCC_OscConfig+0xb40>)
 8002472:	6a1b      	ldr	r3, [r3, #32]
 8002474:	4a86      	ldr	r2, [pc, #536]	; (8002690 <HAL_RCC_OscConfig+0xb40>)
 8002476:	f043 0301 	orr.w	r3, r3, #1
 800247a:	6213      	str	r3, [r2, #32]
 800247c:	e035      	b.n	80024ea <HAL_RCC_OscConfig+0x99a>
 800247e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002482:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	689b      	ldr	r3, [r3, #8]
 800248a:	2b00      	cmp	r3, #0
 800248c:	d10c      	bne.n	80024a8 <HAL_RCC_OscConfig+0x958>
 800248e:	4b80      	ldr	r3, [pc, #512]	; (8002690 <HAL_RCC_OscConfig+0xb40>)
 8002490:	6a1b      	ldr	r3, [r3, #32]
 8002492:	4a7f      	ldr	r2, [pc, #508]	; (8002690 <HAL_RCC_OscConfig+0xb40>)
 8002494:	f023 0301 	bic.w	r3, r3, #1
 8002498:	6213      	str	r3, [r2, #32]
 800249a:	4b7d      	ldr	r3, [pc, #500]	; (8002690 <HAL_RCC_OscConfig+0xb40>)
 800249c:	6a1b      	ldr	r3, [r3, #32]
 800249e:	4a7c      	ldr	r2, [pc, #496]	; (8002690 <HAL_RCC_OscConfig+0xb40>)
 80024a0:	f023 0304 	bic.w	r3, r3, #4
 80024a4:	6213      	str	r3, [r2, #32]
 80024a6:	e020      	b.n	80024ea <HAL_RCC_OscConfig+0x99a>
 80024a8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80024ac:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	689b      	ldr	r3, [r3, #8]
 80024b4:	2b05      	cmp	r3, #5
 80024b6:	d10c      	bne.n	80024d2 <HAL_RCC_OscConfig+0x982>
 80024b8:	4b75      	ldr	r3, [pc, #468]	; (8002690 <HAL_RCC_OscConfig+0xb40>)
 80024ba:	6a1b      	ldr	r3, [r3, #32]
 80024bc:	4a74      	ldr	r2, [pc, #464]	; (8002690 <HAL_RCC_OscConfig+0xb40>)
 80024be:	f043 0304 	orr.w	r3, r3, #4
 80024c2:	6213      	str	r3, [r2, #32]
 80024c4:	4b72      	ldr	r3, [pc, #456]	; (8002690 <HAL_RCC_OscConfig+0xb40>)
 80024c6:	6a1b      	ldr	r3, [r3, #32]
 80024c8:	4a71      	ldr	r2, [pc, #452]	; (8002690 <HAL_RCC_OscConfig+0xb40>)
 80024ca:	f043 0301 	orr.w	r3, r3, #1
 80024ce:	6213      	str	r3, [r2, #32]
 80024d0:	e00b      	b.n	80024ea <HAL_RCC_OscConfig+0x99a>
 80024d2:	4b6f      	ldr	r3, [pc, #444]	; (8002690 <HAL_RCC_OscConfig+0xb40>)
 80024d4:	6a1b      	ldr	r3, [r3, #32]
 80024d6:	4a6e      	ldr	r2, [pc, #440]	; (8002690 <HAL_RCC_OscConfig+0xb40>)
 80024d8:	f023 0301 	bic.w	r3, r3, #1
 80024dc:	6213      	str	r3, [r2, #32]
 80024de:	4b6c      	ldr	r3, [pc, #432]	; (8002690 <HAL_RCC_OscConfig+0xb40>)
 80024e0:	6a1b      	ldr	r3, [r3, #32]
 80024e2:	4a6b      	ldr	r2, [pc, #428]	; (8002690 <HAL_RCC_OscConfig+0xb40>)
 80024e4:	f023 0304 	bic.w	r3, r3, #4
 80024e8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80024ea:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80024ee:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	689b      	ldr	r3, [r3, #8]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	f000 8081 	beq.w	80025fe <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024fc:	f7fe fe20 	bl	8001140 <HAL_GetTick>
 8002500:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002504:	e00b      	b.n	800251e <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002506:	f7fe fe1b 	bl	8001140 <HAL_GetTick>
 800250a:	4602      	mov	r2, r0
 800250c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002510:	1ad3      	subs	r3, r2, r3
 8002512:	f241 3288 	movw	r2, #5000	; 0x1388
 8002516:	4293      	cmp	r3, r2
 8002518:	d901      	bls.n	800251e <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 800251a:	2303      	movs	r3, #3
 800251c:	e365      	b.n	8002bea <HAL_RCC_OscConfig+0x109a>
 800251e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002522:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8002526:	2202      	movs	r2, #2
 8002528:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800252a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800252e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	fa93 f2a3 	rbit	r2, r3
 8002538:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800253c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002540:	601a      	str	r2, [r3, #0]
 8002542:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002546:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800254a:	2202      	movs	r2, #2
 800254c:	601a      	str	r2, [r3, #0]
 800254e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002552:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	fa93 f2a3 	rbit	r2, r3
 800255c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002560:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002564:	601a      	str	r2, [r3, #0]
  return result;
 8002566:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800256a:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800256e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002570:	fab3 f383 	clz	r3, r3
 8002574:	b2db      	uxtb	r3, r3
 8002576:	095b      	lsrs	r3, r3, #5
 8002578:	b2db      	uxtb	r3, r3
 800257a:	f043 0302 	orr.w	r3, r3, #2
 800257e:	b2db      	uxtb	r3, r3
 8002580:	2b02      	cmp	r3, #2
 8002582:	d102      	bne.n	800258a <HAL_RCC_OscConfig+0xa3a>
 8002584:	4b42      	ldr	r3, [pc, #264]	; (8002690 <HAL_RCC_OscConfig+0xb40>)
 8002586:	6a1b      	ldr	r3, [r3, #32]
 8002588:	e013      	b.n	80025b2 <HAL_RCC_OscConfig+0xa62>
 800258a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800258e:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8002592:	2202      	movs	r2, #2
 8002594:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002596:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800259a:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	fa93 f2a3 	rbit	r2, r3
 80025a4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80025a8:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 80025ac:	601a      	str	r2, [r3, #0]
 80025ae:	4b38      	ldr	r3, [pc, #224]	; (8002690 <HAL_RCC_OscConfig+0xb40>)
 80025b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025b2:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80025b6:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80025ba:	2102      	movs	r1, #2
 80025bc:	6011      	str	r1, [r2, #0]
 80025be:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80025c2:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80025c6:	6812      	ldr	r2, [r2, #0]
 80025c8:	fa92 f1a2 	rbit	r1, r2
 80025cc:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80025d0:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 80025d4:	6011      	str	r1, [r2, #0]
  return result;
 80025d6:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80025da:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 80025de:	6812      	ldr	r2, [r2, #0]
 80025e0:	fab2 f282 	clz	r2, r2
 80025e4:	b2d2      	uxtb	r2, r2
 80025e6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80025ea:	b2d2      	uxtb	r2, r2
 80025ec:	f002 021f 	and.w	r2, r2, #31
 80025f0:	2101      	movs	r1, #1
 80025f2:	fa01 f202 	lsl.w	r2, r1, r2
 80025f6:	4013      	ands	r3, r2
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d084      	beq.n	8002506 <HAL_RCC_OscConfig+0x9b6>
 80025fc:	e083      	b.n	8002706 <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025fe:	f7fe fd9f 	bl	8001140 <HAL_GetTick>
 8002602:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002606:	e00b      	b.n	8002620 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002608:	f7fe fd9a 	bl	8001140 <HAL_GetTick>
 800260c:	4602      	mov	r2, r0
 800260e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002612:	1ad3      	subs	r3, r2, r3
 8002614:	f241 3288 	movw	r2, #5000	; 0x1388
 8002618:	4293      	cmp	r3, r2
 800261a:	d901      	bls.n	8002620 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 800261c:	2303      	movs	r3, #3
 800261e:	e2e4      	b.n	8002bea <HAL_RCC_OscConfig+0x109a>
 8002620:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002624:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8002628:	2202      	movs	r2, #2
 800262a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800262c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002630:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	fa93 f2a3 	rbit	r2, r3
 800263a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800263e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002642:	601a      	str	r2, [r3, #0]
 8002644:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002648:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800264c:	2202      	movs	r2, #2
 800264e:	601a      	str	r2, [r3, #0]
 8002650:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002654:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	fa93 f2a3 	rbit	r2, r3
 800265e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002662:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002666:	601a      	str	r2, [r3, #0]
  return result;
 8002668:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800266c:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002670:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002672:	fab3 f383 	clz	r3, r3
 8002676:	b2db      	uxtb	r3, r3
 8002678:	095b      	lsrs	r3, r3, #5
 800267a:	b2db      	uxtb	r3, r3
 800267c:	f043 0302 	orr.w	r3, r3, #2
 8002680:	b2db      	uxtb	r3, r3
 8002682:	2b02      	cmp	r3, #2
 8002684:	d106      	bne.n	8002694 <HAL_RCC_OscConfig+0xb44>
 8002686:	4b02      	ldr	r3, [pc, #8]	; (8002690 <HAL_RCC_OscConfig+0xb40>)
 8002688:	6a1b      	ldr	r3, [r3, #32]
 800268a:	e017      	b.n	80026bc <HAL_RCC_OscConfig+0xb6c>
 800268c:	40007000 	.word	0x40007000
 8002690:	40021000 	.word	0x40021000
 8002694:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002698:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 800269c:	2202      	movs	r2, #2
 800269e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026a0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80026a4:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	fa93 f2a3 	rbit	r2, r3
 80026ae:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80026b2:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 80026b6:	601a      	str	r2, [r3, #0]
 80026b8:	4bb3      	ldr	r3, [pc, #716]	; (8002988 <HAL_RCC_OscConfig+0xe38>)
 80026ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026bc:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80026c0:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80026c4:	2102      	movs	r1, #2
 80026c6:	6011      	str	r1, [r2, #0]
 80026c8:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80026cc:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80026d0:	6812      	ldr	r2, [r2, #0]
 80026d2:	fa92 f1a2 	rbit	r1, r2
 80026d6:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80026da:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 80026de:	6011      	str	r1, [r2, #0]
  return result;
 80026e0:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80026e4:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 80026e8:	6812      	ldr	r2, [r2, #0]
 80026ea:	fab2 f282 	clz	r2, r2
 80026ee:	b2d2      	uxtb	r2, r2
 80026f0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80026f4:	b2d2      	uxtb	r2, r2
 80026f6:	f002 021f 	and.w	r2, r2, #31
 80026fa:	2101      	movs	r1, #1
 80026fc:	fa01 f202 	lsl.w	r2, r1, r2
 8002700:	4013      	ands	r3, r2
 8002702:	2b00      	cmp	r3, #0
 8002704:	d180      	bne.n	8002608 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002706:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 800270a:	2b01      	cmp	r3, #1
 800270c:	d105      	bne.n	800271a <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800270e:	4b9e      	ldr	r3, [pc, #632]	; (8002988 <HAL_RCC_OscConfig+0xe38>)
 8002710:	69db      	ldr	r3, [r3, #28]
 8002712:	4a9d      	ldr	r2, [pc, #628]	; (8002988 <HAL_RCC_OscConfig+0xe38>)
 8002714:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002718:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800271a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800271e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	699b      	ldr	r3, [r3, #24]
 8002726:	2b00      	cmp	r3, #0
 8002728:	f000 825e 	beq.w	8002be8 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800272c:	4b96      	ldr	r3, [pc, #600]	; (8002988 <HAL_RCC_OscConfig+0xe38>)
 800272e:	685b      	ldr	r3, [r3, #4]
 8002730:	f003 030c 	and.w	r3, r3, #12
 8002734:	2b08      	cmp	r3, #8
 8002736:	f000 821f 	beq.w	8002b78 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800273a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800273e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	699b      	ldr	r3, [r3, #24]
 8002746:	2b02      	cmp	r3, #2
 8002748:	f040 8170 	bne.w	8002a2c <HAL_RCC_OscConfig+0xedc>
 800274c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002750:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002754:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002758:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800275a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800275e:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	fa93 f2a3 	rbit	r2, r3
 8002768:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800276c:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002770:	601a      	str	r2, [r3, #0]
  return result;
 8002772:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002776:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800277a:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800277c:	fab3 f383 	clz	r3, r3
 8002780:	b2db      	uxtb	r3, r3
 8002782:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002786:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800278a:	009b      	lsls	r3, r3, #2
 800278c:	461a      	mov	r2, r3
 800278e:	2300      	movs	r3, #0
 8002790:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002792:	f7fe fcd5 	bl	8001140 <HAL_GetTick>
 8002796:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800279a:	e009      	b.n	80027b0 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800279c:	f7fe fcd0 	bl	8001140 <HAL_GetTick>
 80027a0:	4602      	mov	r2, r0
 80027a2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80027a6:	1ad3      	subs	r3, r2, r3
 80027a8:	2b02      	cmp	r3, #2
 80027aa:	d901      	bls.n	80027b0 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 80027ac:	2303      	movs	r3, #3
 80027ae:	e21c      	b.n	8002bea <HAL_RCC_OscConfig+0x109a>
 80027b0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80027b4:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80027b8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80027bc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027be:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80027c2:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	fa93 f2a3 	rbit	r2, r3
 80027cc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80027d0:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80027d4:	601a      	str	r2, [r3, #0]
  return result;
 80027d6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80027da:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80027de:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027e0:	fab3 f383 	clz	r3, r3
 80027e4:	b2db      	uxtb	r3, r3
 80027e6:	095b      	lsrs	r3, r3, #5
 80027e8:	b2db      	uxtb	r3, r3
 80027ea:	f043 0301 	orr.w	r3, r3, #1
 80027ee:	b2db      	uxtb	r3, r3
 80027f0:	2b01      	cmp	r3, #1
 80027f2:	d102      	bne.n	80027fa <HAL_RCC_OscConfig+0xcaa>
 80027f4:	4b64      	ldr	r3, [pc, #400]	; (8002988 <HAL_RCC_OscConfig+0xe38>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	e027      	b.n	800284a <HAL_RCC_OscConfig+0xcfa>
 80027fa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80027fe:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8002802:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002806:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002808:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800280c:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	fa93 f2a3 	rbit	r2, r3
 8002816:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800281a:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800281e:	601a      	str	r2, [r3, #0]
 8002820:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002824:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8002828:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800282c:	601a      	str	r2, [r3, #0]
 800282e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002832:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	fa93 f2a3 	rbit	r2, r3
 800283c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002840:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8002844:	601a      	str	r2, [r3, #0]
 8002846:	4b50      	ldr	r3, [pc, #320]	; (8002988 <HAL_RCC_OscConfig+0xe38>)
 8002848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800284a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800284e:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002852:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002856:	6011      	str	r1, [r2, #0]
 8002858:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800285c:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002860:	6812      	ldr	r2, [r2, #0]
 8002862:	fa92 f1a2 	rbit	r1, r2
 8002866:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800286a:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 800286e:	6011      	str	r1, [r2, #0]
  return result;
 8002870:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002874:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8002878:	6812      	ldr	r2, [r2, #0]
 800287a:	fab2 f282 	clz	r2, r2
 800287e:	b2d2      	uxtb	r2, r2
 8002880:	f042 0220 	orr.w	r2, r2, #32
 8002884:	b2d2      	uxtb	r2, r2
 8002886:	f002 021f 	and.w	r2, r2, #31
 800288a:	2101      	movs	r1, #1
 800288c:	fa01 f202 	lsl.w	r2, r1, r2
 8002890:	4013      	ands	r3, r2
 8002892:	2b00      	cmp	r3, #0
 8002894:	d182      	bne.n	800279c <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002896:	4b3c      	ldr	r3, [pc, #240]	; (8002988 <HAL_RCC_OscConfig+0xe38>)
 8002898:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800289a:	f023 020f 	bic.w	r2, r3, #15
 800289e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80028a2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028aa:	4937      	ldr	r1, [pc, #220]	; (8002988 <HAL_RCC_OscConfig+0xe38>)
 80028ac:	4313      	orrs	r3, r2
 80028ae:	62cb      	str	r3, [r1, #44]	; 0x2c
 80028b0:	4b35      	ldr	r3, [pc, #212]	; (8002988 <HAL_RCC_OscConfig+0xe38>)
 80028b2:	685b      	ldr	r3, [r3, #4]
 80028b4:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 80028b8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80028bc:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	6a19      	ldr	r1, [r3, #32]
 80028c4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80028c8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	69db      	ldr	r3, [r3, #28]
 80028d0:	430b      	orrs	r3, r1
 80028d2:	492d      	ldr	r1, [pc, #180]	; (8002988 <HAL_RCC_OscConfig+0xe38>)
 80028d4:	4313      	orrs	r3, r2
 80028d6:	604b      	str	r3, [r1, #4]
 80028d8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80028dc:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80028e0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80028e4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028e6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80028ea:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	fa93 f2a3 	rbit	r2, r3
 80028f4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80028f8:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80028fc:	601a      	str	r2, [r3, #0]
  return result;
 80028fe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002902:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002906:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002908:	fab3 f383 	clz	r3, r3
 800290c:	b2db      	uxtb	r3, r3
 800290e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002912:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002916:	009b      	lsls	r3, r3, #2
 8002918:	461a      	mov	r2, r3
 800291a:	2301      	movs	r3, #1
 800291c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800291e:	f7fe fc0f 	bl	8001140 <HAL_GetTick>
 8002922:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002926:	e009      	b.n	800293c <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002928:	f7fe fc0a 	bl	8001140 <HAL_GetTick>
 800292c:	4602      	mov	r2, r0
 800292e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002932:	1ad3      	subs	r3, r2, r3
 8002934:	2b02      	cmp	r3, #2
 8002936:	d901      	bls.n	800293c <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 8002938:	2303      	movs	r3, #3
 800293a:	e156      	b.n	8002bea <HAL_RCC_OscConfig+0x109a>
 800293c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002940:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002944:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002948:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800294a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800294e:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	fa93 f2a3 	rbit	r2, r3
 8002958:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800295c:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002960:	601a      	str	r2, [r3, #0]
  return result;
 8002962:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002966:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800296a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800296c:	fab3 f383 	clz	r3, r3
 8002970:	b2db      	uxtb	r3, r3
 8002972:	095b      	lsrs	r3, r3, #5
 8002974:	b2db      	uxtb	r3, r3
 8002976:	f043 0301 	orr.w	r3, r3, #1
 800297a:	b2db      	uxtb	r3, r3
 800297c:	2b01      	cmp	r3, #1
 800297e:	d105      	bne.n	800298c <HAL_RCC_OscConfig+0xe3c>
 8002980:	4b01      	ldr	r3, [pc, #4]	; (8002988 <HAL_RCC_OscConfig+0xe38>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	e02a      	b.n	80029dc <HAL_RCC_OscConfig+0xe8c>
 8002986:	bf00      	nop
 8002988:	40021000 	.word	0x40021000
 800298c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002990:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8002994:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002998:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800299a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800299e:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	fa93 f2a3 	rbit	r2, r3
 80029a8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80029ac:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80029b0:	601a      	str	r2, [r3, #0]
 80029b2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80029b6:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80029ba:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80029be:	601a      	str	r2, [r3, #0]
 80029c0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80029c4:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	fa93 f2a3 	rbit	r2, r3
 80029ce:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80029d2:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 80029d6:	601a      	str	r2, [r3, #0]
 80029d8:	4b86      	ldr	r3, [pc, #536]	; (8002bf4 <HAL_RCC_OscConfig+0x10a4>)
 80029da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029dc:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80029e0:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80029e4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80029e8:	6011      	str	r1, [r2, #0]
 80029ea:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80029ee:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80029f2:	6812      	ldr	r2, [r2, #0]
 80029f4:	fa92 f1a2 	rbit	r1, r2
 80029f8:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80029fc:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8002a00:	6011      	str	r1, [r2, #0]
  return result;
 8002a02:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002a06:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8002a0a:	6812      	ldr	r2, [r2, #0]
 8002a0c:	fab2 f282 	clz	r2, r2
 8002a10:	b2d2      	uxtb	r2, r2
 8002a12:	f042 0220 	orr.w	r2, r2, #32
 8002a16:	b2d2      	uxtb	r2, r2
 8002a18:	f002 021f 	and.w	r2, r2, #31
 8002a1c:	2101      	movs	r1, #1
 8002a1e:	fa01 f202 	lsl.w	r2, r1, r2
 8002a22:	4013      	ands	r3, r2
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	f43f af7f 	beq.w	8002928 <HAL_RCC_OscConfig+0xdd8>
 8002a2a:	e0dd      	b.n	8002be8 <HAL_RCC_OscConfig+0x1098>
 8002a2c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a30:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002a34:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002a38:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a3a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a3e:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	fa93 f2a3 	rbit	r2, r3
 8002a48:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a4c:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002a50:	601a      	str	r2, [r3, #0]
  return result;
 8002a52:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a56:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002a5a:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a5c:	fab3 f383 	clz	r3, r3
 8002a60:	b2db      	uxtb	r3, r3
 8002a62:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002a66:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002a6a:	009b      	lsls	r3, r3, #2
 8002a6c:	461a      	mov	r2, r3
 8002a6e:	2300      	movs	r3, #0
 8002a70:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a72:	f7fe fb65 	bl	8001140 <HAL_GetTick>
 8002a76:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a7a:	e009      	b.n	8002a90 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a7c:	f7fe fb60 	bl	8001140 <HAL_GetTick>
 8002a80:	4602      	mov	r2, r0
 8002a82:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002a86:	1ad3      	subs	r3, r2, r3
 8002a88:	2b02      	cmp	r3, #2
 8002a8a:	d901      	bls.n	8002a90 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 8002a8c:	2303      	movs	r3, #3
 8002a8e:	e0ac      	b.n	8002bea <HAL_RCC_OscConfig+0x109a>
 8002a90:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a94:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002a98:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002a9c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a9e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002aa2:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	fa93 f2a3 	rbit	r2, r3
 8002aac:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002ab0:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002ab4:	601a      	str	r2, [r3, #0]
  return result;
 8002ab6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002aba:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002abe:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ac0:	fab3 f383 	clz	r3, r3
 8002ac4:	b2db      	uxtb	r3, r3
 8002ac6:	095b      	lsrs	r3, r3, #5
 8002ac8:	b2db      	uxtb	r3, r3
 8002aca:	f043 0301 	orr.w	r3, r3, #1
 8002ace:	b2db      	uxtb	r3, r3
 8002ad0:	2b01      	cmp	r3, #1
 8002ad2:	d102      	bne.n	8002ada <HAL_RCC_OscConfig+0xf8a>
 8002ad4:	4b47      	ldr	r3, [pc, #284]	; (8002bf4 <HAL_RCC_OscConfig+0x10a4>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	e027      	b.n	8002b2a <HAL_RCC_OscConfig+0xfda>
 8002ada:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002ade:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8002ae2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002ae6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ae8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002aec:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	fa93 f2a3 	rbit	r2, r3
 8002af6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002afa:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002afe:	601a      	str	r2, [r3, #0]
 8002b00:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b04:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8002b08:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002b0c:	601a      	str	r2, [r3, #0]
 8002b0e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b12:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	fa93 f2a3 	rbit	r2, r3
 8002b1c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b20:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 8002b24:	601a      	str	r2, [r3, #0]
 8002b26:	4b33      	ldr	r3, [pc, #204]	; (8002bf4 <HAL_RCC_OscConfig+0x10a4>)
 8002b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b2a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002b2e:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002b32:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002b36:	6011      	str	r1, [r2, #0]
 8002b38:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002b3c:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002b40:	6812      	ldr	r2, [r2, #0]
 8002b42:	fa92 f1a2 	rbit	r1, r2
 8002b46:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002b4a:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8002b4e:	6011      	str	r1, [r2, #0]
  return result;
 8002b50:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002b54:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8002b58:	6812      	ldr	r2, [r2, #0]
 8002b5a:	fab2 f282 	clz	r2, r2
 8002b5e:	b2d2      	uxtb	r2, r2
 8002b60:	f042 0220 	orr.w	r2, r2, #32
 8002b64:	b2d2      	uxtb	r2, r2
 8002b66:	f002 021f 	and.w	r2, r2, #31
 8002b6a:	2101      	movs	r1, #1
 8002b6c:	fa01 f202 	lsl.w	r2, r1, r2
 8002b70:	4013      	ands	r3, r2
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d182      	bne.n	8002a7c <HAL_RCC_OscConfig+0xf2c>
 8002b76:	e037      	b.n	8002be8 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b78:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b7c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	699b      	ldr	r3, [r3, #24]
 8002b84:	2b01      	cmp	r3, #1
 8002b86:	d101      	bne.n	8002b8c <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 8002b88:	2301      	movs	r3, #1
 8002b8a:	e02e      	b.n	8002bea <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002b8c:	4b19      	ldr	r3, [pc, #100]	; (8002bf4 <HAL_RCC_OscConfig+0x10a4>)
 8002b8e:	685b      	ldr	r3, [r3, #4]
 8002b90:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8002b94:	4b17      	ldr	r3, [pc, #92]	; (8002bf4 <HAL_RCC_OscConfig+0x10a4>)
 8002b96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b98:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002b9c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8002ba0:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8002ba4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002ba8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	69db      	ldr	r3, [r3, #28]
 8002bb0:	429a      	cmp	r2, r3
 8002bb2:	d117      	bne.n	8002be4 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002bb4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8002bb8:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002bbc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002bc0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002bc8:	429a      	cmp	r2, r3
 8002bca:	d10b      	bne.n	8002be4 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8002bcc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002bd0:	f003 020f 	and.w	r2, r3, #15
 8002bd4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002bd8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002be0:	429a      	cmp	r2, r3
 8002be2:	d001      	beq.n	8002be8 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8002be4:	2301      	movs	r3, #1
 8002be6:	e000      	b.n	8002bea <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 8002be8:	2300      	movs	r3, #0
}
 8002bea:	4618      	mov	r0, r3
 8002bec:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	bd80      	pop	{r7, pc}
 8002bf4:	40021000 	.word	0x40021000

08002bf8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b09e      	sub	sp, #120	; 0x78
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
 8002c00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002c02:	2300      	movs	r3, #0
 8002c04:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d101      	bne.n	8002c10 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002c0c:	2301      	movs	r3, #1
 8002c0e:	e162      	b.n	8002ed6 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002c10:	4b90      	ldr	r3, [pc, #576]	; (8002e54 <HAL_RCC_ClockConfig+0x25c>)
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f003 0307 	and.w	r3, r3, #7
 8002c18:	683a      	ldr	r2, [r7, #0]
 8002c1a:	429a      	cmp	r2, r3
 8002c1c:	d910      	bls.n	8002c40 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c1e:	4b8d      	ldr	r3, [pc, #564]	; (8002e54 <HAL_RCC_ClockConfig+0x25c>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f023 0207 	bic.w	r2, r3, #7
 8002c26:	498b      	ldr	r1, [pc, #556]	; (8002e54 <HAL_RCC_ClockConfig+0x25c>)
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	4313      	orrs	r3, r2
 8002c2c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c2e:	4b89      	ldr	r3, [pc, #548]	; (8002e54 <HAL_RCC_ClockConfig+0x25c>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f003 0307 	and.w	r3, r3, #7
 8002c36:	683a      	ldr	r2, [r7, #0]
 8002c38:	429a      	cmp	r2, r3
 8002c3a:	d001      	beq.n	8002c40 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002c3c:	2301      	movs	r3, #1
 8002c3e:	e14a      	b.n	8002ed6 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f003 0302 	and.w	r3, r3, #2
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d008      	beq.n	8002c5e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c4c:	4b82      	ldr	r3, [pc, #520]	; (8002e58 <HAL_RCC_ClockConfig+0x260>)
 8002c4e:	685b      	ldr	r3, [r3, #4]
 8002c50:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	689b      	ldr	r3, [r3, #8]
 8002c58:	497f      	ldr	r1, [pc, #508]	; (8002e58 <HAL_RCC_ClockConfig+0x260>)
 8002c5a:	4313      	orrs	r3, r2
 8002c5c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f003 0301 	and.w	r3, r3, #1
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	f000 80dc 	beq.w	8002e24 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	685b      	ldr	r3, [r3, #4]
 8002c70:	2b01      	cmp	r3, #1
 8002c72:	d13c      	bne.n	8002cee <HAL_RCC_ClockConfig+0xf6>
 8002c74:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002c78:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c7a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002c7c:	fa93 f3a3 	rbit	r3, r3
 8002c80:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002c82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c84:	fab3 f383 	clz	r3, r3
 8002c88:	b2db      	uxtb	r3, r3
 8002c8a:	095b      	lsrs	r3, r3, #5
 8002c8c:	b2db      	uxtb	r3, r3
 8002c8e:	f043 0301 	orr.w	r3, r3, #1
 8002c92:	b2db      	uxtb	r3, r3
 8002c94:	2b01      	cmp	r3, #1
 8002c96:	d102      	bne.n	8002c9e <HAL_RCC_ClockConfig+0xa6>
 8002c98:	4b6f      	ldr	r3, [pc, #444]	; (8002e58 <HAL_RCC_ClockConfig+0x260>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	e00f      	b.n	8002cbe <HAL_RCC_ClockConfig+0xc6>
 8002c9e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002ca2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ca4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002ca6:	fa93 f3a3 	rbit	r3, r3
 8002caa:	667b      	str	r3, [r7, #100]	; 0x64
 8002cac:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002cb0:	663b      	str	r3, [r7, #96]	; 0x60
 8002cb2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002cb4:	fa93 f3a3 	rbit	r3, r3
 8002cb8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002cba:	4b67      	ldr	r3, [pc, #412]	; (8002e58 <HAL_RCC_ClockConfig+0x260>)
 8002cbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cbe:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002cc2:	65ba      	str	r2, [r7, #88]	; 0x58
 8002cc4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002cc6:	fa92 f2a2 	rbit	r2, r2
 8002cca:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002ccc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002cce:	fab2 f282 	clz	r2, r2
 8002cd2:	b2d2      	uxtb	r2, r2
 8002cd4:	f042 0220 	orr.w	r2, r2, #32
 8002cd8:	b2d2      	uxtb	r2, r2
 8002cda:	f002 021f 	and.w	r2, r2, #31
 8002cde:	2101      	movs	r1, #1
 8002ce0:	fa01 f202 	lsl.w	r2, r1, r2
 8002ce4:	4013      	ands	r3, r2
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d17b      	bne.n	8002de2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002cea:	2301      	movs	r3, #1
 8002cec:	e0f3      	b.n	8002ed6 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	685b      	ldr	r3, [r3, #4]
 8002cf2:	2b02      	cmp	r3, #2
 8002cf4:	d13c      	bne.n	8002d70 <HAL_RCC_ClockConfig+0x178>
 8002cf6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002cfa:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cfc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002cfe:	fa93 f3a3 	rbit	r3, r3
 8002d02:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002d04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d06:	fab3 f383 	clz	r3, r3
 8002d0a:	b2db      	uxtb	r3, r3
 8002d0c:	095b      	lsrs	r3, r3, #5
 8002d0e:	b2db      	uxtb	r3, r3
 8002d10:	f043 0301 	orr.w	r3, r3, #1
 8002d14:	b2db      	uxtb	r3, r3
 8002d16:	2b01      	cmp	r3, #1
 8002d18:	d102      	bne.n	8002d20 <HAL_RCC_ClockConfig+0x128>
 8002d1a:	4b4f      	ldr	r3, [pc, #316]	; (8002e58 <HAL_RCC_ClockConfig+0x260>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	e00f      	b.n	8002d40 <HAL_RCC_ClockConfig+0x148>
 8002d20:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002d24:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d26:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d28:	fa93 f3a3 	rbit	r3, r3
 8002d2c:	647b      	str	r3, [r7, #68]	; 0x44
 8002d2e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002d32:	643b      	str	r3, [r7, #64]	; 0x40
 8002d34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d36:	fa93 f3a3 	rbit	r3, r3
 8002d3a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002d3c:	4b46      	ldr	r3, [pc, #280]	; (8002e58 <HAL_RCC_ClockConfig+0x260>)
 8002d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d40:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002d44:	63ba      	str	r2, [r7, #56]	; 0x38
 8002d46:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002d48:	fa92 f2a2 	rbit	r2, r2
 8002d4c:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8002d4e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002d50:	fab2 f282 	clz	r2, r2
 8002d54:	b2d2      	uxtb	r2, r2
 8002d56:	f042 0220 	orr.w	r2, r2, #32
 8002d5a:	b2d2      	uxtb	r2, r2
 8002d5c:	f002 021f 	and.w	r2, r2, #31
 8002d60:	2101      	movs	r1, #1
 8002d62:	fa01 f202 	lsl.w	r2, r1, r2
 8002d66:	4013      	ands	r3, r2
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d13a      	bne.n	8002de2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	e0b2      	b.n	8002ed6 <HAL_RCC_ClockConfig+0x2de>
 8002d70:	2302      	movs	r3, #2
 8002d72:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d76:	fa93 f3a3 	rbit	r3, r3
 8002d7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002d7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d7e:	fab3 f383 	clz	r3, r3
 8002d82:	b2db      	uxtb	r3, r3
 8002d84:	095b      	lsrs	r3, r3, #5
 8002d86:	b2db      	uxtb	r3, r3
 8002d88:	f043 0301 	orr.w	r3, r3, #1
 8002d8c:	b2db      	uxtb	r3, r3
 8002d8e:	2b01      	cmp	r3, #1
 8002d90:	d102      	bne.n	8002d98 <HAL_RCC_ClockConfig+0x1a0>
 8002d92:	4b31      	ldr	r3, [pc, #196]	; (8002e58 <HAL_RCC_ClockConfig+0x260>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	e00d      	b.n	8002db4 <HAL_RCC_ClockConfig+0x1bc>
 8002d98:	2302      	movs	r3, #2
 8002d9a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d9e:	fa93 f3a3 	rbit	r3, r3
 8002da2:	627b      	str	r3, [r7, #36]	; 0x24
 8002da4:	2302      	movs	r3, #2
 8002da6:	623b      	str	r3, [r7, #32]
 8002da8:	6a3b      	ldr	r3, [r7, #32]
 8002daa:	fa93 f3a3 	rbit	r3, r3
 8002dae:	61fb      	str	r3, [r7, #28]
 8002db0:	4b29      	ldr	r3, [pc, #164]	; (8002e58 <HAL_RCC_ClockConfig+0x260>)
 8002db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002db4:	2202      	movs	r2, #2
 8002db6:	61ba      	str	r2, [r7, #24]
 8002db8:	69ba      	ldr	r2, [r7, #24]
 8002dba:	fa92 f2a2 	rbit	r2, r2
 8002dbe:	617a      	str	r2, [r7, #20]
  return result;
 8002dc0:	697a      	ldr	r2, [r7, #20]
 8002dc2:	fab2 f282 	clz	r2, r2
 8002dc6:	b2d2      	uxtb	r2, r2
 8002dc8:	f042 0220 	orr.w	r2, r2, #32
 8002dcc:	b2d2      	uxtb	r2, r2
 8002dce:	f002 021f 	and.w	r2, r2, #31
 8002dd2:	2101      	movs	r1, #1
 8002dd4:	fa01 f202 	lsl.w	r2, r1, r2
 8002dd8:	4013      	ands	r3, r2
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d101      	bne.n	8002de2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002dde:	2301      	movs	r3, #1
 8002de0:	e079      	b.n	8002ed6 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002de2:	4b1d      	ldr	r3, [pc, #116]	; (8002e58 <HAL_RCC_ClockConfig+0x260>)
 8002de4:	685b      	ldr	r3, [r3, #4]
 8002de6:	f023 0203 	bic.w	r2, r3, #3
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	685b      	ldr	r3, [r3, #4]
 8002dee:	491a      	ldr	r1, [pc, #104]	; (8002e58 <HAL_RCC_ClockConfig+0x260>)
 8002df0:	4313      	orrs	r3, r2
 8002df2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002df4:	f7fe f9a4 	bl	8001140 <HAL_GetTick>
 8002df8:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dfa:	e00a      	b.n	8002e12 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002dfc:	f7fe f9a0 	bl	8001140 <HAL_GetTick>
 8002e00:	4602      	mov	r2, r0
 8002e02:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002e04:	1ad3      	subs	r3, r2, r3
 8002e06:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d901      	bls.n	8002e12 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002e0e:	2303      	movs	r3, #3
 8002e10:	e061      	b.n	8002ed6 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e12:	4b11      	ldr	r3, [pc, #68]	; (8002e58 <HAL_RCC_ClockConfig+0x260>)
 8002e14:	685b      	ldr	r3, [r3, #4]
 8002e16:	f003 020c 	and.w	r2, r3, #12
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	685b      	ldr	r3, [r3, #4]
 8002e1e:	009b      	lsls	r3, r3, #2
 8002e20:	429a      	cmp	r2, r3
 8002e22:	d1eb      	bne.n	8002dfc <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002e24:	4b0b      	ldr	r3, [pc, #44]	; (8002e54 <HAL_RCC_ClockConfig+0x25c>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f003 0307 	and.w	r3, r3, #7
 8002e2c:	683a      	ldr	r2, [r7, #0]
 8002e2e:	429a      	cmp	r2, r3
 8002e30:	d214      	bcs.n	8002e5c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e32:	4b08      	ldr	r3, [pc, #32]	; (8002e54 <HAL_RCC_ClockConfig+0x25c>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f023 0207 	bic.w	r2, r3, #7
 8002e3a:	4906      	ldr	r1, [pc, #24]	; (8002e54 <HAL_RCC_ClockConfig+0x25c>)
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	4313      	orrs	r3, r2
 8002e40:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e42:	4b04      	ldr	r3, [pc, #16]	; (8002e54 <HAL_RCC_ClockConfig+0x25c>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f003 0307 	and.w	r3, r3, #7
 8002e4a:	683a      	ldr	r2, [r7, #0]
 8002e4c:	429a      	cmp	r2, r3
 8002e4e:	d005      	beq.n	8002e5c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002e50:	2301      	movs	r3, #1
 8002e52:	e040      	b.n	8002ed6 <HAL_RCC_ClockConfig+0x2de>
 8002e54:	40022000 	.word	0x40022000
 8002e58:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f003 0304 	and.w	r3, r3, #4
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d008      	beq.n	8002e7a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e68:	4b1d      	ldr	r3, [pc, #116]	; (8002ee0 <HAL_RCC_ClockConfig+0x2e8>)
 8002e6a:	685b      	ldr	r3, [r3, #4]
 8002e6c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	68db      	ldr	r3, [r3, #12]
 8002e74:	491a      	ldr	r1, [pc, #104]	; (8002ee0 <HAL_RCC_ClockConfig+0x2e8>)
 8002e76:	4313      	orrs	r3, r2
 8002e78:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f003 0308 	and.w	r3, r3, #8
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d009      	beq.n	8002e9a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002e86:	4b16      	ldr	r3, [pc, #88]	; (8002ee0 <HAL_RCC_ClockConfig+0x2e8>)
 8002e88:	685b      	ldr	r3, [r3, #4]
 8002e8a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	691b      	ldr	r3, [r3, #16]
 8002e92:	00db      	lsls	r3, r3, #3
 8002e94:	4912      	ldr	r1, [pc, #72]	; (8002ee0 <HAL_RCC_ClockConfig+0x2e8>)
 8002e96:	4313      	orrs	r3, r2
 8002e98:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002e9a:	f000 f829 	bl	8002ef0 <HAL_RCC_GetSysClockFreq>
 8002e9e:	4601      	mov	r1, r0
 8002ea0:	4b0f      	ldr	r3, [pc, #60]	; (8002ee0 <HAL_RCC_ClockConfig+0x2e8>)
 8002ea2:	685b      	ldr	r3, [r3, #4]
 8002ea4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002ea8:	22f0      	movs	r2, #240	; 0xf0
 8002eaa:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eac:	693a      	ldr	r2, [r7, #16]
 8002eae:	fa92 f2a2 	rbit	r2, r2
 8002eb2:	60fa      	str	r2, [r7, #12]
  return result;
 8002eb4:	68fa      	ldr	r2, [r7, #12]
 8002eb6:	fab2 f282 	clz	r2, r2
 8002eba:	b2d2      	uxtb	r2, r2
 8002ebc:	40d3      	lsrs	r3, r2
 8002ebe:	4a09      	ldr	r2, [pc, #36]	; (8002ee4 <HAL_RCC_ClockConfig+0x2ec>)
 8002ec0:	5cd3      	ldrb	r3, [r2, r3]
 8002ec2:	fa21 f303 	lsr.w	r3, r1, r3
 8002ec6:	4a08      	ldr	r2, [pc, #32]	; (8002ee8 <HAL_RCC_ClockConfig+0x2f0>)
 8002ec8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002eca:	4b08      	ldr	r3, [pc, #32]	; (8002eec <HAL_RCC_ClockConfig+0x2f4>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	4618      	mov	r0, r3
 8002ed0:	f7fe f800 	bl	8000ed4 <HAL_InitTick>
  
  return HAL_OK;
 8002ed4:	2300      	movs	r3, #0
}
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	3778      	adds	r7, #120	; 0x78
 8002eda:	46bd      	mov	sp, r7
 8002edc:	bd80      	pop	{r7, pc}
 8002ede:	bf00      	nop
 8002ee0:	40021000 	.word	0x40021000
 8002ee4:	08008384 	.word	0x08008384
 8002ee8:	2000006c 	.word	0x2000006c
 8002eec:	20000070 	.word	0x20000070

08002ef0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ef0:	b480      	push	{r7}
 8002ef2:	b087      	sub	sp, #28
 8002ef4:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	60fb      	str	r3, [r7, #12]
 8002efa:	2300      	movs	r3, #0
 8002efc:	60bb      	str	r3, [r7, #8]
 8002efe:	2300      	movs	r3, #0
 8002f00:	617b      	str	r3, [r7, #20]
 8002f02:	2300      	movs	r3, #0
 8002f04:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002f06:	2300      	movs	r3, #0
 8002f08:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8002f0a:	4b1f      	ldr	r3, [pc, #124]	; (8002f88 <HAL_RCC_GetSysClockFreq+0x98>)
 8002f0c:	685b      	ldr	r3, [r3, #4]
 8002f0e:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	f003 030c 	and.w	r3, r3, #12
 8002f16:	2b04      	cmp	r3, #4
 8002f18:	d002      	beq.n	8002f20 <HAL_RCC_GetSysClockFreq+0x30>
 8002f1a:	2b08      	cmp	r3, #8
 8002f1c:	d003      	beq.n	8002f26 <HAL_RCC_GetSysClockFreq+0x36>
 8002f1e:	e029      	b.n	8002f74 <HAL_RCC_GetSysClockFreq+0x84>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002f20:	4b1a      	ldr	r3, [pc, #104]	; (8002f8c <HAL_RCC_GetSysClockFreq+0x9c>)
 8002f22:	613b      	str	r3, [r7, #16]
      break;
 8002f24:	e029      	b.n	8002f7a <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	0c9b      	lsrs	r3, r3, #18
 8002f2a:	f003 030f 	and.w	r3, r3, #15
 8002f2e:	4a18      	ldr	r2, [pc, #96]	; (8002f90 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002f30:	5cd3      	ldrb	r3, [r2, r3]
 8002f32:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8002f34:	4b14      	ldr	r3, [pc, #80]	; (8002f88 <HAL_RCC_GetSysClockFreq+0x98>)
 8002f36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f38:	f003 030f 	and.w	r3, r3, #15
 8002f3c:	4a15      	ldr	r2, [pc, #84]	; (8002f94 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002f3e:	5cd3      	ldrb	r3, [r2, r3]
 8002f40:	60bb      	str	r3, [r7, #8]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d008      	beq.n	8002f5e <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002f4c:	4a0f      	ldr	r2, [pc, #60]	; (8002f8c <HAL_RCC_GetSysClockFreq+0x9c>)
 8002f4e:	68bb      	ldr	r3, [r7, #8]
 8002f50:	fbb2 f2f3 	udiv	r2, r2, r3
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	fb02 f303 	mul.w	r3, r2, r3
 8002f5a:	617b      	str	r3, [r7, #20]
 8002f5c:	e007      	b.n	8002f6e <HAL_RCC_GetSysClockFreq+0x7e>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002f5e:	4a0b      	ldr	r2, [pc, #44]	; (8002f8c <HAL_RCC_GetSysClockFreq+0x9c>)
 8002f60:	68bb      	ldr	r3, [r7, #8]
 8002f62:	fbb2 f2f3 	udiv	r2, r2, r3
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	fb02 f303 	mul.w	r3, r2, r3
 8002f6c:	617b      	str	r3, [r7, #20]
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002f6e:	697b      	ldr	r3, [r7, #20]
 8002f70:	613b      	str	r3, [r7, #16]
      break;
 8002f72:	e002      	b.n	8002f7a <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002f74:	4b05      	ldr	r3, [pc, #20]	; (8002f8c <HAL_RCC_GetSysClockFreq+0x9c>)
 8002f76:	613b      	str	r3, [r7, #16]
      break;
 8002f78:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002f7a:	693b      	ldr	r3, [r7, #16]
}
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	371c      	adds	r7, #28
 8002f80:	46bd      	mov	sp, r7
 8002f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f86:	4770      	bx	lr
 8002f88:	40021000 	.word	0x40021000
 8002f8c:	007a1200 	.word	0x007a1200
 8002f90:	0800839c 	.word	0x0800839c
 8002f94:	080083ac 	.word	0x080083ac

08002f98 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f98:	b480      	push	{r7}
 8002f9a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f9c:	4b03      	ldr	r3, [pc, #12]	; (8002fac <HAL_RCC_GetHCLKFreq+0x14>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
}
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa8:	4770      	bx	lr
 8002faa:	bf00      	nop
 8002fac:	2000006c 	.word	0x2000006c

08002fb0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b082      	sub	sp, #8
 8002fb4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002fb6:	f7ff ffef 	bl	8002f98 <HAL_RCC_GetHCLKFreq>
 8002fba:	4601      	mov	r1, r0
 8002fbc:	4b0b      	ldr	r3, [pc, #44]	; (8002fec <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002fbe:	685b      	ldr	r3, [r3, #4]
 8002fc0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002fc4:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002fc8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fca:	687a      	ldr	r2, [r7, #4]
 8002fcc:	fa92 f2a2 	rbit	r2, r2
 8002fd0:	603a      	str	r2, [r7, #0]
  return result;
 8002fd2:	683a      	ldr	r2, [r7, #0]
 8002fd4:	fab2 f282 	clz	r2, r2
 8002fd8:	b2d2      	uxtb	r2, r2
 8002fda:	40d3      	lsrs	r3, r2
 8002fdc:	4a04      	ldr	r2, [pc, #16]	; (8002ff0 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002fde:	5cd3      	ldrb	r3, [r2, r3]
 8002fe0:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	3708      	adds	r7, #8
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	bd80      	pop	{r7, pc}
 8002fec:	40021000 	.word	0x40021000
 8002ff0:	08008394 	.word	0x08008394

08002ff4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b082      	sub	sp, #8
 8002ff8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002ffa:	f7ff ffcd 	bl	8002f98 <HAL_RCC_GetHCLKFreq>
 8002ffe:	4601      	mov	r1, r0
 8003000:	4b0b      	ldr	r3, [pc, #44]	; (8003030 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8003008:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800300c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800300e:	687a      	ldr	r2, [r7, #4]
 8003010:	fa92 f2a2 	rbit	r2, r2
 8003014:	603a      	str	r2, [r7, #0]
  return result;
 8003016:	683a      	ldr	r2, [r7, #0]
 8003018:	fab2 f282 	clz	r2, r2
 800301c:	b2d2      	uxtb	r2, r2
 800301e:	40d3      	lsrs	r3, r2
 8003020:	4a04      	ldr	r2, [pc, #16]	; (8003034 <HAL_RCC_GetPCLK2Freq+0x40>)
 8003022:	5cd3      	ldrb	r3, [r2, r3]
 8003024:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003028:	4618      	mov	r0, r3
 800302a:	3708      	adds	r7, #8
 800302c:	46bd      	mov	sp, r7
 800302e:	bd80      	pop	{r7, pc}
 8003030:	40021000 	.word	0x40021000
 8003034:	08008394 	.word	0x08008394

08003038 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003038:	b480      	push	{r7}
 800303a:	b083      	sub	sp, #12
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
 8003040:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	220f      	movs	r2, #15
 8003046:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003048:	4b12      	ldr	r3, [pc, #72]	; (8003094 <HAL_RCC_GetClockConfig+0x5c>)
 800304a:	685b      	ldr	r3, [r3, #4]
 800304c:	f003 0203 	and.w	r2, r3, #3
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8003054:	4b0f      	ldr	r3, [pc, #60]	; (8003094 <HAL_RCC_GetClockConfig+0x5c>)
 8003056:	685b      	ldr	r3, [r3, #4]
 8003058:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 8003060:	4b0c      	ldr	r3, [pc, #48]	; (8003094 <HAL_RCC_GetClockConfig+0x5c>)
 8003062:	685b      	ldr	r3, [r3, #4]
 8003064:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800306c:	4b09      	ldr	r3, [pc, #36]	; (8003094 <HAL_RCC_GetClockConfig+0x5c>)
 800306e:	685b      	ldr	r3, [r3, #4]
 8003070:	08db      	lsrs	r3, r3, #3
 8003072:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 800307a:	4b07      	ldr	r3, [pc, #28]	; (8003098 <HAL_RCC_GetClockConfig+0x60>)
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f003 0207 	and.w	r2, r3, #7
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	601a      	str	r2, [r3, #0]
}
 8003086:	bf00      	nop
 8003088:	370c      	adds	r7, #12
 800308a:	46bd      	mov	sp, r7
 800308c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003090:	4770      	bx	lr
 8003092:	bf00      	nop
 8003094:	40021000 	.word	0x40021000
 8003098:	40022000 	.word	0x40022000

0800309c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b092      	sub	sp, #72	; 0x48
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80030a4:	2300      	movs	r3, #0
 80030a6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80030a8:	2300      	movs	r3, #0
 80030aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80030ac:	2300      	movs	r3, #0
 80030ae:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	f000 80d4 	beq.w	8003268 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80030c0:	4b4e      	ldr	r3, [pc, #312]	; (80031fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80030c2:	69db      	ldr	r3, [r3, #28]
 80030c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d10e      	bne.n	80030ea <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80030cc:	4b4b      	ldr	r3, [pc, #300]	; (80031fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80030ce:	69db      	ldr	r3, [r3, #28]
 80030d0:	4a4a      	ldr	r2, [pc, #296]	; (80031fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80030d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030d6:	61d3      	str	r3, [r2, #28]
 80030d8:	4b48      	ldr	r3, [pc, #288]	; (80031fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80030da:	69db      	ldr	r3, [r3, #28]
 80030dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030e0:	60bb      	str	r3, [r7, #8]
 80030e2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80030e4:	2301      	movs	r3, #1
 80030e6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030ea:	4b45      	ldr	r3, [pc, #276]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d118      	bne.n	8003128 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80030f6:	4b42      	ldr	r3, [pc, #264]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	4a41      	ldr	r2, [pc, #260]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80030fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003100:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003102:	f7fe f81d 	bl	8001140 <HAL_GetTick>
 8003106:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003108:	e008      	b.n	800311c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800310a:	f7fe f819 	bl	8001140 <HAL_GetTick>
 800310e:	4602      	mov	r2, r0
 8003110:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003112:	1ad3      	subs	r3, r2, r3
 8003114:	2b64      	cmp	r3, #100	; 0x64
 8003116:	d901      	bls.n	800311c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003118:	2303      	movs	r3, #3
 800311a:	e1d6      	b.n	80034ca <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800311c:	4b38      	ldr	r3, [pc, #224]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003124:	2b00      	cmp	r3, #0
 8003126:	d0f0      	beq.n	800310a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003128:	4b34      	ldr	r3, [pc, #208]	; (80031fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800312a:	6a1b      	ldr	r3, [r3, #32]
 800312c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003130:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003132:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003134:	2b00      	cmp	r3, #0
 8003136:	f000 8084 	beq.w	8003242 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003142:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003144:	429a      	cmp	r2, r3
 8003146:	d07c      	beq.n	8003242 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003148:	4b2c      	ldr	r3, [pc, #176]	; (80031fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800314a:	6a1b      	ldr	r3, [r3, #32]
 800314c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003150:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003152:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003156:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003158:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800315a:	fa93 f3a3 	rbit	r3, r3
 800315e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003160:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003162:	fab3 f383 	clz	r3, r3
 8003166:	b2db      	uxtb	r3, r3
 8003168:	461a      	mov	r2, r3
 800316a:	4b26      	ldr	r3, [pc, #152]	; (8003204 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800316c:	4413      	add	r3, r2
 800316e:	009b      	lsls	r3, r3, #2
 8003170:	461a      	mov	r2, r3
 8003172:	2301      	movs	r3, #1
 8003174:	6013      	str	r3, [r2, #0]
 8003176:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800317a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800317c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800317e:	fa93 f3a3 	rbit	r3, r3
 8003182:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003184:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003186:	fab3 f383 	clz	r3, r3
 800318a:	b2db      	uxtb	r3, r3
 800318c:	461a      	mov	r2, r3
 800318e:	4b1d      	ldr	r3, [pc, #116]	; (8003204 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003190:	4413      	add	r3, r2
 8003192:	009b      	lsls	r3, r3, #2
 8003194:	461a      	mov	r2, r3
 8003196:	2300      	movs	r3, #0
 8003198:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800319a:	4a18      	ldr	r2, [pc, #96]	; (80031fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800319c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800319e:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80031a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031a2:	f003 0301 	and.w	r3, r3, #1
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d04b      	beq.n	8003242 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031aa:	f7fd ffc9 	bl	8001140 <HAL_GetTick>
 80031ae:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031b0:	e00a      	b.n	80031c8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031b2:	f7fd ffc5 	bl	8001140 <HAL_GetTick>
 80031b6:	4602      	mov	r2, r0
 80031b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80031ba:	1ad3      	subs	r3, r2, r3
 80031bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80031c0:	4293      	cmp	r3, r2
 80031c2:	d901      	bls.n	80031c8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80031c4:	2303      	movs	r3, #3
 80031c6:	e180      	b.n	80034ca <HAL_RCCEx_PeriphCLKConfig+0x42e>
 80031c8:	2302      	movs	r3, #2
 80031ca:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031ce:	fa93 f3a3 	rbit	r3, r3
 80031d2:	627b      	str	r3, [r7, #36]	; 0x24
 80031d4:	2302      	movs	r3, #2
 80031d6:	623b      	str	r3, [r7, #32]
 80031d8:	6a3b      	ldr	r3, [r7, #32]
 80031da:	fa93 f3a3 	rbit	r3, r3
 80031de:	61fb      	str	r3, [r7, #28]
  return result;
 80031e0:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031e2:	fab3 f383 	clz	r3, r3
 80031e6:	b2db      	uxtb	r3, r3
 80031e8:	095b      	lsrs	r3, r3, #5
 80031ea:	b2db      	uxtb	r3, r3
 80031ec:	f043 0302 	orr.w	r3, r3, #2
 80031f0:	b2db      	uxtb	r3, r3
 80031f2:	2b02      	cmp	r3, #2
 80031f4:	d108      	bne.n	8003208 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80031f6:	4b01      	ldr	r3, [pc, #4]	; (80031fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031f8:	6a1b      	ldr	r3, [r3, #32]
 80031fa:	e00d      	b.n	8003218 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80031fc:	40021000 	.word	0x40021000
 8003200:	40007000 	.word	0x40007000
 8003204:	10908100 	.word	0x10908100
 8003208:	2302      	movs	r3, #2
 800320a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800320c:	69bb      	ldr	r3, [r7, #24]
 800320e:	fa93 f3a3 	rbit	r3, r3
 8003212:	617b      	str	r3, [r7, #20]
 8003214:	4b9a      	ldr	r3, [pc, #616]	; (8003480 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003218:	2202      	movs	r2, #2
 800321a:	613a      	str	r2, [r7, #16]
 800321c:	693a      	ldr	r2, [r7, #16]
 800321e:	fa92 f2a2 	rbit	r2, r2
 8003222:	60fa      	str	r2, [r7, #12]
  return result;
 8003224:	68fa      	ldr	r2, [r7, #12]
 8003226:	fab2 f282 	clz	r2, r2
 800322a:	b2d2      	uxtb	r2, r2
 800322c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003230:	b2d2      	uxtb	r2, r2
 8003232:	f002 021f 	and.w	r2, r2, #31
 8003236:	2101      	movs	r1, #1
 8003238:	fa01 f202 	lsl.w	r2, r1, r2
 800323c:	4013      	ands	r3, r2
 800323e:	2b00      	cmp	r3, #0
 8003240:	d0b7      	beq.n	80031b2 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003242:	4b8f      	ldr	r3, [pc, #572]	; (8003480 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003244:	6a1b      	ldr	r3, [r3, #32]
 8003246:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	685b      	ldr	r3, [r3, #4]
 800324e:	498c      	ldr	r1, [pc, #560]	; (8003480 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003250:	4313      	orrs	r3, r2
 8003252:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003254:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003258:	2b01      	cmp	r3, #1
 800325a:	d105      	bne.n	8003268 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800325c:	4b88      	ldr	r3, [pc, #544]	; (8003480 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800325e:	69db      	ldr	r3, [r3, #28]
 8003260:	4a87      	ldr	r2, [pc, #540]	; (8003480 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003262:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003266:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f003 0301 	and.w	r3, r3, #1
 8003270:	2b00      	cmp	r3, #0
 8003272:	d008      	beq.n	8003286 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003274:	4b82      	ldr	r3, [pc, #520]	; (8003480 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003276:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003278:	f023 0203 	bic.w	r2, r3, #3
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	689b      	ldr	r3, [r3, #8]
 8003280:	497f      	ldr	r1, [pc, #508]	; (8003480 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003282:	4313      	orrs	r3, r2
 8003284:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f003 0302 	and.w	r3, r3, #2
 800328e:	2b00      	cmp	r3, #0
 8003290:	d008      	beq.n	80032a4 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003292:	4b7b      	ldr	r3, [pc, #492]	; (8003480 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003296:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	68db      	ldr	r3, [r3, #12]
 800329e:	4978      	ldr	r1, [pc, #480]	; (8003480 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80032a0:	4313      	orrs	r3, r2
 80032a2:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f003 0304 	and.w	r3, r3, #4
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d008      	beq.n	80032c2 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80032b0:	4b73      	ldr	r3, [pc, #460]	; (8003480 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80032b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032b4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	691b      	ldr	r3, [r3, #16]
 80032bc:	4970      	ldr	r1, [pc, #448]	; (8003480 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80032be:	4313      	orrs	r3, r2
 80032c0:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f003 0320 	and.w	r3, r3, #32
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d008      	beq.n	80032e0 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80032ce:	4b6c      	ldr	r3, [pc, #432]	; (8003480 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80032d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032d2:	f023 0210 	bic.w	r2, r3, #16
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	69db      	ldr	r3, [r3, #28]
 80032da:	4969      	ldr	r1, [pc, #420]	; (8003480 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80032dc:	4313      	orrs	r3, r2
 80032de:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d008      	beq.n	80032fe <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80032ec:	4b64      	ldr	r3, [pc, #400]	; (8003480 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80032ee:	685b      	ldr	r3, [r3, #4]
 80032f0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032f8:	4961      	ldr	r1, [pc, #388]	; (8003480 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80032fa:	4313      	orrs	r3, r2
 80032fc:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003306:	2b00      	cmp	r3, #0
 8003308:	d008      	beq.n	800331c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800330a:	4b5d      	ldr	r3, [pc, #372]	; (8003480 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800330c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800330e:	f023 0220 	bic.w	r2, r3, #32
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6a1b      	ldr	r3, [r3, #32]
 8003316:	495a      	ldr	r1, [pc, #360]	; (8003480 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003318:	4313      	orrs	r3, r2
 800331a:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003324:	2b00      	cmp	r3, #0
 8003326:	d008      	beq.n	800333a <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003328:	4b55      	ldr	r3, [pc, #340]	; (8003480 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800332a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800332c:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003334:	4952      	ldr	r1, [pc, #328]	; (8003480 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003336:	4313      	orrs	r3, r2
 8003338:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f003 0308 	and.w	r3, r3, #8
 8003342:	2b00      	cmp	r3, #0
 8003344:	d008      	beq.n	8003358 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003346:	4b4e      	ldr	r3, [pc, #312]	; (8003480 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800334a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	695b      	ldr	r3, [r3, #20]
 8003352:	494b      	ldr	r1, [pc, #300]	; (8003480 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003354:	4313      	orrs	r3, r2
 8003356:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f003 0310 	and.w	r3, r3, #16
 8003360:	2b00      	cmp	r3, #0
 8003362:	d008      	beq.n	8003376 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003364:	4b46      	ldr	r3, [pc, #280]	; (8003480 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003366:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003368:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	699b      	ldr	r3, [r3, #24]
 8003370:	4943      	ldr	r1, [pc, #268]	; (8003480 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003372:	4313      	orrs	r3, r2
 8003374:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800337e:	2b00      	cmp	r3, #0
 8003380:	d008      	beq.n	8003394 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003382:	4b3f      	ldr	r3, [pc, #252]	; (8003480 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003384:	685b      	ldr	r3, [r3, #4]
 8003386:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800338e:	493c      	ldr	r1, [pc, #240]	; (8003480 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003390:	4313      	orrs	r3, r2
 8003392:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800339c:	2b00      	cmp	r3, #0
 800339e:	d008      	beq.n	80033b2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80033a0:	4b37      	ldr	r3, [pc, #220]	; (8003480 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80033a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033a4:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033ac:	4934      	ldr	r1, [pc, #208]	; (8003480 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80033ae:	4313      	orrs	r3, r2
 80033b0:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d008      	beq.n	80033d0 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80033be:	4b30      	ldr	r3, [pc, #192]	; (8003480 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80033c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033c2:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033ca:	492d      	ldr	r1, [pc, #180]	; (8003480 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80033cc:	4313      	orrs	r3, r2
 80033ce:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d008      	beq.n	80033ee <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80033dc:	4b28      	ldr	r3, [pc, #160]	; (8003480 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80033de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033e0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033e8:	4925      	ldr	r1, [pc, #148]	; (8003480 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80033ea:	4313      	orrs	r3, r2
 80033ec:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d008      	beq.n	800340c <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80033fa:	4b21      	ldr	r3, [pc, #132]	; (8003480 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80033fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033fe:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003406:	491e      	ldr	r1, [pc, #120]	; (8003480 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003408:	4313      	orrs	r3, r2
 800340a:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003414:	2b00      	cmp	r3, #0
 8003416:	d008      	beq.n	800342a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8003418:	4b19      	ldr	r3, [pc, #100]	; (8003480 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800341a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800341c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003424:	4916      	ldr	r1, [pc, #88]	; (8003480 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003426:	4313      	orrs	r3, r2
 8003428:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003432:	2b00      	cmp	r3, #0
 8003434:	d008      	beq.n	8003448 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8003436:	4b12      	ldr	r3, [pc, #72]	; (8003480 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800343a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003442:	490f      	ldr	r1, [pc, #60]	; (8003480 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003444:	4313      	orrs	r3, r2
 8003446:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003450:	2b00      	cmp	r3, #0
 8003452:	d008      	beq.n	8003466 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8003454:	4b0a      	ldr	r3, [pc, #40]	; (8003480 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003456:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003458:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003460:	4907      	ldr	r1, [pc, #28]	; (8003480 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003462:	4313      	orrs	r3, r2
 8003464:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800346e:	2b00      	cmp	r3, #0
 8003470:	d00c      	beq.n	800348c <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8003472:	4b03      	ldr	r3, [pc, #12]	; (8003480 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003476:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	e002      	b.n	8003484 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 800347e:	bf00      	nop
 8003480:	40021000 	.word	0x40021000
 8003484:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003486:	4913      	ldr	r1, [pc, #76]	; (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003488:	4313      	orrs	r3, r2
 800348a:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003494:	2b00      	cmp	r3, #0
 8003496:	d008      	beq.n	80034aa <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8003498:	4b0e      	ldr	r3, [pc, #56]	; (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800349a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800349c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034a4:	490b      	ldr	r1, [pc, #44]	; (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80034a6:	4313      	orrs	r3, r2
 80034a8:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d008      	beq.n	80034c8 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 80034b6:	4b07      	ldr	r3, [pc, #28]	; (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80034b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034ba:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034c2:	4904      	ldr	r1, [pc, #16]	; (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80034c4:	4313      	orrs	r3, r2
 80034c6:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80034c8:	2300      	movs	r3, #0
}
 80034ca:	4618      	mov	r0, r3
 80034cc:	3748      	adds	r7, #72	; 0x48
 80034ce:	46bd      	mov	sp, r7
 80034d0:	bd80      	pop	{r7, pc}
 80034d2:	bf00      	nop
 80034d4:	40021000 	.word	0x40021000

080034d8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b082      	sub	sp, #8
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d101      	bne.n	80034ea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80034e6:	2301      	movs	r3, #1
 80034e8:	e049      	b.n	800357e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034f0:	b2db      	uxtb	r3, r3
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d106      	bne.n	8003504 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	2200      	movs	r2, #0
 80034fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80034fe:	6878      	ldr	r0, [r7, #4]
 8003500:	f000 f841 	bl	8003586 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2202      	movs	r2, #2
 8003508:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681a      	ldr	r2, [r3, #0]
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	3304      	adds	r3, #4
 8003514:	4619      	mov	r1, r3
 8003516:	4610      	mov	r0, r2
 8003518:	f000 f9da 	bl	80038d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2201      	movs	r2, #1
 8003520:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2201      	movs	r2, #1
 8003528:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2201      	movs	r2, #1
 8003530:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2201      	movs	r2, #1
 8003538:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2201      	movs	r2, #1
 8003540:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2201      	movs	r2, #1
 8003548:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2201      	movs	r2, #1
 8003550:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2201      	movs	r2, #1
 8003558:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2201      	movs	r2, #1
 8003560:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2201      	movs	r2, #1
 8003568:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2201      	movs	r2, #1
 8003570:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2201      	movs	r2, #1
 8003578:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800357c:	2300      	movs	r3, #0
}
 800357e:	4618      	mov	r0, r3
 8003580:	3708      	adds	r7, #8
 8003582:	46bd      	mov	sp, r7
 8003584:	bd80      	pop	{r7, pc}

08003586 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003586:	b480      	push	{r7}
 8003588:	b083      	sub	sp, #12
 800358a:	af00      	add	r7, sp, #0
 800358c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800358e:	bf00      	nop
 8003590:	370c      	adds	r7, #12
 8003592:	46bd      	mov	sp, r7
 8003594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003598:	4770      	bx	lr
	...

0800359c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800359c:	b480      	push	{r7}
 800359e:	b085      	sub	sp, #20
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035aa:	b2db      	uxtb	r3, r3
 80035ac:	2b01      	cmp	r3, #1
 80035ae:	d001      	beq.n	80035b4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80035b0:	2301      	movs	r3, #1
 80035b2:	e04f      	b.n	8003654 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2202      	movs	r2, #2
 80035b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	68da      	ldr	r2, [r3, #12]
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f042 0201 	orr.w	r2, r2, #1
 80035ca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	4a23      	ldr	r2, [pc, #140]	; (8003660 <HAL_TIM_Base_Start_IT+0xc4>)
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d01d      	beq.n	8003612 <HAL_TIM_Base_Start_IT+0x76>
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035de:	d018      	beq.n	8003612 <HAL_TIM_Base_Start_IT+0x76>
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	4a1f      	ldr	r2, [pc, #124]	; (8003664 <HAL_TIM_Base_Start_IT+0xc8>)
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d013      	beq.n	8003612 <HAL_TIM_Base_Start_IT+0x76>
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	4a1e      	ldr	r2, [pc, #120]	; (8003668 <HAL_TIM_Base_Start_IT+0xcc>)
 80035f0:	4293      	cmp	r3, r2
 80035f2:	d00e      	beq.n	8003612 <HAL_TIM_Base_Start_IT+0x76>
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	4a1c      	ldr	r2, [pc, #112]	; (800366c <HAL_TIM_Base_Start_IT+0xd0>)
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d009      	beq.n	8003612 <HAL_TIM_Base_Start_IT+0x76>
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	4a1b      	ldr	r2, [pc, #108]	; (8003670 <HAL_TIM_Base_Start_IT+0xd4>)
 8003604:	4293      	cmp	r3, r2
 8003606:	d004      	beq.n	8003612 <HAL_TIM_Base_Start_IT+0x76>
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	4a19      	ldr	r2, [pc, #100]	; (8003674 <HAL_TIM_Base_Start_IT+0xd8>)
 800360e:	4293      	cmp	r3, r2
 8003610:	d115      	bne.n	800363e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	689a      	ldr	r2, [r3, #8]
 8003618:	4b17      	ldr	r3, [pc, #92]	; (8003678 <HAL_TIM_Base_Start_IT+0xdc>)
 800361a:	4013      	ands	r3, r2
 800361c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	2b06      	cmp	r3, #6
 8003622:	d015      	beq.n	8003650 <HAL_TIM_Base_Start_IT+0xb4>
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800362a:	d011      	beq.n	8003650 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	681a      	ldr	r2, [r3, #0]
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f042 0201 	orr.w	r2, r2, #1
 800363a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800363c:	e008      	b.n	8003650 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	681a      	ldr	r2, [r3, #0]
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f042 0201 	orr.w	r2, r2, #1
 800364c:	601a      	str	r2, [r3, #0]
 800364e:	e000      	b.n	8003652 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003650:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003652:	2300      	movs	r3, #0
}
 8003654:	4618      	mov	r0, r3
 8003656:	3714      	adds	r7, #20
 8003658:	46bd      	mov	sp, r7
 800365a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365e:	4770      	bx	lr
 8003660:	40012c00 	.word	0x40012c00
 8003664:	40000400 	.word	0x40000400
 8003668:	40000800 	.word	0x40000800
 800366c:	40013400 	.word	0x40013400
 8003670:	40014000 	.word	0x40014000
 8003674:	40015000 	.word	0x40015000
 8003678:	00010007 	.word	0x00010007

0800367c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	b084      	sub	sp, #16
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	68db      	ldr	r3, [r3, #12]
 800368a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	691b      	ldr	r3, [r3, #16]
 8003692:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003694:	68bb      	ldr	r3, [r7, #8]
 8003696:	f003 0302 	and.w	r3, r3, #2
 800369a:	2b00      	cmp	r3, #0
 800369c:	d020      	beq.n	80036e0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	f003 0302 	and.w	r3, r3, #2
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d01b      	beq.n	80036e0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f06f 0202 	mvn.w	r2, #2
 80036b0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	2201      	movs	r2, #1
 80036b6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	699b      	ldr	r3, [r3, #24]
 80036be:	f003 0303 	and.w	r3, r3, #3
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d003      	beq.n	80036ce <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80036c6:	6878      	ldr	r0, [r7, #4]
 80036c8:	f000 f8e4 	bl	8003894 <HAL_TIM_IC_CaptureCallback>
 80036cc:	e005      	b.n	80036da <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80036ce:	6878      	ldr	r0, [r7, #4]
 80036d0:	f000 f8d6 	bl	8003880 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036d4:	6878      	ldr	r0, [r7, #4]
 80036d6:	f000 f8e7 	bl	80038a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	2200      	movs	r2, #0
 80036de:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80036e0:	68bb      	ldr	r3, [r7, #8]
 80036e2:	f003 0304 	and.w	r3, r3, #4
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d020      	beq.n	800372c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	f003 0304 	and.w	r3, r3, #4
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d01b      	beq.n	800372c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f06f 0204 	mvn.w	r2, #4
 80036fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	2202      	movs	r2, #2
 8003702:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	699b      	ldr	r3, [r3, #24]
 800370a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800370e:	2b00      	cmp	r3, #0
 8003710:	d003      	beq.n	800371a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003712:	6878      	ldr	r0, [r7, #4]
 8003714:	f000 f8be 	bl	8003894 <HAL_TIM_IC_CaptureCallback>
 8003718:	e005      	b.n	8003726 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800371a:	6878      	ldr	r0, [r7, #4]
 800371c:	f000 f8b0 	bl	8003880 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003720:	6878      	ldr	r0, [r7, #4]
 8003722:	f000 f8c1 	bl	80038a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2200      	movs	r2, #0
 800372a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800372c:	68bb      	ldr	r3, [r7, #8]
 800372e:	f003 0308 	and.w	r3, r3, #8
 8003732:	2b00      	cmp	r3, #0
 8003734:	d020      	beq.n	8003778 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	f003 0308 	and.w	r3, r3, #8
 800373c:	2b00      	cmp	r3, #0
 800373e:	d01b      	beq.n	8003778 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f06f 0208 	mvn.w	r2, #8
 8003748:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	2204      	movs	r2, #4
 800374e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	69db      	ldr	r3, [r3, #28]
 8003756:	f003 0303 	and.w	r3, r3, #3
 800375a:	2b00      	cmp	r3, #0
 800375c:	d003      	beq.n	8003766 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800375e:	6878      	ldr	r0, [r7, #4]
 8003760:	f000 f898 	bl	8003894 <HAL_TIM_IC_CaptureCallback>
 8003764:	e005      	b.n	8003772 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003766:	6878      	ldr	r0, [r7, #4]
 8003768:	f000 f88a 	bl	8003880 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800376c:	6878      	ldr	r0, [r7, #4]
 800376e:	f000 f89b 	bl	80038a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	2200      	movs	r2, #0
 8003776:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003778:	68bb      	ldr	r3, [r7, #8]
 800377a:	f003 0310 	and.w	r3, r3, #16
 800377e:	2b00      	cmp	r3, #0
 8003780:	d020      	beq.n	80037c4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	f003 0310 	and.w	r3, r3, #16
 8003788:	2b00      	cmp	r3, #0
 800378a:	d01b      	beq.n	80037c4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f06f 0210 	mvn.w	r2, #16
 8003794:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2208      	movs	r2, #8
 800379a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	69db      	ldr	r3, [r3, #28]
 80037a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d003      	beq.n	80037b2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80037aa:	6878      	ldr	r0, [r7, #4]
 80037ac:	f000 f872 	bl	8003894 <HAL_TIM_IC_CaptureCallback>
 80037b0:	e005      	b.n	80037be <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037b2:	6878      	ldr	r0, [r7, #4]
 80037b4:	f000 f864 	bl	8003880 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037b8:	6878      	ldr	r0, [r7, #4]
 80037ba:	f000 f875 	bl	80038a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	2200      	movs	r2, #0
 80037c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80037c4:	68bb      	ldr	r3, [r7, #8]
 80037c6:	f003 0301 	and.w	r3, r3, #1
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d00c      	beq.n	80037e8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	f003 0301 	and.w	r3, r3, #1
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d007      	beq.n	80037e8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f06f 0201 	mvn.w	r2, #1
 80037e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80037e2:	6878      	ldr	r0, [r7, #4]
 80037e4:	f7fd fa92 	bl	8000d0c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80037e8:	68bb      	ldr	r3, [r7, #8]
 80037ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d00c      	beq.n	800380c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d007      	beq.n	800380c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003804:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003806:	6878      	ldr	r0, [r7, #4]
 8003808:	f000 f916 	bl	8003a38 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800380c:	68bb      	ldr	r3, [r7, #8]
 800380e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003812:	2b00      	cmp	r3, #0
 8003814:	d00c      	beq.n	8003830 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800381c:	2b00      	cmp	r3, #0
 800381e:	d007      	beq.n	8003830 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003828:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800382a:	6878      	ldr	r0, [r7, #4]
 800382c:	f000 f90e 	bl	8003a4c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003830:	68bb      	ldr	r3, [r7, #8]
 8003832:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003836:	2b00      	cmp	r3, #0
 8003838:	d00c      	beq.n	8003854 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003840:	2b00      	cmp	r3, #0
 8003842:	d007      	beq.n	8003854 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800384c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800384e:	6878      	ldr	r0, [r7, #4]
 8003850:	f000 f834 	bl	80038bc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003854:	68bb      	ldr	r3, [r7, #8]
 8003856:	f003 0320 	and.w	r3, r3, #32
 800385a:	2b00      	cmp	r3, #0
 800385c:	d00c      	beq.n	8003878 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	f003 0320 	and.w	r3, r3, #32
 8003864:	2b00      	cmp	r3, #0
 8003866:	d007      	beq.n	8003878 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f06f 0220 	mvn.w	r2, #32
 8003870:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003872:	6878      	ldr	r0, [r7, #4]
 8003874:	f000 f8d6 	bl	8003a24 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003878:	bf00      	nop
 800387a:	3710      	adds	r7, #16
 800387c:	46bd      	mov	sp, r7
 800387e:	bd80      	pop	{r7, pc}

08003880 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003880:	b480      	push	{r7}
 8003882:	b083      	sub	sp, #12
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003888:	bf00      	nop
 800388a:	370c      	adds	r7, #12
 800388c:	46bd      	mov	sp, r7
 800388e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003892:	4770      	bx	lr

08003894 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003894:	b480      	push	{r7}
 8003896:	b083      	sub	sp, #12
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800389c:	bf00      	nop
 800389e:	370c      	adds	r7, #12
 80038a0:	46bd      	mov	sp, r7
 80038a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a6:	4770      	bx	lr

080038a8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80038a8:	b480      	push	{r7}
 80038aa:	b083      	sub	sp, #12
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80038b0:	bf00      	nop
 80038b2:	370c      	adds	r7, #12
 80038b4:	46bd      	mov	sp, r7
 80038b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ba:	4770      	bx	lr

080038bc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80038bc:	b480      	push	{r7}
 80038be:	b083      	sub	sp, #12
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80038c4:	bf00      	nop
 80038c6:	370c      	adds	r7, #12
 80038c8:	46bd      	mov	sp, r7
 80038ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ce:	4770      	bx	lr

080038d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80038d0:	b480      	push	{r7}
 80038d2:	b085      	sub	sp, #20
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
 80038d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	4a48      	ldr	r2, [pc, #288]	; (8003a04 <TIM_Base_SetConfig+0x134>)
 80038e4:	4293      	cmp	r3, r2
 80038e6:	d013      	beq.n	8003910 <TIM_Base_SetConfig+0x40>
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038ee:	d00f      	beq.n	8003910 <TIM_Base_SetConfig+0x40>
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	4a45      	ldr	r2, [pc, #276]	; (8003a08 <TIM_Base_SetConfig+0x138>)
 80038f4:	4293      	cmp	r3, r2
 80038f6:	d00b      	beq.n	8003910 <TIM_Base_SetConfig+0x40>
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	4a44      	ldr	r2, [pc, #272]	; (8003a0c <TIM_Base_SetConfig+0x13c>)
 80038fc:	4293      	cmp	r3, r2
 80038fe:	d007      	beq.n	8003910 <TIM_Base_SetConfig+0x40>
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	4a43      	ldr	r2, [pc, #268]	; (8003a10 <TIM_Base_SetConfig+0x140>)
 8003904:	4293      	cmp	r3, r2
 8003906:	d003      	beq.n	8003910 <TIM_Base_SetConfig+0x40>
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	4a42      	ldr	r2, [pc, #264]	; (8003a14 <TIM_Base_SetConfig+0x144>)
 800390c:	4293      	cmp	r3, r2
 800390e:	d108      	bne.n	8003922 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003916:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	685b      	ldr	r3, [r3, #4]
 800391c:	68fa      	ldr	r2, [r7, #12]
 800391e:	4313      	orrs	r3, r2
 8003920:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	4a37      	ldr	r2, [pc, #220]	; (8003a04 <TIM_Base_SetConfig+0x134>)
 8003926:	4293      	cmp	r3, r2
 8003928:	d01f      	beq.n	800396a <TIM_Base_SetConfig+0x9a>
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003930:	d01b      	beq.n	800396a <TIM_Base_SetConfig+0x9a>
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	4a34      	ldr	r2, [pc, #208]	; (8003a08 <TIM_Base_SetConfig+0x138>)
 8003936:	4293      	cmp	r3, r2
 8003938:	d017      	beq.n	800396a <TIM_Base_SetConfig+0x9a>
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	4a33      	ldr	r2, [pc, #204]	; (8003a0c <TIM_Base_SetConfig+0x13c>)
 800393e:	4293      	cmp	r3, r2
 8003940:	d013      	beq.n	800396a <TIM_Base_SetConfig+0x9a>
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	4a32      	ldr	r2, [pc, #200]	; (8003a10 <TIM_Base_SetConfig+0x140>)
 8003946:	4293      	cmp	r3, r2
 8003948:	d00f      	beq.n	800396a <TIM_Base_SetConfig+0x9a>
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	4a32      	ldr	r2, [pc, #200]	; (8003a18 <TIM_Base_SetConfig+0x148>)
 800394e:	4293      	cmp	r3, r2
 8003950:	d00b      	beq.n	800396a <TIM_Base_SetConfig+0x9a>
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	4a31      	ldr	r2, [pc, #196]	; (8003a1c <TIM_Base_SetConfig+0x14c>)
 8003956:	4293      	cmp	r3, r2
 8003958:	d007      	beq.n	800396a <TIM_Base_SetConfig+0x9a>
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	4a30      	ldr	r2, [pc, #192]	; (8003a20 <TIM_Base_SetConfig+0x150>)
 800395e:	4293      	cmp	r3, r2
 8003960:	d003      	beq.n	800396a <TIM_Base_SetConfig+0x9a>
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	4a2b      	ldr	r2, [pc, #172]	; (8003a14 <TIM_Base_SetConfig+0x144>)
 8003966:	4293      	cmp	r3, r2
 8003968:	d108      	bne.n	800397c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003970:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003972:	683b      	ldr	r3, [r7, #0]
 8003974:	68db      	ldr	r3, [r3, #12]
 8003976:	68fa      	ldr	r2, [r7, #12]
 8003978:	4313      	orrs	r3, r2
 800397a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	695b      	ldr	r3, [r3, #20]
 8003986:	4313      	orrs	r3, r2
 8003988:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	68fa      	ldr	r2, [r7, #12]
 800398e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	689a      	ldr	r2, [r3, #8]
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	681a      	ldr	r2, [r3, #0]
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	4a18      	ldr	r2, [pc, #96]	; (8003a04 <TIM_Base_SetConfig+0x134>)
 80039a4:	4293      	cmp	r3, r2
 80039a6:	d013      	beq.n	80039d0 <TIM_Base_SetConfig+0x100>
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	4a19      	ldr	r2, [pc, #100]	; (8003a10 <TIM_Base_SetConfig+0x140>)
 80039ac:	4293      	cmp	r3, r2
 80039ae:	d00f      	beq.n	80039d0 <TIM_Base_SetConfig+0x100>
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	4a19      	ldr	r2, [pc, #100]	; (8003a18 <TIM_Base_SetConfig+0x148>)
 80039b4:	4293      	cmp	r3, r2
 80039b6:	d00b      	beq.n	80039d0 <TIM_Base_SetConfig+0x100>
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	4a18      	ldr	r2, [pc, #96]	; (8003a1c <TIM_Base_SetConfig+0x14c>)
 80039bc:	4293      	cmp	r3, r2
 80039be:	d007      	beq.n	80039d0 <TIM_Base_SetConfig+0x100>
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	4a17      	ldr	r2, [pc, #92]	; (8003a20 <TIM_Base_SetConfig+0x150>)
 80039c4:	4293      	cmp	r3, r2
 80039c6:	d003      	beq.n	80039d0 <TIM_Base_SetConfig+0x100>
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	4a12      	ldr	r2, [pc, #72]	; (8003a14 <TIM_Base_SetConfig+0x144>)
 80039cc:	4293      	cmp	r3, r2
 80039ce:	d103      	bne.n	80039d8 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	691a      	ldr	r2, [r3, #16]
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2201      	movs	r2, #1
 80039dc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	691b      	ldr	r3, [r3, #16]
 80039e2:	f003 0301 	and.w	r3, r3, #1
 80039e6:	2b01      	cmp	r3, #1
 80039e8:	d105      	bne.n	80039f6 <TIM_Base_SetConfig+0x126>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	691b      	ldr	r3, [r3, #16]
 80039ee:	f023 0201 	bic.w	r2, r3, #1
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	611a      	str	r2, [r3, #16]
  }
}
 80039f6:	bf00      	nop
 80039f8:	3714      	adds	r7, #20
 80039fa:	46bd      	mov	sp, r7
 80039fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a00:	4770      	bx	lr
 8003a02:	bf00      	nop
 8003a04:	40012c00 	.word	0x40012c00
 8003a08:	40000400 	.word	0x40000400
 8003a0c:	40000800 	.word	0x40000800
 8003a10:	40013400 	.word	0x40013400
 8003a14:	40015000 	.word	0x40015000
 8003a18:	40014000 	.word	0x40014000
 8003a1c:	40014400 	.word	0x40014400
 8003a20:	40014800 	.word	0x40014800

08003a24 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003a24:	b480      	push	{r7}
 8003a26:	b083      	sub	sp, #12
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003a2c:	bf00      	nop
 8003a2e:	370c      	adds	r7, #12
 8003a30:	46bd      	mov	sp, r7
 8003a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a36:	4770      	bx	lr

08003a38 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003a38:	b480      	push	{r7}
 8003a3a:	b083      	sub	sp, #12
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003a40:	bf00      	nop
 8003a42:	370c      	adds	r7, #12
 8003a44:	46bd      	mov	sp, r7
 8003a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4a:	4770      	bx	lr

08003a4c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003a4c:	b480      	push	{r7}
 8003a4e:	b083      	sub	sp, #12
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003a54:	bf00      	nop
 8003a56:	370c      	adds	r7, #12
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5e:	4770      	bx	lr

08003a60 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b082      	sub	sp, #8
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d101      	bne.n	8003a72 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003a6e:	2301      	movs	r3, #1
 8003a70:	e040      	b.n	8003af4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d106      	bne.n	8003a88 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003a82:	6878      	ldr	r0, [r7, #4]
 8003a84:	f7fd f982 	bl	8000d8c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2224      	movs	r2, #36	; 0x24
 8003a8c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	681a      	ldr	r2, [r3, #0]
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f022 0201 	bic.w	r2, r2, #1
 8003a9c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d002      	beq.n	8003aac <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003aa6:	6878      	ldr	r0, [r7, #4]
 8003aa8:	f000 fd8c 	bl	80045c4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003aac:	6878      	ldr	r0, [r7, #4]
 8003aae:	f000 fbb5 	bl	800421c <UART_SetConfig>
 8003ab2:	4603      	mov	r3, r0
 8003ab4:	2b01      	cmp	r3, #1
 8003ab6:	d101      	bne.n	8003abc <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003ab8:	2301      	movs	r3, #1
 8003aba:	e01b      	b.n	8003af4 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	685a      	ldr	r2, [r3, #4]
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003aca:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	689a      	ldr	r2, [r3, #8]
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003ada:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	681a      	ldr	r2, [r3, #0]
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f042 0201 	orr.w	r2, r2, #1
 8003aea:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003aec:	6878      	ldr	r0, [r7, #4]
 8003aee:	f000 fe0b 	bl	8004708 <UART_CheckIdleState>
 8003af2:	4603      	mov	r3, r0
}
 8003af4:	4618      	mov	r0, r3
 8003af6:	3708      	adds	r7, #8
 8003af8:	46bd      	mov	sp, r7
 8003afa:	bd80      	pop	{r7, pc}

08003afc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b08a      	sub	sp, #40	; 0x28
 8003b00:	af02      	add	r7, sp, #8
 8003b02:	60f8      	str	r0, [r7, #12]
 8003b04:	60b9      	str	r1, [r7, #8]
 8003b06:	603b      	str	r3, [r7, #0]
 8003b08:	4613      	mov	r3, r2
 8003b0a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003b10:	2b20      	cmp	r3, #32
 8003b12:	d178      	bne.n	8003c06 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b14:	68bb      	ldr	r3, [r7, #8]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d002      	beq.n	8003b20 <HAL_UART_Transmit+0x24>
 8003b1a:	88fb      	ldrh	r3, [r7, #6]
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d101      	bne.n	8003b24 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003b20:	2301      	movs	r3, #1
 8003b22:	e071      	b.n	8003c08 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	2200      	movs	r2, #0
 8003b28:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	2221      	movs	r2, #33	; 0x21
 8003b30:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003b32:	f7fd fb05 	bl	8001140 <HAL_GetTick>
 8003b36:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	88fa      	ldrh	r2, [r7, #6]
 8003b3c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	88fa      	ldrh	r2, [r7, #6]
 8003b44:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	689b      	ldr	r3, [r3, #8]
 8003b4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b50:	d108      	bne.n	8003b64 <HAL_UART_Transmit+0x68>
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	691b      	ldr	r3, [r3, #16]
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d104      	bne.n	8003b64 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003b5e:	68bb      	ldr	r3, [r7, #8]
 8003b60:	61bb      	str	r3, [r7, #24]
 8003b62:	e003      	b.n	8003b6c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003b64:	68bb      	ldr	r3, [r7, #8]
 8003b66:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003b68:	2300      	movs	r3, #0
 8003b6a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003b6c:	e030      	b.n	8003bd0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003b6e:	683b      	ldr	r3, [r7, #0]
 8003b70:	9300      	str	r3, [sp, #0]
 8003b72:	697b      	ldr	r3, [r7, #20]
 8003b74:	2200      	movs	r2, #0
 8003b76:	2180      	movs	r1, #128	; 0x80
 8003b78:	68f8      	ldr	r0, [r7, #12]
 8003b7a:	f000 fe6d 	bl	8004858 <UART_WaitOnFlagUntilTimeout>
 8003b7e:	4603      	mov	r3, r0
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d004      	beq.n	8003b8e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	2220      	movs	r2, #32
 8003b88:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8003b8a:	2303      	movs	r3, #3
 8003b8c:	e03c      	b.n	8003c08 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8003b8e:	69fb      	ldr	r3, [r7, #28]
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d10b      	bne.n	8003bac <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003b94:	69bb      	ldr	r3, [r7, #24]
 8003b96:	881a      	ldrh	r2, [r3, #0]
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003ba0:	b292      	uxth	r2, r2
 8003ba2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003ba4:	69bb      	ldr	r3, [r7, #24]
 8003ba6:	3302      	adds	r3, #2
 8003ba8:	61bb      	str	r3, [r7, #24]
 8003baa:	e008      	b.n	8003bbe <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003bac:	69fb      	ldr	r3, [r7, #28]
 8003bae:	781a      	ldrb	r2, [r3, #0]
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	b292      	uxth	r2, r2
 8003bb6:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003bb8:	69fb      	ldr	r3, [r7, #28]
 8003bba:	3301      	adds	r3, #1
 8003bbc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003bc4:	b29b      	uxth	r3, r3
 8003bc6:	3b01      	subs	r3, #1
 8003bc8:	b29a      	uxth	r2, r3
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003bd6:	b29b      	uxth	r3, r3
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d1c8      	bne.n	8003b6e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	9300      	str	r3, [sp, #0]
 8003be0:	697b      	ldr	r3, [r7, #20]
 8003be2:	2200      	movs	r2, #0
 8003be4:	2140      	movs	r1, #64	; 0x40
 8003be6:	68f8      	ldr	r0, [r7, #12]
 8003be8:	f000 fe36 	bl	8004858 <UART_WaitOnFlagUntilTimeout>
 8003bec:	4603      	mov	r3, r0
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d004      	beq.n	8003bfc <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	2220      	movs	r2, #32
 8003bf6:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8003bf8:	2303      	movs	r3, #3
 8003bfa:	e005      	b.n	8003c08 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	2220      	movs	r2, #32
 8003c00:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8003c02:	2300      	movs	r3, #0
 8003c04:	e000      	b.n	8003c08 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8003c06:	2302      	movs	r3, #2
  }
}
 8003c08:	4618      	mov	r0, r3
 8003c0a:	3720      	adds	r7, #32
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	bd80      	pop	{r7, pc}

08003c10 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b0ba      	sub	sp, #232	; 0xe8
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	69db      	ldr	r3, [r3, #28]
 8003c1e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	689b      	ldr	r3, [r3, #8]
 8003c32:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003c36:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8003c3a:	f640 030f 	movw	r3, #2063	; 0x80f
 8003c3e:	4013      	ands	r3, r2
 8003c40:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8003c44:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d115      	bne.n	8003c78 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003c4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c50:	f003 0320 	and.w	r3, r3, #32
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d00f      	beq.n	8003c78 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003c58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c5c:	f003 0320 	and.w	r3, r3, #32
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d009      	beq.n	8003c78 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	f000 82ab 	beq.w	80041c4 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003c72:	6878      	ldr	r0, [r7, #4]
 8003c74:	4798      	blx	r3
      }
      return;
 8003c76:	e2a5      	b.n	80041c4 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003c78:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	f000 8117 	beq.w	8003eb0 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003c82:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003c86:	f003 0301 	and.w	r3, r3, #1
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d106      	bne.n	8003c9c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003c8e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8003c92:	4b85      	ldr	r3, [pc, #532]	; (8003ea8 <HAL_UART_IRQHandler+0x298>)
 8003c94:	4013      	ands	r3, r2
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	f000 810a 	beq.w	8003eb0 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003c9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ca0:	f003 0301 	and.w	r3, r3, #1
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d011      	beq.n	8003ccc <HAL_UART_IRQHandler+0xbc>
 8003ca8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003cac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d00b      	beq.n	8003ccc <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	2201      	movs	r2, #1
 8003cba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003cc2:	f043 0201 	orr.w	r2, r3, #1
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003ccc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003cd0:	f003 0302 	and.w	r3, r3, #2
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d011      	beq.n	8003cfc <HAL_UART_IRQHandler+0xec>
 8003cd8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003cdc:	f003 0301 	and.w	r3, r3, #1
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d00b      	beq.n	8003cfc <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	2202      	movs	r2, #2
 8003cea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003cf2:	f043 0204 	orr.w	r2, r3, #4
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003cfc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d00:	f003 0304 	and.w	r3, r3, #4
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d011      	beq.n	8003d2c <HAL_UART_IRQHandler+0x11c>
 8003d08:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003d0c:	f003 0301 	and.w	r3, r3, #1
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d00b      	beq.n	8003d2c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	2204      	movs	r2, #4
 8003d1a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d22:	f043 0202 	orr.w	r2, r3, #2
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003d2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d30:	f003 0308 	and.w	r3, r3, #8
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d017      	beq.n	8003d68 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003d38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d3c:	f003 0320 	and.w	r3, r3, #32
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d105      	bne.n	8003d50 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003d44:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003d48:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d00b      	beq.n	8003d68 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	2208      	movs	r2, #8
 8003d56:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d5e:	f043 0208 	orr.w	r2, r3, #8
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003d68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d6c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d012      	beq.n	8003d9a <HAL_UART_IRQHandler+0x18a>
 8003d74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d78:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d00c      	beq.n	8003d9a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003d88:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d90:	f043 0220 	orr.w	r2, r3, #32
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	f000 8211 	beq.w	80041c8 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003da6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003daa:	f003 0320 	and.w	r3, r3, #32
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d00d      	beq.n	8003dce <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003db2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003db6:	f003 0320 	and.w	r3, r3, #32
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d007      	beq.n	8003dce <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d003      	beq.n	8003dce <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003dca:	6878      	ldr	r0, [r7, #4]
 8003dcc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003dd4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	689b      	ldr	r3, [r3, #8]
 8003dde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003de2:	2b40      	cmp	r3, #64	; 0x40
 8003de4:	d005      	beq.n	8003df2 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003de6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003dea:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d04f      	beq.n	8003e92 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003df2:	6878      	ldr	r0, [r7, #4]
 8003df4:	f000 fd9d 	bl	8004932 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	689b      	ldr	r3, [r3, #8]
 8003dfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e02:	2b40      	cmp	r3, #64	; 0x40
 8003e04:	d141      	bne.n	8003e8a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	3308      	adds	r3, #8
 8003e0c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e10:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003e14:	e853 3f00 	ldrex	r3, [r3]
 8003e18:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003e1c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003e20:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003e24:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	3308      	adds	r3, #8
 8003e2e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003e32:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003e36:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e3a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003e3e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003e42:	e841 2300 	strex	r3, r2, [r1]
 8003e46:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003e4a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d1d9      	bne.n	8003e06 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d013      	beq.n	8003e82 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e5e:	4a13      	ldr	r2, [pc, #76]	; (8003eac <HAL_UART_IRQHandler+0x29c>)
 8003e60:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e66:	4618      	mov	r0, r3
 8003e68:	f7fd fa96 	bl	8001398 <HAL_DMA_Abort_IT>
 8003e6c:	4603      	mov	r3, r0
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d017      	beq.n	8003ea2 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e78:	687a      	ldr	r2, [r7, #4]
 8003e7a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003e7c:	4610      	mov	r0, r2
 8003e7e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e80:	e00f      	b.n	8003ea2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003e82:	6878      	ldr	r0, [r7, #4]
 8003e84:	f000 f9b4 	bl	80041f0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e88:	e00b      	b.n	8003ea2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003e8a:	6878      	ldr	r0, [r7, #4]
 8003e8c:	f000 f9b0 	bl	80041f0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e90:	e007      	b.n	8003ea2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003e92:	6878      	ldr	r0, [r7, #4]
 8003e94:	f000 f9ac 	bl	80041f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8003ea0:	e192      	b.n	80041c8 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ea2:	bf00      	nop
    return;
 8003ea4:	e190      	b.n	80041c8 <HAL_UART_IRQHandler+0x5b8>
 8003ea6:	bf00      	nop
 8003ea8:	04000120 	.word	0x04000120
 8003eac:	080049fb 	.word	0x080049fb

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003eb4:	2b01      	cmp	r3, #1
 8003eb6:	f040 814b 	bne.w	8004150 <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003eba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ebe:	f003 0310 	and.w	r3, r3, #16
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	f000 8144 	beq.w	8004150 <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003ec8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ecc:	f003 0310 	and.w	r3, r3, #16
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	f000 813d 	beq.w	8004150 <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	2210      	movs	r2, #16
 8003edc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	689b      	ldr	r3, [r3, #8]
 8003ee4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ee8:	2b40      	cmp	r3, #64	; 0x40
 8003eea:	f040 80b5 	bne.w	8004058 <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	685b      	ldr	r3, [r3, #4]
 8003ef6:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003efa:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	f000 8164 	beq.w	80041cc <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003f0a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003f0e:	429a      	cmp	r2, r3
 8003f10:	f080 815c 	bcs.w	80041cc <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003f1a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f22:	699b      	ldr	r3, [r3, #24]
 8003f24:	2b20      	cmp	r3, #32
 8003f26:	f000 8086 	beq.w	8004036 <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f32:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003f36:	e853 3f00 	ldrex	r3, [r3]
 8003f3a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003f3e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003f42:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003f46:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	461a      	mov	r2, r3
 8003f50:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003f54:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003f58:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f5c:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003f60:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003f64:	e841 2300 	strex	r3, r2, [r1]
 8003f68:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003f6c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d1da      	bne.n	8003f2a <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	3308      	adds	r3, #8
 8003f7a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f7c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003f7e:	e853 3f00 	ldrex	r3, [r3]
 8003f82:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003f84:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003f86:	f023 0301 	bic.w	r3, r3, #1
 8003f8a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	3308      	adds	r3, #8
 8003f94:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003f98:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003f9c:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f9e:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003fa0:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003fa4:	e841 2300 	strex	r3, r2, [r1]
 8003fa8:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003faa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d1e1      	bne.n	8003f74 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	3308      	adds	r3, #8
 8003fb6:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fb8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003fba:	e853 3f00 	ldrex	r3, [r3]
 8003fbe:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003fc0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003fc2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003fc6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	3308      	adds	r3, #8
 8003fd0:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003fd4:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003fd6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fd8:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003fda:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003fdc:	e841 2300 	strex	r3, r2, [r1]
 8003fe0:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003fe2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d1e3      	bne.n	8003fb0 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2220      	movs	r2, #32
 8003fec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ffc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ffe:	e853 3f00 	ldrex	r3, [r3]
 8004002:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004004:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004006:	f023 0310 	bic.w	r3, r3, #16
 800400a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	461a      	mov	r2, r3
 8004014:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004018:	65bb      	str	r3, [r7, #88]	; 0x58
 800401a:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800401c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800401e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004020:	e841 2300 	strex	r3, r2, [r1]
 8004024:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004026:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004028:	2b00      	cmp	r3, #0
 800402a:	d1e4      	bne.n	8003ff6 <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004030:	4618      	mov	r0, r3
 8004032:	f7fd f973 	bl	800131c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	2202      	movs	r2, #2
 800403a:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004048:	b29b      	uxth	r3, r3
 800404a:	1ad3      	subs	r3, r2, r3
 800404c:	b29b      	uxth	r3, r3
 800404e:	4619      	mov	r1, r3
 8004050:	6878      	ldr	r0, [r7, #4]
 8004052:	f000 f8d7 	bl	8004204 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004056:	e0b9      	b.n	80041cc <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004064:	b29b      	uxth	r3, r3
 8004066:	1ad3      	subs	r3, r2, r3
 8004068:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004072:	b29b      	uxth	r3, r3
 8004074:	2b00      	cmp	r3, #0
 8004076:	f000 80ab 	beq.w	80041d0 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 800407a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800407e:	2b00      	cmp	r3, #0
 8004080:	f000 80a6 	beq.w	80041d0 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800408a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800408c:	e853 3f00 	ldrex	r3, [r3]
 8004090:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004092:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004094:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004098:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	461a      	mov	r2, r3
 80040a2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80040a6:	647b      	str	r3, [r7, #68]	; 0x44
 80040a8:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040aa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80040ac:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80040ae:	e841 2300 	strex	r3, r2, [r1]
 80040b2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80040b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d1e4      	bne.n	8004084 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	3308      	adds	r3, #8
 80040c0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040c4:	e853 3f00 	ldrex	r3, [r3]
 80040c8:	623b      	str	r3, [r7, #32]
   return(result);
 80040ca:	6a3b      	ldr	r3, [r7, #32]
 80040cc:	f023 0301 	bic.w	r3, r3, #1
 80040d0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	3308      	adds	r3, #8
 80040da:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80040de:	633a      	str	r2, [r7, #48]	; 0x30
 80040e0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040e2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80040e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80040e6:	e841 2300 	strex	r3, r2, [r1]
 80040ea:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80040ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d1e3      	bne.n	80040ba <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	2220      	movs	r2, #32
 80040f6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	2200      	movs	r2, #0
 80040fe:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2200      	movs	r2, #0
 8004104:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800410c:	693b      	ldr	r3, [r7, #16]
 800410e:	e853 3f00 	ldrex	r3, [r3]
 8004112:	60fb      	str	r3, [r7, #12]
   return(result);
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	f023 0310 	bic.w	r3, r3, #16
 800411a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	461a      	mov	r2, r3
 8004124:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004128:	61fb      	str	r3, [r7, #28]
 800412a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800412c:	69b9      	ldr	r1, [r7, #24]
 800412e:	69fa      	ldr	r2, [r7, #28]
 8004130:	e841 2300 	strex	r3, r2, [r1]
 8004134:	617b      	str	r3, [r7, #20]
   return(result);
 8004136:	697b      	ldr	r3, [r7, #20]
 8004138:	2b00      	cmp	r3, #0
 800413a:	d1e4      	bne.n	8004106 <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2202      	movs	r2, #2
 8004140:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004142:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004146:	4619      	mov	r1, r3
 8004148:	6878      	ldr	r0, [r7, #4]
 800414a:	f000 f85b 	bl	8004204 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800414e:	e03f      	b.n	80041d0 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004150:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004154:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004158:	2b00      	cmp	r3, #0
 800415a:	d00e      	beq.n	800417a <HAL_UART_IRQHandler+0x56a>
 800415c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004160:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004164:	2b00      	cmp	r3, #0
 8004166:	d008      	beq.n	800417a <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004170:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004172:	6878      	ldr	r0, [r7, #4]
 8004174:	f000 fc81 	bl	8004a7a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004178:	e02d      	b.n	80041d6 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800417a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800417e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004182:	2b00      	cmp	r3, #0
 8004184:	d00e      	beq.n	80041a4 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004186:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800418a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800418e:	2b00      	cmp	r3, #0
 8004190:	d008      	beq.n	80041a4 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004196:	2b00      	cmp	r3, #0
 8004198:	d01c      	beq.n	80041d4 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800419e:	6878      	ldr	r0, [r7, #4]
 80041a0:	4798      	blx	r3
    }
    return;
 80041a2:	e017      	b.n	80041d4 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80041a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80041a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d012      	beq.n	80041d6 <HAL_UART_IRQHandler+0x5c6>
 80041b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80041b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d00c      	beq.n	80041d6 <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 80041bc:	6878      	ldr	r0, [r7, #4]
 80041be:	f000 fc32 	bl	8004a26 <UART_EndTransmit_IT>
    return;
 80041c2:	e008      	b.n	80041d6 <HAL_UART_IRQHandler+0x5c6>
      return;
 80041c4:	bf00      	nop
 80041c6:	e006      	b.n	80041d6 <HAL_UART_IRQHandler+0x5c6>
    return;
 80041c8:	bf00      	nop
 80041ca:	e004      	b.n	80041d6 <HAL_UART_IRQHandler+0x5c6>
      return;
 80041cc:	bf00      	nop
 80041ce:	e002      	b.n	80041d6 <HAL_UART_IRQHandler+0x5c6>
      return;
 80041d0:	bf00      	nop
 80041d2:	e000      	b.n	80041d6 <HAL_UART_IRQHandler+0x5c6>
    return;
 80041d4:	bf00      	nop
  }

}
 80041d6:	37e8      	adds	r7, #232	; 0xe8
 80041d8:	46bd      	mov	sp, r7
 80041da:	bd80      	pop	{r7, pc}

080041dc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80041dc:	b480      	push	{r7}
 80041de:	b083      	sub	sp, #12
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80041e4:	bf00      	nop
 80041e6:	370c      	adds	r7, #12
 80041e8:	46bd      	mov	sp, r7
 80041ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ee:	4770      	bx	lr

080041f0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80041f0:	b480      	push	{r7}
 80041f2:	b083      	sub	sp, #12
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80041f8:	bf00      	nop
 80041fa:	370c      	adds	r7, #12
 80041fc:	46bd      	mov	sp, r7
 80041fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004202:	4770      	bx	lr

08004204 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004204:	b480      	push	{r7}
 8004206:	b083      	sub	sp, #12
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
 800420c:	460b      	mov	r3, r1
 800420e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004210:	bf00      	nop
 8004212:	370c      	adds	r7, #12
 8004214:	46bd      	mov	sp, r7
 8004216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421a:	4770      	bx	lr

0800421c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800421c:	b580      	push	{r7, lr}
 800421e:	b088      	sub	sp, #32
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004224:	2300      	movs	r3, #0
 8004226:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	689a      	ldr	r2, [r3, #8]
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	691b      	ldr	r3, [r3, #16]
 8004230:	431a      	orrs	r2, r3
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	695b      	ldr	r3, [r3, #20]
 8004236:	431a      	orrs	r2, r3
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	69db      	ldr	r3, [r3, #28]
 800423c:	4313      	orrs	r3, r2
 800423e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	681a      	ldr	r2, [r3, #0]
 8004246:	4b92      	ldr	r3, [pc, #584]	; (8004490 <UART_SetConfig+0x274>)
 8004248:	4013      	ands	r3, r2
 800424a:	687a      	ldr	r2, [r7, #4]
 800424c:	6812      	ldr	r2, [r2, #0]
 800424e:	6979      	ldr	r1, [r7, #20]
 8004250:	430b      	orrs	r3, r1
 8004252:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	685b      	ldr	r3, [r3, #4]
 800425a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	68da      	ldr	r2, [r3, #12]
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	430a      	orrs	r2, r1
 8004268:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	699b      	ldr	r3, [r3, #24]
 800426e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	6a1b      	ldr	r3, [r3, #32]
 8004274:	697a      	ldr	r2, [r7, #20]
 8004276:	4313      	orrs	r3, r2
 8004278:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	689b      	ldr	r3, [r3, #8]
 8004280:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	697a      	ldr	r2, [r7, #20]
 800428a:	430a      	orrs	r2, r1
 800428c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	4a80      	ldr	r2, [pc, #512]	; (8004494 <UART_SetConfig+0x278>)
 8004294:	4293      	cmp	r3, r2
 8004296:	d120      	bne.n	80042da <UART_SetConfig+0xbe>
 8004298:	4b7f      	ldr	r3, [pc, #508]	; (8004498 <UART_SetConfig+0x27c>)
 800429a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800429c:	f003 0303 	and.w	r3, r3, #3
 80042a0:	2b03      	cmp	r3, #3
 80042a2:	d817      	bhi.n	80042d4 <UART_SetConfig+0xb8>
 80042a4:	a201      	add	r2, pc, #4	; (adr r2, 80042ac <UART_SetConfig+0x90>)
 80042a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042aa:	bf00      	nop
 80042ac:	080042bd 	.word	0x080042bd
 80042b0:	080042c9 	.word	0x080042c9
 80042b4:	080042cf 	.word	0x080042cf
 80042b8:	080042c3 	.word	0x080042c3
 80042bc:	2301      	movs	r3, #1
 80042be:	77fb      	strb	r3, [r7, #31]
 80042c0:	e0b5      	b.n	800442e <UART_SetConfig+0x212>
 80042c2:	2302      	movs	r3, #2
 80042c4:	77fb      	strb	r3, [r7, #31]
 80042c6:	e0b2      	b.n	800442e <UART_SetConfig+0x212>
 80042c8:	2304      	movs	r3, #4
 80042ca:	77fb      	strb	r3, [r7, #31]
 80042cc:	e0af      	b.n	800442e <UART_SetConfig+0x212>
 80042ce:	2308      	movs	r3, #8
 80042d0:	77fb      	strb	r3, [r7, #31]
 80042d2:	e0ac      	b.n	800442e <UART_SetConfig+0x212>
 80042d4:	2310      	movs	r3, #16
 80042d6:	77fb      	strb	r3, [r7, #31]
 80042d8:	e0a9      	b.n	800442e <UART_SetConfig+0x212>
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	4a6f      	ldr	r2, [pc, #444]	; (800449c <UART_SetConfig+0x280>)
 80042e0:	4293      	cmp	r3, r2
 80042e2:	d124      	bne.n	800432e <UART_SetConfig+0x112>
 80042e4:	4b6c      	ldr	r3, [pc, #432]	; (8004498 <UART_SetConfig+0x27c>)
 80042e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042e8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80042ec:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80042f0:	d011      	beq.n	8004316 <UART_SetConfig+0xfa>
 80042f2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80042f6:	d817      	bhi.n	8004328 <UART_SetConfig+0x10c>
 80042f8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80042fc:	d011      	beq.n	8004322 <UART_SetConfig+0x106>
 80042fe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004302:	d811      	bhi.n	8004328 <UART_SetConfig+0x10c>
 8004304:	2b00      	cmp	r3, #0
 8004306:	d003      	beq.n	8004310 <UART_SetConfig+0xf4>
 8004308:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800430c:	d006      	beq.n	800431c <UART_SetConfig+0x100>
 800430e:	e00b      	b.n	8004328 <UART_SetConfig+0x10c>
 8004310:	2300      	movs	r3, #0
 8004312:	77fb      	strb	r3, [r7, #31]
 8004314:	e08b      	b.n	800442e <UART_SetConfig+0x212>
 8004316:	2302      	movs	r3, #2
 8004318:	77fb      	strb	r3, [r7, #31]
 800431a:	e088      	b.n	800442e <UART_SetConfig+0x212>
 800431c:	2304      	movs	r3, #4
 800431e:	77fb      	strb	r3, [r7, #31]
 8004320:	e085      	b.n	800442e <UART_SetConfig+0x212>
 8004322:	2308      	movs	r3, #8
 8004324:	77fb      	strb	r3, [r7, #31]
 8004326:	e082      	b.n	800442e <UART_SetConfig+0x212>
 8004328:	2310      	movs	r3, #16
 800432a:	77fb      	strb	r3, [r7, #31]
 800432c:	e07f      	b.n	800442e <UART_SetConfig+0x212>
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	4a5b      	ldr	r2, [pc, #364]	; (80044a0 <UART_SetConfig+0x284>)
 8004334:	4293      	cmp	r3, r2
 8004336:	d124      	bne.n	8004382 <UART_SetConfig+0x166>
 8004338:	4b57      	ldr	r3, [pc, #348]	; (8004498 <UART_SetConfig+0x27c>)
 800433a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800433c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8004340:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004344:	d011      	beq.n	800436a <UART_SetConfig+0x14e>
 8004346:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800434a:	d817      	bhi.n	800437c <UART_SetConfig+0x160>
 800434c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004350:	d011      	beq.n	8004376 <UART_SetConfig+0x15a>
 8004352:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004356:	d811      	bhi.n	800437c <UART_SetConfig+0x160>
 8004358:	2b00      	cmp	r3, #0
 800435a:	d003      	beq.n	8004364 <UART_SetConfig+0x148>
 800435c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004360:	d006      	beq.n	8004370 <UART_SetConfig+0x154>
 8004362:	e00b      	b.n	800437c <UART_SetConfig+0x160>
 8004364:	2300      	movs	r3, #0
 8004366:	77fb      	strb	r3, [r7, #31]
 8004368:	e061      	b.n	800442e <UART_SetConfig+0x212>
 800436a:	2302      	movs	r3, #2
 800436c:	77fb      	strb	r3, [r7, #31]
 800436e:	e05e      	b.n	800442e <UART_SetConfig+0x212>
 8004370:	2304      	movs	r3, #4
 8004372:	77fb      	strb	r3, [r7, #31]
 8004374:	e05b      	b.n	800442e <UART_SetConfig+0x212>
 8004376:	2308      	movs	r3, #8
 8004378:	77fb      	strb	r3, [r7, #31]
 800437a:	e058      	b.n	800442e <UART_SetConfig+0x212>
 800437c:	2310      	movs	r3, #16
 800437e:	77fb      	strb	r3, [r7, #31]
 8004380:	e055      	b.n	800442e <UART_SetConfig+0x212>
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	4a47      	ldr	r2, [pc, #284]	; (80044a4 <UART_SetConfig+0x288>)
 8004388:	4293      	cmp	r3, r2
 800438a:	d124      	bne.n	80043d6 <UART_SetConfig+0x1ba>
 800438c:	4b42      	ldr	r3, [pc, #264]	; (8004498 <UART_SetConfig+0x27c>)
 800438e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004390:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8004394:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004398:	d011      	beq.n	80043be <UART_SetConfig+0x1a2>
 800439a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800439e:	d817      	bhi.n	80043d0 <UART_SetConfig+0x1b4>
 80043a0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80043a4:	d011      	beq.n	80043ca <UART_SetConfig+0x1ae>
 80043a6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80043aa:	d811      	bhi.n	80043d0 <UART_SetConfig+0x1b4>
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d003      	beq.n	80043b8 <UART_SetConfig+0x19c>
 80043b0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80043b4:	d006      	beq.n	80043c4 <UART_SetConfig+0x1a8>
 80043b6:	e00b      	b.n	80043d0 <UART_SetConfig+0x1b4>
 80043b8:	2300      	movs	r3, #0
 80043ba:	77fb      	strb	r3, [r7, #31]
 80043bc:	e037      	b.n	800442e <UART_SetConfig+0x212>
 80043be:	2302      	movs	r3, #2
 80043c0:	77fb      	strb	r3, [r7, #31]
 80043c2:	e034      	b.n	800442e <UART_SetConfig+0x212>
 80043c4:	2304      	movs	r3, #4
 80043c6:	77fb      	strb	r3, [r7, #31]
 80043c8:	e031      	b.n	800442e <UART_SetConfig+0x212>
 80043ca:	2308      	movs	r3, #8
 80043cc:	77fb      	strb	r3, [r7, #31]
 80043ce:	e02e      	b.n	800442e <UART_SetConfig+0x212>
 80043d0:	2310      	movs	r3, #16
 80043d2:	77fb      	strb	r3, [r7, #31]
 80043d4:	e02b      	b.n	800442e <UART_SetConfig+0x212>
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	4a33      	ldr	r2, [pc, #204]	; (80044a8 <UART_SetConfig+0x28c>)
 80043dc:	4293      	cmp	r3, r2
 80043de:	d124      	bne.n	800442a <UART_SetConfig+0x20e>
 80043e0:	4b2d      	ldr	r3, [pc, #180]	; (8004498 <UART_SetConfig+0x27c>)
 80043e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043e4:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80043e8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80043ec:	d011      	beq.n	8004412 <UART_SetConfig+0x1f6>
 80043ee:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80043f2:	d817      	bhi.n	8004424 <UART_SetConfig+0x208>
 80043f4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80043f8:	d011      	beq.n	800441e <UART_SetConfig+0x202>
 80043fa:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80043fe:	d811      	bhi.n	8004424 <UART_SetConfig+0x208>
 8004400:	2b00      	cmp	r3, #0
 8004402:	d003      	beq.n	800440c <UART_SetConfig+0x1f0>
 8004404:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004408:	d006      	beq.n	8004418 <UART_SetConfig+0x1fc>
 800440a:	e00b      	b.n	8004424 <UART_SetConfig+0x208>
 800440c:	2300      	movs	r3, #0
 800440e:	77fb      	strb	r3, [r7, #31]
 8004410:	e00d      	b.n	800442e <UART_SetConfig+0x212>
 8004412:	2302      	movs	r3, #2
 8004414:	77fb      	strb	r3, [r7, #31]
 8004416:	e00a      	b.n	800442e <UART_SetConfig+0x212>
 8004418:	2304      	movs	r3, #4
 800441a:	77fb      	strb	r3, [r7, #31]
 800441c:	e007      	b.n	800442e <UART_SetConfig+0x212>
 800441e:	2308      	movs	r3, #8
 8004420:	77fb      	strb	r3, [r7, #31]
 8004422:	e004      	b.n	800442e <UART_SetConfig+0x212>
 8004424:	2310      	movs	r3, #16
 8004426:	77fb      	strb	r3, [r7, #31]
 8004428:	e001      	b.n	800442e <UART_SetConfig+0x212>
 800442a:	2310      	movs	r3, #16
 800442c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	69db      	ldr	r3, [r3, #28]
 8004432:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004436:	d16b      	bne.n	8004510 <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 8004438:	7ffb      	ldrb	r3, [r7, #31]
 800443a:	2b08      	cmp	r3, #8
 800443c:	d838      	bhi.n	80044b0 <UART_SetConfig+0x294>
 800443e:	a201      	add	r2, pc, #4	; (adr r2, 8004444 <UART_SetConfig+0x228>)
 8004440:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004444:	08004469 	.word	0x08004469
 8004448:	08004471 	.word	0x08004471
 800444c:	08004479 	.word	0x08004479
 8004450:	080044b1 	.word	0x080044b1
 8004454:	0800447f 	.word	0x0800447f
 8004458:	080044b1 	.word	0x080044b1
 800445c:	080044b1 	.word	0x080044b1
 8004460:	080044b1 	.word	0x080044b1
 8004464:	08004487 	.word	0x08004487
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004468:	f7fe fda2 	bl	8002fb0 <HAL_RCC_GetPCLK1Freq>
 800446c:	61b8      	str	r0, [r7, #24]
        break;
 800446e:	e024      	b.n	80044ba <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004470:	f7fe fdc0 	bl	8002ff4 <HAL_RCC_GetPCLK2Freq>
 8004474:	61b8      	str	r0, [r7, #24]
        break;
 8004476:	e020      	b.n	80044ba <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004478:	4b0c      	ldr	r3, [pc, #48]	; (80044ac <UART_SetConfig+0x290>)
 800447a:	61bb      	str	r3, [r7, #24]
        break;
 800447c:	e01d      	b.n	80044ba <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800447e:	f7fe fd37 	bl	8002ef0 <HAL_RCC_GetSysClockFreq>
 8004482:	61b8      	str	r0, [r7, #24]
        break;
 8004484:	e019      	b.n	80044ba <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004486:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800448a:	61bb      	str	r3, [r7, #24]
        break;
 800448c:	e015      	b.n	80044ba <UART_SetConfig+0x29e>
 800448e:	bf00      	nop
 8004490:	efff69f3 	.word	0xefff69f3
 8004494:	40013800 	.word	0x40013800
 8004498:	40021000 	.word	0x40021000
 800449c:	40004400 	.word	0x40004400
 80044a0:	40004800 	.word	0x40004800
 80044a4:	40004c00 	.word	0x40004c00
 80044a8:	40005000 	.word	0x40005000
 80044ac:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 80044b0:	2300      	movs	r3, #0
 80044b2:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80044b4:	2301      	movs	r3, #1
 80044b6:	77bb      	strb	r3, [r7, #30]
        break;
 80044b8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80044ba:	69bb      	ldr	r3, [r7, #24]
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d073      	beq.n	80045a8 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80044c0:	69bb      	ldr	r3, [r7, #24]
 80044c2:	005a      	lsls	r2, r3, #1
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	685b      	ldr	r3, [r3, #4]
 80044c8:	085b      	lsrs	r3, r3, #1
 80044ca:	441a      	add	r2, r3
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	685b      	ldr	r3, [r3, #4]
 80044d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80044d4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80044d6:	693b      	ldr	r3, [r7, #16]
 80044d8:	2b0f      	cmp	r3, #15
 80044da:	d916      	bls.n	800450a <UART_SetConfig+0x2ee>
 80044dc:	693b      	ldr	r3, [r7, #16]
 80044de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044e2:	d212      	bcs.n	800450a <UART_SetConfig+0x2ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80044e4:	693b      	ldr	r3, [r7, #16]
 80044e6:	b29b      	uxth	r3, r3
 80044e8:	f023 030f 	bic.w	r3, r3, #15
 80044ec:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80044ee:	693b      	ldr	r3, [r7, #16]
 80044f0:	085b      	lsrs	r3, r3, #1
 80044f2:	b29b      	uxth	r3, r3
 80044f4:	f003 0307 	and.w	r3, r3, #7
 80044f8:	b29a      	uxth	r2, r3
 80044fa:	89fb      	ldrh	r3, [r7, #14]
 80044fc:	4313      	orrs	r3, r2
 80044fe:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	89fa      	ldrh	r2, [r7, #14]
 8004506:	60da      	str	r2, [r3, #12]
 8004508:	e04e      	b.n	80045a8 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 800450a:	2301      	movs	r3, #1
 800450c:	77bb      	strb	r3, [r7, #30]
 800450e:	e04b      	b.n	80045a8 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004510:	7ffb      	ldrb	r3, [r7, #31]
 8004512:	2b08      	cmp	r3, #8
 8004514:	d827      	bhi.n	8004566 <UART_SetConfig+0x34a>
 8004516:	a201      	add	r2, pc, #4	; (adr r2, 800451c <UART_SetConfig+0x300>)
 8004518:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800451c:	08004541 	.word	0x08004541
 8004520:	08004549 	.word	0x08004549
 8004524:	08004551 	.word	0x08004551
 8004528:	08004567 	.word	0x08004567
 800452c:	08004557 	.word	0x08004557
 8004530:	08004567 	.word	0x08004567
 8004534:	08004567 	.word	0x08004567
 8004538:	08004567 	.word	0x08004567
 800453c:	0800455f 	.word	0x0800455f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004540:	f7fe fd36 	bl	8002fb0 <HAL_RCC_GetPCLK1Freq>
 8004544:	61b8      	str	r0, [r7, #24]
        break;
 8004546:	e013      	b.n	8004570 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004548:	f7fe fd54 	bl	8002ff4 <HAL_RCC_GetPCLK2Freq>
 800454c:	61b8      	str	r0, [r7, #24]
        break;
 800454e:	e00f      	b.n	8004570 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004550:	4b1b      	ldr	r3, [pc, #108]	; (80045c0 <UART_SetConfig+0x3a4>)
 8004552:	61bb      	str	r3, [r7, #24]
        break;
 8004554:	e00c      	b.n	8004570 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004556:	f7fe fccb 	bl	8002ef0 <HAL_RCC_GetSysClockFreq>
 800455a:	61b8      	str	r0, [r7, #24]
        break;
 800455c:	e008      	b.n	8004570 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800455e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004562:	61bb      	str	r3, [r7, #24]
        break;
 8004564:	e004      	b.n	8004570 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 8004566:	2300      	movs	r3, #0
 8004568:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800456a:	2301      	movs	r3, #1
 800456c:	77bb      	strb	r3, [r7, #30]
        break;
 800456e:	bf00      	nop
    }

    if (pclk != 0U)
 8004570:	69bb      	ldr	r3, [r7, #24]
 8004572:	2b00      	cmp	r3, #0
 8004574:	d018      	beq.n	80045a8 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	685b      	ldr	r3, [r3, #4]
 800457a:	085a      	lsrs	r2, r3, #1
 800457c:	69bb      	ldr	r3, [r7, #24]
 800457e:	441a      	add	r2, r3
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	685b      	ldr	r3, [r3, #4]
 8004584:	fbb2 f3f3 	udiv	r3, r2, r3
 8004588:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800458a:	693b      	ldr	r3, [r7, #16]
 800458c:	2b0f      	cmp	r3, #15
 800458e:	d909      	bls.n	80045a4 <UART_SetConfig+0x388>
 8004590:	693b      	ldr	r3, [r7, #16]
 8004592:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004596:	d205      	bcs.n	80045a4 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004598:	693b      	ldr	r3, [r7, #16]
 800459a:	b29a      	uxth	r2, r3
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	60da      	str	r2, [r3, #12]
 80045a2:	e001      	b.n	80045a8 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 80045a4:	2301      	movs	r3, #1
 80045a6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2200      	movs	r2, #0
 80045ac:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	2200      	movs	r2, #0
 80045b2:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80045b4:	7fbb      	ldrb	r3, [r7, #30]
}
 80045b6:	4618      	mov	r0, r3
 80045b8:	3720      	adds	r7, #32
 80045ba:	46bd      	mov	sp, r7
 80045bc:	bd80      	pop	{r7, pc}
 80045be:	bf00      	nop
 80045c0:	007a1200 	.word	0x007a1200

080045c4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80045c4:	b480      	push	{r7}
 80045c6:	b083      	sub	sp, #12
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045d0:	f003 0308 	and.w	r3, r3, #8
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d00a      	beq.n	80045ee <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	685b      	ldr	r3, [r3, #4]
 80045de:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	430a      	orrs	r2, r1
 80045ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045f2:	f003 0301 	and.w	r3, r3, #1
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d00a      	beq.n	8004610 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	685b      	ldr	r3, [r3, #4]
 8004600:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	430a      	orrs	r2, r1
 800460e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004614:	f003 0302 	and.w	r3, r3, #2
 8004618:	2b00      	cmp	r3, #0
 800461a:	d00a      	beq.n	8004632 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	685b      	ldr	r3, [r3, #4]
 8004622:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	430a      	orrs	r2, r1
 8004630:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004636:	f003 0304 	and.w	r3, r3, #4
 800463a:	2b00      	cmp	r3, #0
 800463c:	d00a      	beq.n	8004654 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	685b      	ldr	r3, [r3, #4]
 8004644:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	430a      	orrs	r2, r1
 8004652:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004658:	f003 0310 	and.w	r3, r3, #16
 800465c:	2b00      	cmp	r3, #0
 800465e:	d00a      	beq.n	8004676 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	689b      	ldr	r3, [r3, #8]
 8004666:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	430a      	orrs	r2, r1
 8004674:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800467a:	f003 0320 	and.w	r3, r3, #32
 800467e:	2b00      	cmp	r3, #0
 8004680:	d00a      	beq.n	8004698 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	689b      	ldr	r3, [r3, #8]
 8004688:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	430a      	orrs	r2, r1
 8004696:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800469c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d01a      	beq.n	80046da <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	685b      	ldr	r3, [r3, #4]
 80046aa:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	430a      	orrs	r2, r1
 80046b8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046be:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80046c2:	d10a      	bne.n	80046da <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	685b      	ldr	r3, [r3, #4]
 80046ca:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	430a      	orrs	r2, r1
 80046d8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d00a      	beq.n	80046fc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	685b      	ldr	r3, [r3, #4]
 80046ec:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	430a      	orrs	r2, r1
 80046fa:	605a      	str	r2, [r3, #4]
  }
}
 80046fc:	bf00      	nop
 80046fe:	370c      	adds	r7, #12
 8004700:	46bd      	mov	sp, r7
 8004702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004706:	4770      	bx	lr

08004708 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004708:	b580      	push	{r7, lr}
 800470a:	b098      	sub	sp, #96	; 0x60
 800470c:	af02      	add	r7, sp, #8
 800470e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2200      	movs	r2, #0
 8004714:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004718:	f7fc fd12 	bl	8001140 <HAL_GetTick>
 800471c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f003 0308 	and.w	r3, r3, #8
 8004728:	2b08      	cmp	r3, #8
 800472a:	d12e      	bne.n	800478a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800472c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004730:	9300      	str	r3, [sp, #0]
 8004732:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004734:	2200      	movs	r2, #0
 8004736:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800473a:	6878      	ldr	r0, [r7, #4]
 800473c:	f000 f88c 	bl	8004858 <UART_WaitOnFlagUntilTimeout>
 8004740:	4603      	mov	r3, r0
 8004742:	2b00      	cmp	r3, #0
 8004744:	d021      	beq.n	800478a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800474c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800474e:	e853 3f00 	ldrex	r3, [r3]
 8004752:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004754:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004756:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800475a:	653b      	str	r3, [r7, #80]	; 0x50
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	461a      	mov	r2, r3
 8004762:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004764:	647b      	str	r3, [r7, #68]	; 0x44
 8004766:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004768:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800476a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800476c:	e841 2300 	strex	r3, r2, [r1]
 8004770:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004772:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004774:	2b00      	cmp	r3, #0
 8004776:	d1e6      	bne.n	8004746 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2220      	movs	r2, #32
 800477c:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	2200      	movs	r2, #0
 8004782:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004786:	2303      	movs	r3, #3
 8004788:	e062      	b.n	8004850 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f003 0304 	and.w	r3, r3, #4
 8004794:	2b04      	cmp	r3, #4
 8004796:	d149      	bne.n	800482c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004798:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800479c:	9300      	str	r3, [sp, #0]
 800479e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80047a0:	2200      	movs	r2, #0
 80047a2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80047a6:	6878      	ldr	r0, [r7, #4]
 80047a8:	f000 f856 	bl	8004858 <UART_WaitOnFlagUntilTimeout>
 80047ac:	4603      	mov	r3, r0
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d03c      	beq.n	800482c <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ba:	e853 3f00 	ldrex	r3, [r3]
 80047be:	623b      	str	r3, [r7, #32]
   return(result);
 80047c0:	6a3b      	ldr	r3, [r7, #32]
 80047c2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80047c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	461a      	mov	r2, r3
 80047ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80047d0:	633b      	str	r3, [r7, #48]	; 0x30
 80047d2:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047d4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80047d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80047d8:	e841 2300 	strex	r3, r2, [r1]
 80047dc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80047de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d1e6      	bne.n	80047b2 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	3308      	adds	r3, #8
 80047ea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047ec:	693b      	ldr	r3, [r7, #16]
 80047ee:	e853 3f00 	ldrex	r3, [r3]
 80047f2:	60fb      	str	r3, [r7, #12]
   return(result);
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	f023 0301 	bic.w	r3, r3, #1
 80047fa:	64bb      	str	r3, [r7, #72]	; 0x48
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	3308      	adds	r3, #8
 8004802:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004804:	61fa      	str	r2, [r7, #28]
 8004806:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004808:	69b9      	ldr	r1, [r7, #24]
 800480a:	69fa      	ldr	r2, [r7, #28]
 800480c:	e841 2300 	strex	r3, r2, [r1]
 8004810:	617b      	str	r3, [r7, #20]
   return(result);
 8004812:	697b      	ldr	r3, [r7, #20]
 8004814:	2b00      	cmp	r3, #0
 8004816:	d1e5      	bne.n	80047e4 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2220      	movs	r2, #32
 800481c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2200      	movs	r2, #0
 8004824:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004828:	2303      	movs	r3, #3
 800482a:	e011      	b.n	8004850 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2220      	movs	r2, #32
 8004830:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	2220      	movs	r2, #32
 8004836:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	2200      	movs	r2, #0
 800483e:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2200      	movs	r2, #0
 8004844:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	2200      	movs	r2, #0
 800484a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800484e:	2300      	movs	r3, #0
}
 8004850:	4618      	mov	r0, r3
 8004852:	3758      	adds	r7, #88	; 0x58
 8004854:	46bd      	mov	sp, r7
 8004856:	bd80      	pop	{r7, pc}

08004858 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004858:	b580      	push	{r7, lr}
 800485a:	b084      	sub	sp, #16
 800485c:	af00      	add	r7, sp, #0
 800485e:	60f8      	str	r0, [r7, #12]
 8004860:	60b9      	str	r1, [r7, #8]
 8004862:	603b      	str	r3, [r7, #0]
 8004864:	4613      	mov	r3, r2
 8004866:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004868:	e04f      	b.n	800490a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800486a:	69bb      	ldr	r3, [r7, #24]
 800486c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004870:	d04b      	beq.n	800490a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004872:	f7fc fc65 	bl	8001140 <HAL_GetTick>
 8004876:	4602      	mov	r2, r0
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	1ad3      	subs	r3, r2, r3
 800487c:	69ba      	ldr	r2, [r7, #24]
 800487e:	429a      	cmp	r2, r3
 8004880:	d302      	bcc.n	8004888 <UART_WaitOnFlagUntilTimeout+0x30>
 8004882:	69bb      	ldr	r3, [r7, #24]
 8004884:	2b00      	cmp	r3, #0
 8004886:	d101      	bne.n	800488c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004888:	2303      	movs	r3, #3
 800488a:	e04e      	b.n	800492a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f003 0304 	and.w	r3, r3, #4
 8004896:	2b00      	cmp	r3, #0
 8004898:	d037      	beq.n	800490a <UART_WaitOnFlagUntilTimeout+0xb2>
 800489a:	68bb      	ldr	r3, [r7, #8]
 800489c:	2b80      	cmp	r3, #128	; 0x80
 800489e:	d034      	beq.n	800490a <UART_WaitOnFlagUntilTimeout+0xb2>
 80048a0:	68bb      	ldr	r3, [r7, #8]
 80048a2:	2b40      	cmp	r3, #64	; 0x40
 80048a4:	d031      	beq.n	800490a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	69db      	ldr	r3, [r3, #28]
 80048ac:	f003 0308 	and.w	r3, r3, #8
 80048b0:	2b08      	cmp	r3, #8
 80048b2:	d110      	bne.n	80048d6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	2208      	movs	r2, #8
 80048ba:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80048bc:	68f8      	ldr	r0, [r7, #12]
 80048be:	f000 f838 	bl	8004932 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	2208      	movs	r2, #8
 80048c6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	2200      	movs	r2, #0
 80048ce:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 80048d2:	2301      	movs	r3, #1
 80048d4:	e029      	b.n	800492a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	69db      	ldr	r3, [r3, #28]
 80048dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80048e0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80048e4:	d111      	bne.n	800490a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80048ee:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80048f0:	68f8      	ldr	r0, [r7, #12]
 80048f2:	f000 f81e 	bl	8004932 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	2220      	movs	r2, #32
 80048fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	2200      	movs	r2, #0
 8004902:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8004906:	2303      	movs	r3, #3
 8004908:	e00f      	b.n	800492a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	69da      	ldr	r2, [r3, #28]
 8004910:	68bb      	ldr	r3, [r7, #8]
 8004912:	4013      	ands	r3, r2
 8004914:	68ba      	ldr	r2, [r7, #8]
 8004916:	429a      	cmp	r2, r3
 8004918:	bf0c      	ite	eq
 800491a:	2301      	moveq	r3, #1
 800491c:	2300      	movne	r3, #0
 800491e:	b2db      	uxtb	r3, r3
 8004920:	461a      	mov	r2, r3
 8004922:	79fb      	ldrb	r3, [r7, #7]
 8004924:	429a      	cmp	r2, r3
 8004926:	d0a0      	beq.n	800486a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004928:	2300      	movs	r3, #0
}
 800492a:	4618      	mov	r0, r3
 800492c:	3710      	adds	r7, #16
 800492e:	46bd      	mov	sp, r7
 8004930:	bd80      	pop	{r7, pc}

08004932 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004932:	b480      	push	{r7}
 8004934:	b095      	sub	sp, #84	; 0x54
 8004936:	af00      	add	r7, sp, #0
 8004938:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004940:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004942:	e853 3f00 	ldrex	r3, [r3]
 8004946:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004948:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800494a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800494e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	461a      	mov	r2, r3
 8004956:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004958:	643b      	str	r3, [r7, #64]	; 0x40
 800495a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800495c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800495e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004960:	e841 2300 	strex	r3, r2, [r1]
 8004964:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004966:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004968:	2b00      	cmp	r3, #0
 800496a:	d1e6      	bne.n	800493a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	3308      	adds	r3, #8
 8004972:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004974:	6a3b      	ldr	r3, [r7, #32]
 8004976:	e853 3f00 	ldrex	r3, [r3]
 800497a:	61fb      	str	r3, [r7, #28]
   return(result);
 800497c:	69fb      	ldr	r3, [r7, #28]
 800497e:	f023 0301 	bic.w	r3, r3, #1
 8004982:	64bb      	str	r3, [r7, #72]	; 0x48
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	3308      	adds	r3, #8
 800498a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800498c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800498e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004990:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004992:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004994:	e841 2300 	strex	r3, r2, [r1]
 8004998:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800499a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800499c:	2b00      	cmp	r3, #0
 800499e:	d1e5      	bne.n	800496c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80049a4:	2b01      	cmp	r3, #1
 80049a6:	d118      	bne.n	80049da <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	e853 3f00 	ldrex	r3, [r3]
 80049b4:	60bb      	str	r3, [r7, #8]
   return(result);
 80049b6:	68bb      	ldr	r3, [r7, #8]
 80049b8:	f023 0310 	bic.w	r3, r3, #16
 80049bc:	647b      	str	r3, [r7, #68]	; 0x44
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	461a      	mov	r2, r3
 80049c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80049c6:	61bb      	str	r3, [r7, #24]
 80049c8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049ca:	6979      	ldr	r1, [r7, #20]
 80049cc:	69ba      	ldr	r2, [r7, #24]
 80049ce:	e841 2300 	strex	r3, r2, [r1]
 80049d2:	613b      	str	r3, [r7, #16]
   return(result);
 80049d4:	693b      	ldr	r3, [r7, #16]
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d1e6      	bne.n	80049a8 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	2220      	movs	r2, #32
 80049de:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	2200      	movs	r2, #0
 80049e6:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2200      	movs	r2, #0
 80049ec:	669a      	str	r2, [r3, #104]	; 0x68
}
 80049ee:	bf00      	nop
 80049f0:	3754      	adds	r7, #84	; 0x54
 80049f2:	46bd      	mov	sp, r7
 80049f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f8:	4770      	bx	lr

080049fa <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80049fa:	b580      	push	{r7, lr}
 80049fc:	b084      	sub	sp, #16
 80049fe:	af00      	add	r7, sp, #0
 8004a00:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a06:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	2200      	movs	r2, #0
 8004a14:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004a18:	68f8      	ldr	r0, [r7, #12]
 8004a1a:	f7ff fbe9 	bl	80041f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004a1e:	bf00      	nop
 8004a20:	3710      	adds	r7, #16
 8004a22:	46bd      	mov	sp, r7
 8004a24:	bd80      	pop	{r7, pc}

08004a26 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004a26:	b580      	push	{r7, lr}
 8004a28:	b088      	sub	sp, #32
 8004a2a:	af00      	add	r7, sp, #0
 8004a2c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	e853 3f00 	ldrex	r3, [r3]
 8004a3a:	60bb      	str	r3, [r7, #8]
   return(result);
 8004a3c:	68bb      	ldr	r3, [r7, #8]
 8004a3e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a42:	61fb      	str	r3, [r7, #28]
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	461a      	mov	r2, r3
 8004a4a:	69fb      	ldr	r3, [r7, #28]
 8004a4c:	61bb      	str	r3, [r7, #24]
 8004a4e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a50:	6979      	ldr	r1, [r7, #20]
 8004a52:	69ba      	ldr	r2, [r7, #24]
 8004a54:	e841 2300 	strex	r3, r2, [r1]
 8004a58:	613b      	str	r3, [r7, #16]
   return(result);
 8004a5a:	693b      	ldr	r3, [r7, #16]
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d1e6      	bne.n	8004a2e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2220      	movs	r2, #32
 8004a64:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	2200      	movs	r2, #0
 8004a6a:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004a6c:	6878      	ldr	r0, [r7, #4]
 8004a6e:	f7ff fbb5 	bl	80041dc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004a72:	bf00      	nop
 8004a74:	3720      	adds	r7, #32
 8004a76:	46bd      	mov	sp, r7
 8004a78:	bd80      	pop	{r7, pc}

08004a7a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004a7a:	b480      	push	{r7}
 8004a7c:	b083      	sub	sp, #12
 8004a7e:	af00      	add	r7, sp, #0
 8004a80:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004a82:	bf00      	nop
 8004a84:	370c      	adds	r7, #12
 8004a86:	46bd      	mov	sp, r7
 8004a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8c:	4770      	bx	lr

08004a8e <HAL_WWDG_Init>:
  * @param  hwwdg  pointer to a WWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified WWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_WWDG_Init(WWDG_HandleTypeDef *hwwdg)
{
 8004a8e:	b580      	push	{r7, lr}
 8004a90:	b082      	sub	sp, #8
 8004a92:	af00      	add	r7, sp, #0
 8004a94:	6078      	str	r0, [r7, #4]
  /* Check the WWDG handle allocation */
  if (hwwdg == NULL)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d101      	bne.n	8004aa0 <HAL_WWDG_Init+0x12>
  {
    return HAL_ERROR;
 8004a9c:	2301      	movs	r3, #1
 8004a9e:	e016      	b.n	8004ace <HAL_WWDG_Init+0x40>

  /* Init the low level hardware */
  hwwdg->MspInitCallback(hwwdg);
#else
  /* Init the low level hardware */
  HAL_WWDG_MspInit(hwwdg);
 8004aa0:	6878      	ldr	r0, [r7, #4]
 8004aa2:	f7fc f9f7 	bl	8000e94 <HAL_WWDG_MspInit>
#endif /* USE_HAL_WWDG_REGISTER_CALLBACKS */

  /* Set WWDG Counter */
  WRITE_REG(hwwdg->Instance->CR, (WWDG_CR_WDGA | hwwdg->Init.Counter));
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	68da      	ldr	r2, [r3, #12]
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004ab2:	601a      	str	r2, [r3, #0]

  /* Set WWDG Prescaler and Window */
  WRITE_REG(hwwdg->Instance->CFR, (hwwdg->Init.EWIMode | hwwdg->Init.Prescaler | hwwdg->Init.Window));
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	691a      	ldr	r2, [r3, #16]
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	685b      	ldr	r3, [r3, #4]
 8004abc:	ea42 0103 	orr.w	r1, r2, r3
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	689a      	ldr	r2, [r3, #8]
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	430a      	orrs	r2, r1
 8004aca:	605a      	str	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8004acc:	2300      	movs	r3, #0
}
 8004ace:	4618      	mov	r0, r3
 8004ad0:	3708      	adds	r7, #8
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	bd80      	pop	{r7, pc}

08004ad6 <HAL_WWDG_Refresh>:
  * @param  hwwdg  pointer to a WWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified WWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_WWDG_Refresh(WWDG_HandleTypeDef *hwwdg)
{
 8004ad6:	b480      	push	{r7}
 8004ad8:	b083      	sub	sp, #12
 8004ada:	af00      	add	r7, sp, #0
 8004adc:	6078      	str	r0, [r7, #4]
  /* Write to WWDG CR the WWDG Counter value to refresh with */
  WRITE_REG(hwwdg->Instance->CR, (hwwdg->Init.Counter));
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	687a      	ldr	r2, [r7, #4]
 8004ae4:	68d2      	ldr	r2, [r2, #12]
 8004ae6:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004ae8:	2300      	movs	r3, #0
}
 8004aea:	4618      	mov	r0, r3
 8004aec:	370c      	adds	r7, #12
 8004aee:	46bd      	mov	sp, r7
 8004af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af4:	4770      	bx	lr

08004af6 <LL_TIM_SetPrescaler>:
{
 8004af6:	b480      	push	{r7}
 8004af8:	b083      	sub	sp, #12
 8004afa:	af00      	add	r7, sp, #0
 8004afc:	6078      	str	r0, [r7, #4]
 8004afe:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	683a      	ldr	r2, [r7, #0]
 8004b04:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004b06:	bf00      	nop
 8004b08:	370c      	adds	r7, #12
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b10:	4770      	bx	lr

08004b12 <LL_TIM_SetAutoReload>:
{
 8004b12:	b480      	push	{r7}
 8004b14:	b083      	sub	sp, #12
 8004b16:	af00      	add	r7, sp, #0
 8004b18:	6078      	str	r0, [r7, #4]
 8004b1a:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	683a      	ldr	r2, [r7, #0]
 8004b20:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8004b22:	bf00      	nop
 8004b24:	370c      	adds	r7, #12
 8004b26:	46bd      	mov	sp, r7
 8004b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2c:	4770      	bx	lr

08004b2e <LL_TIM_SetRepetitionCounter>:
{
 8004b2e:	b480      	push	{r7}
 8004b30:	b083      	sub	sp, #12
 8004b32:	af00      	add	r7, sp, #0
 8004b34:	6078      	str	r0, [r7, #4]
 8004b36:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	683a      	ldr	r2, [r7, #0]
 8004b3c:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004b3e:	bf00      	nop
 8004b40:	370c      	adds	r7, #12
 8004b42:	46bd      	mov	sp, r7
 8004b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b48:	4770      	bx	lr

08004b4a <LL_TIM_GenerateEvent_UPDATE>:
{
 8004b4a:	b480      	push	{r7}
 8004b4c:	b083      	sub	sp, #12
 8004b4e:	af00      	add	r7, sp, #0
 8004b50:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	695b      	ldr	r3, [r3, #20]
 8004b56:	f043 0201 	orr.w	r2, r3, #1
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	615a      	str	r2, [r3, #20]
}
 8004b5e:	bf00      	nop
 8004b60:	370c      	adds	r7, #12
 8004b62:	46bd      	mov	sp, r7
 8004b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b68:	4770      	bx	lr
	...

08004b6c <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, const LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8004b6c:	b580      	push	{r7, lr}
 8004b6e:	b084      	sub	sp, #16
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]
 8004b74:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	4a3f      	ldr	r2, [pc, #252]	; (8004c7c <LL_TIM_Init+0x110>)
 8004b80:	4293      	cmp	r3, r2
 8004b82:	d013      	beq.n	8004bac <LL_TIM_Init+0x40>
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b8a:	d00f      	beq.n	8004bac <LL_TIM_Init+0x40>
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	4a3c      	ldr	r2, [pc, #240]	; (8004c80 <LL_TIM_Init+0x114>)
 8004b90:	4293      	cmp	r3, r2
 8004b92:	d00b      	beq.n	8004bac <LL_TIM_Init+0x40>
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	4a3b      	ldr	r2, [pc, #236]	; (8004c84 <LL_TIM_Init+0x118>)
 8004b98:	4293      	cmp	r3, r2
 8004b9a:	d007      	beq.n	8004bac <LL_TIM_Init+0x40>
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	4a3a      	ldr	r2, [pc, #232]	; (8004c88 <LL_TIM_Init+0x11c>)
 8004ba0:	4293      	cmp	r3, r2
 8004ba2:	d003      	beq.n	8004bac <LL_TIM_Init+0x40>
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	4a39      	ldr	r2, [pc, #228]	; (8004c8c <LL_TIM_Init+0x120>)
 8004ba8:	4293      	cmp	r3, r2
 8004baa:	d106      	bne.n	8004bba <LL_TIM_Init+0x4e>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004bb2:	683b      	ldr	r3, [r7, #0]
 8004bb4:	685b      	ldr	r3, [r3, #4]
 8004bb6:	4313      	orrs	r3, r2
 8004bb8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	4a2f      	ldr	r2, [pc, #188]	; (8004c7c <LL_TIM_Init+0x110>)
 8004bbe:	4293      	cmp	r3, r2
 8004bc0:	d01f      	beq.n	8004c02 <LL_TIM_Init+0x96>
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004bc8:	d01b      	beq.n	8004c02 <LL_TIM_Init+0x96>
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	4a2c      	ldr	r2, [pc, #176]	; (8004c80 <LL_TIM_Init+0x114>)
 8004bce:	4293      	cmp	r3, r2
 8004bd0:	d017      	beq.n	8004c02 <LL_TIM_Init+0x96>
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	4a2b      	ldr	r2, [pc, #172]	; (8004c84 <LL_TIM_Init+0x118>)
 8004bd6:	4293      	cmp	r3, r2
 8004bd8:	d013      	beq.n	8004c02 <LL_TIM_Init+0x96>
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	4a2a      	ldr	r2, [pc, #168]	; (8004c88 <LL_TIM_Init+0x11c>)
 8004bde:	4293      	cmp	r3, r2
 8004be0:	d00f      	beq.n	8004c02 <LL_TIM_Init+0x96>
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	4a2a      	ldr	r2, [pc, #168]	; (8004c90 <LL_TIM_Init+0x124>)
 8004be6:	4293      	cmp	r3, r2
 8004be8:	d00b      	beq.n	8004c02 <LL_TIM_Init+0x96>
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	4a29      	ldr	r2, [pc, #164]	; (8004c94 <LL_TIM_Init+0x128>)
 8004bee:	4293      	cmp	r3, r2
 8004bf0:	d007      	beq.n	8004c02 <LL_TIM_Init+0x96>
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	4a28      	ldr	r2, [pc, #160]	; (8004c98 <LL_TIM_Init+0x12c>)
 8004bf6:	4293      	cmp	r3, r2
 8004bf8:	d003      	beq.n	8004c02 <LL_TIM_Init+0x96>
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	4a23      	ldr	r2, [pc, #140]	; (8004c8c <LL_TIM_Init+0x120>)
 8004bfe:	4293      	cmp	r3, r2
 8004c00:	d106      	bne.n	8004c10 <LL_TIM_Init+0xa4>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004c08:	683b      	ldr	r3, [r7, #0]
 8004c0a:	68db      	ldr	r3, [r3, #12]
 8004c0c:	4313      	orrs	r3, r2
 8004c0e:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	68fa      	ldr	r2, [r7, #12]
 8004c14:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8004c16:	683b      	ldr	r3, [r7, #0]
 8004c18:	689b      	ldr	r3, [r3, #8]
 8004c1a:	4619      	mov	r1, r3
 8004c1c:	6878      	ldr	r0, [r7, #4]
 8004c1e:	f7ff ff78 	bl	8004b12 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8004c22:	683b      	ldr	r3, [r7, #0]
 8004c24:	881b      	ldrh	r3, [r3, #0]
 8004c26:	4619      	mov	r1, r3
 8004c28:	6878      	ldr	r0, [r7, #4]
 8004c2a:	f7ff ff64 	bl	8004af6 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	4a12      	ldr	r2, [pc, #72]	; (8004c7c <LL_TIM_Init+0x110>)
 8004c32:	4293      	cmp	r3, r2
 8004c34:	d013      	beq.n	8004c5e <LL_TIM_Init+0xf2>
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	4a13      	ldr	r2, [pc, #76]	; (8004c88 <LL_TIM_Init+0x11c>)
 8004c3a:	4293      	cmp	r3, r2
 8004c3c:	d00f      	beq.n	8004c5e <LL_TIM_Init+0xf2>
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	4a13      	ldr	r2, [pc, #76]	; (8004c90 <LL_TIM_Init+0x124>)
 8004c42:	4293      	cmp	r3, r2
 8004c44:	d00b      	beq.n	8004c5e <LL_TIM_Init+0xf2>
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	4a12      	ldr	r2, [pc, #72]	; (8004c94 <LL_TIM_Init+0x128>)
 8004c4a:	4293      	cmp	r3, r2
 8004c4c:	d007      	beq.n	8004c5e <LL_TIM_Init+0xf2>
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	4a11      	ldr	r2, [pc, #68]	; (8004c98 <LL_TIM_Init+0x12c>)
 8004c52:	4293      	cmp	r3, r2
 8004c54:	d003      	beq.n	8004c5e <LL_TIM_Init+0xf2>
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	4a0c      	ldr	r2, [pc, #48]	; (8004c8c <LL_TIM_Init+0x120>)
 8004c5a:	4293      	cmp	r3, r2
 8004c5c:	d105      	bne.n	8004c6a <LL_TIM_Init+0xfe>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8004c5e:	683b      	ldr	r3, [r7, #0]
 8004c60:	691b      	ldr	r3, [r3, #16]
 8004c62:	4619      	mov	r1, r3
 8004c64:	6878      	ldr	r0, [r7, #4]
 8004c66:	f7ff ff62 	bl	8004b2e <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 8004c6a:	6878      	ldr	r0, [r7, #4]
 8004c6c:	f7ff ff6d 	bl	8004b4a <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8004c70:	2300      	movs	r3, #0
}
 8004c72:	4618      	mov	r0, r3
 8004c74:	3710      	adds	r7, #16
 8004c76:	46bd      	mov	sp, r7
 8004c78:	bd80      	pop	{r7, pc}
 8004c7a:	bf00      	nop
 8004c7c:	40012c00 	.word	0x40012c00
 8004c80:	40000400 	.word	0x40000400
 8004c84:	40000800 	.word	0x40000800
 8004c88:	40013400 	.word	0x40013400
 8004c8c:	40015000 	.word	0x40015000
 8004c90:	40014000 	.word	0x40014000
 8004c94:	40014400 	.word	0x40014400
 8004c98:	40014800 	.word	0x40014800

08004c9c <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004c9c:	b480      	push	{r7}
 8004c9e:	b085      	sub	sp, #20
 8004ca0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004ca2:	f3ef 8305 	mrs	r3, IPSR
 8004ca6:	60bb      	str	r3, [r7, #8]
  return(result);
 8004ca8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d10f      	bne.n	8004cce <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004cae:	f3ef 8310 	mrs	r3, PRIMASK
 8004cb2:	607b      	str	r3, [r7, #4]
  return(result);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d109      	bne.n	8004cce <osKernelInitialize+0x32>
 8004cba:	4b11      	ldr	r3, [pc, #68]	; (8004d00 <osKernelInitialize+0x64>)
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	2b02      	cmp	r3, #2
 8004cc0:	d109      	bne.n	8004cd6 <osKernelInitialize+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004cc2:	f3ef 8311 	mrs	r3, BASEPRI
 8004cc6:	603b      	str	r3, [r7, #0]
  return(result);
 8004cc8:	683b      	ldr	r3, [r7, #0]
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d003      	beq.n	8004cd6 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8004cce:	f06f 0305 	mvn.w	r3, #5
 8004cd2:	60fb      	str	r3, [r7, #12]
 8004cd4:	e00c      	b.n	8004cf0 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004cd6:	4b0a      	ldr	r3, [pc, #40]	; (8004d00 <osKernelInitialize+0x64>)
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d105      	bne.n	8004cea <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8004cde:	4b08      	ldr	r3, [pc, #32]	; (8004d00 <osKernelInitialize+0x64>)
 8004ce0:	2201      	movs	r2, #1
 8004ce2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004ce4:	2300      	movs	r3, #0
 8004ce6:	60fb      	str	r3, [r7, #12]
 8004ce8:	e002      	b.n	8004cf0 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8004cea:	f04f 33ff 	mov.w	r3, #4294967295
 8004cee:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8004cf0:	68fb      	ldr	r3, [r7, #12]
}
 8004cf2:	4618      	mov	r0, r3
 8004cf4:	3714      	adds	r7, #20
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfc:	4770      	bx	lr
 8004cfe:	bf00      	nop
 8004d00:	20000278 	.word	0x20000278

08004d04 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004d04:	b580      	push	{r7, lr}
 8004d06:	b084      	sub	sp, #16
 8004d08:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004d0a:	f3ef 8305 	mrs	r3, IPSR
 8004d0e:	60bb      	str	r3, [r7, #8]
  return(result);
 8004d10:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d10f      	bne.n	8004d36 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d16:	f3ef 8310 	mrs	r3, PRIMASK
 8004d1a:	607b      	str	r3, [r7, #4]
  return(result);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d109      	bne.n	8004d36 <osKernelStart+0x32>
 8004d22:	4b11      	ldr	r3, [pc, #68]	; (8004d68 <osKernelStart+0x64>)
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	2b02      	cmp	r3, #2
 8004d28:	d109      	bne.n	8004d3e <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004d2a:	f3ef 8311 	mrs	r3, BASEPRI
 8004d2e:	603b      	str	r3, [r7, #0]
  return(result);
 8004d30:	683b      	ldr	r3, [r7, #0]
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d003      	beq.n	8004d3e <osKernelStart+0x3a>
    stat = osErrorISR;
 8004d36:	f06f 0305 	mvn.w	r3, #5
 8004d3a:	60fb      	str	r3, [r7, #12]
 8004d3c:	e00e      	b.n	8004d5c <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8004d3e:	4b0a      	ldr	r3, [pc, #40]	; (8004d68 <osKernelStart+0x64>)
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	2b01      	cmp	r3, #1
 8004d44:	d107      	bne.n	8004d56 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8004d46:	4b08      	ldr	r3, [pc, #32]	; (8004d68 <osKernelStart+0x64>)
 8004d48:	2202      	movs	r2, #2
 8004d4a:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8004d4c:	f001 fd02 	bl	8006754 <vTaskStartScheduler>
      stat = osOK;
 8004d50:	2300      	movs	r3, #0
 8004d52:	60fb      	str	r3, [r7, #12]
 8004d54:	e002      	b.n	8004d5c <osKernelStart+0x58>
    } else {
      stat = osError;
 8004d56:	f04f 33ff 	mov.w	r3, #4294967295
 8004d5a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8004d5c:	68fb      	ldr	r3, [r7, #12]
}
 8004d5e:	4618      	mov	r0, r3
 8004d60:	3710      	adds	r7, #16
 8004d62:	46bd      	mov	sp, r7
 8004d64:	bd80      	pop	{r7, pc}
 8004d66:	bf00      	nop
 8004d68:	20000278 	.word	0x20000278

08004d6c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004d6c:	b580      	push	{r7, lr}
 8004d6e:	b092      	sub	sp, #72	; 0x48
 8004d70:	af04      	add	r7, sp, #16
 8004d72:	60f8      	str	r0, [r7, #12]
 8004d74:	60b9      	str	r1, [r7, #8]
 8004d76:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004d78:	2300      	movs	r3, #0
 8004d7a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004d7c:	f3ef 8305 	mrs	r3, IPSR
 8004d80:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8004d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	f040 8094 	bne.w	8004eb2 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d8a:	f3ef 8310 	mrs	r3, PRIMASK
 8004d8e:	623b      	str	r3, [r7, #32]
  return(result);
 8004d90:	6a3b      	ldr	r3, [r7, #32]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	f040 808d 	bne.w	8004eb2 <osThreadNew+0x146>
 8004d98:	4b48      	ldr	r3, [pc, #288]	; (8004ebc <osThreadNew+0x150>)
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	2b02      	cmp	r3, #2
 8004d9e:	d106      	bne.n	8004dae <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004da0:	f3ef 8311 	mrs	r3, BASEPRI
 8004da4:	61fb      	str	r3, [r7, #28]
  return(result);
 8004da6:	69fb      	ldr	r3, [r7, #28]
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	f040 8082 	bne.w	8004eb2 <osThreadNew+0x146>
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d07e      	beq.n	8004eb2 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8004db4:	2380      	movs	r3, #128	; 0x80
 8004db6:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8004db8:	2318      	movs	r3, #24
 8004dba:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8004dbc:	2300      	movs	r3, #0
 8004dbe:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8004dc0:	f107 031b 	add.w	r3, r7, #27
 8004dc4:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8004dc6:	f04f 33ff 	mov.w	r3, #4294967295
 8004dca:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d045      	beq.n	8004e5e <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d002      	beq.n	8004de0 <osThreadNew+0x74>
        name = attr->name;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	699b      	ldr	r3, [r3, #24]
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d002      	beq.n	8004dee <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	699b      	ldr	r3, [r3, #24]
 8004dec:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004dee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d008      	beq.n	8004e06 <osThreadNew+0x9a>
 8004df4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004df6:	2b38      	cmp	r3, #56	; 0x38
 8004df8:	d805      	bhi.n	8004e06 <osThreadNew+0x9a>
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	685b      	ldr	r3, [r3, #4]
 8004dfe:	f003 0301 	and.w	r3, r3, #1
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d001      	beq.n	8004e0a <osThreadNew+0x9e>
        return (NULL);
 8004e06:	2300      	movs	r3, #0
 8004e08:	e054      	b.n	8004eb4 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	695b      	ldr	r3, [r3, #20]
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d003      	beq.n	8004e1a <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	695b      	ldr	r3, [r3, #20]
 8004e16:	089b      	lsrs	r3, r3, #2
 8004e18:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	689b      	ldr	r3, [r3, #8]
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d00e      	beq.n	8004e40 <osThreadNew+0xd4>
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	68db      	ldr	r3, [r3, #12]
 8004e26:	2b5b      	cmp	r3, #91	; 0x5b
 8004e28:	d90a      	bls.n	8004e40 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d006      	beq.n	8004e40 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	695b      	ldr	r3, [r3, #20]
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d002      	beq.n	8004e40 <osThreadNew+0xd4>
        mem = 1;
 8004e3a:	2301      	movs	r3, #1
 8004e3c:	62bb      	str	r3, [r7, #40]	; 0x28
 8004e3e:	e010      	b.n	8004e62 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	689b      	ldr	r3, [r3, #8]
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d10c      	bne.n	8004e62 <osThreadNew+0xf6>
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	68db      	ldr	r3, [r3, #12]
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d108      	bne.n	8004e62 <osThreadNew+0xf6>
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	691b      	ldr	r3, [r3, #16]
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d104      	bne.n	8004e62 <osThreadNew+0xf6>
          mem = 0;
 8004e58:	2300      	movs	r3, #0
 8004e5a:	62bb      	str	r3, [r7, #40]	; 0x28
 8004e5c:	e001      	b.n	8004e62 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8004e5e:	2300      	movs	r3, #0
 8004e60:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8004e62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e64:	2b01      	cmp	r3, #1
 8004e66:	d110      	bne.n	8004e8a <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8004e6c:	687a      	ldr	r2, [r7, #4]
 8004e6e:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004e70:	9202      	str	r2, [sp, #8]
 8004e72:	9301      	str	r3, [sp, #4]
 8004e74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e76:	9300      	str	r3, [sp, #0]
 8004e78:	68bb      	ldr	r3, [r7, #8]
 8004e7a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e7c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004e7e:	68f8      	ldr	r0, [r7, #12]
 8004e80:	f001 fa9c 	bl	80063bc <xTaskCreateStatic>
 8004e84:	4603      	mov	r3, r0
 8004e86:	617b      	str	r3, [r7, #20]
 8004e88:	e013      	b.n	8004eb2 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8004e8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d110      	bne.n	8004eb2 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004e90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e92:	b29a      	uxth	r2, r3
 8004e94:	f107 0314 	add.w	r3, r7, #20
 8004e98:	9301      	str	r3, [sp, #4]
 8004e9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e9c:	9300      	str	r3, [sp, #0]
 8004e9e:	68bb      	ldr	r3, [r7, #8]
 8004ea0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004ea2:	68f8      	ldr	r0, [r7, #12]
 8004ea4:	f001 fae6 	bl	8006474 <xTaskCreate>
 8004ea8:	4603      	mov	r3, r0
 8004eaa:	2b01      	cmp	r3, #1
 8004eac:	d001      	beq.n	8004eb2 <osThreadNew+0x146>
          hTask = NULL;
 8004eae:	2300      	movs	r3, #0
 8004eb0:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004eb2:	697b      	ldr	r3, [r7, #20]
}
 8004eb4:	4618      	mov	r0, r3
 8004eb6:	3738      	adds	r7, #56	; 0x38
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	bd80      	pop	{r7, pc}
 8004ebc:	20000278 	.word	0x20000278

08004ec0 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	b086      	sub	sp, #24
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004ec8:	f3ef 8305 	mrs	r3, IPSR
 8004ecc:	613b      	str	r3, [r7, #16]
  return(result);
 8004ece:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d10f      	bne.n	8004ef4 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ed4:	f3ef 8310 	mrs	r3, PRIMASK
 8004ed8:	60fb      	str	r3, [r7, #12]
  return(result);
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d109      	bne.n	8004ef4 <osDelay+0x34>
 8004ee0:	4b0d      	ldr	r3, [pc, #52]	; (8004f18 <osDelay+0x58>)
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	2b02      	cmp	r3, #2
 8004ee6:	d109      	bne.n	8004efc <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004ee8:	f3ef 8311 	mrs	r3, BASEPRI
 8004eec:	60bb      	str	r3, [r7, #8]
  return(result);
 8004eee:	68bb      	ldr	r3, [r7, #8]
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d003      	beq.n	8004efc <osDelay+0x3c>
    stat = osErrorISR;
 8004ef4:	f06f 0305 	mvn.w	r3, #5
 8004ef8:	617b      	str	r3, [r7, #20]
 8004efa:	e007      	b.n	8004f0c <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8004efc:	2300      	movs	r3, #0
 8004efe:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d002      	beq.n	8004f0c <osDelay+0x4c>
      vTaskDelay(ticks);
 8004f06:	6878      	ldr	r0, [r7, #4]
 8004f08:	f001 fbf0 	bl	80066ec <vTaskDelay>
    }
  }

  return (stat);
 8004f0c:	697b      	ldr	r3, [r7, #20]
}
 8004f0e:	4618      	mov	r0, r3
 8004f10:	3718      	adds	r7, #24
 8004f12:	46bd      	mov	sp, r7
 8004f14:	bd80      	pop	{r7, pc}
 8004f16:	bf00      	nop
 8004f18:	20000278 	.word	0x20000278

08004f1c <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8004f1c:	b580      	push	{r7, lr}
 8004f1e:	b08c      	sub	sp, #48	; 0x30
 8004f20:	af02      	add	r7, sp, #8
 8004f22:	60f8      	str	r0, [r7, #12]
 8004f24:	60b9      	str	r1, [r7, #8]
 8004f26:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8004f28:	2300      	movs	r3, #0
 8004f2a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004f2c:	f3ef 8305 	mrs	r3, IPSR
 8004f30:	61bb      	str	r3, [r7, #24]
  return(result);
 8004f32:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	f040 8086 	bne.w	8005046 <osSemaphoreNew+0x12a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f3a:	f3ef 8310 	mrs	r3, PRIMASK
 8004f3e:	617b      	str	r3, [r7, #20]
  return(result);
 8004f40:	697b      	ldr	r3, [r7, #20]
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d17f      	bne.n	8005046 <osSemaphoreNew+0x12a>
 8004f46:	4b42      	ldr	r3, [pc, #264]	; (8005050 <osSemaphoreNew+0x134>)
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	2b02      	cmp	r3, #2
 8004f4c:	d105      	bne.n	8004f5a <osSemaphoreNew+0x3e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004f4e:	f3ef 8311 	mrs	r3, BASEPRI
 8004f52:	613b      	str	r3, [r7, #16]
  return(result);
 8004f54:	693b      	ldr	r3, [r7, #16]
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d175      	bne.n	8005046 <osSemaphoreNew+0x12a>
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d072      	beq.n	8005046 <osSemaphoreNew+0x12a>
 8004f60:	68ba      	ldr	r2, [r7, #8]
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	429a      	cmp	r2, r3
 8004f66:	d86e      	bhi.n	8005046 <osSemaphoreNew+0x12a>
    mem = -1;
 8004f68:	f04f 33ff 	mov.w	r3, #4294967295
 8004f6c:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d015      	beq.n	8004fa0 <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	689b      	ldr	r3, [r3, #8]
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d006      	beq.n	8004f8a <osSemaphoreNew+0x6e>
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	68db      	ldr	r3, [r3, #12]
 8004f80:	2b4f      	cmp	r3, #79	; 0x4f
 8004f82:	d902      	bls.n	8004f8a <osSemaphoreNew+0x6e>
        mem = 1;
 8004f84:	2301      	movs	r3, #1
 8004f86:	623b      	str	r3, [r7, #32]
 8004f88:	e00c      	b.n	8004fa4 <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	689b      	ldr	r3, [r3, #8]
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d108      	bne.n	8004fa4 <osSemaphoreNew+0x88>
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	68db      	ldr	r3, [r3, #12]
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d104      	bne.n	8004fa4 <osSemaphoreNew+0x88>
          mem = 0;
 8004f9a:	2300      	movs	r3, #0
 8004f9c:	623b      	str	r3, [r7, #32]
 8004f9e:	e001      	b.n	8004fa4 <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 8004fa0:	2300      	movs	r3, #0
 8004fa2:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 8004fa4:	6a3b      	ldr	r3, [r7, #32]
 8004fa6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004faa:	d04c      	beq.n	8005046 <osSemaphoreNew+0x12a>
      if (max_count == 1U) {
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	2b01      	cmp	r3, #1
 8004fb0:	d128      	bne.n	8005004 <osSemaphoreNew+0xe8>
        if (mem == 1) {
 8004fb2:	6a3b      	ldr	r3, [r7, #32]
 8004fb4:	2b01      	cmp	r3, #1
 8004fb6:	d10a      	bne.n	8004fce <osSemaphoreNew+0xb2>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	689b      	ldr	r3, [r3, #8]
 8004fbc:	2203      	movs	r2, #3
 8004fbe:	9200      	str	r2, [sp, #0]
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	2100      	movs	r1, #0
 8004fc4:	2001      	movs	r0, #1
 8004fc6:	f000 fa53 	bl	8005470 <xQueueGenericCreateStatic>
 8004fca:	6278      	str	r0, [r7, #36]	; 0x24
 8004fcc:	e005      	b.n	8004fda <osSemaphoreNew+0xbe>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 8004fce:	2203      	movs	r2, #3
 8004fd0:	2100      	movs	r1, #0
 8004fd2:	2001      	movs	r0, #1
 8004fd4:	f000 fac3 	bl	800555e <xQueueGenericCreate>
 8004fd8:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8004fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d022      	beq.n	8005026 <osSemaphoreNew+0x10a>
 8004fe0:	68bb      	ldr	r3, [r7, #8]
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d01f      	beq.n	8005026 <osSemaphoreNew+0x10a>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8004fe6:	2300      	movs	r3, #0
 8004fe8:	2200      	movs	r2, #0
 8004fea:	2100      	movs	r1, #0
 8004fec:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004fee:	f000 fb81 	bl	80056f4 <xQueueGenericSend>
 8004ff2:	4603      	mov	r3, r0
 8004ff4:	2b01      	cmp	r3, #1
 8004ff6:	d016      	beq.n	8005026 <osSemaphoreNew+0x10a>
            vSemaphoreDelete (hSemaphore);
 8004ff8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004ffa:	f001 f80b 	bl	8006014 <vQueueDelete>
            hSemaphore = NULL;
 8004ffe:	2300      	movs	r3, #0
 8005000:	627b      	str	r3, [r7, #36]	; 0x24
 8005002:	e010      	b.n	8005026 <osSemaphoreNew+0x10a>
          }
        }
      }
      else {
        if (mem == 1) {
 8005004:	6a3b      	ldr	r3, [r7, #32]
 8005006:	2b01      	cmp	r3, #1
 8005008:	d108      	bne.n	800501c <osSemaphoreNew+0x100>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	689b      	ldr	r3, [r3, #8]
 800500e:	461a      	mov	r2, r3
 8005010:	68b9      	ldr	r1, [r7, #8]
 8005012:	68f8      	ldr	r0, [r7, #12]
 8005014:	f000 fb04 	bl	8005620 <xQueueCreateCountingSemaphoreStatic>
 8005018:	6278      	str	r0, [r7, #36]	; 0x24
 800501a:	e004      	b.n	8005026 <osSemaphoreNew+0x10a>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800501c:	68b9      	ldr	r1, [r7, #8]
 800501e:	68f8      	ldr	r0, [r7, #12]
 8005020:	f000 fb35 	bl	800568e <xQueueCreateCountingSemaphore>
 8005024:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8005026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005028:	2b00      	cmp	r3, #0
 800502a:	d00c      	beq.n	8005046 <osSemaphoreNew+0x12a>
        if (attr != NULL) {
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2b00      	cmp	r3, #0
 8005030:	d003      	beq.n	800503a <osSemaphoreNew+0x11e>
          name = attr->name;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	61fb      	str	r3, [r7, #28]
 8005038:	e001      	b.n	800503e <osSemaphoreNew+0x122>
        } else {
          name = NULL;
 800503a:	2300      	movs	r3, #0
 800503c:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800503e:	69f9      	ldr	r1, [r7, #28]
 8005040:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005042:	f001 f933 	bl	80062ac <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8005046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005048:	4618      	mov	r0, r3
 800504a:	3728      	adds	r7, #40	; 0x28
 800504c:	46bd      	mov	sp, r7
 800504e:	bd80      	pop	{r7, pc}
 8005050:	20000278 	.word	0x20000278

08005054 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8005054:	b580      	push	{r7, lr}
 8005056:	b088      	sub	sp, #32
 8005058:	af00      	add	r7, sp, #0
 800505a:	6078      	str	r0, [r7, #4]
 800505c:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8005062:	2300      	movs	r3, #0
 8005064:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8005066:	69bb      	ldr	r3, [r7, #24]
 8005068:	2b00      	cmp	r3, #0
 800506a:	d103      	bne.n	8005074 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800506c:	f06f 0303 	mvn.w	r3, #3
 8005070:	61fb      	str	r3, [r7, #28]
 8005072:	e04b      	b.n	800510c <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005074:	f3ef 8305 	mrs	r3, IPSR
 8005078:	617b      	str	r3, [r7, #20]
  return(result);
 800507a:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800507c:	2b00      	cmp	r3, #0
 800507e:	d10f      	bne.n	80050a0 <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005080:	f3ef 8310 	mrs	r3, PRIMASK
 8005084:	613b      	str	r3, [r7, #16]
  return(result);
 8005086:	693b      	ldr	r3, [r7, #16]
 8005088:	2b00      	cmp	r3, #0
 800508a:	d109      	bne.n	80050a0 <osSemaphoreAcquire+0x4c>
 800508c:	4b22      	ldr	r3, [pc, #136]	; (8005118 <osSemaphoreAcquire+0xc4>)
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	2b02      	cmp	r3, #2
 8005092:	d128      	bne.n	80050e6 <osSemaphoreAcquire+0x92>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005094:	f3ef 8311 	mrs	r3, BASEPRI
 8005098:	60fb      	str	r3, [r7, #12]
  return(result);
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	2b00      	cmp	r3, #0
 800509e:	d022      	beq.n	80050e6 <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 80050a0:	683b      	ldr	r3, [r7, #0]
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d003      	beq.n	80050ae <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 80050a6:	f06f 0303 	mvn.w	r3, #3
 80050aa:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 80050ac:	e02d      	b.n	800510a <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 80050ae:	2300      	movs	r3, #0
 80050b0:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 80050b2:	f107 0308 	add.w	r3, r7, #8
 80050b6:	461a      	mov	r2, r3
 80050b8:	2100      	movs	r1, #0
 80050ba:	69b8      	ldr	r0, [r7, #24]
 80050bc:	f000 ff2a 	bl	8005f14 <xQueueReceiveFromISR>
 80050c0:	4603      	mov	r3, r0
 80050c2:	2b01      	cmp	r3, #1
 80050c4:	d003      	beq.n	80050ce <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 80050c6:	f06f 0302 	mvn.w	r3, #2
 80050ca:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 80050cc:	e01d      	b.n	800510a <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 80050ce:	68bb      	ldr	r3, [r7, #8]
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d01a      	beq.n	800510a <osSemaphoreAcquire+0xb6>
 80050d4:	4b11      	ldr	r3, [pc, #68]	; (800511c <osSemaphoreAcquire+0xc8>)
 80050d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80050da:	601a      	str	r2, [r3, #0]
 80050dc:	f3bf 8f4f 	dsb	sy
 80050e0:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 80050e4:	e011      	b.n	800510a <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 80050e6:	6839      	ldr	r1, [r7, #0]
 80050e8:	69b8      	ldr	r0, [r7, #24]
 80050ea:	f000 fe07 	bl	8005cfc <xQueueSemaphoreTake>
 80050ee:	4603      	mov	r3, r0
 80050f0:	2b01      	cmp	r3, #1
 80050f2:	d00b      	beq.n	800510c <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 80050f4:	683b      	ldr	r3, [r7, #0]
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d003      	beq.n	8005102 <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 80050fa:	f06f 0301 	mvn.w	r3, #1
 80050fe:	61fb      	str	r3, [r7, #28]
 8005100:	e004      	b.n	800510c <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 8005102:	f06f 0302 	mvn.w	r3, #2
 8005106:	61fb      	str	r3, [r7, #28]
 8005108:	e000      	b.n	800510c <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 800510a:	bf00      	nop
      }
    }
  }

  return (stat);
 800510c:	69fb      	ldr	r3, [r7, #28]
}
 800510e:	4618      	mov	r0, r3
 8005110:	3720      	adds	r7, #32
 8005112:	46bd      	mov	sp, r7
 8005114:	bd80      	pop	{r7, pc}
 8005116:	bf00      	nop
 8005118:	20000278 	.word	0x20000278
 800511c:	e000ed04 	.word	0xe000ed04

08005120 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8005120:	b580      	push	{r7, lr}
 8005122:	b088      	sub	sp, #32
 8005124:	af00      	add	r7, sp, #0
 8005126:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800512c:	2300      	movs	r3, #0
 800512e:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8005130:	69bb      	ldr	r3, [r7, #24]
 8005132:	2b00      	cmp	r3, #0
 8005134:	d103      	bne.n	800513e <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8005136:	f06f 0303 	mvn.w	r3, #3
 800513a:	61fb      	str	r3, [r7, #28]
 800513c:	e03e      	b.n	80051bc <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800513e:	f3ef 8305 	mrs	r3, IPSR
 8005142:	617b      	str	r3, [r7, #20]
  return(result);
 8005144:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8005146:	2b00      	cmp	r3, #0
 8005148:	d10f      	bne.n	800516a <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800514a:	f3ef 8310 	mrs	r3, PRIMASK
 800514e:	613b      	str	r3, [r7, #16]
  return(result);
 8005150:	693b      	ldr	r3, [r7, #16]
 8005152:	2b00      	cmp	r3, #0
 8005154:	d109      	bne.n	800516a <osSemaphoreRelease+0x4a>
 8005156:	4b1c      	ldr	r3, [pc, #112]	; (80051c8 <osSemaphoreRelease+0xa8>)
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	2b02      	cmp	r3, #2
 800515c:	d120      	bne.n	80051a0 <osSemaphoreRelease+0x80>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800515e:	f3ef 8311 	mrs	r3, BASEPRI
 8005162:	60fb      	str	r3, [r7, #12]
  return(result);
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	2b00      	cmp	r3, #0
 8005168:	d01a      	beq.n	80051a0 <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 800516a:	2300      	movs	r3, #0
 800516c:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800516e:	f107 0308 	add.w	r3, r7, #8
 8005172:	4619      	mov	r1, r3
 8005174:	69b8      	ldr	r0, [r7, #24]
 8005176:	f000 fc53 	bl	8005a20 <xQueueGiveFromISR>
 800517a:	4603      	mov	r3, r0
 800517c:	2b01      	cmp	r3, #1
 800517e:	d003      	beq.n	8005188 <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 8005180:	f06f 0302 	mvn.w	r3, #2
 8005184:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8005186:	e018      	b.n	80051ba <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 8005188:	68bb      	ldr	r3, [r7, #8]
 800518a:	2b00      	cmp	r3, #0
 800518c:	d015      	beq.n	80051ba <osSemaphoreRelease+0x9a>
 800518e:	4b0f      	ldr	r3, [pc, #60]	; (80051cc <osSemaphoreRelease+0xac>)
 8005190:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005194:	601a      	str	r2, [r3, #0]
 8005196:	f3bf 8f4f 	dsb	sy
 800519a:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800519e:	e00c      	b.n	80051ba <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80051a0:	2300      	movs	r3, #0
 80051a2:	2200      	movs	r2, #0
 80051a4:	2100      	movs	r1, #0
 80051a6:	69b8      	ldr	r0, [r7, #24]
 80051a8:	f000 faa4 	bl	80056f4 <xQueueGenericSend>
 80051ac:	4603      	mov	r3, r0
 80051ae:	2b01      	cmp	r3, #1
 80051b0:	d004      	beq.n	80051bc <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 80051b2:	f06f 0302 	mvn.w	r3, #2
 80051b6:	61fb      	str	r3, [r7, #28]
 80051b8:	e000      	b.n	80051bc <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80051ba:	bf00      	nop
    }
  }

  return (stat);
 80051bc:	69fb      	ldr	r3, [r7, #28]
}
 80051be:	4618      	mov	r0, r3
 80051c0:	3720      	adds	r7, #32
 80051c2:	46bd      	mov	sp, r7
 80051c4:	bd80      	pop	{r7, pc}
 80051c6:	bf00      	nop
 80051c8:	20000278 	.word	0x20000278
 80051cc:	e000ed04 	.word	0xe000ed04

080051d0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80051d0:	b480      	push	{r7}
 80051d2:	b085      	sub	sp, #20
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	60f8      	str	r0, [r7, #12]
 80051d8:	60b9      	str	r1, [r7, #8]
 80051da:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	4a07      	ldr	r2, [pc, #28]	; (80051fc <vApplicationGetIdleTaskMemory+0x2c>)
 80051e0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80051e2:	68bb      	ldr	r3, [r7, #8]
 80051e4:	4a06      	ldr	r2, [pc, #24]	; (8005200 <vApplicationGetIdleTaskMemory+0x30>)
 80051e6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2280      	movs	r2, #128	; 0x80
 80051ec:	601a      	str	r2, [r3, #0]
}
 80051ee:	bf00      	nop
 80051f0:	3714      	adds	r7, #20
 80051f2:	46bd      	mov	sp, r7
 80051f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f8:	4770      	bx	lr
 80051fa:	bf00      	nop
 80051fc:	2000027c 	.word	0x2000027c
 8005200:	200002d8 	.word	0x200002d8

08005204 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005204:	b480      	push	{r7}
 8005206:	b085      	sub	sp, #20
 8005208:	af00      	add	r7, sp, #0
 800520a:	60f8      	str	r0, [r7, #12]
 800520c:	60b9      	str	r1, [r7, #8]
 800520e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	4a07      	ldr	r2, [pc, #28]	; (8005230 <vApplicationGetTimerTaskMemory+0x2c>)
 8005214:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005216:	68bb      	ldr	r3, [r7, #8]
 8005218:	4a06      	ldr	r2, [pc, #24]	; (8005234 <vApplicationGetTimerTaskMemory+0x30>)
 800521a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005222:	601a      	str	r2, [r3, #0]
}
 8005224:	bf00      	nop
 8005226:	3714      	adds	r7, #20
 8005228:	46bd      	mov	sp, r7
 800522a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522e:	4770      	bx	lr
 8005230:	200004d8 	.word	0x200004d8
 8005234:	20000534 	.word	0x20000534

08005238 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005238:	b480      	push	{r7}
 800523a:	b083      	sub	sp, #12
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	f103 0208 	add.w	r2, r3, #8
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	f04f 32ff 	mov.w	r2, #4294967295
 8005250:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	f103 0208 	add.w	r2, r3, #8
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	f103 0208 	add.w	r2, r3, #8
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	2200      	movs	r2, #0
 800526a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800526c:	bf00      	nop
 800526e:	370c      	adds	r7, #12
 8005270:	46bd      	mov	sp, r7
 8005272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005276:	4770      	bx	lr

08005278 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005278:	b480      	push	{r7}
 800527a:	b083      	sub	sp, #12
 800527c:	af00      	add	r7, sp, #0
 800527e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	2200      	movs	r2, #0
 8005284:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005286:	bf00      	nop
 8005288:	370c      	adds	r7, #12
 800528a:	46bd      	mov	sp, r7
 800528c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005290:	4770      	bx	lr

08005292 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005292:	b480      	push	{r7}
 8005294:	b085      	sub	sp, #20
 8005296:	af00      	add	r7, sp, #0
 8005298:	6078      	str	r0, [r7, #4]
 800529a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	685b      	ldr	r3, [r3, #4]
 80052a0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80052a2:	683b      	ldr	r3, [r7, #0]
 80052a4:	68fa      	ldr	r2, [r7, #12]
 80052a6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	689a      	ldr	r2, [r3, #8]
 80052ac:	683b      	ldr	r3, [r7, #0]
 80052ae:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	689b      	ldr	r3, [r3, #8]
 80052b4:	683a      	ldr	r2, [r7, #0]
 80052b6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	683a      	ldr	r2, [r7, #0]
 80052bc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80052be:	683b      	ldr	r3, [r7, #0]
 80052c0:	687a      	ldr	r2, [r7, #4]
 80052c2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	1c5a      	adds	r2, r3, #1
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	601a      	str	r2, [r3, #0]
}
 80052ce:	bf00      	nop
 80052d0:	3714      	adds	r7, #20
 80052d2:	46bd      	mov	sp, r7
 80052d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d8:	4770      	bx	lr

080052da <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80052da:	b480      	push	{r7}
 80052dc:	b085      	sub	sp, #20
 80052de:	af00      	add	r7, sp, #0
 80052e0:	6078      	str	r0, [r7, #4]
 80052e2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80052e4:	683b      	ldr	r3, [r7, #0]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80052ea:	68bb      	ldr	r3, [r7, #8]
 80052ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052f0:	d103      	bne.n	80052fa <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	691b      	ldr	r3, [r3, #16]
 80052f6:	60fb      	str	r3, [r7, #12]
 80052f8:	e00c      	b.n	8005314 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	3308      	adds	r3, #8
 80052fe:	60fb      	str	r3, [r7, #12]
 8005300:	e002      	b.n	8005308 <vListInsert+0x2e>
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	685b      	ldr	r3, [r3, #4]
 8005306:	60fb      	str	r3, [r7, #12]
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	685b      	ldr	r3, [r3, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	68ba      	ldr	r2, [r7, #8]
 8005310:	429a      	cmp	r2, r3
 8005312:	d2f6      	bcs.n	8005302 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	685a      	ldr	r2, [r3, #4]
 8005318:	683b      	ldr	r3, [r7, #0]
 800531a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800531c:	683b      	ldr	r3, [r7, #0]
 800531e:	685b      	ldr	r3, [r3, #4]
 8005320:	683a      	ldr	r2, [r7, #0]
 8005322:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005324:	683b      	ldr	r3, [r7, #0]
 8005326:	68fa      	ldr	r2, [r7, #12]
 8005328:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	683a      	ldr	r2, [r7, #0]
 800532e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8005330:	683b      	ldr	r3, [r7, #0]
 8005332:	687a      	ldr	r2, [r7, #4]
 8005334:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	1c5a      	adds	r2, r3, #1
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	601a      	str	r2, [r3, #0]
}
 8005340:	bf00      	nop
 8005342:	3714      	adds	r7, #20
 8005344:	46bd      	mov	sp, r7
 8005346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534a:	4770      	bx	lr

0800534c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800534c:	b480      	push	{r7}
 800534e:	b085      	sub	sp, #20
 8005350:	af00      	add	r7, sp, #0
 8005352:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	691b      	ldr	r3, [r3, #16]
 8005358:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	685b      	ldr	r3, [r3, #4]
 800535e:	687a      	ldr	r2, [r7, #4]
 8005360:	6892      	ldr	r2, [r2, #8]
 8005362:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	689b      	ldr	r3, [r3, #8]
 8005368:	687a      	ldr	r2, [r7, #4]
 800536a:	6852      	ldr	r2, [r2, #4]
 800536c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	685b      	ldr	r3, [r3, #4]
 8005372:	687a      	ldr	r2, [r7, #4]
 8005374:	429a      	cmp	r2, r3
 8005376:	d103      	bne.n	8005380 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	689a      	ldr	r2, [r3, #8]
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2200      	movs	r2, #0
 8005384:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	1e5a      	subs	r2, r3, #1
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	681b      	ldr	r3, [r3, #0]
}
 8005394:	4618      	mov	r0, r3
 8005396:	3714      	adds	r7, #20
 8005398:	46bd      	mov	sp, r7
 800539a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539e:	4770      	bx	lr

080053a0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80053a0:	b580      	push	{r7, lr}
 80053a2:	b084      	sub	sp, #16
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	6078      	str	r0, [r7, #4]
 80053a8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d10a      	bne.n	80053ca <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80053b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053b8:	f383 8811 	msr	BASEPRI, r3
 80053bc:	f3bf 8f6f 	isb	sy
 80053c0:	f3bf 8f4f 	dsb	sy
 80053c4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80053c6:	bf00      	nop
 80053c8:	e7fe      	b.n	80053c8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80053ca:	f002 fc3b 	bl	8007c44 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	681a      	ldr	r2, [r3, #0]
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053d6:	68f9      	ldr	r1, [r7, #12]
 80053d8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80053da:	fb01 f303 	mul.w	r3, r1, r3
 80053de:	441a      	add	r2, r3
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	2200      	movs	r2, #0
 80053e8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	681a      	ldr	r2, [r3, #0]
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	681a      	ldr	r2, [r3, #0]
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053fa:	3b01      	subs	r3, #1
 80053fc:	68f9      	ldr	r1, [r7, #12]
 80053fe:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005400:	fb01 f303 	mul.w	r3, r1, r3
 8005404:	441a      	add	r2, r3
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	22ff      	movs	r2, #255	; 0xff
 800540e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	22ff      	movs	r2, #255	; 0xff
 8005416:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800541a:	683b      	ldr	r3, [r7, #0]
 800541c:	2b00      	cmp	r3, #0
 800541e:	d114      	bne.n	800544a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	691b      	ldr	r3, [r3, #16]
 8005424:	2b00      	cmp	r3, #0
 8005426:	d01a      	beq.n	800545e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	3310      	adds	r3, #16
 800542c:	4618      	mov	r0, r3
 800542e:	f001 fc1f 	bl	8006c70 <xTaskRemoveFromEventList>
 8005432:	4603      	mov	r3, r0
 8005434:	2b00      	cmp	r3, #0
 8005436:	d012      	beq.n	800545e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005438:	4b0c      	ldr	r3, [pc, #48]	; (800546c <xQueueGenericReset+0xcc>)
 800543a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800543e:	601a      	str	r2, [r3, #0]
 8005440:	f3bf 8f4f 	dsb	sy
 8005444:	f3bf 8f6f 	isb	sy
 8005448:	e009      	b.n	800545e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	3310      	adds	r3, #16
 800544e:	4618      	mov	r0, r3
 8005450:	f7ff fef2 	bl	8005238 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	3324      	adds	r3, #36	; 0x24
 8005458:	4618      	mov	r0, r3
 800545a:	f7ff feed 	bl	8005238 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800545e:	f002 fc21 	bl	8007ca4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005462:	2301      	movs	r3, #1
}
 8005464:	4618      	mov	r0, r3
 8005466:	3710      	adds	r7, #16
 8005468:	46bd      	mov	sp, r7
 800546a:	bd80      	pop	{r7, pc}
 800546c:	e000ed04 	.word	0xe000ed04

08005470 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005470:	b580      	push	{r7, lr}
 8005472:	b08e      	sub	sp, #56	; 0x38
 8005474:	af02      	add	r7, sp, #8
 8005476:	60f8      	str	r0, [r7, #12]
 8005478:	60b9      	str	r1, [r7, #8]
 800547a:	607a      	str	r2, [r7, #4]
 800547c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	2b00      	cmp	r3, #0
 8005482:	d10a      	bne.n	800549a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8005484:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005488:	f383 8811 	msr	BASEPRI, r3
 800548c:	f3bf 8f6f 	isb	sy
 8005490:	f3bf 8f4f 	dsb	sy
 8005494:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005496:	bf00      	nop
 8005498:	e7fe      	b.n	8005498 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800549a:	683b      	ldr	r3, [r7, #0]
 800549c:	2b00      	cmp	r3, #0
 800549e:	d10a      	bne.n	80054b6 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80054a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054a4:	f383 8811 	msr	BASEPRI, r3
 80054a8:	f3bf 8f6f 	isb	sy
 80054ac:	f3bf 8f4f 	dsb	sy
 80054b0:	627b      	str	r3, [r7, #36]	; 0x24
}
 80054b2:	bf00      	nop
 80054b4:	e7fe      	b.n	80054b4 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d002      	beq.n	80054c2 <xQueueGenericCreateStatic+0x52>
 80054bc:	68bb      	ldr	r3, [r7, #8]
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d001      	beq.n	80054c6 <xQueueGenericCreateStatic+0x56>
 80054c2:	2301      	movs	r3, #1
 80054c4:	e000      	b.n	80054c8 <xQueueGenericCreateStatic+0x58>
 80054c6:	2300      	movs	r3, #0
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d10a      	bne.n	80054e2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80054cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054d0:	f383 8811 	msr	BASEPRI, r3
 80054d4:	f3bf 8f6f 	isb	sy
 80054d8:	f3bf 8f4f 	dsb	sy
 80054dc:	623b      	str	r3, [r7, #32]
}
 80054de:	bf00      	nop
 80054e0:	e7fe      	b.n	80054e0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d102      	bne.n	80054ee <xQueueGenericCreateStatic+0x7e>
 80054e8:	68bb      	ldr	r3, [r7, #8]
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d101      	bne.n	80054f2 <xQueueGenericCreateStatic+0x82>
 80054ee:	2301      	movs	r3, #1
 80054f0:	e000      	b.n	80054f4 <xQueueGenericCreateStatic+0x84>
 80054f2:	2300      	movs	r3, #0
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d10a      	bne.n	800550e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80054f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054fc:	f383 8811 	msr	BASEPRI, r3
 8005500:	f3bf 8f6f 	isb	sy
 8005504:	f3bf 8f4f 	dsb	sy
 8005508:	61fb      	str	r3, [r7, #28]
}
 800550a:	bf00      	nop
 800550c:	e7fe      	b.n	800550c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800550e:	2350      	movs	r3, #80	; 0x50
 8005510:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005512:	697b      	ldr	r3, [r7, #20]
 8005514:	2b50      	cmp	r3, #80	; 0x50
 8005516:	d00a      	beq.n	800552e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8005518:	f04f 0350 	mov.w	r3, #80	; 0x50
 800551c:	f383 8811 	msr	BASEPRI, r3
 8005520:	f3bf 8f6f 	isb	sy
 8005524:	f3bf 8f4f 	dsb	sy
 8005528:	61bb      	str	r3, [r7, #24]
}
 800552a:	bf00      	nop
 800552c:	e7fe      	b.n	800552c <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800552e:	683b      	ldr	r3, [r7, #0]
 8005530:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8005532:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005534:	2b00      	cmp	r3, #0
 8005536:	d00d      	beq.n	8005554 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005538:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800553a:	2201      	movs	r2, #1
 800553c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005540:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8005544:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005546:	9300      	str	r3, [sp, #0]
 8005548:	4613      	mov	r3, r2
 800554a:	687a      	ldr	r2, [r7, #4]
 800554c:	68b9      	ldr	r1, [r7, #8]
 800554e:	68f8      	ldr	r0, [r7, #12]
 8005550:	f000 f843 	bl	80055da <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8005554:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005556:	4618      	mov	r0, r3
 8005558:	3730      	adds	r7, #48	; 0x30
 800555a:	46bd      	mov	sp, r7
 800555c:	bd80      	pop	{r7, pc}

0800555e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800555e:	b580      	push	{r7, lr}
 8005560:	b08a      	sub	sp, #40	; 0x28
 8005562:	af02      	add	r7, sp, #8
 8005564:	60f8      	str	r0, [r7, #12]
 8005566:	60b9      	str	r1, [r7, #8]
 8005568:	4613      	mov	r3, r2
 800556a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	2b00      	cmp	r3, #0
 8005570:	d10a      	bne.n	8005588 <xQueueGenericCreate+0x2a>
	__asm volatile
 8005572:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005576:	f383 8811 	msr	BASEPRI, r3
 800557a:	f3bf 8f6f 	isb	sy
 800557e:	f3bf 8f4f 	dsb	sy
 8005582:	613b      	str	r3, [r7, #16]
}
 8005584:	bf00      	nop
 8005586:	e7fe      	b.n	8005586 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8005588:	68bb      	ldr	r3, [r7, #8]
 800558a:	2b00      	cmp	r3, #0
 800558c:	d102      	bne.n	8005594 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800558e:	2300      	movs	r3, #0
 8005590:	61fb      	str	r3, [r7, #28]
 8005592:	e004      	b.n	800559e <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	68ba      	ldr	r2, [r7, #8]
 8005598:	fb02 f303 	mul.w	r3, r2, r3
 800559c:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800559e:	69fb      	ldr	r3, [r7, #28]
 80055a0:	3350      	adds	r3, #80	; 0x50
 80055a2:	4618      	mov	r0, r3
 80055a4:	f002 fc70 	bl	8007e88 <pvPortMalloc>
 80055a8:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80055aa:	69bb      	ldr	r3, [r7, #24]
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d00f      	beq.n	80055d0 <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 80055b0:	69bb      	ldr	r3, [r7, #24]
 80055b2:	3350      	adds	r3, #80	; 0x50
 80055b4:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80055b6:	69bb      	ldr	r3, [r7, #24]
 80055b8:	2200      	movs	r2, #0
 80055ba:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80055be:	79fa      	ldrb	r2, [r7, #7]
 80055c0:	69bb      	ldr	r3, [r7, #24]
 80055c2:	9300      	str	r3, [sp, #0]
 80055c4:	4613      	mov	r3, r2
 80055c6:	697a      	ldr	r2, [r7, #20]
 80055c8:	68b9      	ldr	r1, [r7, #8]
 80055ca:	68f8      	ldr	r0, [r7, #12]
 80055cc:	f000 f805 	bl	80055da <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80055d0:	69bb      	ldr	r3, [r7, #24]
	}
 80055d2:	4618      	mov	r0, r3
 80055d4:	3720      	adds	r7, #32
 80055d6:	46bd      	mov	sp, r7
 80055d8:	bd80      	pop	{r7, pc}

080055da <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80055da:	b580      	push	{r7, lr}
 80055dc:	b084      	sub	sp, #16
 80055de:	af00      	add	r7, sp, #0
 80055e0:	60f8      	str	r0, [r7, #12]
 80055e2:	60b9      	str	r1, [r7, #8]
 80055e4:	607a      	str	r2, [r7, #4]
 80055e6:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80055e8:	68bb      	ldr	r3, [r7, #8]
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d103      	bne.n	80055f6 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80055ee:	69bb      	ldr	r3, [r7, #24]
 80055f0:	69ba      	ldr	r2, [r7, #24]
 80055f2:	601a      	str	r2, [r3, #0]
 80055f4:	e002      	b.n	80055fc <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80055f6:	69bb      	ldr	r3, [r7, #24]
 80055f8:	687a      	ldr	r2, [r7, #4]
 80055fa:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80055fc:	69bb      	ldr	r3, [r7, #24]
 80055fe:	68fa      	ldr	r2, [r7, #12]
 8005600:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005602:	69bb      	ldr	r3, [r7, #24]
 8005604:	68ba      	ldr	r2, [r7, #8]
 8005606:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005608:	2101      	movs	r1, #1
 800560a:	69b8      	ldr	r0, [r7, #24]
 800560c:	f7ff fec8 	bl	80053a0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005610:	69bb      	ldr	r3, [r7, #24]
 8005612:	78fa      	ldrb	r2, [r7, #3]
 8005614:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005618:	bf00      	nop
 800561a:	3710      	adds	r7, #16
 800561c:	46bd      	mov	sp, r7
 800561e:	bd80      	pop	{r7, pc}

08005620 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8005620:	b580      	push	{r7, lr}
 8005622:	b08a      	sub	sp, #40	; 0x28
 8005624:	af02      	add	r7, sp, #8
 8005626:	60f8      	str	r0, [r7, #12]
 8005628:	60b9      	str	r1, [r7, #8]
 800562a:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	2b00      	cmp	r3, #0
 8005630:	d10a      	bne.n	8005648 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8005632:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005636:	f383 8811 	msr	BASEPRI, r3
 800563a:	f3bf 8f6f 	isb	sy
 800563e:	f3bf 8f4f 	dsb	sy
 8005642:	61bb      	str	r3, [r7, #24]
}
 8005644:	bf00      	nop
 8005646:	e7fe      	b.n	8005646 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8005648:	68ba      	ldr	r2, [r7, #8]
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	429a      	cmp	r2, r3
 800564e:	d90a      	bls.n	8005666 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8005650:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005654:	f383 8811 	msr	BASEPRI, r3
 8005658:	f3bf 8f6f 	isb	sy
 800565c:	f3bf 8f4f 	dsb	sy
 8005660:	617b      	str	r3, [r7, #20]
}
 8005662:	bf00      	nop
 8005664:	e7fe      	b.n	8005664 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8005666:	2302      	movs	r3, #2
 8005668:	9300      	str	r3, [sp, #0]
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	2200      	movs	r2, #0
 800566e:	2100      	movs	r1, #0
 8005670:	68f8      	ldr	r0, [r7, #12]
 8005672:	f7ff fefd 	bl	8005470 <xQueueGenericCreateStatic>
 8005676:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8005678:	69fb      	ldr	r3, [r7, #28]
 800567a:	2b00      	cmp	r3, #0
 800567c:	d002      	beq.n	8005684 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800567e:	69fb      	ldr	r3, [r7, #28]
 8005680:	68ba      	ldr	r2, [r7, #8]
 8005682:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8005684:	69fb      	ldr	r3, [r7, #28]
	}
 8005686:	4618      	mov	r0, r3
 8005688:	3720      	adds	r7, #32
 800568a:	46bd      	mov	sp, r7
 800568c:	bd80      	pop	{r7, pc}

0800568e <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800568e:	b580      	push	{r7, lr}
 8005690:	b086      	sub	sp, #24
 8005692:	af00      	add	r7, sp, #0
 8005694:	6078      	str	r0, [r7, #4]
 8005696:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	2b00      	cmp	r3, #0
 800569c:	d10a      	bne.n	80056b4 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 800569e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056a2:	f383 8811 	msr	BASEPRI, r3
 80056a6:	f3bf 8f6f 	isb	sy
 80056aa:	f3bf 8f4f 	dsb	sy
 80056ae:	613b      	str	r3, [r7, #16]
}
 80056b0:	bf00      	nop
 80056b2:	e7fe      	b.n	80056b2 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 80056b4:	683a      	ldr	r2, [r7, #0]
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	429a      	cmp	r2, r3
 80056ba:	d90a      	bls.n	80056d2 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 80056bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056c0:	f383 8811 	msr	BASEPRI, r3
 80056c4:	f3bf 8f6f 	isb	sy
 80056c8:	f3bf 8f4f 	dsb	sy
 80056cc:	60fb      	str	r3, [r7, #12]
}
 80056ce:	bf00      	nop
 80056d0:	e7fe      	b.n	80056d0 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80056d2:	2202      	movs	r2, #2
 80056d4:	2100      	movs	r1, #0
 80056d6:	6878      	ldr	r0, [r7, #4]
 80056d8:	f7ff ff41 	bl	800555e <xQueueGenericCreate>
 80056dc:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 80056de:	697b      	ldr	r3, [r7, #20]
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d002      	beq.n	80056ea <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80056e4:	697b      	ldr	r3, [r7, #20]
 80056e6:	683a      	ldr	r2, [r7, #0]
 80056e8:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80056ea:	697b      	ldr	r3, [r7, #20]
	}
 80056ec:	4618      	mov	r0, r3
 80056ee:	3718      	adds	r7, #24
 80056f0:	46bd      	mov	sp, r7
 80056f2:	bd80      	pop	{r7, pc}

080056f4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80056f4:	b580      	push	{r7, lr}
 80056f6:	b08e      	sub	sp, #56	; 0x38
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	60f8      	str	r0, [r7, #12]
 80056fc:	60b9      	str	r1, [r7, #8]
 80056fe:	607a      	str	r2, [r7, #4]
 8005700:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005702:	2300      	movs	r3, #0
 8005704:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800570a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800570c:	2b00      	cmp	r3, #0
 800570e:	d10a      	bne.n	8005726 <xQueueGenericSend+0x32>
	__asm volatile
 8005710:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005714:	f383 8811 	msr	BASEPRI, r3
 8005718:	f3bf 8f6f 	isb	sy
 800571c:	f3bf 8f4f 	dsb	sy
 8005720:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005722:	bf00      	nop
 8005724:	e7fe      	b.n	8005724 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005726:	68bb      	ldr	r3, [r7, #8]
 8005728:	2b00      	cmp	r3, #0
 800572a:	d103      	bne.n	8005734 <xQueueGenericSend+0x40>
 800572c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800572e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005730:	2b00      	cmp	r3, #0
 8005732:	d101      	bne.n	8005738 <xQueueGenericSend+0x44>
 8005734:	2301      	movs	r3, #1
 8005736:	e000      	b.n	800573a <xQueueGenericSend+0x46>
 8005738:	2300      	movs	r3, #0
 800573a:	2b00      	cmp	r3, #0
 800573c:	d10a      	bne.n	8005754 <xQueueGenericSend+0x60>
	__asm volatile
 800573e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005742:	f383 8811 	msr	BASEPRI, r3
 8005746:	f3bf 8f6f 	isb	sy
 800574a:	f3bf 8f4f 	dsb	sy
 800574e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005750:	bf00      	nop
 8005752:	e7fe      	b.n	8005752 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005754:	683b      	ldr	r3, [r7, #0]
 8005756:	2b02      	cmp	r3, #2
 8005758:	d103      	bne.n	8005762 <xQueueGenericSend+0x6e>
 800575a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800575c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800575e:	2b01      	cmp	r3, #1
 8005760:	d101      	bne.n	8005766 <xQueueGenericSend+0x72>
 8005762:	2301      	movs	r3, #1
 8005764:	e000      	b.n	8005768 <xQueueGenericSend+0x74>
 8005766:	2300      	movs	r3, #0
 8005768:	2b00      	cmp	r3, #0
 800576a:	d10a      	bne.n	8005782 <xQueueGenericSend+0x8e>
	__asm volatile
 800576c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005770:	f383 8811 	msr	BASEPRI, r3
 8005774:	f3bf 8f6f 	isb	sy
 8005778:	f3bf 8f4f 	dsb	sy
 800577c:	623b      	str	r3, [r7, #32]
}
 800577e:	bf00      	nop
 8005780:	e7fe      	b.n	8005780 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005782:	f001 fc39 	bl	8006ff8 <xTaskGetSchedulerState>
 8005786:	4603      	mov	r3, r0
 8005788:	2b00      	cmp	r3, #0
 800578a:	d102      	bne.n	8005792 <xQueueGenericSend+0x9e>
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	2b00      	cmp	r3, #0
 8005790:	d101      	bne.n	8005796 <xQueueGenericSend+0xa2>
 8005792:	2301      	movs	r3, #1
 8005794:	e000      	b.n	8005798 <xQueueGenericSend+0xa4>
 8005796:	2300      	movs	r3, #0
 8005798:	2b00      	cmp	r3, #0
 800579a:	d10a      	bne.n	80057b2 <xQueueGenericSend+0xbe>
	__asm volatile
 800579c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057a0:	f383 8811 	msr	BASEPRI, r3
 80057a4:	f3bf 8f6f 	isb	sy
 80057a8:	f3bf 8f4f 	dsb	sy
 80057ac:	61fb      	str	r3, [r7, #28]
}
 80057ae:	bf00      	nop
 80057b0:	e7fe      	b.n	80057b0 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80057b2:	f002 fa47 	bl	8007c44 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80057b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80057ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057be:	429a      	cmp	r2, r3
 80057c0:	d302      	bcc.n	80057c8 <xQueueGenericSend+0xd4>
 80057c2:	683b      	ldr	r3, [r7, #0]
 80057c4:	2b02      	cmp	r3, #2
 80057c6:	d129      	bne.n	800581c <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80057c8:	683a      	ldr	r2, [r7, #0]
 80057ca:	68b9      	ldr	r1, [r7, #8]
 80057cc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80057ce:	f000 fc5c 	bl	800608a <prvCopyDataToQueue>
 80057d2:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80057d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d010      	beq.n	80057fe <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80057dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057de:	3324      	adds	r3, #36	; 0x24
 80057e0:	4618      	mov	r0, r3
 80057e2:	f001 fa45 	bl	8006c70 <xTaskRemoveFromEventList>
 80057e6:	4603      	mov	r3, r0
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d013      	beq.n	8005814 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80057ec:	4b3f      	ldr	r3, [pc, #252]	; (80058ec <xQueueGenericSend+0x1f8>)
 80057ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80057f2:	601a      	str	r2, [r3, #0]
 80057f4:	f3bf 8f4f 	dsb	sy
 80057f8:	f3bf 8f6f 	isb	sy
 80057fc:	e00a      	b.n	8005814 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80057fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005800:	2b00      	cmp	r3, #0
 8005802:	d007      	beq.n	8005814 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005804:	4b39      	ldr	r3, [pc, #228]	; (80058ec <xQueueGenericSend+0x1f8>)
 8005806:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800580a:	601a      	str	r2, [r3, #0]
 800580c:	f3bf 8f4f 	dsb	sy
 8005810:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005814:	f002 fa46 	bl	8007ca4 <vPortExitCritical>
				return pdPASS;
 8005818:	2301      	movs	r3, #1
 800581a:	e063      	b.n	80058e4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2b00      	cmp	r3, #0
 8005820:	d103      	bne.n	800582a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005822:	f002 fa3f 	bl	8007ca4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005826:	2300      	movs	r3, #0
 8005828:	e05c      	b.n	80058e4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800582a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800582c:	2b00      	cmp	r3, #0
 800582e:	d106      	bne.n	800583e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005830:	f107 0314 	add.w	r3, r7, #20
 8005834:	4618      	mov	r0, r3
 8005836:	f001 fa7f 	bl	8006d38 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800583a:	2301      	movs	r3, #1
 800583c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800583e:	f002 fa31 	bl	8007ca4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005842:	f000 ffed 	bl	8006820 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005846:	f002 f9fd 	bl	8007c44 <vPortEnterCritical>
 800584a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800584c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005850:	b25b      	sxtb	r3, r3
 8005852:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005856:	d103      	bne.n	8005860 <xQueueGenericSend+0x16c>
 8005858:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800585a:	2200      	movs	r2, #0
 800585c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005860:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005862:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005866:	b25b      	sxtb	r3, r3
 8005868:	f1b3 3fff 	cmp.w	r3, #4294967295
 800586c:	d103      	bne.n	8005876 <xQueueGenericSend+0x182>
 800586e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005870:	2200      	movs	r2, #0
 8005872:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005876:	f002 fa15 	bl	8007ca4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800587a:	1d3a      	adds	r2, r7, #4
 800587c:	f107 0314 	add.w	r3, r7, #20
 8005880:	4611      	mov	r1, r2
 8005882:	4618      	mov	r0, r3
 8005884:	f001 fa6e 	bl	8006d64 <xTaskCheckForTimeOut>
 8005888:	4603      	mov	r3, r0
 800588a:	2b00      	cmp	r3, #0
 800588c:	d124      	bne.n	80058d8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800588e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005890:	f000 fcf3 	bl	800627a <prvIsQueueFull>
 8005894:	4603      	mov	r3, r0
 8005896:	2b00      	cmp	r3, #0
 8005898:	d018      	beq.n	80058cc <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800589a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800589c:	3310      	adds	r3, #16
 800589e:	687a      	ldr	r2, [r7, #4]
 80058a0:	4611      	mov	r1, r2
 80058a2:	4618      	mov	r0, r3
 80058a4:	f001 f994 	bl	8006bd0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80058a8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80058aa:	f000 fc7e 	bl	80061aa <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80058ae:	f000 ffc5 	bl	800683c <xTaskResumeAll>
 80058b2:	4603      	mov	r3, r0
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	f47f af7c 	bne.w	80057b2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80058ba:	4b0c      	ldr	r3, [pc, #48]	; (80058ec <xQueueGenericSend+0x1f8>)
 80058bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80058c0:	601a      	str	r2, [r3, #0]
 80058c2:	f3bf 8f4f 	dsb	sy
 80058c6:	f3bf 8f6f 	isb	sy
 80058ca:	e772      	b.n	80057b2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80058cc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80058ce:	f000 fc6c 	bl	80061aa <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80058d2:	f000 ffb3 	bl	800683c <xTaskResumeAll>
 80058d6:	e76c      	b.n	80057b2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80058d8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80058da:	f000 fc66 	bl	80061aa <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80058de:	f000 ffad 	bl	800683c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80058e2:	2300      	movs	r3, #0
		}
	}
}
 80058e4:	4618      	mov	r0, r3
 80058e6:	3738      	adds	r7, #56	; 0x38
 80058e8:	46bd      	mov	sp, r7
 80058ea:	bd80      	pop	{r7, pc}
 80058ec:	e000ed04 	.word	0xe000ed04

080058f0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80058f0:	b580      	push	{r7, lr}
 80058f2:	b08e      	sub	sp, #56	; 0x38
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	60f8      	str	r0, [r7, #12]
 80058f8:	60b9      	str	r1, [r7, #8]
 80058fa:	607a      	str	r2, [r7, #4]
 80058fc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005902:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005904:	2b00      	cmp	r3, #0
 8005906:	d10a      	bne.n	800591e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8005908:	f04f 0350 	mov.w	r3, #80	; 0x50
 800590c:	f383 8811 	msr	BASEPRI, r3
 8005910:	f3bf 8f6f 	isb	sy
 8005914:	f3bf 8f4f 	dsb	sy
 8005918:	627b      	str	r3, [r7, #36]	; 0x24
}
 800591a:	bf00      	nop
 800591c:	e7fe      	b.n	800591c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800591e:	68bb      	ldr	r3, [r7, #8]
 8005920:	2b00      	cmp	r3, #0
 8005922:	d103      	bne.n	800592c <xQueueGenericSendFromISR+0x3c>
 8005924:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005926:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005928:	2b00      	cmp	r3, #0
 800592a:	d101      	bne.n	8005930 <xQueueGenericSendFromISR+0x40>
 800592c:	2301      	movs	r3, #1
 800592e:	e000      	b.n	8005932 <xQueueGenericSendFromISR+0x42>
 8005930:	2300      	movs	r3, #0
 8005932:	2b00      	cmp	r3, #0
 8005934:	d10a      	bne.n	800594c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8005936:	f04f 0350 	mov.w	r3, #80	; 0x50
 800593a:	f383 8811 	msr	BASEPRI, r3
 800593e:	f3bf 8f6f 	isb	sy
 8005942:	f3bf 8f4f 	dsb	sy
 8005946:	623b      	str	r3, [r7, #32]
}
 8005948:	bf00      	nop
 800594a:	e7fe      	b.n	800594a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800594c:	683b      	ldr	r3, [r7, #0]
 800594e:	2b02      	cmp	r3, #2
 8005950:	d103      	bne.n	800595a <xQueueGenericSendFromISR+0x6a>
 8005952:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005954:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005956:	2b01      	cmp	r3, #1
 8005958:	d101      	bne.n	800595e <xQueueGenericSendFromISR+0x6e>
 800595a:	2301      	movs	r3, #1
 800595c:	e000      	b.n	8005960 <xQueueGenericSendFromISR+0x70>
 800595e:	2300      	movs	r3, #0
 8005960:	2b00      	cmp	r3, #0
 8005962:	d10a      	bne.n	800597a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8005964:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005968:	f383 8811 	msr	BASEPRI, r3
 800596c:	f3bf 8f6f 	isb	sy
 8005970:	f3bf 8f4f 	dsb	sy
 8005974:	61fb      	str	r3, [r7, #28]
}
 8005976:	bf00      	nop
 8005978:	e7fe      	b.n	8005978 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800597a:	f002 fa45 	bl	8007e08 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800597e:	f3ef 8211 	mrs	r2, BASEPRI
 8005982:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005986:	f383 8811 	msr	BASEPRI, r3
 800598a:	f3bf 8f6f 	isb	sy
 800598e:	f3bf 8f4f 	dsb	sy
 8005992:	61ba      	str	r2, [r7, #24]
 8005994:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005996:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005998:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800599a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800599c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800599e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059a2:	429a      	cmp	r2, r3
 80059a4:	d302      	bcc.n	80059ac <xQueueGenericSendFromISR+0xbc>
 80059a6:	683b      	ldr	r3, [r7, #0]
 80059a8:	2b02      	cmp	r3, #2
 80059aa:	d12c      	bne.n	8005a06 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80059ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059ae:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80059b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80059b6:	683a      	ldr	r2, [r7, #0]
 80059b8:	68b9      	ldr	r1, [r7, #8]
 80059ba:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80059bc:	f000 fb65 	bl	800608a <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80059c0:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80059c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059c8:	d112      	bne.n	80059f0 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80059ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d016      	beq.n	8005a00 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80059d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059d4:	3324      	adds	r3, #36	; 0x24
 80059d6:	4618      	mov	r0, r3
 80059d8:	f001 f94a 	bl	8006c70 <xTaskRemoveFromEventList>
 80059dc:	4603      	mov	r3, r0
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d00e      	beq.n	8005a00 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d00b      	beq.n	8005a00 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	2201      	movs	r2, #1
 80059ec:	601a      	str	r2, [r3, #0]
 80059ee:	e007      	b.n	8005a00 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80059f0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80059f4:	3301      	adds	r3, #1
 80059f6:	b2db      	uxtb	r3, r3
 80059f8:	b25a      	sxtb	r2, r3
 80059fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005a00:	2301      	movs	r3, #1
 8005a02:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8005a04:	e001      	b.n	8005a0a <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005a06:	2300      	movs	r3, #0
 8005a08:	637b      	str	r3, [r7, #52]	; 0x34
 8005a0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a0c:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005a0e:	693b      	ldr	r3, [r7, #16]
 8005a10:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005a14:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005a16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005a18:	4618      	mov	r0, r3
 8005a1a:	3738      	adds	r7, #56	; 0x38
 8005a1c:	46bd      	mov	sp, r7
 8005a1e:	bd80      	pop	{r7, pc}

08005a20 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005a20:	b580      	push	{r7, lr}
 8005a22:	b08e      	sub	sp, #56	; 0x38
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	6078      	str	r0, [r7, #4]
 8005a28:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8005a2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d10a      	bne.n	8005a4a <xQueueGiveFromISR+0x2a>
	__asm volatile
 8005a34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a38:	f383 8811 	msr	BASEPRI, r3
 8005a3c:	f3bf 8f6f 	isb	sy
 8005a40:	f3bf 8f4f 	dsb	sy
 8005a44:	623b      	str	r3, [r7, #32]
}
 8005a46:	bf00      	nop
 8005a48:	e7fe      	b.n	8005a48 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005a4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d00a      	beq.n	8005a68 <xQueueGiveFromISR+0x48>
	__asm volatile
 8005a52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a56:	f383 8811 	msr	BASEPRI, r3
 8005a5a:	f3bf 8f6f 	isb	sy
 8005a5e:	f3bf 8f4f 	dsb	sy
 8005a62:	61fb      	str	r3, [r7, #28]
}
 8005a64:	bf00      	nop
 8005a66:	e7fe      	b.n	8005a66 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 8005a68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d103      	bne.n	8005a78 <xQueueGiveFromISR+0x58>
 8005a70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a72:	685b      	ldr	r3, [r3, #4]
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d101      	bne.n	8005a7c <xQueueGiveFromISR+0x5c>
 8005a78:	2301      	movs	r3, #1
 8005a7a:	e000      	b.n	8005a7e <xQueueGiveFromISR+0x5e>
 8005a7c:	2300      	movs	r3, #0
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d10a      	bne.n	8005a98 <xQueueGiveFromISR+0x78>
	__asm volatile
 8005a82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a86:	f383 8811 	msr	BASEPRI, r3
 8005a8a:	f3bf 8f6f 	isb	sy
 8005a8e:	f3bf 8f4f 	dsb	sy
 8005a92:	61bb      	str	r3, [r7, #24]
}
 8005a94:	bf00      	nop
 8005a96:	e7fe      	b.n	8005a96 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005a98:	f002 f9b6 	bl	8007e08 <vPortValidateInterruptPriority>
	__asm volatile
 8005a9c:	f3ef 8211 	mrs	r2, BASEPRI
 8005aa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005aa4:	f383 8811 	msr	BASEPRI, r3
 8005aa8:	f3bf 8f6f 	isb	sy
 8005aac:	f3bf 8f4f 	dsb	sy
 8005ab0:	617a      	str	r2, [r7, #20]
 8005ab2:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8005ab4:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005ab6:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005ab8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005aba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005abc:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8005abe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ac0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ac2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005ac4:	429a      	cmp	r2, r3
 8005ac6:	d22b      	bcs.n	8005b20 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005ac8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005aca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005ace:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005ad2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ad4:	1c5a      	adds	r2, r3, #1
 8005ad6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ad8:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005ada:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005ade:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ae2:	d112      	bne.n	8005b0a <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005ae4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d016      	beq.n	8005b1a <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005aec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005aee:	3324      	adds	r3, #36	; 0x24
 8005af0:	4618      	mov	r0, r3
 8005af2:	f001 f8bd 	bl	8006c70 <xTaskRemoveFromEventList>
 8005af6:	4603      	mov	r3, r0
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d00e      	beq.n	8005b1a <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005afc:	683b      	ldr	r3, [r7, #0]
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d00b      	beq.n	8005b1a <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005b02:	683b      	ldr	r3, [r7, #0]
 8005b04:	2201      	movs	r2, #1
 8005b06:	601a      	str	r2, [r3, #0]
 8005b08:	e007      	b.n	8005b1a <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005b0a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005b0e:	3301      	adds	r3, #1
 8005b10:	b2db      	uxtb	r3, r3
 8005b12:	b25a      	sxtb	r2, r3
 8005b14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b16:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005b1a:	2301      	movs	r3, #1
 8005b1c:	637b      	str	r3, [r7, #52]	; 0x34
 8005b1e:	e001      	b.n	8005b24 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005b20:	2300      	movs	r3, #0
 8005b22:	637b      	str	r3, [r7, #52]	; 0x34
 8005b24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b26:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	f383 8811 	msr	BASEPRI, r3
}
 8005b2e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005b30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005b32:	4618      	mov	r0, r3
 8005b34:	3738      	adds	r7, #56	; 0x38
 8005b36:	46bd      	mov	sp, r7
 8005b38:	bd80      	pop	{r7, pc}
	...

08005b3c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005b3c:	b580      	push	{r7, lr}
 8005b3e:	b08c      	sub	sp, #48	; 0x30
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	60f8      	str	r0, [r7, #12]
 8005b44:	60b9      	str	r1, [r7, #8]
 8005b46:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005b48:	2300      	movs	r3, #0
 8005b4a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005b50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d10a      	bne.n	8005b6c <xQueueReceive+0x30>
	__asm volatile
 8005b56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b5a:	f383 8811 	msr	BASEPRI, r3
 8005b5e:	f3bf 8f6f 	isb	sy
 8005b62:	f3bf 8f4f 	dsb	sy
 8005b66:	623b      	str	r3, [r7, #32]
}
 8005b68:	bf00      	nop
 8005b6a:	e7fe      	b.n	8005b6a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005b6c:	68bb      	ldr	r3, [r7, #8]
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d103      	bne.n	8005b7a <xQueueReceive+0x3e>
 8005b72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d101      	bne.n	8005b7e <xQueueReceive+0x42>
 8005b7a:	2301      	movs	r3, #1
 8005b7c:	e000      	b.n	8005b80 <xQueueReceive+0x44>
 8005b7e:	2300      	movs	r3, #0
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d10a      	bne.n	8005b9a <xQueueReceive+0x5e>
	__asm volatile
 8005b84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b88:	f383 8811 	msr	BASEPRI, r3
 8005b8c:	f3bf 8f6f 	isb	sy
 8005b90:	f3bf 8f4f 	dsb	sy
 8005b94:	61fb      	str	r3, [r7, #28]
}
 8005b96:	bf00      	nop
 8005b98:	e7fe      	b.n	8005b98 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005b9a:	f001 fa2d 	bl	8006ff8 <xTaskGetSchedulerState>
 8005b9e:	4603      	mov	r3, r0
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d102      	bne.n	8005baa <xQueueReceive+0x6e>
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d101      	bne.n	8005bae <xQueueReceive+0x72>
 8005baa:	2301      	movs	r3, #1
 8005bac:	e000      	b.n	8005bb0 <xQueueReceive+0x74>
 8005bae:	2300      	movs	r3, #0
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d10a      	bne.n	8005bca <xQueueReceive+0x8e>
	__asm volatile
 8005bb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bb8:	f383 8811 	msr	BASEPRI, r3
 8005bbc:	f3bf 8f6f 	isb	sy
 8005bc0:	f3bf 8f4f 	dsb	sy
 8005bc4:	61bb      	str	r3, [r7, #24]
}
 8005bc6:	bf00      	nop
 8005bc8:	e7fe      	b.n	8005bc8 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8005bca:	f002 f83b 	bl	8007c44 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005bce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bd2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d01f      	beq.n	8005c1a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005bda:	68b9      	ldr	r1, [r7, #8]
 8005bdc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005bde:	f000 fabe 	bl	800615e <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005be4:	1e5a      	subs	r2, r3, #1
 8005be6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005be8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005bea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bec:	691b      	ldr	r3, [r3, #16]
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d00f      	beq.n	8005c12 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005bf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bf4:	3310      	adds	r3, #16
 8005bf6:	4618      	mov	r0, r3
 8005bf8:	f001 f83a 	bl	8006c70 <xTaskRemoveFromEventList>
 8005bfc:	4603      	mov	r3, r0
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d007      	beq.n	8005c12 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005c02:	4b3d      	ldr	r3, [pc, #244]	; (8005cf8 <xQueueReceive+0x1bc>)
 8005c04:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c08:	601a      	str	r2, [r3, #0]
 8005c0a:	f3bf 8f4f 	dsb	sy
 8005c0e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005c12:	f002 f847 	bl	8007ca4 <vPortExitCritical>
				return pdPASS;
 8005c16:	2301      	movs	r3, #1
 8005c18:	e069      	b.n	8005cee <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d103      	bne.n	8005c28 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005c20:	f002 f840 	bl	8007ca4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005c24:	2300      	movs	r3, #0
 8005c26:	e062      	b.n	8005cee <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005c28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d106      	bne.n	8005c3c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005c2e:	f107 0310 	add.w	r3, r7, #16
 8005c32:	4618      	mov	r0, r3
 8005c34:	f001 f880 	bl	8006d38 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005c38:	2301      	movs	r3, #1
 8005c3a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005c3c:	f002 f832 	bl	8007ca4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005c40:	f000 fdee 	bl	8006820 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005c44:	f001 fffe 	bl	8007c44 <vPortEnterCritical>
 8005c48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c4a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005c4e:	b25b      	sxtb	r3, r3
 8005c50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c54:	d103      	bne.n	8005c5e <xQueueReceive+0x122>
 8005c56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c58:	2200      	movs	r2, #0
 8005c5a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005c5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c60:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005c64:	b25b      	sxtb	r3, r3
 8005c66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c6a:	d103      	bne.n	8005c74 <xQueueReceive+0x138>
 8005c6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c6e:	2200      	movs	r2, #0
 8005c70:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005c74:	f002 f816 	bl	8007ca4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005c78:	1d3a      	adds	r2, r7, #4
 8005c7a:	f107 0310 	add.w	r3, r7, #16
 8005c7e:	4611      	mov	r1, r2
 8005c80:	4618      	mov	r0, r3
 8005c82:	f001 f86f 	bl	8006d64 <xTaskCheckForTimeOut>
 8005c86:	4603      	mov	r3, r0
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d123      	bne.n	8005cd4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005c8c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005c8e:	f000 fade 	bl	800624e <prvIsQueueEmpty>
 8005c92:	4603      	mov	r3, r0
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d017      	beq.n	8005cc8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005c98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c9a:	3324      	adds	r3, #36	; 0x24
 8005c9c:	687a      	ldr	r2, [r7, #4]
 8005c9e:	4611      	mov	r1, r2
 8005ca0:	4618      	mov	r0, r3
 8005ca2:	f000 ff95 	bl	8006bd0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005ca6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005ca8:	f000 fa7f 	bl	80061aa <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005cac:	f000 fdc6 	bl	800683c <xTaskResumeAll>
 8005cb0:	4603      	mov	r3, r0
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d189      	bne.n	8005bca <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8005cb6:	4b10      	ldr	r3, [pc, #64]	; (8005cf8 <xQueueReceive+0x1bc>)
 8005cb8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005cbc:	601a      	str	r2, [r3, #0]
 8005cbe:	f3bf 8f4f 	dsb	sy
 8005cc2:	f3bf 8f6f 	isb	sy
 8005cc6:	e780      	b.n	8005bca <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005cc8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005cca:	f000 fa6e 	bl	80061aa <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005cce:	f000 fdb5 	bl	800683c <xTaskResumeAll>
 8005cd2:	e77a      	b.n	8005bca <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005cd4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005cd6:	f000 fa68 	bl	80061aa <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005cda:	f000 fdaf 	bl	800683c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005cde:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005ce0:	f000 fab5 	bl	800624e <prvIsQueueEmpty>
 8005ce4:	4603      	mov	r3, r0
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	f43f af6f 	beq.w	8005bca <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005cec:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8005cee:	4618      	mov	r0, r3
 8005cf0:	3730      	adds	r7, #48	; 0x30
 8005cf2:	46bd      	mov	sp, r7
 8005cf4:	bd80      	pop	{r7, pc}
 8005cf6:	bf00      	nop
 8005cf8:	e000ed04 	.word	0xe000ed04

08005cfc <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8005cfc:	b580      	push	{r7, lr}
 8005cfe:	b08e      	sub	sp, #56	; 0x38
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	6078      	str	r0, [r7, #4]
 8005d04:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8005d06:	2300      	movs	r3, #0
 8005d08:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8005d0e:	2300      	movs	r3, #0
 8005d10:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005d12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d10a      	bne.n	8005d2e <xQueueSemaphoreTake+0x32>
	__asm volatile
 8005d18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d1c:	f383 8811 	msr	BASEPRI, r3
 8005d20:	f3bf 8f6f 	isb	sy
 8005d24:	f3bf 8f4f 	dsb	sy
 8005d28:	623b      	str	r3, [r7, #32]
}
 8005d2a:	bf00      	nop
 8005d2c:	e7fe      	b.n	8005d2c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005d2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d00a      	beq.n	8005d4c <xQueueSemaphoreTake+0x50>
	__asm volatile
 8005d36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d3a:	f383 8811 	msr	BASEPRI, r3
 8005d3e:	f3bf 8f6f 	isb	sy
 8005d42:	f3bf 8f4f 	dsb	sy
 8005d46:	61fb      	str	r3, [r7, #28]
}
 8005d48:	bf00      	nop
 8005d4a:	e7fe      	b.n	8005d4a <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005d4c:	f001 f954 	bl	8006ff8 <xTaskGetSchedulerState>
 8005d50:	4603      	mov	r3, r0
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d102      	bne.n	8005d5c <xQueueSemaphoreTake+0x60>
 8005d56:	683b      	ldr	r3, [r7, #0]
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d101      	bne.n	8005d60 <xQueueSemaphoreTake+0x64>
 8005d5c:	2301      	movs	r3, #1
 8005d5e:	e000      	b.n	8005d62 <xQueueSemaphoreTake+0x66>
 8005d60:	2300      	movs	r3, #0
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d10a      	bne.n	8005d7c <xQueueSemaphoreTake+0x80>
	__asm volatile
 8005d66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d6a:	f383 8811 	msr	BASEPRI, r3
 8005d6e:	f3bf 8f6f 	isb	sy
 8005d72:	f3bf 8f4f 	dsb	sy
 8005d76:	61bb      	str	r3, [r7, #24]
}
 8005d78:	bf00      	nop
 8005d7a:	e7fe      	b.n	8005d7a <xQueueSemaphoreTake+0x7e>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8005d7c:	f001 ff62 	bl	8007c44 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8005d80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d84:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8005d86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d024      	beq.n	8005dd6 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8005d8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d8e:	1e5a      	subs	r2, r3, #1
 8005d90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d92:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005d94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d104      	bne.n	8005da6 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8005d9c:	f001 faac 	bl	80072f8 <pvTaskIncrementMutexHeldCount>
 8005da0:	4602      	mov	r2, r0
 8005da2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005da4:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005da6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005da8:	691b      	ldr	r3, [r3, #16]
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d00f      	beq.n	8005dce <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005dae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005db0:	3310      	adds	r3, #16
 8005db2:	4618      	mov	r0, r3
 8005db4:	f000 ff5c 	bl	8006c70 <xTaskRemoveFromEventList>
 8005db8:	4603      	mov	r3, r0
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d007      	beq.n	8005dce <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005dbe:	4b54      	ldr	r3, [pc, #336]	; (8005f10 <xQueueSemaphoreTake+0x214>)
 8005dc0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005dc4:	601a      	str	r2, [r3, #0]
 8005dc6:	f3bf 8f4f 	dsb	sy
 8005dca:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005dce:	f001 ff69 	bl	8007ca4 <vPortExitCritical>
				return pdPASS;
 8005dd2:	2301      	movs	r3, #1
 8005dd4:	e097      	b.n	8005f06 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005dd6:	683b      	ldr	r3, [r7, #0]
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d111      	bne.n	8005e00 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8005ddc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d00a      	beq.n	8005df8 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8005de2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005de6:	f383 8811 	msr	BASEPRI, r3
 8005dea:	f3bf 8f6f 	isb	sy
 8005dee:	f3bf 8f4f 	dsb	sy
 8005df2:	617b      	str	r3, [r7, #20]
}
 8005df4:	bf00      	nop
 8005df6:	e7fe      	b.n	8005df6 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8005df8:	f001 ff54 	bl	8007ca4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005dfc:	2300      	movs	r3, #0
 8005dfe:	e082      	b.n	8005f06 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005e00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d106      	bne.n	8005e14 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005e06:	f107 030c 	add.w	r3, r7, #12
 8005e0a:	4618      	mov	r0, r3
 8005e0c:	f000 ff94 	bl	8006d38 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005e10:	2301      	movs	r3, #1
 8005e12:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005e14:	f001 ff46 	bl	8007ca4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005e18:	f000 fd02 	bl	8006820 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005e1c:	f001 ff12 	bl	8007c44 <vPortEnterCritical>
 8005e20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e22:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005e26:	b25b      	sxtb	r3, r3
 8005e28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e2c:	d103      	bne.n	8005e36 <xQueueSemaphoreTake+0x13a>
 8005e2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e30:	2200      	movs	r2, #0
 8005e32:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005e36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e38:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005e3c:	b25b      	sxtb	r3, r3
 8005e3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e42:	d103      	bne.n	8005e4c <xQueueSemaphoreTake+0x150>
 8005e44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e46:	2200      	movs	r2, #0
 8005e48:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005e4c:	f001 ff2a 	bl	8007ca4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005e50:	463a      	mov	r2, r7
 8005e52:	f107 030c 	add.w	r3, r7, #12
 8005e56:	4611      	mov	r1, r2
 8005e58:	4618      	mov	r0, r3
 8005e5a:	f000 ff83 	bl	8006d64 <xTaskCheckForTimeOut>
 8005e5e:	4603      	mov	r3, r0
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d132      	bne.n	8005eca <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005e64:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005e66:	f000 f9f2 	bl	800624e <prvIsQueueEmpty>
 8005e6a:	4603      	mov	r3, r0
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d026      	beq.n	8005ebe <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005e70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d109      	bne.n	8005e8c <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8005e78:	f001 fee4 	bl	8007c44 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8005e7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e7e:	685b      	ldr	r3, [r3, #4]
 8005e80:	4618      	mov	r0, r3
 8005e82:	f001 f8d7 	bl	8007034 <xTaskPriorityInherit>
 8005e86:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8005e88:	f001 ff0c 	bl	8007ca4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005e8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e8e:	3324      	adds	r3, #36	; 0x24
 8005e90:	683a      	ldr	r2, [r7, #0]
 8005e92:	4611      	mov	r1, r2
 8005e94:	4618      	mov	r0, r3
 8005e96:	f000 fe9b 	bl	8006bd0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005e9a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005e9c:	f000 f985 	bl	80061aa <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005ea0:	f000 fccc 	bl	800683c <xTaskResumeAll>
 8005ea4:	4603      	mov	r3, r0
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	f47f af68 	bne.w	8005d7c <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8005eac:	4b18      	ldr	r3, [pc, #96]	; (8005f10 <xQueueSemaphoreTake+0x214>)
 8005eae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005eb2:	601a      	str	r2, [r3, #0]
 8005eb4:	f3bf 8f4f 	dsb	sy
 8005eb8:	f3bf 8f6f 	isb	sy
 8005ebc:	e75e      	b.n	8005d7c <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8005ebe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005ec0:	f000 f973 	bl	80061aa <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005ec4:	f000 fcba 	bl	800683c <xTaskResumeAll>
 8005ec8:	e758      	b.n	8005d7c <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8005eca:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005ecc:	f000 f96d 	bl	80061aa <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005ed0:	f000 fcb4 	bl	800683c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005ed4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005ed6:	f000 f9ba 	bl	800624e <prvIsQueueEmpty>
 8005eda:	4603      	mov	r3, r0
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	f43f af4d 	beq.w	8005d7c <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8005ee2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d00d      	beq.n	8005f04 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8005ee8:	f001 feac 	bl	8007c44 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8005eec:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005eee:	f000 f8b4 	bl	800605a <prvGetDisinheritPriorityAfterTimeout>
 8005ef2:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8005ef4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ef6:	685b      	ldr	r3, [r3, #4]
 8005ef8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005efa:	4618      	mov	r0, r3
 8005efc:	f001 f976 	bl	80071ec <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8005f00:	f001 fed0 	bl	8007ca4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005f04:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8005f06:	4618      	mov	r0, r3
 8005f08:	3738      	adds	r7, #56	; 0x38
 8005f0a:	46bd      	mov	sp, r7
 8005f0c:	bd80      	pop	{r7, pc}
 8005f0e:	bf00      	nop
 8005f10:	e000ed04 	.word	0xe000ed04

08005f14 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005f14:	b580      	push	{r7, lr}
 8005f16:	b08e      	sub	sp, #56	; 0x38
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	60f8      	str	r0, [r7, #12]
 8005f1c:	60b9      	str	r1, [r7, #8]
 8005f1e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005f24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d10a      	bne.n	8005f40 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8005f2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f2e:	f383 8811 	msr	BASEPRI, r3
 8005f32:	f3bf 8f6f 	isb	sy
 8005f36:	f3bf 8f4f 	dsb	sy
 8005f3a:	623b      	str	r3, [r7, #32]
}
 8005f3c:	bf00      	nop
 8005f3e:	e7fe      	b.n	8005f3e <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005f40:	68bb      	ldr	r3, [r7, #8]
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d103      	bne.n	8005f4e <xQueueReceiveFromISR+0x3a>
 8005f46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d101      	bne.n	8005f52 <xQueueReceiveFromISR+0x3e>
 8005f4e:	2301      	movs	r3, #1
 8005f50:	e000      	b.n	8005f54 <xQueueReceiveFromISR+0x40>
 8005f52:	2300      	movs	r3, #0
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d10a      	bne.n	8005f6e <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8005f58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f5c:	f383 8811 	msr	BASEPRI, r3
 8005f60:	f3bf 8f6f 	isb	sy
 8005f64:	f3bf 8f4f 	dsb	sy
 8005f68:	61fb      	str	r3, [r7, #28]
}
 8005f6a:	bf00      	nop
 8005f6c:	e7fe      	b.n	8005f6c <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005f6e:	f001 ff4b 	bl	8007e08 <vPortValidateInterruptPriority>
	__asm volatile
 8005f72:	f3ef 8211 	mrs	r2, BASEPRI
 8005f76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f7a:	f383 8811 	msr	BASEPRI, r3
 8005f7e:	f3bf 8f6f 	isb	sy
 8005f82:	f3bf 8f4f 	dsb	sy
 8005f86:	61ba      	str	r2, [r7, #24]
 8005f88:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8005f8a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005f8c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005f8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f92:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005f94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d02f      	beq.n	8005ffa <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8005f9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f9c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005fa0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005fa4:	68b9      	ldr	r1, [r7, #8]
 8005fa6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005fa8:	f000 f8d9 	bl	800615e <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005fac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fae:	1e5a      	subs	r2, r3, #1
 8005fb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fb2:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8005fb4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005fb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fbc:	d112      	bne.n	8005fe4 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005fbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fc0:	691b      	ldr	r3, [r3, #16]
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d016      	beq.n	8005ff4 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005fc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fc8:	3310      	adds	r3, #16
 8005fca:	4618      	mov	r0, r3
 8005fcc:	f000 fe50 	bl	8006c70 <xTaskRemoveFromEventList>
 8005fd0:	4603      	mov	r3, r0
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d00e      	beq.n	8005ff4 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d00b      	beq.n	8005ff4 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	2201      	movs	r2, #1
 8005fe0:	601a      	str	r2, [r3, #0]
 8005fe2:	e007      	b.n	8005ff4 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8005fe4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005fe8:	3301      	adds	r3, #1
 8005fea:	b2db      	uxtb	r3, r3
 8005fec:	b25a      	sxtb	r2, r3
 8005fee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ff0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8005ff4:	2301      	movs	r3, #1
 8005ff6:	637b      	str	r3, [r7, #52]	; 0x34
 8005ff8:	e001      	b.n	8005ffe <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8005ffa:	2300      	movs	r3, #0
 8005ffc:	637b      	str	r3, [r7, #52]	; 0x34
 8005ffe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006000:	613b      	str	r3, [r7, #16]
	__asm volatile
 8006002:	693b      	ldr	r3, [r7, #16]
 8006004:	f383 8811 	msr	BASEPRI, r3
}
 8006008:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800600a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800600c:	4618      	mov	r0, r3
 800600e:	3738      	adds	r7, #56	; 0x38
 8006010:	46bd      	mov	sp, r7
 8006012:	bd80      	pop	{r7, pc}

08006014 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8006014:	b580      	push	{r7, lr}
 8006016:	b084      	sub	sp, #16
 8006018:	af00      	add	r7, sp, #0
 800601a:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	2b00      	cmp	r3, #0
 8006024:	d10a      	bne.n	800603c <vQueueDelete+0x28>
	__asm volatile
 8006026:	f04f 0350 	mov.w	r3, #80	; 0x50
 800602a:	f383 8811 	msr	BASEPRI, r3
 800602e:	f3bf 8f6f 	isb	sy
 8006032:	f3bf 8f4f 	dsb	sy
 8006036:	60bb      	str	r3, [r7, #8]
}
 8006038:	bf00      	nop
 800603a:	e7fe      	b.n	800603a <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800603c:	68f8      	ldr	r0, [r7, #12]
 800603e:	f000 f95f 	bl	8006300 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8006048:	2b00      	cmp	r3, #0
 800604a:	d102      	bne.n	8006052 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800604c:	68f8      	ldr	r0, [r7, #12]
 800604e:	f001 ffdf 	bl	8008010 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8006052:	bf00      	nop
 8006054:	3710      	adds	r7, #16
 8006056:	46bd      	mov	sp, r7
 8006058:	bd80      	pop	{r7, pc}

0800605a <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800605a:	b480      	push	{r7}
 800605c:	b085      	sub	sp, #20
 800605e:	af00      	add	r7, sp, #0
 8006060:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006066:	2b00      	cmp	r3, #0
 8006068:	d006      	beq.n	8006078 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8006074:	60fb      	str	r3, [r7, #12]
 8006076:	e001      	b.n	800607c <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8006078:	2300      	movs	r3, #0
 800607a:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800607c:	68fb      	ldr	r3, [r7, #12]
	}
 800607e:	4618      	mov	r0, r3
 8006080:	3714      	adds	r7, #20
 8006082:	46bd      	mov	sp, r7
 8006084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006088:	4770      	bx	lr

0800608a <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800608a:	b580      	push	{r7, lr}
 800608c:	b086      	sub	sp, #24
 800608e:	af00      	add	r7, sp, #0
 8006090:	60f8      	str	r0, [r7, #12]
 8006092:	60b9      	str	r1, [r7, #8]
 8006094:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006096:	2300      	movs	r3, #0
 8006098:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800609e:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d10d      	bne.n	80060c4 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d14d      	bne.n	800614c <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	685b      	ldr	r3, [r3, #4]
 80060b4:	4618      	mov	r0, r3
 80060b6:	f001 f82b 	bl	8007110 <xTaskPriorityDisinherit>
 80060ba:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	2200      	movs	r2, #0
 80060c0:	605a      	str	r2, [r3, #4]
 80060c2:	e043      	b.n	800614c <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d119      	bne.n	80060fe <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	6898      	ldr	r0, [r3, #8]
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060d2:	461a      	mov	r2, r3
 80060d4:	68b9      	ldr	r1, [r7, #8]
 80060d6:	f002 f8dd 	bl	8008294 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	689a      	ldr	r2, [r3, #8]
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060e2:	441a      	add	r2, r3
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	689a      	ldr	r2, [r3, #8]
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	685b      	ldr	r3, [r3, #4]
 80060f0:	429a      	cmp	r2, r3
 80060f2:	d32b      	bcc.n	800614c <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	681a      	ldr	r2, [r3, #0]
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	609a      	str	r2, [r3, #8]
 80060fc:	e026      	b.n	800614c <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	68d8      	ldr	r0, [r3, #12]
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006106:	461a      	mov	r2, r3
 8006108:	68b9      	ldr	r1, [r7, #8]
 800610a:	f002 f8c3 	bl	8008294 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	68da      	ldr	r2, [r3, #12]
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006116:	425b      	negs	r3, r3
 8006118:	441a      	add	r2, r3
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	68da      	ldr	r2, [r3, #12]
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	429a      	cmp	r2, r3
 8006128:	d207      	bcs.n	800613a <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	685a      	ldr	r2, [r3, #4]
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006132:	425b      	negs	r3, r3
 8006134:	441a      	add	r2, r3
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	2b02      	cmp	r3, #2
 800613e:	d105      	bne.n	800614c <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006140:	693b      	ldr	r3, [r7, #16]
 8006142:	2b00      	cmp	r3, #0
 8006144:	d002      	beq.n	800614c <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006146:	693b      	ldr	r3, [r7, #16]
 8006148:	3b01      	subs	r3, #1
 800614a:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800614c:	693b      	ldr	r3, [r7, #16]
 800614e:	1c5a      	adds	r2, r3, #1
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8006154:	697b      	ldr	r3, [r7, #20]
}
 8006156:	4618      	mov	r0, r3
 8006158:	3718      	adds	r7, #24
 800615a:	46bd      	mov	sp, r7
 800615c:	bd80      	pop	{r7, pc}

0800615e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800615e:	b580      	push	{r7, lr}
 8006160:	b082      	sub	sp, #8
 8006162:	af00      	add	r7, sp, #0
 8006164:	6078      	str	r0, [r7, #4]
 8006166:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800616c:	2b00      	cmp	r3, #0
 800616e:	d018      	beq.n	80061a2 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	68da      	ldr	r2, [r3, #12]
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006178:	441a      	add	r2, r3
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	68da      	ldr	r2, [r3, #12]
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	685b      	ldr	r3, [r3, #4]
 8006186:	429a      	cmp	r2, r3
 8006188:	d303      	bcc.n	8006192 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681a      	ldr	r2, [r3, #0]
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	68d9      	ldr	r1, [r3, #12]
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800619a:	461a      	mov	r2, r3
 800619c:	6838      	ldr	r0, [r7, #0]
 800619e:	f002 f879 	bl	8008294 <memcpy>
	}
}
 80061a2:	bf00      	nop
 80061a4:	3708      	adds	r7, #8
 80061a6:	46bd      	mov	sp, r7
 80061a8:	bd80      	pop	{r7, pc}

080061aa <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80061aa:	b580      	push	{r7, lr}
 80061ac:	b084      	sub	sp, #16
 80061ae:	af00      	add	r7, sp, #0
 80061b0:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80061b2:	f001 fd47 	bl	8007c44 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80061bc:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80061be:	e011      	b.n	80061e4 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d012      	beq.n	80061ee <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	3324      	adds	r3, #36	; 0x24
 80061cc:	4618      	mov	r0, r3
 80061ce:	f000 fd4f 	bl	8006c70 <xTaskRemoveFromEventList>
 80061d2:	4603      	mov	r3, r0
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d001      	beq.n	80061dc <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80061d8:	f000 fe26 	bl	8006e28 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80061dc:	7bfb      	ldrb	r3, [r7, #15]
 80061de:	3b01      	subs	r3, #1
 80061e0:	b2db      	uxtb	r3, r3
 80061e2:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80061e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	dce9      	bgt.n	80061c0 <prvUnlockQueue+0x16>
 80061ec:	e000      	b.n	80061f0 <prvUnlockQueue+0x46>
					break;
 80061ee:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	22ff      	movs	r2, #255	; 0xff
 80061f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80061f8:	f001 fd54 	bl	8007ca4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80061fc:	f001 fd22 	bl	8007c44 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006206:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006208:	e011      	b.n	800622e <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	691b      	ldr	r3, [r3, #16]
 800620e:	2b00      	cmp	r3, #0
 8006210:	d012      	beq.n	8006238 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	3310      	adds	r3, #16
 8006216:	4618      	mov	r0, r3
 8006218:	f000 fd2a 	bl	8006c70 <xTaskRemoveFromEventList>
 800621c:	4603      	mov	r3, r0
 800621e:	2b00      	cmp	r3, #0
 8006220:	d001      	beq.n	8006226 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006222:	f000 fe01 	bl	8006e28 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006226:	7bbb      	ldrb	r3, [r7, #14]
 8006228:	3b01      	subs	r3, #1
 800622a:	b2db      	uxtb	r3, r3
 800622c:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800622e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006232:	2b00      	cmp	r3, #0
 8006234:	dce9      	bgt.n	800620a <prvUnlockQueue+0x60>
 8006236:	e000      	b.n	800623a <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006238:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	22ff      	movs	r2, #255	; 0xff
 800623e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006242:	f001 fd2f 	bl	8007ca4 <vPortExitCritical>
}
 8006246:	bf00      	nop
 8006248:	3710      	adds	r7, #16
 800624a:	46bd      	mov	sp, r7
 800624c:	bd80      	pop	{r7, pc}

0800624e <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800624e:	b580      	push	{r7, lr}
 8006250:	b084      	sub	sp, #16
 8006252:	af00      	add	r7, sp, #0
 8006254:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006256:	f001 fcf5 	bl	8007c44 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800625e:	2b00      	cmp	r3, #0
 8006260:	d102      	bne.n	8006268 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006262:	2301      	movs	r3, #1
 8006264:	60fb      	str	r3, [r7, #12]
 8006266:	e001      	b.n	800626c <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006268:	2300      	movs	r3, #0
 800626a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800626c:	f001 fd1a 	bl	8007ca4 <vPortExitCritical>

	return xReturn;
 8006270:	68fb      	ldr	r3, [r7, #12]
}
 8006272:	4618      	mov	r0, r3
 8006274:	3710      	adds	r7, #16
 8006276:	46bd      	mov	sp, r7
 8006278:	bd80      	pop	{r7, pc}

0800627a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800627a:	b580      	push	{r7, lr}
 800627c:	b084      	sub	sp, #16
 800627e:	af00      	add	r7, sp, #0
 8006280:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006282:	f001 fcdf 	bl	8007c44 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800628e:	429a      	cmp	r2, r3
 8006290:	d102      	bne.n	8006298 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006292:	2301      	movs	r3, #1
 8006294:	60fb      	str	r3, [r7, #12]
 8006296:	e001      	b.n	800629c <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006298:	2300      	movs	r3, #0
 800629a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800629c:	f001 fd02 	bl	8007ca4 <vPortExitCritical>

	return xReturn;
 80062a0:	68fb      	ldr	r3, [r7, #12]
}
 80062a2:	4618      	mov	r0, r3
 80062a4:	3710      	adds	r7, #16
 80062a6:	46bd      	mov	sp, r7
 80062a8:	bd80      	pop	{r7, pc}
	...

080062ac <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80062ac:	b480      	push	{r7}
 80062ae:	b085      	sub	sp, #20
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	6078      	str	r0, [r7, #4]
 80062b4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80062b6:	2300      	movs	r3, #0
 80062b8:	60fb      	str	r3, [r7, #12]
 80062ba:	e014      	b.n	80062e6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80062bc:	4a0f      	ldr	r2, [pc, #60]	; (80062fc <vQueueAddToRegistry+0x50>)
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d10b      	bne.n	80062e0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80062c8:	490c      	ldr	r1, [pc, #48]	; (80062fc <vQueueAddToRegistry+0x50>)
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	683a      	ldr	r2, [r7, #0]
 80062ce:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80062d2:	4a0a      	ldr	r2, [pc, #40]	; (80062fc <vQueueAddToRegistry+0x50>)
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	00db      	lsls	r3, r3, #3
 80062d8:	4413      	add	r3, r2
 80062da:	687a      	ldr	r2, [r7, #4]
 80062dc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80062de:	e006      	b.n	80062ee <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	3301      	adds	r3, #1
 80062e4:	60fb      	str	r3, [r7, #12]
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	2b07      	cmp	r3, #7
 80062ea:	d9e7      	bls.n	80062bc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80062ec:	bf00      	nop
 80062ee:	bf00      	nop
 80062f0:	3714      	adds	r7, #20
 80062f2:	46bd      	mov	sp, r7
 80062f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f8:	4770      	bx	lr
 80062fa:	bf00      	nop
 80062fc:	20000934 	.word	0x20000934

08006300 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8006300:	b480      	push	{r7}
 8006302:	b085      	sub	sp, #20
 8006304:	af00      	add	r7, sp, #0
 8006306:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006308:	2300      	movs	r3, #0
 800630a:	60fb      	str	r3, [r7, #12]
 800630c:	e016      	b.n	800633c <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800630e:	4a10      	ldr	r2, [pc, #64]	; (8006350 <vQueueUnregisterQueue+0x50>)
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	00db      	lsls	r3, r3, #3
 8006314:	4413      	add	r3, r2
 8006316:	685b      	ldr	r3, [r3, #4]
 8006318:	687a      	ldr	r2, [r7, #4]
 800631a:	429a      	cmp	r2, r3
 800631c:	d10b      	bne.n	8006336 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800631e:	4a0c      	ldr	r2, [pc, #48]	; (8006350 <vQueueUnregisterQueue+0x50>)
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	2100      	movs	r1, #0
 8006324:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8006328:	4a09      	ldr	r2, [pc, #36]	; (8006350 <vQueueUnregisterQueue+0x50>)
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	00db      	lsls	r3, r3, #3
 800632e:	4413      	add	r3, r2
 8006330:	2200      	movs	r2, #0
 8006332:	605a      	str	r2, [r3, #4]
				break;
 8006334:	e006      	b.n	8006344 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	3301      	adds	r3, #1
 800633a:	60fb      	str	r3, [r7, #12]
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	2b07      	cmp	r3, #7
 8006340:	d9e5      	bls.n	800630e <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8006342:	bf00      	nop
 8006344:	bf00      	nop
 8006346:	3714      	adds	r7, #20
 8006348:	46bd      	mov	sp, r7
 800634a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634e:	4770      	bx	lr
 8006350:	20000934 	.word	0x20000934

08006354 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006354:	b580      	push	{r7, lr}
 8006356:	b086      	sub	sp, #24
 8006358:	af00      	add	r7, sp, #0
 800635a:	60f8      	str	r0, [r7, #12]
 800635c:	60b9      	str	r1, [r7, #8]
 800635e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006364:	f001 fc6e 	bl	8007c44 <vPortEnterCritical>
 8006368:	697b      	ldr	r3, [r7, #20]
 800636a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800636e:	b25b      	sxtb	r3, r3
 8006370:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006374:	d103      	bne.n	800637e <vQueueWaitForMessageRestricted+0x2a>
 8006376:	697b      	ldr	r3, [r7, #20]
 8006378:	2200      	movs	r2, #0
 800637a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800637e:	697b      	ldr	r3, [r7, #20]
 8006380:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006384:	b25b      	sxtb	r3, r3
 8006386:	f1b3 3fff 	cmp.w	r3, #4294967295
 800638a:	d103      	bne.n	8006394 <vQueueWaitForMessageRestricted+0x40>
 800638c:	697b      	ldr	r3, [r7, #20]
 800638e:	2200      	movs	r2, #0
 8006390:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006394:	f001 fc86 	bl	8007ca4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006398:	697b      	ldr	r3, [r7, #20]
 800639a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800639c:	2b00      	cmp	r3, #0
 800639e:	d106      	bne.n	80063ae <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80063a0:	697b      	ldr	r3, [r7, #20]
 80063a2:	3324      	adds	r3, #36	; 0x24
 80063a4:	687a      	ldr	r2, [r7, #4]
 80063a6:	68b9      	ldr	r1, [r7, #8]
 80063a8:	4618      	mov	r0, r3
 80063aa:	f000 fc35 	bl	8006c18 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80063ae:	6978      	ldr	r0, [r7, #20]
 80063b0:	f7ff fefb 	bl	80061aa <prvUnlockQueue>
	}
 80063b4:	bf00      	nop
 80063b6:	3718      	adds	r7, #24
 80063b8:	46bd      	mov	sp, r7
 80063ba:	bd80      	pop	{r7, pc}

080063bc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80063bc:	b580      	push	{r7, lr}
 80063be:	b08e      	sub	sp, #56	; 0x38
 80063c0:	af04      	add	r7, sp, #16
 80063c2:	60f8      	str	r0, [r7, #12]
 80063c4:	60b9      	str	r1, [r7, #8]
 80063c6:	607a      	str	r2, [r7, #4]
 80063c8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80063ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d10a      	bne.n	80063e6 <xTaskCreateStatic+0x2a>
	__asm volatile
 80063d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063d4:	f383 8811 	msr	BASEPRI, r3
 80063d8:	f3bf 8f6f 	isb	sy
 80063dc:	f3bf 8f4f 	dsb	sy
 80063e0:	623b      	str	r3, [r7, #32]
}
 80063e2:	bf00      	nop
 80063e4:	e7fe      	b.n	80063e4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80063e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d10a      	bne.n	8006402 <xTaskCreateStatic+0x46>
	__asm volatile
 80063ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063f0:	f383 8811 	msr	BASEPRI, r3
 80063f4:	f3bf 8f6f 	isb	sy
 80063f8:	f3bf 8f4f 	dsb	sy
 80063fc:	61fb      	str	r3, [r7, #28]
}
 80063fe:	bf00      	nop
 8006400:	e7fe      	b.n	8006400 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006402:	235c      	movs	r3, #92	; 0x5c
 8006404:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006406:	693b      	ldr	r3, [r7, #16]
 8006408:	2b5c      	cmp	r3, #92	; 0x5c
 800640a:	d00a      	beq.n	8006422 <xTaskCreateStatic+0x66>
	__asm volatile
 800640c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006410:	f383 8811 	msr	BASEPRI, r3
 8006414:	f3bf 8f6f 	isb	sy
 8006418:	f3bf 8f4f 	dsb	sy
 800641c:	61bb      	str	r3, [r7, #24]
}
 800641e:	bf00      	nop
 8006420:	e7fe      	b.n	8006420 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006422:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006424:	2b00      	cmp	r3, #0
 8006426:	d01e      	beq.n	8006466 <xTaskCreateStatic+0xaa>
 8006428:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800642a:	2b00      	cmp	r3, #0
 800642c:	d01b      	beq.n	8006466 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800642e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006430:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006434:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006436:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800643a:	2202      	movs	r2, #2
 800643c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006440:	2300      	movs	r3, #0
 8006442:	9303      	str	r3, [sp, #12]
 8006444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006446:	9302      	str	r3, [sp, #8]
 8006448:	f107 0314 	add.w	r3, r7, #20
 800644c:	9301      	str	r3, [sp, #4]
 800644e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006450:	9300      	str	r3, [sp, #0]
 8006452:	683b      	ldr	r3, [r7, #0]
 8006454:	687a      	ldr	r2, [r7, #4]
 8006456:	68b9      	ldr	r1, [r7, #8]
 8006458:	68f8      	ldr	r0, [r7, #12]
 800645a:	f000 f850 	bl	80064fe <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800645e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006460:	f000 f8d4 	bl	800660c <prvAddNewTaskToReadyList>
 8006464:	e001      	b.n	800646a <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8006466:	2300      	movs	r3, #0
 8006468:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800646a:	697b      	ldr	r3, [r7, #20]
	}
 800646c:	4618      	mov	r0, r3
 800646e:	3728      	adds	r7, #40	; 0x28
 8006470:	46bd      	mov	sp, r7
 8006472:	bd80      	pop	{r7, pc}

08006474 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006474:	b580      	push	{r7, lr}
 8006476:	b08c      	sub	sp, #48	; 0x30
 8006478:	af04      	add	r7, sp, #16
 800647a:	60f8      	str	r0, [r7, #12]
 800647c:	60b9      	str	r1, [r7, #8]
 800647e:	603b      	str	r3, [r7, #0]
 8006480:	4613      	mov	r3, r2
 8006482:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006484:	88fb      	ldrh	r3, [r7, #6]
 8006486:	009b      	lsls	r3, r3, #2
 8006488:	4618      	mov	r0, r3
 800648a:	f001 fcfd 	bl	8007e88 <pvPortMalloc>
 800648e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006490:	697b      	ldr	r3, [r7, #20]
 8006492:	2b00      	cmp	r3, #0
 8006494:	d00e      	beq.n	80064b4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8006496:	205c      	movs	r0, #92	; 0x5c
 8006498:	f001 fcf6 	bl	8007e88 <pvPortMalloc>
 800649c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800649e:	69fb      	ldr	r3, [r7, #28]
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d003      	beq.n	80064ac <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80064a4:	69fb      	ldr	r3, [r7, #28]
 80064a6:	697a      	ldr	r2, [r7, #20]
 80064a8:	631a      	str	r2, [r3, #48]	; 0x30
 80064aa:	e005      	b.n	80064b8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80064ac:	6978      	ldr	r0, [r7, #20]
 80064ae:	f001 fdaf 	bl	8008010 <vPortFree>
 80064b2:	e001      	b.n	80064b8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80064b4:	2300      	movs	r3, #0
 80064b6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80064b8:	69fb      	ldr	r3, [r7, #28]
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d017      	beq.n	80064ee <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80064be:	69fb      	ldr	r3, [r7, #28]
 80064c0:	2200      	movs	r2, #0
 80064c2:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80064c6:	88fa      	ldrh	r2, [r7, #6]
 80064c8:	2300      	movs	r3, #0
 80064ca:	9303      	str	r3, [sp, #12]
 80064cc:	69fb      	ldr	r3, [r7, #28]
 80064ce:	9302      	str	r3, [sp, #8]
 80064d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064d2:	9301      	str	r3, [sp, #4]
 80064d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064d6:	9300      	str	r3, [sp, #0]
 80064d8:	683b      	ldr	r3, [r7, #0]
 80064da:	68b9      	ldr	r1, [r7, #8]
 80064dc:	68f8      	ldr	r0, [r7, #12]
 80064de:	f000 f80e 	bl	80064fe <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80064e2:	69f8      	ldr	r0, [r7, #28]
 80064e4:	f000 f892 	bl	800660c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80064e8:	2301      	movs	r3, #1
 80064ea:	61bb      	str	r3, [r7, #24]
 80064ec:	e002      	b.n	80064f4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80064ee:	f04f 33ff 	mov.w	r3, #4294967295
 80064f2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80064f4:	69bb      	ldr	r3, [r7, #24]
	}
 80064f6:	4618      	mov	r0, r3
 80064f8:	3720      	adds	r7, #32
 80064fa:	46bd      	mov	sp, r7
 80064fc:	bd80      	pop	{r7, pc}

080064fe <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80064fe:	b580      	push	{r7, lr}
 8006500:	b088      	sub	sp, #32
 8006502:	af00      	add	r7, sp, #0
 8006504:	60f8      	str	r0, [r7, #12]
 8006506:	60b9      	str	r1, [r7, #8]
 8006508:	607a      	str	r2, [r7, #4]
 800650a:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800650c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800650e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	009b      	lsls	r3, r3, #2
 8006514:	461a      	mov	r2, r3
 8006516:	21a5      	movs	r1, #165	; 0xa5
 8006518:	f001 fe90 	bl	800823c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800651c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800651e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006526:	3b01      	subs	r3, #1
 8006528:	009b      	lsls	r3, r3, #2
 800652a:	4413      	add	r3, r2
 800652c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800652e:	69bb      	ldr	r3, [r7, #24]
 8006530:	f023 0307 	bic.w	r3, r3, #7
 8006534:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006536:	69bb      	ldr	r3, [r7, #24]
 8006538:	f003 0307 	and.w	r3, r3, #7
 800653c:	2b00      	cmp	r3, #0
 800653e:	d00a      	beq.n	8006556 <prvInitialiseNewTask+0x58>
	__asm volatile
 8006540:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006544:	f383 8811 	msr	BASEPRI, r3
 8006548:	f3bf 8f6f 	isb	sy
 800654c:	f3bf 8f4f 	dsb	sy
 8006550:	617b      	str	r3, [r7, #20]
}
 8006552:	bf00      	nop
 8006554:	e7fe      	b.n	8006554 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006556:	2300      	movs	r3, #0
 8006558:	61fb      	str	r3, [r7, #28]
 800655a:	e012      	b.n	8006582 <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800655c:	68ba      	ldr	r2, [r7, #8]
 800655e:	69fb      	ldr	r3, [r7, #28]
 8006560:	4413      	add	r3, r2
 8006562:	7819      	ldrb	r1, [r3, #0]
 8006564:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006566:	69fb      	ldr	r3, [r7, #28]
 8006568:	4413      	add	r3, r2
 800656a:	3334      	adds	r3, #52	; 0x34
 800656c:	460a      	mov	r2, r1
 800656e:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8006570:	68ba      	ldr	r2, [r7, #8]
 8006572:	69fb      	ldr	r3, [r7, #28]
 8006574:	4413      	add	r3, r2
 8006576:	781b      	ldrb	r3, [r3, #0]
 8006578:	2b00      	cmp	r3, #0
 800657a:	d006      	beq.n	800658a <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800657c:	69fb      	ldr	r3, [r7, #28]
 800657e:	3301      	adds	r3, #1
 8006580:	61fb      	str	r3, [r7, #28]
 8006582:	69fb      	ldr	r3, [r7, #28]
 8006584:	2b0f      	cmp	r3, #15
 8006586:	d9e9      	bls.n	800655c <prvInitialiseNewTask+0x5e>
 8006588:	e000      	b.n	800658c <prvInitialiseNewTask+0x8e>
		{
			break;
 800658a:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800658c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800658e:	2200      	movs	r2, #0
 8006590:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006594:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006596:	2b37      	cmp	r3, #55	; 0x37
 8006598:	d901      	bls.n	800659e <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800659a:	2337      	movs	r3, #55	; 0x37
 800659c:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800659e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80065a2:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80065a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80065a8:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80065aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065ac:	2200      	movs	r2, #0
 80065ae:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80065b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065b2:	3304      	adds	r3, #4
 80065b4:	4618      	mov	r0, r3
 80065b6:	f7fe fe5f 	bl	8005278 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80065ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065bc:	3318      	adds	r3, #24
 80065be:	4618      	mov	r0, r3
 80065c0:	f7fe fe5a 	bl	8005278 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80065c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065c6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80065c8:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80065ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065cc:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80065d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065d2:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80065d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80065d8:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80065da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065dc:	2200      	movs	r2, #0
 80065de:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80065e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065e2:	2200      	movs	r2, #0
 80065e4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80065e8:	683a      	ldr	r2, [r7, #0]
 80065ea:	68f9      	ldr	r1, [r7, #12]
 80065ec:	69b8      	ldr	r0, [r7, #24]
 80065ee:	f001 f9fd 	bl	80079ec <pxPortInitialiseStack>
 80065f2:	4602      	mov	r2, r0
 80065f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065f6:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80065f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d002      	beq.n	8006604 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80065fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006600:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006602:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006604:	bf00      	nop
 8006606:	3720      	adds	r7, #32
 8006608:	46bd      	mov	sp, r7
 800660a:	bd80      	pop	{r7, pc}

0800660c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800660c:	b580      	push	{r7, lr}
 800660e:	b082      	sub	sp, #8
 8006610:	af00      	add	r7, sp, #0
 8006612:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006614:	f001 fb16 	bl	8007c44 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006618:	4b2d      	ldr	r3, [pc, #180]	; (80066d0 <prvAddNewTaskToReadyList+0xc4>)
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	3301      	adds	r3, #1
 800661e:	4a2c      	ldr	r2, [pc, #176]	; (80066d0 <prvAddNewTaskToReadyList+0xc4>)
 8006620:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006622:	4b2c      	ldr	r3, [pc, #176]	; (80066d4 <prvAddNewTaskToReadyList+0xc8>)
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	2b00      	cmp	r3, #0
 8006628:	d109      	bne.n	800663e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800662a:	4a2a      	ldr	r2, [pc, #168]	; (80066d4 <prvAddNewTaskToReadyList+0xc8>)
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006630:	4b27      	ldr	r3, [pc, #156]	; (80066d0 <prvAddNewTaskToReadyList+0xc4>)
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	2b01      	cmp	r3, #1
 8006636:	d110      	bne.n	800665a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006638:	f000 fc1a 	bl	8006e70 <prvInitialiseTaskLists>
 800663c:	e00d      	b.n	800665a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800663e:	4b26      	ldr	r3, [pc, #152]	; (80066d8 <prvAddNewTaskToReadyList+0xcc>)
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	2b00      	cmp	r3, #0
 8006644:	d109      	bne.n	800665a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006646:	4b23      	ldr	r3, [pc, #140]	; (80066d4 <prvAddNewTaskToReadyList+0xc8>)
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006650:	429a      	cmp	r2, r3
 8006652:	d802      	bhi.n	800665a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006654:	4a1f      	ldr	r2, [pc, #124]	; (80066d4 <prvAddNewTaskToReadyList+0xc8>)
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800665a:	4b20      	ldr	r3, [pc, #128]	; (80066dc <prvAddNewTaskToReadyList+0xd0>)
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	3301      	adds	r3, #1
 8006660:	4a1e      	ldr	r2, [pc, #120]	; (80066dc <prvAddNewTaskToReadyList+0xd0>)
 8006662:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006664:	4b1d      	ldr	r3, [pc, #116]	; (80066dc <prvAddNewTaskToReadyList+0xd0>)
 8006666:	681a      	ldr	r2, [r3, #0]
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006670:	4b1b      	ldr	r3, [pc, #108]	; (80066e0 <prvAddNewTaskToReadyList+0xd4>)
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	429a      	cmp	r2, r3
 8006676:	d903      	bls.n	8006680 <prvAddNewTaskToReadyList+0x74>
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800667c:	4a18      	ldr	r2, [pc, #96]	; (80066e0 <prvAddNewTaskToReadyList+0xd4>)
 800667e:	6013      	str	r3, [r2, #0]
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006684:	4613      	mov	r3, r2
 8006686:	009b      	lsls	r3, r3, #2
 8006688:	4413      	add	r3, r2
 800668a:	009b      	lsls	r3, r3, #2
 800668c:	4a15      	ldr	r2, [pc, #84]	; (80066e4 <prvAddNewTaskToReadyList+0xd8>)
 800668e:	441a      	add	r2, r3
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	3304      	adds	r3, #4
 8006694:	4619      	mov	r1, r3
 8006696:	4610      	mov	r0, r2
 8006698:	f7fe fdfb 	bl	8005292 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800669c:	f001 fb02 	bl	8007ca4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80066a0:	4b0d      	ldr	r3, [pc, #52]	; (80066d8 <prvAddNewTaskToReadyList+0xcc>)
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d00e      	beq.n	80066c6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80066a8:	4b0a      	ldr	r3, [pc, #40]	; (80066d4 <prvAddNewTaskToReadyList+0xc8>)
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066b2:	429a      	cmp	r2, r3
 80066b4:	d207      	bcs.n	80066c6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80066b6:	4b0c      	ldr	r3, [pc, #48]	; (80066e8 <prvAddNewTaskToReadyList+0xdc>)
 80066b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80066bc:	601a      	str	r2, [r3, #0]
 80066be:	f3bf 8f4f 	dsb	sy
 80066c2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80066c6:	bf00      	nop
 80066c8:	3708      	adds	r7, #8
 80066ca:	46bd      	mov	sp, r7
 80066cc:	bd80      	pop	{r7, pc}
 80066ce:	bf00      	nop
 80066d0:	20000e48 	.word	0x20000e48
 80066d4:	20000974 	.word	0x20000974
 80066d8:	20000e54 	.word	0x20000e54
 80066dc:	20000e64 	.word	0x20000e64
 80066e0:	20000e50 	.word	0x20000e50
 80066e4:	20000978 	.word	0x20000978
 80066e8:	e000ed04 	.word	0xe000ed04

080066ec <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80066ec:	b580      	push	{r7, lr}
 80066ee:	b084      	sub	sp, #16
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80066f4:	2300      	movs	r3, #0
 80066f6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d017      	beq.n	800672e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80066fe:	4b13      	ldr	r3, [pc, #76]	; (800674c <vTaskDelay+0x60>)
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	2b00      	cmp	r3, #0
 8006704:	d00a      	beq.n	800671c <vTaskDelay+0x30>
	__asm volatile
 8006706:	f04f 0350 	mov.w	r3, #80	; 0x50
 800670a:	f383 8811 	msr	BASEPRI, r3
 800670e:	f3bf 8f6f 	isb	sy
 8006712:	f3bf 8f4f 	dsb	sy
 8006716:	60bb      	str	r3, [r7, #8]
}
 8006718:	bf00      	nop
 800671a:	e7fe      	b.n	800671a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800671c:	f000 f880 	bl	8006820 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006720:	2100      	movs	r1, #0
 8006722:	6878      	ldr	r0, [r7, #4]
 8006724:	f000 fdfc 	bl	8007320 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006728:	f000 f888 	bl	800683c <xTaskResumeAll>
 800672c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	2b00      	cmp	r3, #0
 8006732:	d107      	bne.n	8006744 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8006734:	4b06      	ldr	r3, [pc, #24]	; (8006750 <vTaskDelay+0x64>)
 8006736:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800673a:	601a      	str	r2, [r3, #0]
 800673c:	f3bf 8f4f 	dsb	sy
 8006740:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006744:	bf00      	nop
 8006746:	3710      	adds	r7, #16
 8006748:	46bd      	mov	sp, r7
 800674a:	bd80      	pop	{r7, pc}
 800674c:	20000e70 	.word	0x20000e70
 8006750:	e000ed04 	.word	0xe000ed04

08006754 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006754:	b580      	push	{r7, lr}
 8006756:	b08a      	sub	sp, #40	; 0x28
 8006758:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800675a:	2300      	movs	r3, #0
 800675c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800675e:	2300      	movs	r3, #0
 8006760:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006762:	463a      	mov	r2, r7
 8006764:	1d39      	adds	r1, r7, #4
 8006766:	f107 0308 	add.w	r3, r7, #8
 800676a:	4618      	mov	r0, r3
 800676c:	f7fe fd30 	bl	80051d0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006770:	6839      	ldr	r1, [r7, #0]
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	68ba      	ldr	r2, [r7, #8]
 8006776:	9202      	str	r2, [sp, #8]
 8006778:	9301      	str	r3, [sp, #4]
 800677a:	2300      	movs	r3, #0
 800677c:	9300      	str	r3, [sp, #0]
 800677e:	2300      	movs	r3, #0
 8006780:	460a      	mov	r2, r1
 8006782:	4921      	ldr	r1, [pc, #132]	; (8006808 <vTaskStartScheduler+0xb4>)
 8006784:	4821      	ldr	r0, [pc, #132]	; (800680c <vTaskStartScheduler+0xb8>)
 8006786:	f7ff fe19 	bl	80063bc <xTaskCreateStatic>
 800678a:	4603      	mov	r3, r0
 800678c:	4a20      	ldr	r2, [pc, #128]	; (8006810 <vTaskStartScheduler+0xbc>)
 800678e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006790:	4b1f      	ldr	r3, [pc, #124]	; (8006810 <vTaskStartScheduler+0xbc>)
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	2b00      	cmp	r3, #0
 8006796:	d002      	beq.n	800679e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006798:	2301      	movs	r3, #1
 800679a:	617b      	str	r3, [r7, #20]
 800679c:	e001      	b.n	80067a2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800679e:	2300      	movs	r3, #0
 80067a0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80067a2:	697b      	ldr	r3, [r7, #20]
 80067a4:	2b01      	cmp	r3, #1
 80067a6:	d102      	bne.n	80067ae <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80067a8:	f000 fe0e 	bl	80073c8 <xTimerCreateTimerTask>
 80067ac:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80067ae:	697b      	ldr	r3, [r7, #20]
 80067b0:	2b01      	cmp	r3, #1
 80067b2:	d116      	bne.n	80067e2 <vTaskStartScheduler+0x8e>
	__asm volatile
 80067b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067b8:	f383 8811 	msr	BASEPRI, r3
 80067bc:	f3bf 8f6f 	isb	sy
 80067c0:	f3bf 8f4f 	dsb	sy
 80067c4:	613b      	str	r3, [r7, #16]
}
 80067c6:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80067c8:	4b12      	ldr	r3, [pc, #72]	; (8006814 <vTaskStartScheduler+0xc0>)
 80067ca:	f04f 32ff 	mov.w	r2, #4294967295
 80067ce:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80067d0:	4b11      	ldr	r3, [pc, #68]	; (8006818 <vTaskStartScheduler+0xc4>)
 80067d2:	2201      	movs	r2, #1
 80067d4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80067d6:	4b11      	ldr	r3, [pc, #68]	; (800681c <vTaskStartScheduler+0xc8>)
 80067d8:	2200      	movs	r2, #0
 80067da:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80067dc:	f001 f990 	bl	8007b00 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80067e0:	e00e      	b.n	8006800 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80067e2:	697b      	ldr	r3, [r7, #20]
 80067e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067e8:	d10a      	bne.n	8006800 <vTaskStartScheduler+0xac>
	__asm volatile
 80067ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067ee:	f383 8811 	msr	BASEPRI, r3
 80067f2:	f3bf 8f6f 	isb	sy
 80067f6:	f3bf 8f4f 	dsb	sy
 80067fa:	60fb      	str	r3, [r7, #12]
}
 80067fc:	bf00      	nop
 80067fe:	e7fe      	b.n	80067fe <vTaskStartScheduler+0xaa>
}
 8006800:	bf00      	nop
 8006802:	3718      	adds	r7, #24
 8006804:	46bd      	mov	sp, r7
 8006806:	bd80      	pop	{r7, pc}
 8006808:	080082f0 	.word	0x080082f0
 800680c:	08006e41 	.word	0x08006e41
 8006810:	20000e6c 	.word	0x20000e6c
 8006814:	20000e68 	.word	0x20000e68
 8006818:	20000e54 	.word	0x20000e54
 800681c:	20000e4c 	.word	0x20000e4c

08006820 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006820:	b480      	push	{r7}
 8006822:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8006824:	4b04      	ldr	r3, [pc, #16]	; (8006838 <vTaskSuspendAll+0x18>)
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	3301      	adds	r3, #1
 800682a:	4a03      	ldr	r2, [pc, #12]	; (8006838 <vTaskSuspendAll+0x18>)
 800682c:	6013      	str	r3, [r2, #0]
}
 800682e:	bf00      	nop
 8006830:	46bd      	mov	sp, r7
 8006832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006836:	4770      	bx	lr
 8006838:	20000e70 	.word	0x20000e70

0800683c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800683c:	b580      	push	{r7, lr}
 800683e:	b084      	sub	sp, #16
 8006840:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006842:	2300      	movs	r3, #0
 8006844:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006846:	2300      	movs	r3, #0
 8006848:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800684a:	4b42      	ldr	r3, [pc, #264]	; (8006954 <xTaskResumeAll+0x118>)
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	2b00      	cmp	r3, #0
 8006850:	d10a      	bne.n	8006868 <xTaskResumeAll+0x2c>
	__asm volatile
 8006852:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006856:	f383 8811 	msr	BASEPRI, r3
 800685a:	f3bf 8f6f 	isb	sy
 800685e:	f3bf 8f4f 	dsb	sy
 8006862:	603b      	str	r3, [r7, #0]
}
 8006864:	bf00      	nop
 8006866:	e7fe      	b.n	8006866 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006868:	f001 f9ec 	bl	8007c44 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800686c:	4b39      	ldr	r3, [pc, #228]	; (8006954 <xTaskResumeAll+0x118>)
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	3b01      	subs	r3, #1
 8006872:	4a38      	ldr	r2, [pc, #224]	; (8006954 <xTaskResumeAll+0x118>)
 8006874:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006876:	4b37      	ldr	r3, [pc, #220]	; (8006954 <xTaskResumeAll+0x118>)
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	2b00      	cmp	r3, #0
 800687c:	d162      	bne.n	8006944 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800687e:	4b36      	ldr	r3, [pc, #216]	; (8006958 <xTaskResumeAll+0x11c>)
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	2b00      	cmp	r3, #0
 8006884:	d05e      	beq.n	8006944 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006886:	e02f      	b.n	80068e8 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8006888:	4b34      	ldr	r3, [pc, #208]	; (800695c <xTaskResumeAll+0x120>)
 800688a:	68db      	ldr	r3, [r3, #12]
 800688c:	68db      	ldr	r3, [r3, #12]
 800688e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	3318      	adds	r3, #24
 8006894:	4618      	mov	r0, r3
 8006896:	f7fe fd59 	bl	800534c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	3304      	adds	r3, #4
 800689e:	4618      	mov	r0, r3
 80068a0:	f7fe fd54 	bl	800534c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068a8:	4b2d      	ldr	r3, [pc, #180]	; (8006960 <xTaskResumeAll+0x124>)
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	429a      	cmp	r2, r3
 80068ae:	d903      	bls.n	80068b8 <xTaskResumeAll+0x7c>
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068b4:	4a2a      	ldr	r2, [pc, #168]	; (8006960 <xTaskResumeAll+0x124>)
 80068b6:	6013      	str	r3, [r2, #0]
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068bc:	4613      	mov	r3, r2
 80068be:	009b      	lsls	r3, r3, #2
 80068c0:	4413      	add	r3, r2
 80068c2:	009b      	lsls	r3, r3, #2
 80068c4:	4a27      	ldr	r2, [pc, #156]	; (8006964 <xTaskResumeAll+0x128>)
 80068c6:	441a      	add	r2, r3
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	3304      	adds	r3, #4
 80068cc:	4619      	mov	r1, r3
 80068ce:	4610      	mov	r0, r2
 80068d0:	f7fe fcdf 	bl	8005292 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068d8:	4b23      	ldr	r3, [pc, #140]	; (8006968 <xTaskResumeAll+0x12c>)
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068de:	429a      	cmp	r2, r3
 80068e0:	d302      	bcc.n	80068e8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80068e2:	4b22      	ldr	r3, [pc, #136]	; (800696c <xTaskResumeAll+0x130>)
 80068e4:	2201      	movs	r2, #1
 80068e6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80068e8:	4b1c      	ldr	r3, [pc, #112]	; (800695c <xTaskResumeAll+0x120>)
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d1cb      	bne.n	8006888 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d001      	beq.n	80068fa <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80068f6:	f000 fb59 	bl	8006fac <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80068fa:	4b1d      	ldr	r3, [pc, #116]	; (8006970 <xTaskResumeAll+0x134>)
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	2b00      	cmp	r3, #0
 8006904:	d010      	beq.n	8006928 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006906:	f000 f847 	bl	8006998 <xTaskIncrementTick>
 800690a:	4603      	mov	r3, r0
 800690c:	2b00      	cmp	r3, #0
 800690e:	d002      	beq.n	8006916 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8006910:	4b16      	ldr	r3, [pc, #88]	; (800696c <xTaskResumeAll+0x130>)
 8006912:	2201      	movs	r2, #1
 8006914:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	3b01      	subs	r3, #1
 800691a:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	2b00      	cmp	r3, #0
 8006920:	d1f1      	bne.n	8006906 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8006922:	4b13      	ldr	r3, [pc, #76]	; (8006970 <xTaskResumeAll+0x134>)
 8006924:	2200      	movs	r2, #0
 8006926:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006928:	4b10      	ldr	r3, [pc, #64]	; (800696c <xTaskResumeAll+0x130>)
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	2b00      	cmp	r3, #0
 800692e:	d009      	beq.n	8006944 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006930:	2301      	movs	r3, #1
 8006932:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006934:	4b0f      	ldr	r3, [pc, #60]	; (8006974 <xTaskResumeAll+0x138>)
 8006936:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800693a:	601a      	str	r2, [r3, #0]
 800693c:	f3bf 8f4f 	dsb	sy
 8006940:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006944:	f001 f9ae 	bl	8007ca4 <vPortExitCritical>

	return xAlreadyYielded;
 8006948:	68bb      	ldr	r3, [r7, #8]
}
 800694a:	4618      	mov	r0, r3
 800694c:	3710      	adds	r7, #16
 800694e:	46bd      	mov	sp, r7
 8006950:	bd80      	pop	{r7, pc}
 8006952:	bf00      	nop
 8006954:	20000e70 	.word	0x20000e70
 8006958:	20000e48 	.word	0x20000e48
 800695c:	20000e08 	.word	0x20000e08
 8006960:	20000e50 	.word	0x20000e50
 8006964:	20000978 	.word	0x20000978
 8006968:	20000974 	.word	0x20000974
 800696c:	20000e5c 	.word	0x20000e5c
 8006970:	20000e58 	.word	0x20000e58
 8006974:	e000ed04 	.word	0xe000ed04

08006978 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006978:	b480      	push	{r7}
 800697a:	b083      	sub	sp, #12
 800697c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800697e:	4b05      	ldr	r3, [pc, #20]	; (8006994 <xTaskGetTickCount+0x1c>)
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006984:	687b      	ldr	r3, [r7, #4]
}
 8006986:	4618      	mov	r0, r3
 8006988:	370c      	adds	r7, #12
 800698a:	46bd      	mov	sp, r7
 800698c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006990:	4770      	bx	lr
 8006992:	bf00      	nop
 8006994:	20000e4c 	.word	0x20000e4c

08006998 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006998:	b580      	push	{r7, lr}
 800699a:	b086      	sub	sp, #24
 800699c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800699e:	2300      	movs	r3, #0
 80069a0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80069a2:	4b51      	ldr	r3, [pc, #324]	; (8006ae8 <xTaskIncrementTick+0x150>)
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	f040 808e 	bne.w	8006ac8 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80069ac:	4b4f      	ldr	r3, [pc, #316]	; (8006aec <xTaskIncrementTick+0x154>)
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	3301      	adds	r3, #1
 80069b2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80069b4:	4a4d      	ldr	r2, [pc, #308]	; (8006aec <xTaskIncrementTick+0x154>)
 80069b6:	693b      	ldr	r3, [r7, #16]
 80069b8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80069ba:	693b      	ldr	r3, [r7, #16]
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d120      	bne.n	8006a02 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80069c0:	4b4b      	ldr	r3, [pc, #300]	; (8006af0 <xTaskIncrementTick+0x158>)
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d00a      	beq.n	80069e0 <xTaskIncrementTick+0x48>
	__asm volatile
 80069ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069ce:	f383 8811 	msr	BASEPRI, r3
 80069d2:	f3bf 8f6f 	isb	sy
 80069d6:	f3bf 8f4f 	dsb	sy
 80069da:	603b      	str	r3, [r7, #0]
}
 80069dc:	bf00      	nop
 80069de:	e7fe      	b.n	80069de <xTaskIncrementTick+0x46>
 80069e0:	4b43      	ldr	r3, [pc, #268]	; (8006af0 <xTaskIncrementTick+0x158>)
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	60fb      	str	r3, [r7, #12]
 80069e6:	4b43      	ldr	r3, [pc, #268]	; (8006af4 <xTaskIncrementTick+0x15c>)
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	4a41      	ldr	r2, [pc, #260]	; (8006af0 <xTaskIncrementTick+0x158>)
 80069ec:	6013      	str	r3, [r2, #0]
 80069ee:	4a41      	ldr	r2, [pc, #260]	; (8006af4 <xTaskIncrementTick+0x15c>)
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	6013      	str	r3, [r2, #0]
 80069f4:	4b40      	ldr	r3, [pc, #256]	; (8006af8 <xTaskIncrementTick+0x160>)
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	3301      	adds	r3, #1
 80069fa:	4a3f      	ldr	r2, [pc, #252]	; (8006af8 <xTaskIncrementTick+0x160>)
 80069fc:	6013      	str	r3, [r2, #0]
 80069fe:	f000 fad5 	bl	8006fac <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006a02:	4b3e      	ldr	r3, [pc, #248]	; (8006afc <xTaskIncrementTick+0x164>)
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	693a      	ldr	r2, [r7, #16]
 8006a08:	429a      	cmp	r2, r3
 8006a0a:	d34e      	bcc.n	8006aaa <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006a0c:	4b38      	ldr	r3, [pc, #224]	; (8006af0 <xTaskIncrementTick+0x158>)
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d101      	bne.n	8006a1a <xTaskIncrementTick+0x82>
 8006a16:	2301      	movs	r3, #1
 8006a18:	e000      	b.n	8006a1c <xTaskIncrementTick+0x84>
 8006a1a:	2300      	movs	r3, #0
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d004      	beq.n	8006a2a <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006a20:	4b36      	ldr	r3, [pc, #216]	; (8006afc <xTaskIncrementTick+0x164>)
 8006a22:	f04f 32ff 	mov.w	r2, #4294967295
 8006a26:	601a      	str	r2, [r3, #0]
					break;
 8006a28:	e03f      	b.n	8006aaa <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006a2a:	4b31      	ldr	r3, [pc, #196]	; (8006af0 <xTaskIncrementTick+0x158>)
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	68db      	ldr	r3, [r3, #12]
 8006a30:	68db      	ldr	r3, [r3, #12]
 8006a32:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006a34:	68bb      	ldr	r3, [r7, #8]
 8006a36:	685b      	ldr	r3, [r3, #4]
 8006a38:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006a3a:	693a      	ldr	r2, [r7, #16]
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	429a      	cmp	r2, r3
 8006a40:	d203      	bcs.n	8006a4a <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006a42:	4a2e      	ldr	r2, [pc, #184]	; (8006afc <xTaskIncrementTick+0x164>)
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	6013      	str	r3, [r2, #0]
						break;
 8006a48:	e02f      	b.n	8006aaa <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006a4a:	68bb      	ldr	r3, [r7, #8]
 8006a4c:	3304      	adds	r3, #4
 8006a4e:	4618      	mov	r0, r3
 8006a50:	f7fe fc7c 	bl	800534c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006a54:	68bb      	ldr	r3, [r7, #8]
 8006a56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d004      	beq.n	8006a66 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006a5c:	68bb      	ldr	r3, [r7, #8]
 8006a5e:	3318      	adds	r3, #24
 8006a60:	4618      	mov	r0, r3
 8006a62:	f7fe fc73 	bl	800534c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006a66:	68bb      	ldr	r3, [r7, #8]
 8006a68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a6a:	4b25      	ldr	r3, [pc, #148]	; (8006b00 <xTaskIncrementTick+0x168>)
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	429a      	cmp	r2, r3
 8006a70:	d903      	bls.n	8006a7a <xTaskIncrementTick+0xe2>
 8006a72:	68bb      	ldr	r3, [r7, #8]
 8006a74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a76:	4a22      	ldr	r2, [pc, #136]	; (8006b00 <xTaskIncrementTick+0x168>)
 8006a78:	6013      	str	r3, [r2, #0]
 8006a7a:	68bb      	ldr	r3, [r7, #8]
 8006a7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a7e:	4613      	mov	r3, r2
 8006a80:	009b      	lsls	r3, r3, #2
 8006a82:	4413      	add	r3, r2
 8006a84:	009b      	lsls	r3, r3, #2
 8006a86:	4a1f      	ldr	r2, [pc, #124]	; (8006b04 <xTaskIncrementTick+0x16c>)
 8006a88:	441a      	add	r2, r3
 8006a8a:	68bb      	ldr	r3, [r7, #8]
 8006a8c:	3304      	adds	r3, #4
 8006a8e:	4619      	mov	r1, r3
 8006a90:	4610      	mov	r0, r2
 8006a92:	f7fe fbfe 	bl	8005292 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006a96:	68bb      	ldr	r3, [r7, #8]
 8006a98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a9a:	4b1b      	ldr	r3, [pc, #108]	; (8006b08 <xTaskIncrementTick+0x170>)
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006aa0:	429a      	cmp	r2, r3
 8006aa2:	d3b3      	bcc.n	8006a0c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8006aa4:	2301      	movs	r3, #1
 8006aa6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006aa8:	e7b0      	b.n	8006a0c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006aaa:	4b17      	ldr	r3, [pc, #92]	; (8006b08 <xTaskIncrementTick+0x170>)
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ab0:	4914      	ldr	r1, [pc, #80]	; (8006b04 <xTaskIncrementTick+0x16c>)
 8006ab2:	4613      	mov	r3, r2
 8006ab4:	009b      	lsls	r3, r3, #2
 8006ab6:	4413      	add	r3, r2
 8006ab8:	009b      	lsls	r3, r3, #2
 8006aba:	440b      	add	r3, r1
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	2b01      	cmp	r3, #1
 8006ac0:	d907      	bls.n	8006ad2 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8006ac2:	2301      	movs	r3, #1
 8006ac4:	617b      	str	r3, [r7, #20]
 8006ac6:	e004      	b.n	8006ad2 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8006ac8:	4b10      	ldr	r3, [pc, #64]	; (8006b0c <xTaskIncrementTick+0x174>)
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	3301      	adds	r3, #1
 8006ace:	4a0f      	ldr	r2, [pc, #60]	; (8006b0c <xTaskIncrementTick+0x174>)
 8006ad0:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8006ad2:	4b0f      	ldr	r3, [pc, #60]	; (8006b10 <xTaskIncrementTick+0x178>)
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d001      	beq.n	8006ade <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 8006ada:	2301      	movs	r3, #1
 8006adc:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8006ade:	697b      	ldr	r3, [r7, #20]
}
 8006ae0:	4618      	mov	r0, r3
 8006ae2:	3718      	adds	r7, #24
 8006ae4:	46bd      	mov	sp, r7
 8006ae6:	bd80      	pop	{r7, pc}
 8006ae8:	20000e70 	.word	0x20000e70
 8006aec:	20000e4c 	.word	0x20000e4c
 8006af0:	20000e00 	.word	0x20000e00
 8006af4:	20000e04 	.word	0x20000e04
 8006af8:	20000e60 	.word	0x20000e60
 8006afc:	20000e68 	.word	0x20000e68
 8006b00:	20000e50 	.word	0x20000e50
 8006b04:	20000978 	.word	0x20000978
 8006b08:	20000974 	.word	0x20000974
 8006b0c:	20000e58 	.word	0x20000e58
 8006b10:	20000e5c 	.word	0x20000e5c

08006b14 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006b14:	b480      	push	{r7}
 8006b16:	b085      	sub	sp, #20
 8006b18:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006b1a:	4b28      	ldr	r3, [pc, #160]	; (8006bbc <vTaskSwitchContext+0xa8>)
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d003      	beq.n	8006b2a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006b22:	4b27      	ldr	r3, [pc, #156]	; (8006bc0 <vTaskSwitchContext+0xac>)
 8006b24:	2201      	movs	r2, #1
 8006b26:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006b28:	e041      	b.n	8006bae <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8006b2a:	4b25      	ldr	r3, [pc, #148]	; (8006bc0 <vTaskSwitchContext+0xac>)
 8006b2c:	2200      	movs	r2, #0
 8006b2e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8006b30:	4b24      	ldr	r3, [pc, #144]	; (8006bc4 <vTaskSwitchContext+0xb0>)
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	60fb      	str	r3, [r7, #12]
 8006b36:	e010      	b.n	8006b5a <vTaskSwitchContext+0x46>
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d10a      	bne.n	8006b54 <vTaskSwitchContext+0x40>
	__asm volatile
 8006b3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b42:	f383 8811 	msr	BASEPRI, r3
 8006b46:	f3bf 8f6f 	isb	sy
 8006b4a:	f3bf 8f4f 	dsb	sy
 8006b4e:	607b      	str	r3, [r7, #4]
}
 8006b50:	bf00      	nop
 8006b52:	e7fe      	b.n	8006b52 <vTaskSwitchContext+0x3e>
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	3b01      	subs	r3, #1
 8006b58:	60fb      	str	r3, [r7, #12]
 8006b5a:	491b      	ldr	r1, [pc, #108]	; (8006bc8 <vTaskSwitchContext+0xb4>)
 8006b5c:	68fa      	ldr	r2, [r7, #12]
 8006b5e:	4613      	mov	r3, r2
 8006b60:	009b      	lsls	r3, r3, #2
 8006b62:	4413      	add	r3, r2
 8006b64:	009b      	lsls	r3, r3, #2
 8006b66:	440b      	add	r3, r1
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d0e4      	beq.n	8006b38 <vTaskSwitchContext+0x24>
 8006b6e:	68fa      	ldr	r2, [r7, #12]
 8006b70:	4613      	mov	r3, r2
 8006b72:	009b      	lsls	r3, r3, #2
 8006b74:	4413      	add	r3, r2
 8006b76:	009b      	lsls	r3, r3, #2
 8006b78:	4a13      	ldr	r2, [pc, #76]	; (8006bc8 <vTaskSwitchContext+0xb4>)
 8006b7a:	4413      	add	r3, r2
 8006b7c:	60bb      	str	r3, [r7, #8]
 8006b7e:	68bb      	ldr	r3, [r7, #8]
 8006b80:	685b      	ldr	r3, [r3, #4]
 8006b82:	685a      	ldr	r2, [r3, #4]
 8006b84:	68bb      	ldr	r3, [r7, #8]
 8006b86:	605a      	str	r2, [r3, #4]
 8006b88:	68bb      	ldr	r3, [r7, #8]
 8006b8a:	685a      	ldr	r2, [r3, #4]
 8006b8c:	68bb      	ldr	r3, [r7, #8]
 8006b8e:	3308      	adds	r3, #8
 8006b90:	429a      	cmp	r2, r3
 8006b92:	d104      	bne.n	8006b9e <vTaskSwitchContext+0x8a>
 8006b94:	68bb      	ldr	r3, [r7, #8]
 8006b96:	685b      	ldr	r3, [r3, #4]
 8006b98:	685a      	ldr	r2, [r3, #4]
 8006b9a:	68bb      	ldr	r3, [r7, #8]
 8006b9c:	605a      	str	r2, [r3, #4]
 8006b9e:	68bb      	ldr	r3, [r7, #8]
 8006ba0:	685b      	ldr	r3, [r3, #4]
 8006ba2:	68db      	ldr	r3, [r3, #12]
 8006ba4:	4a09      	ldr	r2, [pc, #36]	; (8006bcc <vTaskSwitchContext+0xb8>)
 8006ba6:	6013      	str	r3, [r2, #0]
 8006ba8:	4a06      	ldr	r2, [pc, #24]	; (8006bc4 <vTaskSwitchContext+0xb0>)
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	6013      	str	r3, [r2, #0]
}
 8006bae:	bf00      	nop
 8006bb0:	3714      	adds	r7, #20
 8006bb2:	46bd      	mov	sp, r7
 8006bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb8:	4770      	bx	lr
 8006bba:	bf00      	nop
 8006bbc:	20000e70 	.word	0x20000e70
 8006bc0:	20000e5c 	.word	0x20000e5c
 8006bc4:	20000e50 	.word	0x20000e50
 8006bc8:	20000978 	.word	0x20000978
 8006bcc:	20000974 	.word	0x20000974

08006bd0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006bd0:	b580      	push	{r7, lr}
 8006bd2:	b084      	sub	sp, #16
 8006bd4:	af00      	add	r7, sp, #0
 8006bd6:	6078      	str	r0, [r7, #4]
 8006bd8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d10a      	bne.n	8006bf6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8006be0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006be4:	f383 8811 	msr	BASEPRI, r3
 8006be8:	f3bf 8f6f 	isb	sy
 8006bec:	f3bf 8f4f 	dsb	sy
 8006bf0:	60fb      	str	r3, [r7, #12]
}
 8006bf2:	bf00      	nop
 8006bf4:	e7fe      	b.n	8006bf4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006bf6:	4b07      	ldr	r3, [pc, #28]	; (8006c14 <vTaskPlaceOnEventList+0x44>)
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	3318      	adds	r3, #24
 8006bfc:	4619      	mov	r1, r3
 8006bfe:	6878      	ldr	r0, [r7, #4]
 8006c00:	f7fe fb6b 	bl	80052da <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006c04:	2101      	movs	r1, #1
 8006c06:	6838      	ldr	r0, [r7, #0]
 8006c08:	f000 fb8a 	bl	8007320 <prvAddCurrentTaskToDelayedList>
}
 8006c0c:	bf00      	nop
 8006c0e:	3710      	adds	r7, #16
 8006c10:	46bd      	mov	sp, r7
 8006c12:	bd80      	pop	{r7, pc}
 8006c14:	20000974 	.word	0x20000974

08006c18 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006c18:	b580      	push	{r7, lr}
 8006c1a:	b086      	sub	sp, #24
 8006c1c:	af00      	add	r7, sp, #0
 8006c1e:	60f8      	str	r0, [r7, #12]
 8006c20:	60b9      	str	r1, [r7, #8]
 8006c22:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d10a      	bne.n	8006c40 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8006c2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c2e:	f383 8811 	msr	BASEPRI, r3
 8006c32:	f3bf 8f6f 	isb	sy
 8006c36:	f3bf 8f4f 	dsb	sy
 8006c3a:	617b      	str	r3, [r7, #20]
}
 8006c3c:	bf00      	nop
 8006c3e:	e7fe      	b.n	8006c3e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006c40:	4b0a      	ldr	r3, [pc, #40]	; (8006c6c <vTaskPlaceOnEventListRestricted+0x54>)
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	3318      	adds	r3, #24
 8006c46:	4619      	mov	r1, r3
 8006c48:	68f8      	ldr	r0, [r7, #12]
 8006c4a:	f7fe fb22 	bl	8005292 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d002      	beq.n	8006c5a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8006c54:	f04f 33ff 	mov.w	r3, #4294967295
 8006c58:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006c5a:	6879      	ldr	r1, [r7, #4]
 8006c5c:	68b8      	ldr	r0, [r7, #8]
 8006c5e:	f000 fb5f 	bl	8007320 <prvAddCurrentTaskToDelayedList>
	}
 8006c62:	bf00      	nop
 8006c64:	3718      	adds	r7, #24
 8006c66:	46bd      	mov	sp, r7
 8006c68:	bd80      	pop	{r7, pc}
 8006c6a:	bf00      	nop
 8006c6c:	20000974 	.word	0x20000974

08006c70 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006c70:	b580      	push	{r7, lr}
 8006c72:	b086      	sub	sp, #24
 8006c74:	af00      	add	r7, sp, #0
 8006c76:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	68db      	ldr	r3, [r3, #12]
 8006c7c:	68db      	ldr	r3, [r3, #12]
 8006c7e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006c80:	693b      	ldr	r3, [r7, #16]
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d10a      	bne.n	8006c9c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8006c86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c8a:	f383 8811 	msr	BASEPRI, r3
 8006c8e:	f3bf 8f6f 	isb	sy
 8006c92:	f3bf 8f4f 	dsb	sy
 8006c96:	60fb      	str	r3, [r7, #12]
}
 8006c98:	bf00      	nop
 8006c9a:	e7fe      	b.n	8006c9a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006c9c:	693b      	ldr	r3, [r7, #16]
 8006c9e:	3318      	adds	r3, #24
 8006ca0:	4618      	mov	r0, r3
 8006ca2:	f7fe fb53 	bl	800534c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006ca6:	4b1e      	ldr	r3, [pc, #120]	; (8006d20 <xTaskRemoveFromEventList+0xb0>)
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d11d      	bne.n	8006cea <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006cae:	693b      	ldr	r3, [r7, #16]
 8006cb0:	3304      	adds	r3, #4
 8006cb2:	4618      	mov	r0, r3
 8006cb4:	f7fe fb4a 	bl	800534c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006cb8:	693b      	ldr	r3, [r7, #16]
 8006cba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006cbc:	4b19      	ldr	r3, [pc, #100]	; (8006d24 <xTaskRemoveFromEventList+0xb4>)
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	429a      	cmp	r2, r3
 8006cc2:	d903      	bls.n	8006ccc <xTaskRemoveFromEventList+0x5c>
 8006cc4:	693b      	ldr	r3, [r7, #16]
 8006cc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cc8:	4a16      	ldr	r2, [pc, #88]	; (8006d24 <xTaskRemoveFromEventList+0xb4>)
 8006cca:	6013      	str	r3, [r2, #0]
 8006ccc:	693b      	ldr	r3, [r7, #16]
 8006cce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006cd0:	4613      	mov	r3, r2
 8006cd2:	009b      	lsls	r3, r3, #2
 8006cd4:	4413      	add	r3, r2
 8006cd6:	009b      	lsls	r3, r3, #2
 8006cd8:	4a13      	ldr	r2, [pc, #76]	; (8006d28 <xTaskRemoveFromEventList+0xb8>)
 8006cda:	441a      	add	r2, r3
 8006cdc:	693b      	ldr	r3, [r7, #16]
 8006cde:	3304      	adds	r3, #4
 8006ce0:	4619      	mov	r1, r3
 8006ce2:	4610      	mov	r0, r2
 8006ce4:	f7fe fad5 	bl	8005292 <vListInsertEnd>
 8006ce8:	e005      	b.n	8006cf6 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006cea:	693b      	ldr	r3, [r7, #16]
 8006cec:	3318      	adds	r3, #24
 8006cee:	4619      	mov	r1, r3
 8006cf0:	480e      	ldr	r0, [pc, #56]	; (8006d2c <xTaskRemoveFromEventList+0xbc>)
 8006cf2:	f7fe face 	bl	8005292 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006cf6:	693b      	ldr	r3, [r7, #16]
 8006cf8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006cfa:	4b0d      	ldr	r3, [pc, #52]	; (8006d30 <xTaskRemoveFromEventList+0xc0>)
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d00:	429a      	cmp	r2, r3
 8006d02:	d905      	bls.n	8006d10 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006d04:	2301      	movs	r3, #1
 8006d06:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006d08:	4b0a      	ldr	r3, [pc, #40]	; (8006d34 <xTaskRemoveFromEventList+0xc4>)
 8006d0a:	2201      	movs	r2, #1
 8006d0c:	601a      	str	r2, [r3, #0]
 8006d0e:	e001      	b.n	8006d14 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8006d10:	2300      	movs	r3, #0
 8006d12:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8006d14:	697b      	ldr	r3, [r7, #20]
}
 8006d16:	4618      	mov	r0, r3
 8006d18:	3718      	adds	r7, #24
 8006d1a:	46bd      	mov	sp, r7
 8006d1c:	bd80      	pop	{r7, pc}
 8006d1e:	bf00      	nop
 8006d20:	20000e70 	.word	0x20000e70
 8006d24:	20000e50 	.word	0x20000e50
 8006d28:	20000978 	.word	0x20000978
 8006d2c:	20000e08 	.word	0x20000e08
 8006d30:	20000974 	.word	0x20000974
 8006d34:	20000e5c 	.word	0x20000e5c

08006d38 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006d38:	b480      	push	{r7}
 8006d3a:	b083      	sub	sp, #12
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006d40:	4b06      	ldr	r3, [pc, #24]	; (8006d5c <vTaskInternalSetTimeOutState+0x24>)
 8006d42:	681a      	ldr	r2, [r3, #0]
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006d48:	4b05      	ldr	r3, [pc, #20]	; (8006d60 <vTaskInternalSetTimeOutState+0x28>)
 8006d4a:	681a      	ldr	r2, [r3, #0]
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	605a      	str	r2, [r3, #4]
}
 8006d50:	bf00      	nop
 8006d52:	370c      	adds	r7, #12
 8006d54:	46bd      	mov	sp, r7
 8006d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d5a:	4770      	bx	lr
 8006d5c:	20000e60 	.word	0x20000e60
 8006d60:	20000e4c 	.word	0x20000e4c

08006d64 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006d64:	b580      	push	{r7, lr}
 8006d66:	b088      	sub	sp, #32
 8006d68:	af00      	add	r7, sp, #0
 8006d6a:	6078      	str	r0, [r7, #4]
 8006d6c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d10a      	bne.n	8006d8a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8006d74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d78:	f383 8811 	msr	BASEPRI, r3
 8006d7c:	f3bf 8f6f 	isb	sy
 8006d80:	f3bf 8f4f 	dsb	sy
 8006d84:	613b      	str	r3, [r7, #16]
}
 8006d86:	bf00      	nop
 8006d88:	e7fe      	b.n	8006d88 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006d8a:	683b      	ldr	r3, [r7, #0]
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d10a      	bne.n	8006da6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8006d90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d94:	f383 8811 	msr	BASEPRI, r3
 8006d98:	f3bf 8f6f 	isb	sy
 8006d9c:	f3bf 8f4f 	dsb	sy
 8006da0:	60fb      	str	r3, [r7, #12]
}
 8006da2:	bf00      	nop
 8006da4:	e7fe      	b.n	8006da4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8006da6:	f000 ff4d 	bl	8007c44 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006daa:	4b1d      	ldr	r3, [pc, #116]	; (8006e20 <xTaskCheckForTimeOut+0xbc>)
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	685b      	ldr	r3, [r3, #4]
 8006db4:	69ba      	ldr	r2, [r7, #24]
 8006db6:	1ad3      	subs	r3, r2, r3
 8006db8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006dba:	683b      	ldr	r3, [r7, #0]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006dc2:	d102      	bne.n	8006dca <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006dc4:	2300      	movs	r3, #0
 8006dc6:	61fb      	str	r3, [r7, #28]
 8006dc8:	e023      	b.n	8006e12 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681a      	ldr	r2, [r3, #0]
 8006dce:	4b15      	ldr	r3, [pc, #84]	; (8006e24 <xTaskCheckForTimeOut+0xc0>)
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	429a      	cmp	r2, r3
 8006dd4:	d007      	beq.n	8006de6 <xTaskCheckForTimeOut+0x82>
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	685b      	ldr	r3, [r3, #4]
 8006dda:	69ba      	ldr	r2, [r7, #24]
 8006ddc:	429a      	cmp	r2, r3
 8006dde:	d302      	bcc.n	8006de6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006de0:	2301      	movs	r3, #1
 8006de2:	61fb      	str	r3, [r7, #28]
 8006de4:	e015      	b.n	8006e12 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006de6:	683b      	ldr	r3, [r7, #0]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	697a      	ldr	r2, [r7, #20]
 8006dec:	429a      	cmp	r2, r3
 8006dee:	d20b      	bcs.n	8006e08 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006df0:	683b      	ldr	r3, [r7, #0]
 8006df2:	681a      	ldr	r2, [r3, #0]
 8006df4:	697b      	ldr	r3, [r7, #20]
 8006df6:	1ad2      	subs	r2, r2, r3
 8006df8:	683b      	ldr	r3, [r7, #0]
 8006dfa:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006dfc:	6878      	ldr	r0, [r7, #4]
 8006dfe:	f7ff ff9b 	bl	8006d38 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006e02:	2300      	movs	r3, #0
 8006e04:	61fb      	str	r3, [r7, #28]
 8006e06:	e004      	b.n	8006e12 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8006e08:	683b      	ldr	r3, [r7, #0]
 8006e0a:	2200      	movs	r2, #0
 8006e0c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006e0e:	2301      	movs	r3, #1
 8006e10:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006e12:	f000 ff47 	bl	8007ca4 <vPortExitCritical>

	return xReturn;
 8006e16:	69fb      	ldr	r3, [r7, #28]
}
 8006e18:	4618      	mov	r0, r3
 8006e1a:	3720      	adds	r7, #32
 8006e1c:	46bd      	mov	sp, r7
 8006e1e:	bd80      	pop	{r7, pc}
 8006e20:	20000e4c 	.word	0x20000e4c
 8006e24:	20000e60 	.word	0x20000e60

08006e28 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006e28:	b480      	push	{r7}
 8006e2a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006e2c:	4b03      	ldr	r3, [pc, #12]	; (8006e3c <vTaskMissedYield+0x14>)
 8006e2e:	2201      	movs	r2, #1
 8006e30:	601a      	str	r2, [r3, #0]
}
 8006e32:	bf00      	nop
 8006e34:	46bd      	mov	sp, r7
 8006e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e3a:	4770      	bx	lr
 8006e3c:	20000e5c 	.word	0x20000e5c

08006e40 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006e40:	b580      	push	{r7, lr}
 8006e42:	b082      	sub	sp, #8
 8006e44:	af00      	add	r7, sp, #0
 8006e46:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006e48:	f000 f852 	bl	8006ef0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006e4c:	4b06      	ldr	r3, [pc, #24]	; (8006e68 <prvIdleTask+0x28>)
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	2b01      	cmp	r3, #1
 8006e52:	d9f9      	bls.n	8006e48 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006e54:	4b05      	ldr	r3, [pc, #20]	; (8006e6c <prvIdleTask+0x2c>)
 8006e56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e5a:	601a      	str	r2, [r3, #0]
 8006e5c:	f3bf 8f4f 	dsb	sy
 8006e60:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006e64:	e7f0      	b.n	8006e48 <prvIdleTask+0x8>
 8006e66:	bf00      	nop
 8006e68:	20000978 	.word	0x20000978
 8006e6c:	e000ed04 	.word	0xe000ed04

08006e70 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006e70:	b580      	push	{r7, lr}
 8006e72:	b082      	sub	sp, #8
 8006e74:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006e76:	2300      	movs	r3, #0
 8006e78:	607b      	str	r3, [r7, #4]
 8006e7a:	e00c      	b.n	8006e96 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006e7c:	687a      	ldr	r2, [r7, #4]
 8006e7e:	4613      	mov	r3, r2
 8006e80:	009b      	lsls	r3, r3, #2
 8006e82:	4413      	add	r3, r2
 8006e84:	009b      	lsls	r3, r3, #2
 8006e86:	4a12      	ldr	r2, [pc, #72]	; (8006ed0 <prvInitialiseTaskLists+0x60>)
 8006e88:	4413      	add	r3, r2
 8006e8a:	4618      	mov	r0, r3
 8006e8c:	f7fe f9d4 	bl	8005238 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	3301      	adds	r3, #1
 8006e94:	607b      	str	r3, [r7, #4]
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	2b37      	cmp	r3, #55	; 0x37
 8006e9a:	d9ef      	bls.n	8006e7c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006e9c:	480d      	ldr	r0, [pc, #52]	; (8006ed4 <prvInitialiseTaskLists+0x64>)
 8006e9e:	f7fe f9cb 	bl	8005238 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006ea2:	480d      	ldr	r0, [pc, #52]	; (8006ed8 <prvInitialiseTaskLists+0x68>)
 8006ea4:	f7fe f9c8 	bl	8005238 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006ea8:	480c      	ldr	r0, [pc, #48]	; (8006edc <prvInitialiseTaskLists+0x6c>)
 8006eaa:	f7fe f9c5 	bl	8005238 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006eae:	480c      	ldr	r0, [pc, #48]	; (8006ee0 <prvInitialiseTaskLists+0x70>)
 8006eb0:	f7fe f9c2 	bl	8005238 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006eb4:	480b      	ldr	r0, [pc, #44]	; (8006ee4 <prvInitialiseTaskLists+0x74>)
 8006eb6:	f7fe f9bf 	bl	8005238 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006eba:	4b0b      	ldr	r3, [pc, #44]	; (8006ee8 <prvInitialiseTaskLists+0x78>)
 8006ebc:	4a05      	ldr	r2, [pc, #20]	; (8006ed4 <prvInitialiseTaskLists+0x64>)
 8006ebe:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006ec0:	4b0a      	ldr	r3, [pc, #40]	; (8006eec <prvInitialiseTaskLists+0x7c>)
 8006ec2:	4a05      	ldr	r2, [pc, #20]	; (8006ed8 <prvInitialiseTaskLists+0x68>)
 8006ec4:	601a      	str	r2, [r3, #0]
}
 8006ec6:	bf00      	nop
 8006ec8:	3708      	adds	r7, #8
 8006eca:	46bd      	mov	sp, r7
 8006ecc:	bd80      	pop	{r7, pc}
 8006ece:	bf00      	nop
 8006ed0:	20000978 	.word	0x20000978
 8006ed4:	20000dd8 	.word	0x20000dd8
 8006ed8:	20000dec 	.word	0x20000dec
 8006edc:	20000e08 	.word	0x20000e08
 8006ee0:	20000e1c 	.word	0x20000e1c
 8006ee4:	20000e34 	.word	0x20000e34
 8006ee8:	20000e00 	.word	0x20000e00
 8006eec:	20000e04 	.word	0x20000e04

08006ef0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006ef0:	b580      	push	{r7, lr}
 8006ef2:	b082      	sub	sp, #8
 8006ef4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006ef6:	e019      	b.n	8006f2c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006ef8:	f000 fea4 	bl	8007c44 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8006efc:	4b10      	ldr	r3, [pc, #64]	; (8006f40 <prvCheckTasksWaitingTermination+0x50>)
 8006efe:	68db      	ldr	r3, [r3, #12]
 8006f00:	68db      	ldr	r3, [r3, #12]
 8006f02:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	3304      	adds	r3, #4
 8006f08:	4618      	mov	r0, r3
 8006f0a:	f7fe fa1f 	bl	800534c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006f0e:	4b0d      	ldr	r3, [pc, #52]	; (8006f44 <prvCheckTasksWaitingTermination+0x54>)
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	3b01      	subs	r3, #1
 8006f14:	4a0b      	ldr	r2, [pc, #44]	; (8006f44 <prvCheckTasksWaitingTermination+0x54>)
 8006f16:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006f18:	4b0b      	ldr	r3, [pc, #44]	; (8006f48 <prvCheckTasksWaitingTermination+0x58>)
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	3b01      	subs	r3, #1
 8006f1e:	4a0a      	ldr	r2, [pc, #40]	; (8006f48 <prvCheckTasksWaitingTermination+0x58>)
 8006f20:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006f22:	f000 febf 	bl	8007ca4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006f26:	6878      	ldr	r0, [r7, #4]
 8006f28:	f000 f810 	bl	8006f4c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006f2c:	4b06      	ldr	r3, [pc, #24]	; (8006f48 <prvCheckTasksWaitingTermination+0x58>)
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d1e1      	bne.n	8006ef8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006f34:	bf00      	nop
 8006f36:	bf00      	nop
 8006f38:	3708      	adds	r7, #8
 8006f3a:	46bd      	mov	sp, r7
 8006f3c:	bd80      	pop	{r7, pc}
 8006f3e:	bf00      	nop
 8006f40:	20000e1c 	.word	0x20000e1c
 8006f44:	20000e48 	.word	0x20000e48
 8006f48:	20000e30 	.word	0x20000e30

08006f4c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006f4c:	b580      	push	{r7, lr}
 8006f4e:	b084      	sub	sp, #16
 8006f50:	af00      	add	r7, sp, #0
 8006f52:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d108      	bne.n	8006f70 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f62:	4618      	mov	r0, r3
 8006f64:	f001 f854 	bl	8008010 <vPortFree>
				vPortFree( pxTCB );
 8006f68:	6878      	ldr	r0, [r7, #4]
 8006f6a:	f001 f851 	bl	8008010 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006f6e:	e018      	b.n	8006fa2 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006f76:	2b01      	cmp	r3, #1
 8006f78:	d103      	bne.n	8006f82 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8006f7a:	6878      	ldr	r0, [r7, #4]
 8006f7c:	f001 f848 	bl	8008010 <vPortFree>
	}
 8006f80:	e00f      	b.n	8006fa2 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006f88:	2b02      	cmp	r3, #2
 8006f8a:	d00a      	beq.n	8006fa2 <prvDeleteTCB+0x56>
	__asm volatile
 8006f8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f90:	f383 8811 	msr	BASEPRI, r3
 8006f94:	f3bf 8f6f 	isb	sy
 8006f98:	f3bf 8f4f 	dsb	sy
 8006f9c:	60fb      	str	r3, [r7, #12]
}
 8006f9e:	bf00      	nop
 8006fa0:	e7fe      	b.n	8006fa0 <prvDeleteTCB+0x54>
	}
 8006fa2:	bf00      	nop
 8006fa4:	3710      	adds	r7, #16
 8006fa6:	46bd      	mov	sp, r7
 8006fa8:	bd80      	pop	{r7, pc}
	...

08006fac <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006fac:	b480      	push	{r7}
 8006fae:	b083      	sub	sp, #12
 8006fb0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006fb2:	4b0f      	ldr	r3, [pc, #60]	; (8006ff0 <prvResetNextTaskUnblockTime+0x44>)
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d101      	bne.n	8006fc0 <prvResetNextTaskUnblockTime+0x14>
 8006fbc:	2301      	movs	r3, #1
 8006fbe:	e000      	b.n	8006fc2 <prvResetNextTaskUnblockTime+0x16>
 8006fc0:	2300      	movs	r3, #0
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d004      	beq.n	8006fd0 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006fc6:	4b0b      	ldr	r3, [pc, #44]	; (8006ff4 <prvResetNextTaskUnblockTime+0x48>)
 8006fc8:	f04f 32ff 	mov.w	r2, #4294967295
 8006fcc:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006fce:	e008      	b.n	8006fe2 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006fd0:	4b07      	ldr	r3, [pc, #28]	; (8006ff0 <prvResetNextTaskUnblockTime+0x44>)
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	68db      	ldr	r3, [r3, #12]
 8006fd6:	68db      	ldr	r3, [r3, #12]
 8006fd8:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	685b      	ldr	r3, [r3, #4]
 8006fde:	4a05      	ldr	r2, [pc, #20]	; (8006ff4 <prvResetNextTaskUnblockTime+0x48>)
 8006fe0:	6013      	str	r3, [r2, #0]
}
 8006fe2:	bf00      	nop
 8006fe4:	370c      	adds	r7, #12
 8006fe6:	46bd      	mov	sp, r7
 8006fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fec:	4770      	bx	lr
 8006fee:	bf00      	nop
 8006ff0:	20000e00 	.word	0x20000e00
 8006ff4:	20000e68 	.word	0x20000e68

08006ff8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006ff8:	b480      	push	{r7}
 8006ffa:	b083      	sub	sp, #12
 8006ffc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006ffe:	4b0b      	ldr	r3, [pc, #44]	; (800702c <xTaskGetSchedulerState+0x34>)
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	2b00      	cmp	r3, #0
 8007004:	d102      	bne.n	800700c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007006:	2301      	movs	r3, #1
 8007008:	607b      	str	r3, [r7, #4]
 800700a:	e008      	b.n	800701e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800700c:	4b08      	ldr	r3, [pc, #32]	; (8007030 <xTaskGetSchedulerState+0x38>)
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	2b00      	cmp	r3, #0
 8007012:	d102      	bne.n	800701a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007014:	2302      	movs	r3, #2
 8007016:	607b      	str	r3, [r7, #4]
 8007018:	e001      	b.n	800701e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800701a:	2300      	movs	r3, #0
 800701c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800701e:	687b      	ldr	r3, [r7, #4]
	}
 8007020:	4618      	mov	r0, r3
 8007022:	370c      	adds	r7, #12
 8007024:	46bd      	mov	sp, r7
 8007026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800702a:	4770      	bx	lr
 800702c:	20000e54 	.word	0x20000e54
 8007030:	20000e70 	.word	0x20000e70

08007034 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8007034:	b580      	push	{r7, lr}
 8007036:	b084      	sub	sp, #16
 8007038:	af00      	add	r7, sp, #0
 800703a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8007040:	2300      	movs	r3, #0
 8007042:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	2b00      	cmp	r3, #0
 8007048:	d056      	beq.n	80070f8 <xTaskPriorityInherit+0xc4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800704a:	68bb      	ldr	r3, [r7, #8]
 800704c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800704e:	4b2d      	ldr	r3, [pc, #180]	; (8007104 <xTaskPriorityInherit+0xd0>)
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007054:	429a      	cmp	r2, r3
 8007056:	d246      	bcs.n	80070e6 <xTaskPriorityInherit+0xb2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007058:	68bb      	ldr	r3, [r7, #8]
 800705a:	699b      	ldr	r3, [r3, #24]
 800705c:	2b00      	cmp	r3, #0
 800705e:	db06      	blt.n	800706e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007060:	4b28      	ldr	r3, [pc, #160]	; (8007104 <xTaskPriorityInherit+0xd0>)
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007066:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800706a:	68bb      	ldr	r3, [r7, #8]
 800706c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800706e:	68bb      	ldr	r3, [r7, #8]
 8007070:	6959      	ldr	r1, [r3, #20]
 8007072:	68bb      	ldr	r3, [r7, #8]
 8007074:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007076:	4613      	mov	r3, r2
 8007078:	009b      	lsls	r3, r3, #2
 800707a:	4413      	add	r3, r2
 800707c:	009b      	lsls	r3, r3, #2
 800707e:	4a22      	ldr	r2, [pc, #136]	; (8007108 <xTaskPriorityInherit+0xd4>)
 8007080:	4413      	add	r3, r2
 8007082:	4299      	cmp	r1, r3
 8007084:	d101      	bne.n	800708a <xTaskPriorityInherit+0x56>
 8007086:	2301      	movs	r3, #1
 8007088:	e000      	b.n	800708c <xTaskPriorityInherit+0x58>
 800708a:	2300      	movs	r3, #0
 800708c:	2b00      	cmp	r3, #0
 800708e:	d022      	beq.n	80070d6 <xTaskPriorityInherit+0xa2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007090:	68bb      	ldr	r3, [r7, #8]
 8007092:	3304      	adds	r3, #4
 8007094:	4618      	mov	r0, r3
 8007096:	f7fe f959 	bl	800534c <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800709a:	4b1a      	ldr	r3, [pc, #104]	; (8007104 <xTaskPriorityInherit+0xd0>)
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070a0:	68bb      	ldr	r3, [r7, #8]
 80070a2:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80070a4:	68bb      	ldr	r3, [r7, #8]
 80070a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070a8:	4b18      	ldr	r3, [pc, #96]	; (800710c <xTaskPriorityInherit+0xd8>)
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	429a      	cmp	r2, r3
 80070ae:	d903      	bls.n	80070b8 <xTaskPriorityInherit+0x84>
 80070b0:	68bb      	ldr	r3, [r7, #8]
 80070b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070b4:	4a15      	ldr	r2, [pc, #84]	; (800710c <xTaskPriorityInherit+0xd8>)
 80070b6:	6013      	str	r3, [r2, #0]
 80070b8:	68bb      	ldr	r3, [r7, #8]
 80070ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070bc:	4613      	mov	r3, r2
 80070be:	009b      	lsls	r3, r3, #2
 80070c0:	4413      	add	r3, r2
 80070c2:	009b      	lsls	r3, r3, #2
 80070c4:	4a10      	ldr	r2, [pc, #64]	; (8007108 <xTaskPriorityInherit+0xd4>)
 80070c6:	441a      	add	r2, r3
 80070c8:	68bb      	ldr	r3, [r7, #8]
 80070ca:	3304      	adds	r3, #4
 80070cc:	4619      	mov	r1, r3
 80070ce:	4610      	mov	r0, r2
 80070d0:	f7fe f8df 	bl	8005292 <vListInsertEnd>
 80070d4:	e004      	b.n	80070e0 <xTaskPriorityInherit+0xac>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80070d6:	4b0b      	ldr	r3, [pc, #44]	; (8007104 <xTaskPriorityInherit+0xd0>)
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070dc:	68bb      	ldr	r3, [r7, #8]
 80070de:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80070e0:	2301      	movs	r3, #1
 80070e2:	60fb      	str	r3, [r7, #12]
 80070e4:	e008      	b.n	80070f8 <xTaskPriorityInherit+0xc4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80070e6:	68bb      	ldr	r3, [r7, #8]
 80070e8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80070ea:	4b06      	ldr	r3, [pc, #24]	; (8007104 <xTaskPriorityInherit+0xd0>)
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070f0:	429a      	cmp	r2, r3
 80070f2:	d201      	bcs.n	80070f8 <xTaskPriorityInherit+0xc4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80070f4:	2301      	movs	r3, #1
 80070f6:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80070f8:	68fb      	ldr	r3, [r7, #12]
	}
 80070fa:	4618      	mov	r0, r3
 80070fc:	3710      	adds	r7, #16
 80070fe:	46bd      	mov	sp, r7
 8007100:	bd80      	pop	{r7, pc}
 8007102:	bf00      	nop
 8007104:	20000974 	.word	0x20000974
 8007108:	20000978 	.word	0x20000978
 800710c:	20000e50 	.word	0x20000e50

08007110 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007110:	b580      	push	{r7, lr}
 8007112:	b086      	sub	sp, #24
 8007114:	af00      	add	r7, sp, #0
 8007116:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800711c:	2300      	movs	r3, #0
 800711e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	2b00      	cmp	r3, #0
 8007124:	d056      	beq.n	80071d4 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007126:	4b2e      	ldr	r3, [pc, #184]	; (80071e0 <xTaskPriorityDisinherit+0xd0>)
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	693a      	ldr	r2, [r7, #16]
 800712c:	429a      	cmp	r2, r3
 800712e:	d00a      	beq.n	8007146 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8007130:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007134:	f383 8811 	msr	BASEPRI, r3
 8007138:	f3bf 8f6f 	isb	sy
 800713c:	f3bf 8f4f 	dsb	sy
 8007140:	60fb      	str	r3, [r7, #12]
}
 8007142:	bf00      	nop
 8007144:	e7fe      	b.n	8007144 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007146:	693b      	ldr	r3, [r7, #16]
 8007148:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800714a:	2b00      	cmp	r3, #0
 800714c:	d10a      	bne.n	8007164 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800714e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007152:	f383 8811 	msr	BASEPRI, r3
 8007156:	f3bf 8f6f 	isb	sy
 800715a:	f3bf 8f4f 	dsb	sy
 800715e:	60bb      	str	r3, [r7, #8]
}
 8007160:	bf00      	nop
 8007162:	e7fe      	b.n	8007162 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8007164:	693b      	ldr	r3, [r7, #16]
 8007166:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007168:	1e5a      	subs	r2, r3, #1
 800716a:	693b      	ldr	r3, [r7, #16]
 800716c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800716e:	693b      	ldr	r3, [r7, #16]
 8007170:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007172:	693b      	ldr	r3, [r7, #16]
 8007174:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007176:	429a      	cmp	r2, r3
 8007178:	d02c      	beq.n	80071d4 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800717a:	693b      	ldr	r3, [r7, #16]
 800717c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800717e:	2b00      	cmp	r3, #0
 8007180:	d128      	bne.n	80071d4 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007182:	693b      	ldr	r3, [r7, #16]
 8007184:	3304      	adds	r3, #4
 8007186:	4618      	mov	r0, r3
 8007188:	f7fe f8e0 	bl	800534c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800718c:	693b      	ldr	r3, [r7, #16]
 800718e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007190:	693b      	ldr	r3, [r7, #16]
 8007192:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007194:	693b      	ldr	r3, [r7, #16]
 8007196:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007198:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800719c:	693b      	ldr	r3, [r7, #16]
 800719e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80071a0:	693b      	ldr	r3, [r7, #16]
 80071a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071a4:	4b0f      	ldr	r3, [pc, #60]	; (80071e4 <xTaskPriorityDisinherit+0xd4>)
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	429a      	cmp	r2, r3
 80071aa:	d903      	bls.n	80071b4 <xTaskPriorityDisinherit+0xa4>
 80071ac:	693b      	ldr	r3, [r7, #16]
 80071ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071b0:	4a0c      	ldr	r2, [pc, #48]	; (80071e4 <xTaskPriorityDisinherit+0xd4>)
 80071b2:	6013      	str	r3, [r2, #0]
 80071b4:	693b      	ldr	r3, [r7, #16]
 80071b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071b8:	4613      	mov	r3, r2
 80071ba:	009b      	lsls	r3, r3, #2
 80071bc:	4413      	add	r3, r2
 80071be:	009b      	lsls	r3, r3, #2
 80071c0:	4a09      	ldr	r2, [pc, #36]	; (80071e8 <xTaskPriorityDisinherit+0xd8>)
 80071c2:	441a      	add	r2, r3
 80071c4:	693b      	ldr	r3, [r7, #16]
 80071c6:	3304      	adds	r3, #4
 80071c8:	4619      	mov	r1, r3
 80071ca:	4610      	mov	r0, r2
 80071cc:	f7fe f861 	bl	8005292 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80071d0:	2301      	movs	r3, #1
 80071d2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80071d4:	697b      	ldr	r3, [r7, #20]
	}
 80071d6:	4618      	mov	r0, r3
 80071d8:	3718      	adds	r7, #24
 80071da:	46bd      	mov	sp, r7
 80071dc:	bd80      	pop	{r7, pc}
 80071de:	bf00      	nop
 80071e0:	20000974 	.word	0x20000974
 80071e4:	20000e50 	.word	0x20000e50
 80071e8:	20000978 	.word	0x20000978

080071ec <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80071ec:	b580      	push	{r7, lr}
 80071ee:	b088      	sub	sp, #32
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	6078      	str	r0, [r7, #4]
 80071f4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80071fa:	2301      	movs	r3, #1
 80071fc:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	2b00      	cmp	r3, #0
 8007202:	d06f      	beq.n	80072e4 <vTaskPriorityDisinheritAfterTimeout+0xf8>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8007204:	69bb      	ldr	r3, [r7, #24]
 8007206:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007208:	2b00      	cmp	r3, #0
 800720a:	d10a      	bne.n	8007222 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800720c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007210:	f383 8811 	msr	BASEPRI, r3
 8007214:	f3bf 8f6f 	isb	sy
 8007218:	f3bf 8f4f 	dsb	sy
 800721c:	60fb      	str	r3, [r7, #12]
}
 800721e:	bf00      	nop
 8007220:	e7fe      	b.n	8007220 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8007222:	69bb      	ldr	r3, [r7, #24]
 8007224:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007226:	683a      	ldr	r2, [r7, #0]
 8007228:	429a      	cmp	r2, r3
 800722a:	d902      	bls.n	8007232 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800722c:	683b      	ldr	r3, [r7, #0]
 800722e:	61fb      	str	r3, [r7, #28]
 8007230:	e002      	b.n	8007238 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8007232:	69bb      	ldr	r3, [r7, #24]
 8007234:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007236:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8007238:	69bb      	ldr	r3, [r7, #24]
 800723a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800723c:	69fa      	ldr	r2, [r7, #28]
 800723e:	429a      	cmp	r2, r3
 8007240:	d050      	beq.n	80072e4 <vTaskPriorityDisinheritAfterTimeout+0xf8>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8007242:	69bb      	ldr	r3, [r7, #24]
 8007244:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007246:	697a      	ldr	r2, [r7, #20]
 8007248:	429a      	cmp	r2, r3
 800724a:	d14b      	bne.n	80072e4 <vTaskPriorityDisinheritAfterTimeout+0xf8>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800724c:	4b27      	ldr	r3, [pc, #156]	; (80072ec <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	69ba      	ldr	r2, [r7, #24]
 8007252:	429a      	cmp	r2, r3
 8007254:	d10a      	bne.n	800726c <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8007256:	f04f 0350 	mov.w	r3, #80	; 0x50
 800725a:	f383 8811 	msr	BASEPRI, r3
 800725e:	f3bf 8f6f 	isb	sy
 8007262:	f3bf 8f4f 	dsb	sy
 8007266:	60bb      	str	r3, [r7, #8]
}
 8007268:	bf00      	nop
 800726a:	e7fe      	b.n	800726a <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800726c:	69bb      	ldr	r3, [r7, #24]
 800726e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007270:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8007272:	69bb      	ldr	r3, [r7, #24]
 8007274:	69fa      	ldr	r2, [r7, #28]
 8007276:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007278:	69bb      	ldr	r3, [r7, #24]
 800727a:	699b      	ldr	r3, [r3, #24]
 800727c:	2b00      	cmp	r3, #0
 800727e:	db04      	blt.n	800728a <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007280:	69fb      	ldr	r3, [r7, #28]
 8007282:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007286:	69bb      	ldr	r3, [r7, #24]
 8007288:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800728a:	69bb      	ldr	r3, [r7, #24]
 800728c:	6959      	ldr	r1, [r3, #20]
 800728e:	693a      	ldr	r2, [r7, #16]
 8007290:	4613      	mov	r3, r2
 8007292:	009b      	lsls	r3, r3, #2
 8007294:	4413      	add	r3, r2
 8007296:	009b      	lsls	r3, r3, #2
 8007298:	4a15      	ldr	r2, [pc, #84]	; (80072f0 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800729a:	4413      	add	r3, r2
 800729c:	4299      	cmp	r1, r3
 800729e:	d101      	bne.n	80072a4 <vTaskPriorityDisinheritAfterTimeout+0xb8>
 80072a0:	2301      	movs	r3, #1
 80072a2:	e000      	b.n	80072a6 <vTaskPriorityDisinheritAfterTimeout+0xba>
 80072a4:	2300      	movs	r3, #0
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d01c      	beq.n	80072e4 <vTaskPriorityDisinheritAfterTimeout+0xf8>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80072aa:	69bb      	ldr	r3, [r7, #24]
 80072ac:	3304      	adds	r3, #4
 80072ae:	4618      	mov	r0, r3
 80072b0:	f7fe f84c 	bl	800534c <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80072b4:	69bb      	ldr	r3, [r7, #24]
 80072b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072b8:	4b0e      	ldr	r3, [pc, #56]	; (80072f4 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	429a      	cmp	r2, r3
 80072be:	d903      	bls.n	80072c8 <vTaskPriorityDisinheritAfterTimeout+0xdc>
 80072c0:	69bb      	ldr	r3, [r7, #24]
 80072c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072c4:	4a0b      	ldr	r2, [pc, #44]	; (80072f4 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 80072c6:	6013      	str	r3, [r2, #0]
 80072c8:	69bb      	ldr	r3, [r7, #24]
 80072ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072cc:	4613      	mov	r3, r2
 80072ce:	009b      	lsls	r3, r3, #2
 80072d0:	4413      	add	r3, r2
 80072d2:	009b      	lsls	r3, r3, #2
 80072d4:	4a06      	ldr	r2, [pc, #24]	; (80072f0 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 80072d6:	441a      	add	r2, r3
 80072d8:	69bb      	ldr	r3, [r7, #24]
 80072da:	3304      	adds	r3, #4
 80072dc:	4619      	mov	r1, r3
 80072de:	4610      	mov	r0, r2
 80072e0:	f7fd ffd7 	bl	8005292 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80072e4:	bf00      	nop
 80072e6:	3720      	adds	r7, #32
 80072e8:	46bd      	mov	sp, r7
 80072ea:	bd80      	pop	{r7, pc}
 80072ec:	20000974 	.word	0x20000974
 80072f0:	20000978 	.word	0x20000978
 80072f4:	20000e50 	.word	0x20000e50

080072f8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 80072f8:	b480      	push	{r7}
 80072fa:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80072fc:	4b07      	ldr	r3, [pc, #28]	; (800731c <pvTaskIncrementMutexHeldCount+0x24>)
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	2b00      	cmp	r3, #0
 8007302:	d004      	beq.n	800730e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8007304:	4b05      	ldr	r3, [pc, #20]	; (800731c <pvTaskIncrementMutexHeldCount+0x24>)
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800730a:	3201      	adds	r2, #1
 800730c:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800730e:	4b03      	ldr	r3, [pc, #12]	; (800731c <pvTaskIncrementMutexHeldCount+0x24>)
 8007310:	681b      	ldr	r3, [r3, #0]
	}
 8007312:	4618      	mov	r0, r3
 8007314:	46bd      	mov	sp, r7
 8007316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800731a:	4770      	bx	lr
 800731c:	20000974 	.word	0x20000974

08007320 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007320:	b580      	push	{r7, lr}
 8007322:	b084      	sub	sp, #16
 8007324:	af00      	add	r7, sp, #0
 8007326:	6078      	str	r0, [r7, #4]
 8007328:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800732a:	4b21      	ldr	r3, [pc, #132]	; (80073b0 <prvAddCurrentTaskToDelayedList+0x90>)
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007330:	4b20      	ldr	r3, [pc, #128]	; (80073b4 <prvAddCurrentTaskToDelayedList+0x94>)
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	3304      	adds	r3, #4
 8007336:	4618      	mov	r0, r3
 8007338:	f7fe f808 	bl	800534c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007342:	d10a      	bne.n	800735a <prvAddCurrentTaskToDelayedList+0x3a>
 8007344:	683b      	ldr	r3, [r7, #0]
 8007346:	2b00      	cmp	r3, #0
 8007348:	d007      	beq.n	800735a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800734a:	4b1a      	ldr	r3, [pc, #104]	; (80073b4 <prvAddCurrentTaskToDelayedList+0x94>)
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	3304      	adds	r3, #4
 8007350:	4619      	mov	r1, r3
 8007352:	4819      	ldr	r0, [pc, #100]	; (80073b8 <prvAddCurrentTaskToDelayedList+0x98>)
 8007354:	f7fd ff9d 	bl	8005292 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007358:	e026      	b.n	80073a8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800735a:	68fa      	ldr	r2, [r7, #12]
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	4413      	add	r3, r2
 8007360:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007362:	4b14      	ldr	r3, [pc, #80]	; (80073b4 <prvAddCurrentTaskToDelayedList+0x94>)
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	68ba      	ldr	r2, [r7, #8]
 8007368:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800736a:	68ba      	ldr	r2, [r7, #8]
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	429a      	cmp	r2, r3
 8007370:	d209      	bcs.n	8007386 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007372:	4b12      	ldr	r3, [pc, #72]	; (80073bc <prvAddCurrentTaskToDelayedList+0x9c>)
 8007374:	681a      	ldr	r2, [r3, #0]
 8007376:	4b0f      	ldr	r3, [pc, #60]	; (80073b4 <prvAddCurrentTaskToDelayedList+0x94>)
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	3304      	adds	r3, #4
 800737c:	4619      	mov	r1, r3
 800737e:	4610      	mov	r0, r2
 8007380:	f7fd ffab 	bl	80052da <vListInsert>
}
 8007384:	e010      	b.n	80073a8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007386:	4b0e      	ldr	r3, [pc, #56]	; (80073c0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8007388:	681a      	ldr	r2, [r3, #0]
 800738a:	4b0a      	ldr	r3, [pc, #40]	; (80073b4 <prvAddCurrentTaskToDelayedList+0x94>)
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	3304      	adds	r3, #4
 8007390:	4619      	mov	r1, r3
 8007392:	4610      	mov	r0, r2
 8007394:	f7fd ffa1 	bl	80052da <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007398:	4b0a      	ldr	r3, [pc, #40]	; (80073c4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	68ba      	ldr	r2, [r7, #8]
 800739e:	429a      	cmp	r2, r3
 80073a0:	d202      	bcs.n	80073a8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80073a2:	4a08      	ldr	r2, [pc, #32]	; (80073c4 <prvAddCurrentTaskToDelayedList+0xa4>)
 80073a4:	68bb      	ldr	r3, [r7, #8]
 80073a6:	6013      	str	r3, [r2, #0]
}
 80073a8:	bf00      	nop
 80073aa:	3710      	adds	r7, #16
 80073ac:	46bd      	mov	sp, r7
 80073ae:	bd80      	pop	{r7, pc}
 80073b0:	20000e4c 	.word	0x20000e4c
 80073b4:	20000974 	.word	0x20000974
 80073b8:	20000e34 	.word	0x20000e34
 80073bc:	20000e04 	.word	0x20000e04
 80073c0:	20000e00 	.word	0x20000e00
 80073c4:	20000e68 	.word	0x20000e68

080073c8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80073c8:	b580      	push	{r7, lr}
 80073ca:	b08a      	sub	sp, #40	; 0x28
 80073cc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80073ce:	2300      	movs	r3, #0
 80073d0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80073d2:	f000 facb 	bl	800796c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80073d6:	4b1c      	ldr	r3, [pc, #112]	; (8007448 <xTimerCreateTimerTask+0x80>)
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d021      	beq.n	8007422 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80073de:	2300      	movs	r3, #0
 80073e0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80073e2:	2300      	movs	r3, #0
 80073e4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80073e6:	1d3a      	adds	r2, r7, #4
 80073e8:	f107 0108 	add.w	r1, r7, #8
 80073ec:	f107 030c 	add.w	r3, r7, #12
 80073f0:	4618      	mov	r0, r3
 80073f2:	f7fd ff07 	bl	8005204 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80073f6:	6879      	ldr	r1, [r7, #4]
 80073f8:	68bb      	ldr	r3, [r7, #8]
 80073fa:	68fa      	ldr	r2, [r7, #12]
 80073fc:	9202      	str	r2, [sp, #8]
 80073fe:	9301      	str	r3, [sp, #4]
 8007400:	2302      	movs	r3, #2
 8007402:	9300      	str	r3, [sp, #0]
 8007404:	2300      	movs	r3, #0
 8007406:	460a      	mov	r2, r1
 8007408:	4910      	ldr	r1, [pc, #64]	; (800744c <xTimerCreateTimerTask+0x84>)
 800740a:	4811      	ldr	r0, [pc, #68]	; (8007450 <xTimerCreateTimerTask+0x88>)
 800740c:	f7fe ffd6 	bl	80063bc <xTaskCreateStatic>
 8007410:	4603      	mov	r3, r0
 8007412:	4a10      	ldr	r2, [pc, #64]	; (8007454 <xTimerCreateTimerTask+0x8c>)
 8007414:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007416:	4b0f      	ldr	r3, [pc, #60]	; (8007454 <xTimerCreateTimerTask+0x8c>)
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	2b00      	cmp	r3, #0
 800741c:	d001      	beq.n	8007422 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800741e:	2301      	movs	r3, #1
 8007420:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007422:	697b      	ldr	r3, [r7, #20]
 8007424:	2b00      	cmp	r3, #0
 8007426:	d10a      	bne.n	800743e <xTimerCreateTimerTask+0x76>
	__asm volatile
 8007428:	f04f 0350 	mov.w	r3, #80	; 0x50
 800742c:	f383 8811 	msr	BASEPRI, r3
 8007430:	f3bf 8f6f 	isb	sy
 8007434:	f3bf 8f4f 	dsb	sy
 8007438:	613b      	str	r3, [r7, #16]
}
 800743a:	bf00      	nop
 800743c:	e7fe      	b.n	800743c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800743e:	697b      	ldr	r3, [r7, #20]
}
 8007440:	4618      	mov	r0, r3
 8007442:	3718      	adds	r7, #24
 8007444:	46bd      	mov	sp, r7
 8007446:	bd80      	pop	{r7, pc}
 8007448:	20000ea4 	.word	0x20000ea4
 800744c:	080082f8 	.word	0x080082f8
 8007450:	08007575 	.word	0x08007575
 8007454:	20000ea8 	.word	0x20000ea8

08007458 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007458:	b580      	push	{r7, lr}
 800745a:	b08a      	sub	sp, #40	; 0x28
 800745c:	af00      	add	r7, sp, #0
 800745e:	60f8      	str	r0, [r7, #12]
 8007460:	60b9      	str	r1, [r7, #8]
 8007462:	607a      	str	r2, [r7, #4]
 8007464:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007466:	2300      	movs	r3, #0
 8007468:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	2b00      	cmp	r3, #0
 800746e:	d10a      	bne.n	8007486 <xTimerGenericCommand+0x2e>
	__asm volatile
 8007470:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007474:	f383 8811 	msr	BASEPRI, r3
 8007478:	f3bf 8f6f 	isb	sy
 800747c:	f3bf 8f4f 	dsb	sy
 8007480:	623b      	str	r3, [r7, #32]
}
 8007482:	bf00      	nop
 8007484:	e7fe      	b.n	8007484 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007486:	4b1a      	ldr	r3, [pc, #104]	; (80074f0 <xTimerGenericCommand+0x98>)
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	2b00      	cmp	r3, #0
 800748c:	d02a      	beq.n	80074e4 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800748e:	68bb      	ldr	r3, [r7, #8]
 8007490:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800749a:	68bb      	ldr	r3, [r7, #8]
 800749c:	2b05      	cmp	r3, #5
 800749e:	dc18      	bgt.n	80074d2 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80074a0:	f7ff fdaa 	bl	8006ff8 <xTaskGetSchedulerState>
 80074a4:	4603      	mov	r3, r0
 80074a6:	2b02      	cmp	r3, #2
 80074a8:	d109      	bne.n	80074be <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80074aa:	4b11      	ldr	r3, [pc, #68]	; (80074f0 <xTimerGenericCommand+0x98>)
 80074ac:	6818      	ldr	r0, [r3, #0]
 80074ae:	f107 0110 	add.w	r1, r7, #16
 80074b2:	2300      	movs	r3, #0
 80074b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80074b6:	f7fe f91d 	bl	80056f4 <xQueueGenericSend>
 80074ba:	6278      	str	r0, [r7, #36]	; 0x24
 80074bc:	e012      	b.n	80074e4 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80074be:	4b0c      	ldr	r3, [pc, #48]	; (80074f0 <xTimerGenericCommand+0x98>)
 80074c0:	6818      	ldr	r0, [r3, #0]
 80074c2:	f107 0110 	add.w	r1, r7, #16
 80074c6:	2300      	movs	r3, #0
 80074c8:	2200      	movs	r2, #0
 80074ca:	f7fe f913 	bl	80056f4 <xQueueGenericSend>
 80074ce:	6278      	str	r0, [r7, #36]	; 0x24
 80074d0:	e008      	b.n	80074e4 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80074d2:	4b07      	ldr	r3, [pc, #28]	; (80074f0 <xTimerGenericCommand+0x98>)
 80074d4:	6818      	ldr	r0, [r3, #0]
 80074d6:	f107 0110 	add.w	r1, r7, #16
 80074da:	2300      	movs	r3, #0
 80074dc:	683a      	ldr	r2, [r7, #0]
 80074de:	f7fe fa07 	bl	80058f0 <xQueueGenericSendFromISR>
 80074e2:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80074e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80074e6:	4618      	mov	r0, r3
 80074e8:	3728      	adds	r7, #40	; 0x28
 80074ea:	46bd      	mov	sp, r7
 80074ec:	bd80      	pop	{r7, pc}
 80074ee:	bf00      	nop
 80074f0:	20000ea4 	.word	0x20000ea4

080074f4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80074f4:	b580      	push	{r7, lr}
 80074f6:	b088      	sub	sp, #32
 80074f8:	af02      	add	r7, sp, #8
 80074fa:	6078      	str	r0, [r7, #4]
 80074fc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80074fe:	4b1c      	ldr	r3, [pc, #112]	; (8007570 <prvProcessExpiredTimer+0x7c>)
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	68db      	ldr	r3, [r3, #12]
 8007504:	68db      	ldr	r3, [r3, #12]
 8007506:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007508:	697b      	ldr	r3, [r7, #20]
 800750a:	3304      	adds	r3, #4
 800750c:	4618      	mov	r0, r3
 800750e:	f7fd ff1d 	bl	800534c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8007512:	697b      	ldr	r3, [r7, #20]
 8007514:	69db      	ldr	r3, [r3, #28]
 8007516:	2b01      	cmp	r3, #1
 8007518:	d122      	bne.n	8007560 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800751a:	697b      	ldr	r3, [r7, #20]
 800751c:	699a      	ldr	r2, [r3, #24]
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	18d1      	adds	r1, r2, r3
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	683a      	ldr	r2, [r7, #0]
 8007526:	6978      	ldr	r0, [r7, #20]
 8007528:	f000 f8c8 	bl	80076bc <prvInsertTimerInActiveList>
 800752c:	4603      	mov	r3, r0
 800752e:	2b00      	cmp	r3, #0
 8007530:	d016      	beq.n	8007560 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007532:	2300      	movs	r3, #0
 8007534:	9300      	str	r3, [sp, #0]
 8007536:	2300      	movs	r3, #0
 8007538:	687a      	ldr	r2, [r7, #4]
 800753a:	2100      	movs	r1, #0
 800753c:	6978      	ldr	r0, [r7, #20]
 800753e:	f7ff ff8b 	bl	8007458 <xTimerGenericCommand>
 8007542:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007544:	693b      	ldr	r3, [r7, #16]
 8007546:	2b00      	cmp	r3, #0
 8007548:	d10a      	bne.n	8007560 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 800754a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800754e:	f383 8811 	msr	BASEPRI, r3
 8007552:	f3bf 8f6f 	isb	sy
 8007556:	f3bf 8f4f 	dsb	sy
 800755a:	60fb      	str	r3, [r7, #12]
}
 800755c:	bf00      	nop
 800755e:	e7fe      	b.n	800755e <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007560:	697b      	ldr	r3, [r7, #20]
 8007562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007564:	6978      	ldr	r0, [r7, #20]
 8007566:	4798      	blx	r3
}
 8007568:	bf00      	nop
 800756a:	3718      	adds	r7, #24
 800756c:	46bd      	mov	sp, r7
 800756e:	bd80      	pop	{r7, pc}
 8007570:	20000e9c 	.word	0x20000e9c

08007574 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8007574:	b580      	push	{r7, lr}
 8007576:	b084      	sub	sp, #16
 8007578:	af00      	add	r7, sp, #0
 800757a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800757c:	f107 0308 	add.w	r3, r7, #8
 8007580:	4618      	mov	r0, r3
 8007582:	f000 f857 	bl	8007634 <prvGetNextExpireTime>
 8007586:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007588:	68bb      	ldr	r3, [r7, #8]
 800758a:	4619      	mov	r1, r3
 800758c:	68f8      	ldr	r0, [r7, #12]
 800758e:	f000 f803 	bl	8007598 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007592:	f000 f8d5 	bl	8007740 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007596:	e7f1      	b.n	800757c <prvTimerTask+0x8>

08007598 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007598:	b580      	push	{r7, lr}
 800759a:	b084      	sub	sp, #16
 800759c:	af00      	add	r7, sp, #0
 800759e:	6078      	str	r0, [r7, #4]
 80075a0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80075a2:	f7ff f93d 	bl	8006820 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80075a6:	f107 0308 	add.w	r3, r7, #8
 80075aa:	4618      	mov	r0, r3
 80075ac:	f000 f866 	bl	800767c <prvSampleTimeNow>
 80075b0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80075b2:	68bb      	ldr	r3, [r7, #8]
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d130      	bne.n	800761a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80075b8:	683b      	ldr	r3, [r7, #0]
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d10a      	bne.n	80075d4 <prvProcessTimerOrBlockTask+0x3c>
 80075be:	687a      	ldr	r2, [r7, #4]
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	429a      	cmp	r2, r3
 80075c4:	d806      	bhi.n	80075d4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80075c6:	f7ff f939 	bl	800683c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80075ca:	68f9      	ldr	r1, [r7, #12]
 80075cc:	6878      	ldr	r0, [r7, #4]
 80075ce:	f7ff ff91 	bl	80074f4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80075d2:	e024      	b.n	800761e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80075d4:	683b      	ldr	r3, [r7, #0]
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d008      	beq.n	80075ec <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80075da:	4b13      	ldr	r3, [pc, #76]	; (8007628 <prvProcessTimerOrBlockTask+0x90>)
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	bf0c      	ite	eq
 80075e4:	2301      	moveq	r3, #1
 80075e6:	2300      	movne	r3, #0
 80075e8:	b2db      	uxtb	r3, r3
 80075ea:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80075ec:	4b0f      	ldr	r3, [pc, #60]	; (800762c <prvProcessTimerOrBlockTask+0x94>)
 80075ee:	6818      	ldr	r0, [r3, #0]
 80075f0:	687a      	ldr	r2, [r7, #4]
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	1ad3      	subs	r3, r2, r3
 80075f6:	683a      	ldr	r2, [r7, #0]
 80075f8:	4619      	mov	r1, r3
 80075fa:	f7fe feab 	bl	8006354 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80075fe:	f7ff f91d 	bl	800683c <xTaskResumeAll>
 8007602:	4603      	mov	r3, r0
 8007604:	2b00      	cmp	r3, #0
 8007606:	d10a      	bne.n	800761e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007608:	4b09      	ldr	r3, [pc, #36]	; (8007630 <prvProcessTimerOrBlockTask+0x98>)
 800760a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800760e:	601a      	str	r2, [r3, #0]
 8007610:	f3bf 8f4f 	dsb	sy
 8007614:	f3bf 8f6f 	isb	sy
}
 8007618:	e001      	b.n	800761e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800761a:	f7ff f90f 	bl	800683c <xTaskResumeAll>
}
 800761e:	bf00      	nop
 8007620:	3710      	adds	r7, #16
 8007622:	46bd      	mov	sp, r7
 8007624:	bd80      	pop	{r7, pc}
 8007626:	bf00      	nop
 8007628:	20000ea0 	.word	0x20000ea0
 800762c:	20000ea4 	.word	0x20000ea4
 8007630:	e000ed04 	.word	0xe000ed04

08007634 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007634:	b480      	push	{r7}
 8007636:	b085      	sub	sp, #20
 8007638:	af00      	add	r7, sp, #0
 800763a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800763c:	4b0e      	ldr	r3, [pc, #56]	; (8007678 <prvGetNextExpireTime+0x44>)
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	2b00      	cmp	r3, #0
 8007644:	bf0c      	ite	eq
 8007646:	2301      	moveq	r3, #1
 8007648:	2300      	movne	r3, #0
 800764a:	b2db      	uxtb	r3, r3
 800764c:	461a      	mov	r2, r3
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	2b00      	cmp	r3, #0
 8007658:	d105      	bne.n	8007666 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800765a:	4b07      	ldr	r3, [pc, #28]	; (8007678 <prvGetNextExpireTime+0x44>)
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	68db      	ldr	r3, [r3, #12]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	60fb      	str	r3, [r7, #12]
 8007664:	e001      	b.n	800766a <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007666:	2300      	movs	r3, #0
 8007668:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800766a:	68fb      	ldr	r3, [r7, #12]
}
 800766c:	4618      	mov	r0, r3
 800766e:	3714      	adds	r7, #20
 8007670:	46bd      	mov	sp, r7
 8007672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007676:	4770      	bx	lr
 8007678:	20000e9c 	.word	0x20000e9c

0800767c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800767c:	b580      	push	{r7, lr}
 800767e:	b084      	sub	sp, #16
 8007680:	af00      	add	r7, sp, #0
 8007682:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007684:	f7ff f978 	bl	8006978 <xTaskGetTickCount>
 8007688:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800768a:	4b0b      	ldr	r3, [pc, #44]	; (80076b8 <prvSampleTimeNow+0x3c>)
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	68fa      	ldr	r2, [r7, #12]
 8007690:	429a      	cmp	r2, r3
 8007692:	d205      	bcs.n	80076a0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007694:	f000 f908 	bl	80078a8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	2201      	movs	r2, #1
 800769c:	601a      	str	r2, [r3, #0]
 800769e:	e002      	b.n	80076a6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	2200      	movs	r2, #0
 80076a4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80076a6:	4a04      	ldr	r2, [pc, #16]	; (80076b8 <prvSampleTimeNow+0x3c>)
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80076ac:	68fb      	ldr	r3, [r7, #12]
}
 80076ae:	4618      	mov	r0, r3
 80076b0:	3710      	adds	r7, #16
 80076b2:	46bd      	mov	sp, r7
 80076b4:	bd80      	pop	{r7, pc}
 80076b6:	bf00      	nop
 80076b8:	20000eac 	.word	0x20000eac

080076bc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80076bc:	b580      	push	{r7, lr}
 80076be:	b086      	sub	sp, #24
 80076c0:	af00      	add	r7, sp, #0
 80076c2:	60f8      	str	r0, [r7, #12]
 80076c4:	60b9      	str	r1, [r7, #8]
 80076c6:	607a      	str	r2, [r7, #4]
 80076c8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80076ca:	2300      	movs	r3, #0
 80076cc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	68ba      	ldr	r2, [r7, #8]
 80076d2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	68fa      	ldr	r2, [r7, #12]
 80076d8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80076da:	68ba      	ldr	r2, [r7, #8]
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	429a      	cmp	r2, r3
 80076e0:	d812      	bhi.n	8007708 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80076e2:	687a      	ldr	r2, [r7, #4]
 80076e4:	683b      	ldr	r3, [r7, #0]
 80076e6:	1ad2      	subs	r2, r2, r3
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	699b      	ldr	r3, [r3, #24]
 80076ec:	429a      	cmp	r2, r3
 80076ee:	d302      	bcc.n	80076f6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80076f0:	2301      	movs	r3, #1
 80076f2:	617b      	str	r3, [r7, #20]
 80076f4:	e01b      	b.n	800772e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80076f6:	4b10      	ldr	r3, [pc, #64]	; (8007738 <prvInsertTimerInActiveList+0x7c>)
 80076f8:	681a      	ldr	r2, [r3, #0]
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	3304      	adds	r3, #4
 80076fe:	4619      	mov	r1, r3
 8007700:	4610      	mov	r0, r2
 8007702:	f7fd fdea 	bl	80052da <vListInsert>
 8007706:	e012      	b.n	800772e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007708:	687a      	ldr	r2, [r7, #4]
 800770a:	683b      	ldr	r3, [r7, #0]
 800770c:	429a      	cmp	r2, r3
 800770e:	d206      	bcs.n	800771e <prvInsertTimerInActiveList+0x62>
 8007710:	68ba      	ldr	r2, [r7, #8]
 8007712:	683b      	ldr	r3, [r7, #0]
 8007714:	429a      	cmp	r2, r3
 8007716:	d302      	bcc.n	800771e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007718:	2301      	movs	r3, #1
 800771a:	617b      	str	r3, [r7, #20]
 800771c:	e007      	b.n	800772e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800771e:	4b07      	ldr	r3, [pc, #28]	; (800773c <prvInsertTimerInActiveList+0x80>)
 8007720:	681a      	ldr	r2, [r3, #0]
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	3304      	adds	r3, #4
 8007726:	4619      	mov	r1, r3
 8007728:	4610      	mov	r0, r2
 800772a:	f7fd fdd6 	bl	80052da <vListInsert>
		}
	}

	return xProcessTimerNow;
 800772e:	697b      	ldr	r3, [r7, #20]
}
 8007730:	4618      	mov	r0, r3
 8007732:	3718      	adds	r7, #24
 8007734:	46bd      	mov	sp, r7
 8007736:	bd80      	pop	{r7, pc}
 8007738:	20000ea0 	.word	0x20000ea0
 800773c:	20000e9c 	.word	0x20000e9c

08007740 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007740:	b580      	push	{r7, lr}
 8007742:	b08e      	sub	sp, #56	; 0x38
 8007744:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007746:	e09d      	b.n	8007884 <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	2b00      	cmp	r3, #0
 800774c:	da18      	bge.n	8007780 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800774e:	1d3b      	adds	r3, r7, #4
 8007750:	3304      	adds	r3, #4
 8007752:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007754:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007756:	2b00      	cmp	r3, #0
 8007758:	d10a      	bne.n	8007770 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800775a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800775e:	f383 8811 	msr	BASEPRI, r3
 8007762:	f3bf 8f6f 	isb	sy
 8007766:	f3bf 8f4f 	dsb	sy
 800776a:	61fb      	str	r3, [r7, #28]
}
 800776c:	bf00      	nop
 800776e:	e7fe      	b.n	800776e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007770:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007776:	6850      	ldr	r0, [r2, #4]
 8007778:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800777a:	6892      	ldr	r2, [r2, #8]
 800777c:	4611      	mov	r1, r2
 800777e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	2b00      	cmp	r3, #0
 8007784:	db7e      	blt.n	8007884 <prvProcessReceivedCommands+0x144>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800778a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800778c:	695b      	ldr	r3, [r3, #20]
 800778e:	2b00      	cmp	r3, #0
 8007790:	d004      	beq.n	800779c <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007792:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007794:	3304      	adds	r3, #4
 8007796:	4618      	mov	r0, r3
 8007798:	f7fd fdd8 	bl	800534c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800779c:	463b      	mov	r3, r7
 800779e:	4618      	mov	r0, r3
 80077a0:	f7ff ff6c 	bl	800767c <prvSampleTimeNow>
 80077a4:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	2b09      	cmp	r3, #9
 80077aa:	d86a      	bhi.n	8007882 <prvProcessReceivedCommands+0x142>
 80077ac:	a201      	add	r2, pc, #4	; (adr r2, 80077b4 <prvProcessReceivedCommands+0x74>)
 80077ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077b2:	bf00      	nop
 80077b4:	080077dd 	.word	0x080077dd
 80077b8:	080077dd 	.word	0x080077dd
 80077bc:	080077dd 	.word	0x080077dd
 80077c0:	08007885 	.word	0x08007885
 80077c4:	08007839 	.word	0x08007839
 80077c8:	08007871 	.word	0x08007871
 80077cc:	080077dd 	.word	0x080077dd
 80077d0:	080077dd 	.word	0x080077dd
 80077d4:	08007885 	.word	0x08007885
 80077d8:	08007839 	.word	0x08007839
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80077dc:	68ba      	ldr	r2, [r7, #8]
 80077de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077e0:	699b      	ldr	r3, [r3, #24]
 80077e2:	18d1      	adds	r1, r2, r3
 80077e4:	68bb      	ldr	r3, [r7, #8]
 80077e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80077e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80077ea:	f7ff ff67 	bl	80076bc <prvInsertTimerInActiveList>
 80077ee:	4603      	mov	r3, r0
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d047      	beq.n	8007884 <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80077f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80077fa:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80077fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077fe:	69db      	ldr	r3, [r3, #28]
 8007800:	2b01      	cmp	r3, #1
 8007802:	d13f      	bne.n	8007884 <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007804:	68ba      	ldr	r2, [r7, #8]
 8007806:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007808:	699b      	ldr	r3, [r3, #24]
 800780a:	441a      	add	r2, r3
 800780c:	2300      	movs	r3, #0
 800780e:	9300      	str	r3, [sp, #0]
 8007810:	2300      	movs	r3, #0
 8007812:	2100      	movs	r1, #0
 8007814:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007816:	f7ff fe1f 	bl	8007458 <xTimerGenericCommand>
 800781a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800781c:	6a3b      	ldr	r3, [r7, #32]
 800781e:	2b00      	cmp	r3, #0
 8007820:	d130      	bne.n	8007884 <prvProcessReceivedCommands+0x144>
	__asm volatile
 8007822:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007826:	f383 8811 	msr	BASEPRI, r3
 800782a:	f3bf 8f6f 	isb	sy
 800782e:	f3bf 8f4f 	dsb	sy
 8007832:	61bb      	str	r3, [r7, #24]
}
 8007834:	bf00      	nop
 8007836:	e7fe      	b.n	8007836 <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007838:	68ba      	ldr	r2, [r7, #8]
 800783a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800783c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800783e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007840:	699b      	ldr	r3, [r3, #24]
 8007842:	2b00      	cmp	r3, #0
 8007844:	d10a      	bne.n	800785c <prvProcessReceivedCommands+0x11c>
	__asm volatile
 8007846:	f04f 0350 	mov.w	r3, #80	; 0x50
 800784a:	f383 8811 	msr	BASEPRI, r3
 800784e:	f3bf 8f6f 	isb	sy
 8007852:	f3bf 8f4f 	dsb	sy
 8007856:	617b      	str	r3, [r7, #20]
}
 8007858:	bf00      	nop
 800785a:	e7fe      	b.n	800785a <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800785c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800785e:	699a      	ldr	r2, [r3, #24]
 8007860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007862:	18d1      	adds	r1, r2, r3
 8007864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007866:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007868:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800786a:	f7ff ff27 	bl	80076bc <prvInsertTimerInActiveList>
					break;
 800786e:	e009      	b.n	8007884 <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8007870:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007872:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007876:	2b00      	cmp	r3, #0
 8007878:	d104      	bne.n	8007884 <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 800787a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800787c:	f000 fbc8 	bl	8008010 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007880:	e000      	b.n	8007884 <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
 8007882:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007884:	4b07      	ldr	r3, [pc, #28]	; (80078a4 <prvProcessReceivedCommands+0x164>)
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	1d39      	adds	r1, r7, #4
 800788a:	2200      	movs	r2, #0
 800788c:	4618      	mov	r0, r3
 800788e:	f7fe f955 	bl	8005b3c <xQueueReceive>
 8007892:	4603      	mov	r3, r0
 8007894:	2b00      	cmp	r3, #0
 8007896:	f47f af57 	bne.w	8007748 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800789a:	bf00      	nop
 800789c:	bf00      	nop
 800789e:	3730      	adds	r7, #48	; 0x30
 80078a0:	46bd      	mov	sp, r7
 80078a2:	bd80      	pop	{r7, pc}
 80078a4:	20000ea4 	.word	0x20000ea4

080078a8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80078a8:	b580      	push	{r7, lr}
 80078aa:	b088      	sub	sp, #32
 80078ac:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80078ae:	e045      	b.n	800793c <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80078b0:	4b2c      	ldr	r3, [pc, #176]	; (8007964 <prvSwitchTimerLists+0xbc>)
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	68db      	ldr	r3, [r3, #12]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80078ba:	4b2a      	ldr	r3, [pc, #168]	; (8007964 <prvSwitchTimerLists+0xbc>)
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	68db      	ldr	r3, [r3, #12]
 80078c0:	68db      	ldr	r3, [r3, #12]
 80078c2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	3304      	adds	r3, #4
 80078c8:	4618      	mov	r0, r3
 80078ca:	f7fd fd3f 	bl	800534c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078d2:	68f8      	ldr	r0, [r7, #12]
 80078d4:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	69db      	ldr	r3, [r3, #28]
 80078da:	2b01      	cmp	r3, #1
 80078dc:	d12e      	bne.n	800793c <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	699b      	ldr	r3, [r3, #24]
 80078e2:	693a      	ldr	r2, [r7, #16]
 80078e4:	4413      	add	r3, r2
 80078e6:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80078e8:	68ba      	ldr	r2, [r7, #8]
 80078ea:	693b      	ldr	r3, [r7, #16]
 80078ec:	429a      	cmp	r2, r3
 80078ee:	d90e      	bls.n	800790e <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	68ba      	ldr	r2, [r7, #8]
 80078f4:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	68fa      	ldr	r2, [r7, #12]
 80078fa:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80078fc:	4b19      	ldr	r3, [pc, #100]	; (8007964 <prvSwitchTimerLists+0xbc>)
 80078fe:	681a      	ldr	r2, [r3, #0]
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	3304      	adds	r3, #4
 8007904:	4619      	mov	r1, r3
 8007906:	4610      	mov	r0, r2
 8007908:	f7fd fce7 	bl	80052da <vListInsert>
 800790c:	e016      	b.n	800793c <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800790e:	2300      	movs	r3, #0
 8007910:	9300      	str	r3, [sp, #0]
 8007912:	2300      	movs	r3, #0
 8007914:	693a      	ldr	r2, [r7, #16]
 8007916:	2100      	movs	r1, #0
 8007918:	68f8      	ldr	r0, [r7, #12]
 800791a:	f7ff fd9d 	bl	8007458 <xTimerGenericCommand>
 800791e:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	2b00      	cmp	r3, #0
 8007924:	d10a      	bne.n	800793c <prvSwitchTimerLists+0x94>
	__asm volatile
 8007926:	f04f 0350 	mov.w	r3, #80	; 0x50
 800792a:	f383 8811 	msr	BASEPRI, r3
 800792e:	f3bf 8f6f 	isb	sy
 8007932:	f3bf 8f4f 	dsb	sy
 8007936:	603b      	str	r3, [r7, #0]
}
 8007938:	bf00      	nop
 800793a:	e7fe      	b.n	800793a <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800793c:	4b09      	ldr	r3, [pc, #36]	; (8007964 <prvSwitchTimerLists+0xbc>)
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	2b00      	cmp	r3, #0
 8007944:	d1b4      	bne.n	80078b0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007946:	4b07      	ldr	r3, [pc, #28]	; (8007964 <prvSwitchTimerLists+0xbc>)
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800794c:	4b06      	ldr	r3, [pc, #24]	; (8007968 <prvSwitchTimerLists+0xc0>)
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	4a04      	ldr	r2, [pc, #16]	; (8007964 <prvSwitchTimerLists+0xbc>)
 8007952:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007954:	4a04      	ldr	r2, [pc, #16]	; (8007968 <prvSwitchTimerLists+0xc0>)
 8007956:	697b      	ldr	r3, [r7, #20]
 8007958:	6013      	str	r3, [r2, #0]
}
 800795a:	bf00      	nop
 800795c:	3718      	adds	r7, #24
 800795e:	46bd      	mov	sp, r7
 8007960:	bd80      	pop	{r7, pc}
 8007962:	bf00      	nop
 8007964:	20000e9c 	.word	0x20000e9c
 8007968:	20000ea0 	.word	0x20000ea0

0800796c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800796c:	b580      	push	{r7, lr}
 800796e:	b082      	sub	sp, #8
 8007970:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007972:	f000 f967 	bl	8007c44 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007976:	4b15      	ldr	r3, [pc, #84]	; (80079cc <prvCheckForValidListAndQueue+0x60>)
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	2b00      	cmp	r3, #0
 800797c:	d120      	bne.n	80079c0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800797e:	4814      	ldr	r0, [pc, #80]	; (80079d0 <prvCheckForValidListAndQueue+0x64>)
 8007980:	f7fd fc5a 	bl	8005238 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007984:	4813      	ldr	r0, [pc, #76]	; (80079d4 <prvCheckForValidListAndQueue+0x68>)
 8007986:	f7fd fc57 	bl	8005238 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800798a:	4b13      	ldr	r3, [pc, #76]	; (80079d8 <prvCheckForValidListAndQueue+0x6c>)
 800798c:	4a10      	ldr	r2, [pc, #64]	; (80079d0 <prvCheckForValidListAndQueue+0x64>)
 800798e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007990:	4b12      	ldr	r3, [pc, #72]	; (80079dc <prvCheckForValidListAndQueue+0x70>)
 8007992:	4a10      	ldr	r2, [pc, #64]	; (80079d4 <prvCheckForValidListAndQueue+0x68>)
 8007994:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007996:	2300      	movs	r3, #0
 8007998:	9300      	str	r3, [sp, #0]
 800799a:	4b11      	ldr	r3, [pc, #68]	; (80079e0 <prvCheckForValidListAndQueue+0x74>)
 800799c:	4a11      	ldr	r2, [pc, #68]	; (80079e4 <prvCheckForValidListAndQueue+0x78>)
 800799e:	2110      	movs	r1, #16
 80079a0:	200a      	movs	r0, #10
 80079a2:	f7fd fd65 	bl	8005470 <xQueueGenericCreateStatic>
 80079a6:	4603      	mov	r3, r0
 80079a8:	4a08      	ldr	r2, [pc, #32]	; (80079cc <prvCheckForValidListAndQueue+0x60>)
 80079aa:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80079ac:	4b07      	ldr	r3, [pc, #28]	; (80079cc <prvCheckForValidListAndQueue+0x60>)
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d005      	beq.n	80079c0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80079b4:	4b05      	ldr	r3, [pc, #20]	; (80079cc <prvCheckForValidListAndQueue+0x60>)
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	490b      	ldr	r1, [pc, #44]	; (80079e8 <prvCheckForValidListAndQueue+0x7c>)
 80079ba:	4618      	mov	r0, r3
 80079bc:	f7fe fc76 	bl	80062ac <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80079c0:	f000 f970 	bl	8007ca4 <vPortExitCritical>
}
 80079c4:	bf00      	nop
 80079c6:	46bd      	mov	sp, r7
 80079c8:	bd80      	pop	{r7, pc}
 80079ca:	bf00      	nop
 80079cc:	20000ea4 	.word	0x20000ea4
 80079d0:	20000e74 	.word	0x20000e74
 80079d4:	20000e88 	.word	0x20000e88
 80079d8:	20000e9c 	.word	0x20000e9c
 80079dc:	20000ea0 	.word	0x20000ea0
 80079e0:	20000f50 	.word	0x20000f50
 80079e4:	20000eb0 	.word	0x20000eb0
 80079e8:	08008300 	.word	0x08008300

080079ec <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80079ec:	b480      	push	{r7}
 80079ee:	b085      	sub	sp, #20
 80079f0:	af00      	add	r7, sp, #0
 80079f2:	60f8      	str	r0, [r7, #12]
 80079f4:	60b9      	str	r1, [r7, #8]
 80079f6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	3b04      	subs	r3, #4
 80079fc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007a04:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	3b04      	subs	r3, #4
 8007a0a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007a0c:	68bb      	ldr	r3, [r7, #8]
 8007a0e:	f023 0201 	bic.w	r2, r3, #1
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	3b04      	subs	r3, #4
 8007a1a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007a1c:	4a0c      	ldr	r2, [pc, #48]	; (8007a50 <pxPortInitialiseStack+0x64>)
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	3b14      	subs	r3, #20
 8007a26:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007a28:	687a      	ldr	r2, [r7, #4]
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	3b04      	subs	r3, #4
 8007a32:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	f06f 0202 	mvn.w	r2, #2
 8007a3a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	3b20      	subs	r3, #32
 8007a40:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007a42:	68fb      	ldr	r3, [r7, #12]
}
 8007a44:	4618      	mov	r0, r3
 8007a46:	3714      	adds	r7, #20
 8007a48:	46bd      	mov	sp, r7
 8007a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a4e:	4770      	bx	lr
 8007a50:	08007a55 	.word	0x08007a55

08007a54 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007a54:	b480      	push	{r7}
 8007a56:	b085      	sub	sp, #20
 8007a58:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007a5a:	2300      	movs	r3, #0
 8007a5c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007a5e:	4b12      	ldr	r3, [pc, #72]	; (8007aa8 <prvTaskExitError+0x54>)
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a66:	d00a      	beq.n	8007a7e <prvTaskExitError+0x2a>
	__asm volatile
 8007a68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a6c:	f383 8811 	msr	BASEPRI, r3
 8007a70:	f3bf 8f6f 	isb	sy
 8007a74:	f3bf 8f4f 	dsb	sy
 8007a78:	60fb      	str	r3, [r7, #12]
}
 8007a7a:	bf00      	nop
 8007a7c:	e7fe      	b.n	8007a7c <prvTaskExitError+0x28>
	__asm volatile
 8007a7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a82:	f383 8811 	msr	BASEPRI, r3
 8007a86:	f3bf 8f6f 	isb	sy
 8007a8a:	f3bf 8f4f 	dsb	sy
 8007a8e:	60bb      	str	r3, [r7, #8]
}
 8007a90:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007a92:	bf00      	nop
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d0fc      	beq.n	8007a94 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007a9a:	bf00      	nop
 8007a9c:	bf00      	nop
 8007a9e:	3714      	adds	r7, #20
 8007aa0:	46bd      	mov	sp, r7
 8007aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa6:	4770      	bx	lr
 8007aa8:	20000078 	.word	0x20000078
 8007aac:	00000000 	.word	0x00000000

08007ab0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007ab0:	4b07      	ldr	r3, [pc, #28]	; (8007ad0 <pxCurrentTCBConst2>)
 8007ab2:	6819      	ldr	r1, [r3, #0]
 8007ab4:	6808      	ldr	r0, [r1, #0]
 8007ab6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007aba:	f380 8809 	msr	PSP, r0
 8007abe:	f3bf 8f6f 	isb	sy
 8007ac2:	f04f 0000 	mov.w	r0, #0
 8007ac6:	f380 8811 	msr	BASEPRI, r0
 8007aca:	4770      	bx	lr
 8007acc:	f3af 8000 	nop.w

08007ad0 <pxCurrentTCBConst2>:
 8007ad0:	20000974 	.word	0x20000974
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007ad4:	bf00      	nop
 8007ad6:	bf00      	nop

08007ad8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007ad8:	4808      	ldr	r0, [pc, #32]	; (8007afc <prvPortStartFirstTask+0x24>)
 8007ada:	6800      	ldr	r0, [r0, #0]
 8007adc:	6800      	ldr	r0, [r0, #0]
 8007ade:	f380 8808 	msr	MSP, r0
 8007ae2:	f04f 0000 	mov.w	r0, #0
 8007ae6:	f380 8814 	msr	CONTROL, r0
 8007aea:	b662      	cpsie	i
 8007aec:	b661      	cpsie	f
 8007aee:	f3bf 8f4f 	dsb	sy
 8007af2:	f3bf 8f6f 	isb	sy
 8007af6:	df00      	svc	0
 8007af8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007afa:	bf00      	nop
 8007afc:	e000ed08 	.word	0xe000ed08

08007b00 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007b00:	b580      	push	{r7, lr}
 8007b02:	b086      	sub	sp, #24
 8007b04:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007b06:	4b46      	ldr	r3, [pc, #280]	; (8007c20 <xPortStartScheduler+0x120>)
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	4a46      	ldr	r2, [pc, #280]	; (8007c24 <xPortStartScheduler+0x124>)
 8007b0c:	4293      	cmp	r3, r2
 8007b0e:	d10a      	bne.n	8007b26 <xPortStartScheduler+0x26>
	__asm volatile
 8007b10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b14:	f383 8811 	msr	BASEPRI, r3
 8007b18:	f3bf 8f6f 	isb	sy
 8007b1c:	f3bf 8f4f 	dsb	sy
 8007b20:	613b      	str	r3, [r7, #16]
}
 8007b22:	bf00      	nop
 8007b24:	e7fe      	b.n	8007b24 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007b26:	4b3e      	ldr	r3, [pc, #248]	; (8007c20 <xPortStartScheduler+0x120>)
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	4a3f      	ldr	r2, [pc, #252]	; (8007c28 <xPortStartScheduler+0x128>)
 8007b2c:	4293      	cmp	r3, r2
 8007b2e:	d10a      	bne.n	8007b46 <xPortStartScheduler+0x46>
	__asm volatile
 8007b30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b34:	f383 8811 	msr	BASEPRI, r3
 8007b38:	f3bf 8f6f 	isb	sy
 8007b3c:	f3bf 8f4f 	dsb	sy
 8007b40:	60fb      	str	r3, [r7, #12]
}
 8007b42:	bf00      	nop
 8007b44:	e7fe      	b.n	8007b44 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007b46:	4b39      	ldr	r3, [pc, #228]	; (8007c2c <xPortStartScheduler+0x12c>)
 8007b48:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007b4a:	697b      	ldr	r3, [r7, #20]
 8007b4c:	781b      	ldrb	r3, [r3, #0]
 8007b4e:	b2db      	uxtb	r3, r3
 8007b50:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007b52:	697b      	ldr	r3, [r7, #20]
 8007b54:	22ff      	movs	r2, #255	; 0xff
 8007b56:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007b58:	697b      	ldr	r3, [r7, #20]
 8007b5a:	781b      	ldrb	r3, [r3, #0]
 8007b5c:	b2db      	uxtb	r3, r3
 8007b5e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007b60:	78fb      	ldrb	r3, [r7, #3]
 8007b62:	b2db      	uxtb	r3, r3
 8007b64:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007b68:	b2da      	uxtb	r2, r3
 8007b6a:	4b31      	ldr	r3, [pc, #196]	; (8007c30 <xPortStartScheduler+0x130>)
 8007b6c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007b6e:	4b31      	ldr	r3, [pc, #196]	; (8007c34 <xPortStartScheduler+0x134>)
 8007b70:	2207      	movs	r2, #7
 8007b72:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007b74:	e009      	b.n	8007b8a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007b76:	4b2f      	ldr	r3, [pc, #188]	; (8007c34 <xPortStartScheduler+0x134>)
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	3b01      	subs	r3, #1
 8007b7c:	4a2d      	ldr	r2, [pc, #180]	; (8007c34 <xPortStartScheduler+0x134>)
 8007b7e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007b80:	78fb      	ldrb	r3, [r7, #3]
 8007b82:	b2db      	uxtb	r3, r3
 8007b84:	005b      	lsls	r3, r3, #1
 8007b86:	b2db      	uxtb	r3, r3
 8007b88:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007b8a:	78fb      	ldrb	r3, [r7, #3]
 8007b8c:	b2db      	uxtb	r3, r3
 8007b8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b92:	2b80      	cmp	r3, #128	; 0x80
 8007b94:	d0ef      	beq.n	8007b76 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007b96:	4b27      	ldr	r3, [pc, #156]	; (8007c34 <xPortStartScheduler+0x134>)
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	f1c3 0307 	rsb	r3, r3, #7
 8007b9e:	2b04      	cmp	r3, #4
 8007ba0:	d00a      	beq.n	8007bb8 <xPortStartScheduler+0xb8>
	__asm volatile
 8007ba2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ba6:	f383 8811 	msr	BASEPRI, r3
 8007baa:	f3bf 8f6f 	isb	sy
 8007bae:	f3bf 8f4f 	dsb	sy
 8007bb2:	60bb      	str	r3, [r7, #8]
}
 8007bb4:	bf00      	nop
 8007bb6:	e7fe      	b.n	8007bb6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007bb8:	4b1e      	ldr	r3, [pc, #120]	; (8007c34 <xPortStartScheduler+0x134>)
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	021b      	lsls	r3, r3, #8
 8007bbe:	4a1d      	ldr	r2, [pc, #116]	; (8007c34 <xPortStartScheduler+0x134>)
 8007bc0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007bc2:	4b1c      	ldr	r3, [pc, #112]	; (8007c34 <xPortStartScheduler+0x134>)
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007bca:	4a1a      	ldr	r2, [pc, #104]	; (8007c34 <xPortStartScheduler+0x134>)
 8007bcc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	b2da      	uxtb	r2, r3
 8007bd2:	697b      	ldr	r3, [r7, #20]
 8007bd4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007bd6:	4b18      	ldr	r3, [pc, #96]	; (8007c38 <xPortStartScheduler+0x138>)
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	4a17      	ldr	r2, [pc, #92]	; (8007c38 <xPortStartScheduler+0x138>)
 8007bdc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007be0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007be2:	4b15      	ldr	r3, [pc, #84]	; (8007c38 <xPortStartScheduler+0x138>)
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	4a14      	ldr	r2, [pc, #80]	; (8007c38 <xPortStartScheduler+0x138>)
 8007be8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007bec:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007bee:	f000 f8dd 	bl	8007dac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007bf2:	4b12      	ldr	r3, [pc, #72]	; (8007c3c <xPortStartScheduler+0x13c>)
 8007bf4:	2200      	movs	r2, #0
 8007bf6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007bf8:	f000 f8fc 	bl	8007df4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007bfc:	4b10      	ldr	r3, [pc, #64]	; (8007c40 <xPortStartScheduler+0x140>)
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	4a0f      	ldr	r2, [pc, #60]	; (8007c40 <xPortStartScheduler+0x140>)
 8007c02:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007c06:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007c08:	f7ff ff66 	bl	8007ad8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007c0c:	f7fe ff82 	bl	8006b14 <vTaskSwitchContext>
	prvTaskExitError();
 8007c10:	f7ff ff20 	bl	8007a54 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007c14:	2300      	movs	r3, #0
}
 8007c16:	4618      	mov	r0, r3
 8007c18:	3718      	adds	r7, #24
 8007c1a:	46bd      	mov	sp, r7
 8007c1c:	bd80      	pop	{r7, pc}
 8007c1e:	bf00      	nop
 8007c20:	e000ed00 	.word	0xe000ed00
 8007c24:	410fc271 	.word	0x410fc271
 8007c28:	410fc270 	.word	0x410fc270
 8007c2c:	e000e400 	.word	0xe000e400
 8007c30:	20000fa0 	.word	0x20000fa0
 8007c34:	20000fa4 	.word	0x20000fa4
 8007c38:	e000ed20 	.word	0xe000ed20
 8007c3c:	20000078 	.word	0x20000078
 8007c40:	e000ef34 	.word	0xe000ef34

08007c44 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007c44:	b480      	push	{r7}
 8007c46:	b083      	sub	sp, #12
 8007c48:	af00      	add	r7, sp, #0
	__asm volatile
 8007c4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c4e:	f383 8811 	msr	BASEPRI, r3
 8007c52:	f3bf 8f6f 	isb	sy
 8007c56:	f3bf 8f4f 	dsb	sy
 8007c5a:	607b      	str	r3, [r7, #4]
}
 8007c5c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007c5e:	4b0f      	ldr	r3, [pc, #60]	; (8007c9c <vPortEnterCritical+0x58>)
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	3301      	adds	r3, #1
 8007c64:	4a0d      	ldr	r2, [pc, #52]	; (8007c9c <vPortEnterCritical+0x58>)
 8007c66:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007c68:	4b0c      	ldr	r3, [pc, #48]	; (8007c9c <vPortEnterCritical+0x58>)
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	2b01      	cmp	r3, #1
 8007c6e:	d10f      	bne.n	8007c90 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007c70:	4b0b      	ldr	r3, [pc, #44]	; (8007ca0 <vPortEnterCritical+0x5c>)
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	b2db      	uxtb	r3, r3
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d00a      	beq.n	8007c90 <vPortEnterCritical+0x4c>
	__asm volatile
 8007c7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c7e:	f383 8811 	msr	BASEPRI, r3
 8007c82:	f3bf 8f6f 	isb	sy
 8007c86:	f3bf 8f4f 	dsb	sy
 8007c8a:	603b      	str	r3, [r7, #0]
}
 8007c8c:	bf00      	nop
 8007c8e:	e7fe      	b.n	8007c8e <vPortEnterCritical+0x4a>
	}
}
 8007c90:	bf00      	nop
 8007c92:	370c      	adds	r7, #12
 8007c94:	46bd      	mov	sp, r7
 8007c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c9a:	4770      	bx	lr
 8007c9c:	20000078 	.word	0x20000078
 8007ca0:	e000ed04 	.word	0xe000ed04

08007ca4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007ca4:	b480      	push	{r7}
 8007ca6:	b083      	sub	sp, #12
 8007ca8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007caa:	4b12      	ldr	r3, [pc, #72]	; (8007cf4 <vPortExitCritical+0x50>)
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d10a      	bne.n	8007cc8 <vPortExitCritical+0x24>
	__asm volatile
 8007cb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cb6:	f383 8811 	msr	BASEPRI, r3
 8007cba:	f3bf 8f6f 	isb	sy
 8007cbe:	f3bf 8f4f 	dsb	sy
 8007cc2:	607b      	str	r3, [r7, #4]
}
 8007cc4:	bf00      	nop
 8007cc6:	e7fe      	b.n	8007cc6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007cc8:	4b0a      	ldr	r3, [pc, #40]	; (8007cf4 <vPortExitCritical+0x50>)
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	3b01      	subs	r3, #1
 8007cce:	4a09      	ldr	r2, [pc, #36]	; (8007cf4 <vPortExitCritical+0x50>)
 8007cd0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007cd2:	4b08      	ldr	r3, [pc, #32]	; (8007cf4 <vPortExitCritical+0x50>)
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d105      	bne.n	8007ce6 <vPortExitCritical+0x42>
 8007cda:	2300      	movs	r3, #0
 8007cdc:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007cde:	683b      	ldr	r3, [r7, #0]
 8007ce0:	f383 8811 	msr	BASEPRI, r3
}
 8007ce4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007ce6:	bf00      	nop
 8007ce8:	370c      	adds	r7, #12
 8007cea:	46bd      	mov	sp, r7
 8007cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf0:	4770      	bx	lr
 8007cf2:	bf00      	nop
 8007cf4:	20000078 	.word	0x20000078
	...

08007d00 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007d00:	f3ef 8009 	mrs	r0, PSP
 8007d04:	f3bf 8f6f 	isb	sy
 8007d08:	4b15      	ldr	r3, [pc, #84]	; (8007d60 <pxCurrentTCBConst>)
 8007d0a:	681a      	ldr	r2, [r3, #0]
 8007d0c:	f01e 0f10 	tst.w	lr, #16
 8007d10:	bf08      	it	eq
 8007d12:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007d16:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d1a:	6010      	str	r0, [r2, #0]
 8007d1c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007d20:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007d24:	f380 8811 	msr	BASEPRI, r0
 8007d28:	f3bf 8f4f 	dsb	sy
 8007d2c:	f3bf 8f6f 	isb	sy
 8007d30:	f7fe fef0 	bl	8006b14 <vTaskSwitchContext>
 8007d34:	f04f 0000 	mov.w	r0, #0
 8007d38:	f380 8811 	msr	BASEPRI, r0
 8007d3c:	bc09      	pop	{r0, r3}
 8007d3e:	6819      	ldr	r1, [r3, #0]
 8007d40:	6808      	ldr	r0, [r1, #0]
 8007d42:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d46:	f01e 0f10 	tst.w	lr, #16
 8007d4a:	bf08      	it	eq
 8007d4c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007d50:	f380 8809 	msr	PSP, r0
 8007d54:	f3bf 8f6f 	isb	sy
 8007d58:	4770      	bx	lr
 8007d5a:	bf00      	nop
 8007d5c:	f3af 8000 	nop.w

08007d60 <pxCurrentTCBConst>:
 8007d60:	20000974 	.word	0x20000974
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007d64:	bf00      	nop
 8007d66:	bf00      	nop

08007d68 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007d68:	b580      	push	{r7, lr}
 8007d6a:	b082      	sub	sp, #8
 8007d6c:	af00      	add	r7, sp, #0
	__asm volatile
 8007d6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d72:	f383 8811 	msr	BASEPRI, r3
 8007d76:	f3bf 8f6f 	isb	sy
 8007d7a:	f3bf 8f4f 	dsb	sy
 8007d7e:	607b      	str	r3, [r7, #4]
}
 8007d80:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007d82:	f7fe fe09 	bl	8006998 <xTaskIncrementTick>
 8007d86:	4603      	mov	r3, r0
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d003      	beq.n	8007d94 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007d8c:	4b06      	ldr	r3, [pc, #24]	; (8007da8 <SysTick_Handler+0x40>)
 8007d8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007d92:	601a      	str	r2, [r3, #0]
 8007d94:	2300      	movs	r3, #0
 8007d96:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007d98:	683b      	ldr	r3, [r7, #0]
 8007d9a:	f383 8811 	msr	BASEPRI, r3
}
 8007d9e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007da0:	bf00      	nop
 8007da2:	3708      	adds	r7, #8
 8007da4:	46bd      	mov	sp, r7
 8007da6:	bd80      	pop	{r7, pc}
 8007da8:	e000ed04 	.word	0xe000ed04

08007dac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007dac:	b480      	push	{r7}
 8007dae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007db0:	4b0b      	ldr	r3, [pc, #44]	; (8007de0 <vPortSetupTimerInterrupt+0x34>)
 8007db2:	2200      	movs	r2, #0
 8007db4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007db6:	4b0b      	ldr	r3, [pc, #44]	; (8007de4 <vPortSetupTimerInterrupt+0x38>)
 8007db8:	2200      	movs	r2, #0
 8007dba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007dbc:	4b0a      	ldr	r3, [pc, #40]	; (8007de8 <vPortSetupTimerInterrupt+0x3c>)
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	4a0a      	ldr	r2, [pc, #40]	; (8007dec <vPortSetupTimerInterrupt+0x40>)
 8007dc2:	fba2 2303 	umull	r2, r3, r2, r3
 8007dc6:	099b      	lsrs	r3, r3, #6
 8007dc8:	4a09      	ldr	r2, [pc, #36]	; (8007df0 <vPortSetupTimerInterrupt+0x44>)
 8007dca:	3b01      	subs	r3, #1
 8007dcc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007dce:	4b04      	ldr	r3, [pc, #16]	; (8007de0 <vPortSetupTimerInterrupt+0x34>)
 8007dd0:	2207      	movs	r2, #7
 8007dd2:	601a      	str	r2, [r3, #0]
}
 8007dd4:	bf00      	nop
 8007dd6:	46bd      	mov	sp, r7
 8007dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ddc:	4770      	bx	lr
 8007dde:	bf00      	nop
 8007de0:	e000e010 	.word	0xe000e010
 8007de4:	e000e018 	.word	0xe000e018
 8007de8:	2000006c 	.word	0x2000006c
 8007dec:	10624dd3 	.word	0x10624dd3
 8007df0:	e000e014 	.word	0xe000e014

08007df4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007df4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007e04 <vPortEnableVFP+0x10>
 8007df8:	6801      	ldr	r1, [r0, #0]
 8007dfa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8007dfe:	6001      	str	r1, [r0, #0]
 8007e00:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007e02:	bf00      	nop
 8007e04:	e000ed88 	.word	0xe000ed88

08007e08 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007e08:	b480      	push	{r7}
 8007e0a:	b085      	sub	sp, #20
 8007e0c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007e0e:	f3ef 8305 	mrs	r3, IPSR
 8007e12:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	2b0f      	cmp	r3, #15
 8007e18:	d914      	bls.n	8007e44 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007e1a:	4a17      	ldr	r2, [pc, #92]	; (8007e78 <vPortValidateInterruptPriority+0x70>)
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	4413      	add	r3, r2
 8007e20:	781b      	ldrb	r3, [r3, #0]
 8007e22:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007e24:	4b15      	ldr	r3, [pc, #84]	; (8007e7c <vPortValidateInterruptPriority+0x74>)
 8007e26:	781b      	ldrb	r3, [r3, #0]
 8007e28:	7afa      	ldrb	r2, [r7, #11]
 8007e2a:	429a      	cmp	r2, r3
 8007e2c:	d20a      	bcs.n	8007e44 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8007e2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e32:	f383 8811 	msr	BASEPRI, r3
 8007e36:	f3bf 8f6f 	isb	sy
 8007e3a:	f3bf 8f4f 	dsb	sy
 8007e3e:	607b      	str	r3, [r7, #4]
}
 8007e40:	bf00      	nop
 8007e42:	e7fe      	b.n	8007e42 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007e44:	4b0e      	ldr	r3, [pc, #56]	; (8007e80 <vPortValidateInterruptPriority+0x78>)
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007e4c:	4b0d      	ldr	r3, [pc, #52]	; (8007e84 <vPortValidateInterruptPriority+0x7c>)
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	429a      	cmp	r2, r3
 8007e52:	d90a      	bls.n	8007e6a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8007e54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e58:	f383 8811 	msr	BASEPRI, r3
 8007e5c:	f3bf 8f6f 	isb	sy
 8007e60:	f3bf 8f4f 	dsb	sy
 8007e64:	603b      	str	r3, [r7, #0]
}
 8007e66:	bf00      	nop
 8007e68:	e7fe      	b.n	8007e68 <vPortValidateInterruptPriority+0x60>
	}
 8007e6a:	bf00      	nop
 8007e6c:	3714      	adds	r7, #20
 8007e6e:	46bd      	mov	sp, r7
 8007e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e74:	4770      	bx	lr
 8007e76:	bf00      	nop
 8007e78:	e000e3f0 	.word	0xe000e3f0
 8007e7c:	20000fa0 	.word	0x20000fa0
 8007e80:	e000ed0c 	.word	0xe000ed0c
 8007e84:	20000fa4 	.word	0x20000fa4

08007e88 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007e88:	b580      	push	{r7, lr}
 8007e8a:	b08a      	sub	sp, #40	; 0x28
 8007e8c:	af00      	add	r7, sp, #0
 8007e8e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007e90:	2300      	movs	r3, #0
 8007e92:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007e94:	f7fe fcc4 	bl	8006820 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007e98:	4b58      	ldr	r3, [pc, #352]	; (8007ffc <pvPortMalloc+0x174>)
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d101      	bne.n	8007ea4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007ea0:	f000 f910 	bl	80080c4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007ea4:	4b56      	ldr	r3, [pc, #344]	; (8008000 <pvPortMalloc+0x178>)
 8007ea6:	681a      	ldr	r2, [r3, #0]
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	4013      	ands	r3, r2
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	f040 808e 	bne.w	8007fce <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d01d      	beq.n	8007ef4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8007eb8:	2208      	movs	r2, #8
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	4413      	add	r3, r2
 8007ebe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	f003 0307 	and.w	r3, r3, #7
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d014      	beq.n	8007ef4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	f023 0307 	bic.w	r3, r3, #7
 8007ed0:	3308      	adds	r3, #8
 8007ed2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	f003 0307 	and.w	r3, r3, #7
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d00a      	beq.n	8007ef4 <pvPortMalloc+0x6c>
	__asm volatile
 8007ede:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ee2:	f383 8811 	msr	BASEPRI, r3
 8007ee6:	f3bf 8f6f 	isb	sy
 8007eea:	f3bf 8f4f 	dsb	sy
 8007eee:	617b      	str	r3, [r7, #20]
}
 8007ef0:	bf00      	nop
 8007ef2:	e7fe      	b.n	8007ef2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d069      	beq.n	8007fce <pvPortMalloc+0x146>
 8007efa:	4b42      	ldr	r3, [pc, #264]	; (8008004 <pvPortMalloc+0x17c>)
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	687a      	ldr	r2, [r7, #4]
 8007f00:	429a      	cmp	r2, r3
 8007f02:	d864      	bhi.n	8007fce <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007f04:	4b40      	ldr	r3, [pc, #256]	; (8008008 <pvPortMalloc+0x180>)
 8007f06:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007f08:	4b3f      	ldr	r3, [pc, #252]	; (8008008 <pvPortMalloc+0x180>)
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007f0e:	e004      	b.n	8007f1a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f12:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f1c:	685b      	ldr	r3, [r3, #4]
 8007f1e:	687a      	ldr	r2, [r7, #4]
 8007f20:	429a      	cmp	r2, r3
 8007f22:	d903      	bls.n	8007f2c <pvPortMalloc+0xa4>
 8007f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d1f1      	bne.n	8007f10 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007f2c:	4b33      	ldr	r3, [pc, #204]	; (8007ffc <pvPortMalloc+0x174>)
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007f32:	429a      	cmp	r2, r3
 8007f34:	d04b      	beq.n	8007fce <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007f36:	6a3b      	ldr	r3, [r7, #32]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	2208      	movs	r2, #8
 8007f3c:	4413      	add	r3, r2
 8007f3e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f42:	681a      	ldr	r2, [r3, #0]
 8007f44:	6a3b      	ldr	r3, [r7, #32]
 8007f46:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f4a:	685a      	ldr	r2, [r3, #4]
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	1ad2      	subs	r2, r2, r3
 8007f50:	2308      	movs	r3, #8
 8007f52:	005b      	lsls	r3, r3, #1
 8007f54:	429a      	cmp	r2, r3
 8007f56:	d91f      	bls.n	8007f98 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007f58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	4413      	add	r3, r2
 8007f5e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007f60:	69bb      	ldr	r3, [r7, #24]
 8007f62:	f003 0307 	and.w	r3, r3, #7
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d00a      	beq.n	8007f80 <pvPortMalloc+0xf8>
	__asm volatile
 8007f6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f6e:	f383 8811 	msr	BASEPRI, r3
 8007f72:	f3bf 8f6f 	isb	sy
 8007f76:	f3bf 8f4f 	dsb	sy
 8007f7a:	613b      	str	r3, [r7, #16]
}
 8007f7c:	bf00      	nop
 8007f7e:	e7fe      	b.n	8007f7e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f82:	685a      	ldr	r2, [r3, #4]
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	1ad2      	subs	r2, r2, r3
 8007f88:	69bb      	ldr	r3, [r7, #24]
 8007f8a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f8e:	687a      	ldr	r2, [r7, #4]
 8007f90:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007f92:	69b8      	ldr	r0, [r7, #24]
 8007f94:	f000 f8f8 	bl	8008188 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007f98:	4b1a      	ldr	r3, [pc, #104]	; (8008004 <pvPortMalloc+0x17c>)
 8007f9a:	681a      	ldr	r2, [r3, #0]
 8007f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f9e:	685b      	ldr	r3, [r3, #4]
 8007fa0:	1ad3      	subs	r3, r2, r3
 8007fa2:	4a18      	ldr	r2, [pc, #96]	; (8008004 <pvPortMalloc+0x17c>)
 8007fa4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007fa6:	4b17      	ldr	r3, [pc, #92]	; (8008004 <pvPortMalloc+0x17c>)
 8007fa8:	681a      	ldr	r2, [r3, #0]
 8007faa:	4b18      	ldr	r3, [pc, #96]	; (800800c <pvPortMalloc+0x184>)
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	429a      	cmp	r2, r3
 8007fb0:	d203      	bcs.n	8007fba <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007fb2:	4b14      	ldr	r3, [pc, #80]	; (8008004 <pvPortMalloc+0x17c>)
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	4a15      	ldr	r2, [pc, #84]	; (800800c <pvPortMalloc+0x184>)
 8007fb8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fbc:	685a      	ldr	r2, [r3, #4]
 8007fbe:	4b10      	ldr	r3, [pc, #64]	; (8008000 <pvPortMalloc+0x178>)
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	431a      	orrs	r2, r3
 8007fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fc6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fca:	2200      	movs	r2, #0
 8007fcc:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007fce:	f7fe fc35 	bl	800683c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007fd2:	69fb      	ldr	r3, [r7, #28]
 8007fd4:	f003 0307 	and.w	r3, r3, #7
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d00a      	beq.n	8007ff2 <pvPortMalloc+0x16a>
	__asm volatile
 8007fdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fe0:	f383 8811 	msr	BASEPRI, r3
 8007fe4:	f3bf 8f6f 	isb	sy
 8007fe8:	f3bf 8f4f 	dsb	sy
 8007fec:	60fb      	str	r3, [r7, #12]
}
 8007fee:	bf00      	nop
 8007ff0:	e7fe      	b.n	8007ff0 <pvPortMalloc+0x168>
	return pvReturn;
 8007ff2:	69fb      	ldr	r3, [r7, #28]
}
 8007ff4:	4618      	mov	r0, r3
 8007ff6:	3728      	adds	r7, #40	; 0x28
 8007ff8:	46bd      	mov	sp, r7
 8007ffa:	bd80      	pop	{r7, pc}
 8007ffc:	20001bb0 	.word	0x20001bb0
 8008000:	20001bbc 	.word	0x20001bbc
 8008004:	20001bb4 	.word	0x20001bb4
 8008008:	20001ba8 	.word	0x20001ba8
 800800c:	20001bb8 	.word	0x20001bb8

08008010 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008010:	b580      	push	{r7, lr}
 8008012:	b086      	sub	sp, #24
 8008014:	af00      	add	r7, sp, #0
 8008016:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	2b00      	cmp	r3, #0
 8008020:	d048      	beq.n	80080b4 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008022:	2308      	movs	r3, #8
 8008024:	425b      	negs	r3, r3
 8008026:	697a      	ldr	r2, [r7, #20]
 8008028:	4413      	add	r3, r2
 800802a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800802c:	697b      	ldr	r3, [r7, #20]
 800802e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008030:	693b      	ldr	r3, [r7, #16]
 8008032:	685a      	ldr	r2, [r3, #4]
 8008034:	4b21      	ldr	r3, [pc, #132]	; (80080bc <vPortFree+0xac>)
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	4013      	ands	r3, r2
 800803a:	2b00      	cmp	r3, #0
 800803c:	d10a      	bne.n	8008054 <vPortFree+0x44>
	__asm volatile
 800803e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008042:	f383 8811 	msr	BASEPRI, r3
 8008046:	f3bf 8f6f 	isb	sy
 800804a:	f3bf 8f4f 	dsb	sy
 800804e:	60fb      	str	r3, [r7, #12]
}
 8008050:	bf00      	nop
 8008052:	e7fe      	b.n	8008052 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008054:	693b      	ldr	r3, [r7, #16]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	2b00      	cmp	r3, #0
 800805a:	d00a      	beq.n	8008072 <vPortFree+0x62>
	__asm volatile
 800805c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008060:	f383 8811 	msr	BASEPRI, r3
 8008064:	f3bf 8f6f 	isb	sy
 8008068:	f3bf 8f4f 	dsb	sy
 800806c:	60bb      	str	r3, [r7, #8]
}
 800806e:	bf00      	nop
 8008070:	e7fe      	b.n	8008070 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008072:	693b      	ldr	r3, [r7, #16]
 8008074:	685a      	ldr	r2, [r3, #4]
 8008076:	4b11      	ldr	r3, [pc, #68]	; (80080bc <vPortFree+0xac>)
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	4013      	ands	r3, r2
 800807c:	2b00      	cmp	r3, #0
 800807e:	d019      	beq.n	80080b4 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008080:	693b      	ldr	r3, [r7, #16]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	2b00      	cmp	r3, #0
 8008086:	d115      	bne.n	80080b4 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008088:	693b      	ldr	r3, [r7, #16]
 800808a:	685a      	ldr	r2, [r3, #4]
 800808c:	4b0b      	ldr	r3, [pc, #44]	; (80080bc <vPortFree+0xac>)
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	43db      	mvns	r3, r3
 8008092:	401a      	ands	r2, r3
 8008094:	693b      	ldr	r3, [r7, #16]
 8008096:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008098:	f7fe fbc2 	bl	8006820 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800809c:	693b      	ldr	r3, [r7, #16]
 800809e:	685a      	ldr	r2, [r3, #4]
 80080a0:	4b07      	ldr	r3, [pc, #28]	; (80080c0 <vPortFree+0xb0>)
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	4413      	add	r3, r2
 80080a6:	4a06      	ldr	r2, [pc, #24]	; (80080c0 <vPortFree+0xb0>)
 80080a8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80080aa:	6938      	ldr	r0, [r7, #16]
 80080ac:	f000 f86c 	bl	8008188 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80080b0:	f7fe fbc4 	bl	800683c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80080b4:	bf00      	nop
 80080b6:	3718      	adds	r7, #24
 80080b8:	46bd      	mov	sp, r7
 80080ba:	bd80      	pop	{r7, pc}
 80080bc:	20001bbc 	.word	0x20001bbc
 80080c0:	20001bb4 	.word	0x20001bb4

080080c4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80080c4:	b480      	push	{r7}
 80080c6:	b085      	sub	sp, #20
 80080c8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80080ca:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80080ce:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80080d0:	4b27      	ldr	r3, [pc, #156]	; (8008170 <prvHeapInit+0xac>)
 80080d2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	f003 0307 	and.w	r3, r3, #7
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d00c      	beq.n	80080f8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	3307      	adds	r3, #7
 80080e2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	f023 0307 	bic.w	r3, r3, #7
 80080ea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80080ec:	68ba      	ldr	r2, [r7, #8]
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	1ad3      	subs	r3, r2, r3
 80080f2:	4a1f      	ldr	r2, [pc, #124]	; (8008170 <prvHeapInit+0xac>)
 80080f4:	4413      	add	r3, r2
 80080f6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80080fc:	4a1d      	ldr	r2, [pc, #116]	; (8008174 <prvHeapInit+0xb0>)
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008102:	4b1c      	ldr	r3, [pc, #112]	; (8008174 <prvHeapInit+0xb0>)
 8008104:	2200      	movs	r2, #0
 8008106:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	68ba      	ldr	r2, [r7, #8]
 800810c:	4413      	add	r3, r2
 800810e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008110:	2208      	movs	r2, #8
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	1a9b      	subs	r3, r3, r2
 8008116:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	f023 0307 	bic.w	r3, r3, #7
 800811e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	4a15      	ldr	r2, [pc, #84]	; (8008178 <prvHeapInit+0xb4>)
 8008124:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008126:	4b14      	ldr	r3, [pc, #80]	; (8008178 <prvHeapInit+0xb4>)
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	2200      	movs	r2, #0
 800812c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800812e:	4b12      	ldr	r3, [pc, #72]	; (8008178 <prvHeapInit+0xb4>)
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	2200      	movs	r2, #0
 8008134:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800813a:	683b      	ldr	r3, [r7, #0]
 800813c:	68fa      	ldr	r2, [r7, #12]
 800813e:	1ad2      	subs	r2, r2, r3
 8008140:	683b      	ldr	r3, [r7, #0]
 8008142:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008144:	4b0c      	ldr	r3, [pc, #48]	; (8008178 <prvHeapInit+0xb4>)
 8008146:	681a      	ldr	r2, [r3, #0]
 8008148:	683b      	ldr	r3, [r7, #0]
 800814a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800814c:	683b      	ldr	r3, [r7, #0]
 800814e:	685b      	ldr	r3, [r3, #4]
 8008150:	4a0a      	ldr	r2, [pc, #40]	; (800817c <prvHeapInit+0xb8>)
 8008152:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008154:	683b      	ldr	r3, [r7, #0]
 8008156:	685b      	ldr	r3, [r3, #4]
 8008158:	4a09      	ldr	r2, [pc, #36]	; (8008180 <prvHeapInit+0xbc>)
 800815a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800815c:	4b09      	ldr	r3, [pc, #36]	; (8008184 <prvHeapInit+0xc0>)
 800815e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008162:	601a      	str	r2, [r3, #0]
}
 8008164:	bf00      	nop
 8008166:	3714      	adds	r7, #20
 8008168:	46bd      	mov	sp, r7
 800816a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800816e:	4770      	bx	lr
 8008170:	20000fa8 	.word	0x20000fa8
 8008174:	20001ba8 	.word	0x20001ba8
 8008178:	20001bb0 	.word	0x20001bb0
 800817c:	20001bb8 	.word	0x20001bb8
 8008180:	20001bb4 	.word	0x20001bb4
 8008184:	20001bbc 	.word	0x20001bbc

08008188 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008188:	b480      	push	{r7}
 800818a:	b085      	sub	sp, #20
 800818c:	af00      	add	r7, sp, #0
 800818e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008190:	4b28      	ldr	r3, [pc, #160]	; (8008234 <prvInsertBlockIntoFreeList+0xac>)
 8008192:	60fb      	str	r3, [r7, #12]
 8008194:	e002      	b.n	800819c <prvInsertBlockIntoFreeList+0x14>
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	60fb      	str	r3, [r7, #12]
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	687a      	ldr	r2, [r7, #4]
 80081a2:	429a      	cmp	r2, r3
 80081a4:	d8f7      	bhi.n	8008196 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	685b      	ldr	r3, [r3, #4]
 80081ae:	68ba      	ldr	r2, [r7, #8]
 80081b0:	4413      	add	r3, r2
 80081b2:	687a      	ldr	r2, [r7, #4]
 80081b4:	429a      	cmp	r2, r3
 80081b6:	d108      	bne.n	80081ca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	685a      	ldr	r2, [r3, #4]
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	685b      	ldr	r3, [r3, #4]
 80081c0:	441a      	add	r2, r3
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	685b      	ldr	r3, [r3, #4]
 80081d2:	68ba      	ldr	r2, [r7, #8]
 80081d4:	441a      	add	r2, r3
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	429a      	cmp	r2, r3
 80081dc:	d118      	bne.n	8008210 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	681a      	ldr	r2, [r3, #0]
 80081e2:	4b15      	ldr	r3, [pc, #84]	; (8008238 <prvInsertBlockIntoFreeList+0xb0>)
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	429a      	cmp	r2, r3
 80081e8:	d00d      	beq.n	8008206 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	685a      	ldr	r2, [r3, #4]
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	685b      	ldr	r3, [r3, #4]
 80081f4:	441a      	add	r2, r3
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	681a      	ldr	r2, [r3, #0]
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	601a      	str	r2, [r3, #0]
 8008204:	e008      	b.n	8008218 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008206:	4b0c      	ldr	r3, [pc, #48]	; (8008238 <prvInsertBlockIntoFreeList+0xb0>)
 8008208:	681a      	ldr	r2, [r3, #0]
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	601a      	str	r2, [r3, #0]
 800820e:	e003      	b.n	8008218 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	681a      	ldr	r2, [r3, #0]
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008218:	68fa      	ldr	r2, [r7, #12]
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	429a      	cmp	r2, r3
 800821e:	d002      	beq.n	8008226 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	687a      	ldr	r2, [r7, #4]
 8008224:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008226:	bf00      	nop
 8008228:	3714      	adds	r7, #20
 800822a:	46bd      	mov	sp, r7
 800822c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008230:	4770      	bx	lr
 8008232:	bf00      	nop
 8008234:	20001ba8 	.word	0x20001ba8
 8008238:	20001bb0 	.word	0x20001bb0

0800823c <memset>:
 800823c:	4402      	add	r2, r0
 800823e:	4603      	mov	r3, r0
 8008240:	4293      	cmp	r3, r2
 8008242:	d100      	bne.n	8008246 <memset+0xa>
 8008244:	4770      	bx	lr
 8008246:	f803 1b01 	strb.w	r1, [r3], #1
 800824a:	e7f9      	b.n	8008240 <memset+0x4>

0800824c <__libc_init_array>:
 800824c:	b570      	push	{r4, r5, r6, lr}
 800824e:	4d0d      	ldr	r5, [pc, #52]	; (8008284 <__libc_init_array+0x38>)
 8008250:	4c0d      	ldr	r4, [pc, #52]	; (8008288 <__libc_init_array+0x3c>)
 8008252:	1b64      	subs	r4, r4, r5
 8008254:	10a4      	asrs	r4, r4, #2
 8008256:	2600      	movs	r6, #0
 8008258:	42a6      	cmp	r6, r4
 800825a:	d109      	bne.n	8008270 <__libc_init_array+0x24>
 800825c:	4d0b      	ldr	r5, [pc, #44]	; (800828c <__libc_init_array+0x40>)
 800825e:	4c0c      	ldr	r4, [pc, #48]	; (8008290 <__libc_init_array+0x44>)
 8008260:	f000 f826 	bl	80082b0 <_init>
 8008264:	1b64      	subs	r4, r4, r5
 8008266:	10a4      	asrs	r4, r4, #2
 8008268:	2600      	movs	r6, #0
 800826a:	42a6      	cmp	r6, r4
 800826c:	d105      	bne.n	800827a <__libc_init_array+0x2e>
 800826e:	bd70      	pop	{r4, r5, r6, pc}
 8008270:	f855 3b04 	ldr.w	r3, [r5], #4
 8008274:	4798      	blx	r3
 8008276:	3601      	adds	r6, #1
 8008278:	e7ee      	b.n	8008258 <__libc_init_array+0xc>
 800827a:	f855 3b04 	ldr.w	r3, [r5], #4
 800827e:	4798      	blx	r3
 8008280:	3601      	adds	r6, #1
 8008282:	e7f2      	b.n	800826a <__libc_init_array+0x1e>
 8008284:	080083bc 	.word	0x080083bc
 8008288:	080083bc 	.word	0x080083bc
 800828c:	080083bc 	.word	0x080083bc
 8008290:	080083c0 	.word	0x080083c0

08008294 <memcpy>:
 8008294:	440a      	add	r2, r1
 8008296:	4291      	cmp	r1, r2
 8008298:	f100 33ff 	add.w	r3, r0, #4294967295
 800829c:	d100      	bne.n	80082a0 <memcpy+0xc>
 800829e:	4770      	bx	lr
 80082a0:	b510      	push	{r4, lr}
 80082a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80082a6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80082aa:	4291      	cmp	r1, r2
 80082ac:	d1f9      	bne.n	80082a2 <memcpy+0xe>
 80082ae:	bd10      	pop	{r4, pc}

080082b0 <_init>:
 80082b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082b2:	bf00      	nop
 80082b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80082b6:	bc08      	pop	{r3}
 80082b8:	469e      	mov	lr, r3
 80082ba:	4770      	bx	lr

080082bc <_fini>:
 80082bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082be:	bf00      	nop
 80082c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80082c2:	bc08      	pop	{r3}
 80082c4:	469e      	mov	lr, r3
 80082c6:	4770      	bx	lr
