
freertos_master.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000078c8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f4  08007a68  08007a68  00017a68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007b5c  08007b5c  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  08007b5c  08007b5c  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007b5c  08007b5c  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007b5c  08007b5c  00017b5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007b60  08007b60  00017b60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08007b64  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020078  2**0
                  CONTENTS
 10 .bss          00001b40  20000078  20000078  00020078  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  20001bb8  20001bb8  00020078  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001c186  00000000  00000000  000200eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000417a  00000000  00000000  0003c271  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001810  00000000  00000000  000403f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000012ac  00000000  00000000  00041c00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00023abc  00000000  00000000  00042eac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001e0a9  00000000  00000000  00066968  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000e3c9d  00000000  00000000  00084a11  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00006494  00000000  00000000  001686b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006e  00000000  00000000  0016eb44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000078 	.word	0x20000078
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007a50 	.word	0x08007a50

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000007c 	.word	0x2000007c
 80001dc:	08007a50 	.word	0x08007a50

080001e0 <crc_append>:
uint64_t crc_key = 0xD;

/**
 * appends 3 zeros to end of data to prepare for division
 */
uint64_t crc_append(uint64_t crc_data){
 80001e0:	b480      	push	{r7}
 80001e2:	b083      	sub	sp, #12
 80001e4:	af00      	add	r7, sp, #0
 80001e6:	e9c7 0100 	strd	r0, r1, [r7]
	return crc_data << 3;
 80001ea:	e9d7 0100 	ldrd	r0, r1, [r7]
 80001ee:	f04f 0200 	mov.w	r2, #0
 80001f2:	f04f 0300 	mov.w	r3, #0
 80001f6:	00cb      	lsls	r3, r1, #3
 80001f8:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80001fc:	00c2      	lsls	r2, r0, #3
}
 80001fe:	4610      	mov	r0, r2
 8000200:	4619      	mov	r1, r3
 8000202:	370c      	adds	r7, #12
 8000204:	46bd      	mov	sp, r7
 8000206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800020a:	4770      	bx	lr

0800020c <crc_xor>:

/**
 * XOR logic used to divide data by key
 */
uint64_t crc_xor(uint64_t div_data){
 800020c:	b4b0      	push	{r4, r5, r7}
 800020e:	b085      	sub	sp, #20
 8000210:	af00      	add	r7, sp, #0
 8000212:	e9c7 0100 	strd	r0, r1, [r7]
	uint64_t ans = div_data;
 8000216:	e9d7 0100 	ldrd	r0, r1, [r7]
 800021a:	e9c7 0102 	strd	r0, r1, [r7, #8]
	if(ans & 0b1000){
 800021e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000222:	f000 0208 	and.w	r2, r0, #8
 8000226:	2300      	movs	r3, #0
 8000228:	4313      	orrs	r3, r2
 800022a:	d00a      	beq.n	8000242 <crc_xor+0x36>
		ans = ans ^ crc_key;		//if leftmost bit is 1, perform xor with key
 800022c:	4b09      	ldr	r3, [pc, #36]	; (8000254 <crc_xor+0x48>)
 800022e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000232:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000236:	ea80 0402 	eor.w	r4, r0, r2
 800023a:	ea81 0503 	eor.w	r5, r1, r3
 800023e:	e9c7 4502 	strd	r4, r5, [r7, #8]
	}else{
		ans = ans ^ 0b0000;			//if leftmost bit is 0, perform xor with all zeros
	}
	return ans;
 8000242:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
}
 8000246:	4610      	mov	r0, r2
 8000248:	4619      	mov	r1, r3
 800024a:	3714      	adds	r7, #20
 800024c:	46bd      	mov	sp, r7
 800024e:	bcb0      	pop	{r4, r5, r7}
 8000250:	4770      	bx	lr
 8000252:	bf00      	nop
 8000254:	20000000 	.word	0x20000000

08000258 <crc_division>:
/**
 * divides data by key to get remainder
 *
 * takes 4 bits at a time and XORs them until 4 bit remainder is left
 */
uint64_t crc_division(uint64_t data, int curs_pos, int shift_pos, uint64_t answer){
 8000258:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800025c:	b08f      	sub	sp, #60	; 0x3c
 800025e:	af00      	add	r7, sp, #0
 8000260:	e9c7 0106 	strd	r0, r1, [r7, #24]
 8000264:	617a      	str	r2, [r7, #20]
 8000266:	613b      	str	r3, [r7, #16]
	int cursor = curs_pos;
 8000268:	697b      	ldr	r3, [r7, #20]
 800026a:	637b      	str	r3, [r7, #52]	; 0x34
	int bit_shift = shift_pos;
 800026c:	693b      	ldr	r3, [r7, #16]
 800026e:	633b      	str	r3, [r7, #48]	; 0x30
	uint64_t remain = answer;
 8000270:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8000274:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	uint64_t dividend = 0;
 8000278:	f04f 0200 	mov.w	r2, #0
 800027c:	f04f 0300 	mov.w	r3, #0
 8000280:	e9c7 2308 	strd	r2, r3, [r7, #32]

	while(bit_shift > 0){
 8000284:	e057      	b.n	8000336 <crc_division+0xde>
		bit_shift--;
 8000286:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000288:	3b01      	subs	r3, #1
 800028a:	633b      	str	r3, [r7, #48]	; 0x30
		dividend = data & (0x0800000000000000 >> cursor);
 800028c:	f04f 0200 	mov.w	r2, #0
 8000290:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000294:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8000296:	f1c0 0120 	rsb	r1, r0, #32
 800029a:	f1b0 0420 	subs.w	r4, r0, #32
 800029e:	fa22 fa00 	lsr.w	sl, r2, r0
 80002a2:	fa03 f101 	lsl.w	r1, r3, r1
 80002a6:	ea4a 0a01 	orr.w	sl, sl, r1
 80002aa:	d403      	bmi.n	80002b4 <crc_division+0x5c>
 80002ac:	fa43 f404 	asr.w	r4, r3, r4
 80002b0:	ea4a 0a04 	orr.w	sl, sl, r4
 80002b4:	fa43 fb00 	asr.w	fp, r3, r0
 80002b8:	4650      	mov	r0, sl
 80002ba:	4659      	mov	r1, fp
 80002bc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80002c0:	ea02 0500 	and.w	r5, r2, r0
 80002c4:	ea03 0601 	and.w	r6, r3, r1
 80002c8:	e9c7 5608 	strd	r5, r6, [r7, #32]
		dividend = dividend >> bit_shift;
 80002cc:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80002d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80002d2:	f1c0 0420 	rsb	r4, r0, #32
 80002d6:	f1a0 0120 	sub.w	r1, r0, #32
 80002da:	fa22 f800 	lsr.w	r8, r2, r0
 80002de:	fa03 f404 	lsl.w	r4, r3, r4
 80002e2:	ea48 0804 	orr.w	r8, r8, r4
 80002e6:	fa23 f101 	lsr.w	r1, r3, r1
 80002ea:	ea48 0801 	orr.w	r8, r8, r1
 80002ee:	fa23 f900 	lsr.w	r9, r3, r0
 80002f2:	e9c7 8908 	strd	r8, r9, [r7, #32]
		remain = remain << 1;
 80002f6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80002fa:	1891      	adds	r1, r2, r2
 80002fc:	60b9      	str	r1, [r7, #8]
 80002fe:	415b      	adcs	r3, r3
 8000300:	60fb      	str	r3, [r7, #12]
 8000302:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8000306:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
		remain += dividend;
 800030a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800030e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8000312:	1884      	adds	r4, r0, r2
 8000314:	603c      	str	r4, [r7, #0]
 8000316:	eb41 0303 	adc.w	r3, r1, r3
 800031a:	607b      	str	r3, [r7, #4]
 800031c:	e9d7 3400 	ldrd	r3, r4, [r7]
 8000320:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
		remain = crc_xor(remain);
 8000324:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8000328:	f7ff ff70 	bl	800020c <crc_xor>
 800032c:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
		cursor++;
 8000330:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000332:	3301      	adds	r3, #1
 8000334:	637b      	str	r3, [r7, #52]	; 0x34
	while(bit_shift > 0){
 8000336:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000338:	2b00      	cmp	r3, #0
 800033a:	dca4      	bgt.n	8000286 <crc_division+0x2e>
	}
	return remain;
 800033c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
}
 8000340:	4610      	mov	r0, r2
 8000342:	4619      	mov	r1, r3
 8000344:	373c      	adds	r7, #60	; 0x3c
 8000346:	46bd      	mov	sp, r7
 8000348:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800034c <flash_write>:
#include "flash_driver.h"

/**
* writes button press counts to flash memory
*/
HAL_StatusTypeDef flash_write(uint32_t address, uint32_t data, bool timer_flag, WWDG_HandleTypeDef *hwwdg){
 800034c:	b5b0      	push	{r4, r5, r7, lr}
 800034e:	b088      	sub	sp, #32
 8000350:	af00      	add	r7, sp, #0
 8000352:	60f8      	str	r0, [r7, #12]
 8000354:	60b9      	str	r1, [r7, #8]
 8000356:	603b      	str	r3, [r7, #0]
 8000358:	4613      	mov	r3, r2
 800035a:	71fb      	strb	r3, [r7, #7]
	HAL_FLASH_Unlock();
 800035c:	f001 f888 	bl	8001470 <HAL_FLASH_Unlock>

	FLASH_EraseInitTypeDef FLASH_EraseInitStruct = {0};
 8000360:	f107 0314 	add.w	r3, r7, #20
 8000364:	2200      	movs	r2, #0
 8000366:	601a      	str	r2, [r3, #0]
 8000368:	605a      	str	r2, [r3, #4]
 800036a:	609a      	str	r2, [r3, #8]
	FLASH_EraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES;
 800036c:	2300      	movs	r3, #0
 800036e:	617b      	str	r3, [r7, #20]
	FLASH_EraseInitStruct.PageAddress = address;
 8000370:	68fb      	ldr	r3, [r7, #12]
 8000372:	61bb      	str	r3, [r7, #24]
	FLASH_EraseInitStruct.NbPages = 1;
 8000374:	2301      	movs	r3, #1
 8000376:	61fb      	str	r3, [r7, #28]
	uint32_t PageError;
	HAL_FLASHEx_Erase(&FLASH_EraseInitStruct, &PageError);
 8000378:	f107 0210 	add.w	r2, r7, #16
 800037c:	f107 0314 	add.w	r3, r7, #20
 8000380:	4611      	mov	r1, r2
 8000382:	4618      	mov	r0, r3
 8000384:	f001 f938 	bl	80015f8 <HAL_FLASHEx_Erase>

	if(timer_flag){
 8000388:	79fb      	ldrb	r3, [r7, #7]
 800038a:	2b00      	cmp	r3, #0
 800038c:	d002      	beq.n	8000394 <flash_write+0x48>
		HAL_WWDG_Refresh(hwwdg);
 800038e:	6838      	ldr	r0, [r7, #0]
 8000390:	f004 fb69 	bl	8004a66 <HAL_WWDG_Refresh>
	}

	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, address, (uint64_t)data);
 8000394:	68bb      	ldr	r3, [r7, #8]
 8000396:	2200      	movs	r2, #0
 8000398:	461c      	mov	r4, r3
 800039a:	4615      	mov	r5, r2
 800039c:	4622      	mov	r2, r4
 800039e:	462b      	mov	r3, r5
 80003a0:	68f9      	ldr	r1, [r7, #12]
 80003a2:	2002      	movs	r0, #2
 80003a4:	f000 fff4 	bl	8001390 <HAL_FLASH_Program>
	HAL_FLASH_Lock();
 80003a8:	f001 f888 	bl	80014bc <HAL_FLASH_Lock>

	return HAL_OK;
 80003ac:	2300      	movs	r3, #0
}
 80003ae:	4618      	mov	r0, r3
 80003b0:	3720      	adds	r7, #32
 80003b2:	46bd      	mov	sp, r7
 80003b4:	bdb0      	pop	{r4, r5, r7, pc}

080003b6 <flash_read>:

/**
* reads button press counts from flash memory
*/
uint32_t flash_read(uint32_t address){
 80003b6:	b480      	push	{r7}
 80003b8:	b083      	sub	sp, #12
 80003ba:	af00      	add	r7, sp, #0
 80003bc:	6078      	str	r0, [r7, #4]
	return *(uint32_t*)address;
 80003be:	687b      	ldr	r3, [r7, #4]
 80003c0:	681b      	ldr	r3, [r3, #0]
}
 80003c2:	4618      	mov	r0, r3
 80003c4:	370c      	adds	r7, #12
 80003c6:	46bd      	mov	sp, r7
 80003c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003cc:	4770      	bx	lr
	...

080003d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80003d0:	b480      	push	{r7}
 80003d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80003d4:	4b04      	ldr	r3, [pc, #16]	; (80003e8 <__NVIC_GetPriorityGrouping+0x18>)
 80003d6:	68db      	ldr	r3, [r3, #12]
 80003d8:	0a1b      	lsrs	r3, r3, #8
 80003da:	f003 0307 	and.w	r3, r3, #7
}
 80003de:	4618      	mov	r0, r3
 80003e0:	46bd      	mov	sp, r7
 80003e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003e6:	4770      	bx	lr
 80003e8:	e000ed00 	.word	0xe000ed00

080003ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80003ec:	b480      	push	{r7}
 80003ee:	b083      	sub	sp, #12
 80003f0:	af00      	add	r7, sp, #0
 80003f2:	4603      	mov	r3, r0
 80003f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80003f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	db0b      	blt.n	8000416 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80003fe:	79fb      	ldrb	r3, [r7, #7]
 8000400:	f003 021f 	and.w	r2, r3, #31
 8000404:	4907      	ldr	r1, [pc, #28]	; (8000424 <__NVIC_EnableIRQ+0x38>)
 8000406:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800040a:	095b      	lsrs	r3, r3, #5
 800040c:	2001      	movs	r0, #1
 800040e:	fa00 f202 	lsl.w	r2, r0, r2
 8000412:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000416:	bf00      	nop
 8000418:	370c      	adds	r7, #12
 800041a:	46bd      	mov	sp, r7
 800041c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000420:	4770      	bx	lr
 8000422:	bf00      	nop
 8000424:	e000e100 	.word	0xe000e100

08000428 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000428:	b480      	push	{r7}
 800042a:	b083      	sub	sp, #12
 800042c:	af00      	add	r7, sp, #0
 800042e:	4603      	mov	r3, r0
 8000430:	6039      	str	r1, [r7, #0]
 8000432:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000434:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000438:	2b00      	cmp	r3, #0
 800043a:	db0a      	blt.n	8000452 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800043c:	683b      	ldr	r3, [r7, #0]
 800043e:	b2da      	uxtb	r2, r3
 8000440:	490c      	ldr	r1, [pc, #48]	; (8000474 <__NVIC_SetPriority+0x4c>)
 8000442:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000446:	0112      	lsls	r2, r2, #4
 8000448:	b2d2      	uxtb	r2, r2
 800044a:	440b      	add	r3, r1
 800044c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000450:	e00a      	b.n	8000468 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000452:	683b      	ldr	r3, [r7, #0]
 8000454:	b2da      	uxtb	r2, r3
 8000456:	4908      	ldr	r1, [pc, #32]	; (8000478 <__NVIC_SetPriority+0x50>)
 8000458:	79fb      	ldrb	r3, [r7, #7]
 800045a:	f003 030f 	and.w	r3, r3, #15
 800045e:	3b04      	subs	r3, #4
 8000460:	0112      	lsls	r2, r2, #4
 8000462:	b2d2      	uxtb	r2, r2
 8000464:	440b      	add	r3, r1
 8000466:	761a      	strb	r2, [r3, #24]
}
 8000468:	bf00      	nop
 800046a:	370c      	adds	r7, #12
 800046c:	46bd      	mov	sp, r7
 800046e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000472:	4770      	bx	lr
 8000474:	e000e100 	.word	0xe000e100
 8000478:	e000ed00 	.word	0xe000ed00

0800047c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800047c:	b480      	push	{r7}
 800047e:	b089      	sub	sp, #36	; 0x24
 8000480:	af00      	add	r7, sp, #0
 8000482:	60f8      	str	r0, [r7, #12]
 8000484:	60b9      	str	r1, [r7, #8]
 8000486:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000488:	68fb      	ldr	r3, [r7, #12]
 800048a:	f003 0307 	and.w	r3, r3, #7
 800048e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000490:	69fb      	ldr	r3, [r7, #28]
 8000492:	f1c3 0307 	rsb	r3, r3, #7
 8000496:	2b04      	cmp	r3, #4
 8000498:	bf28      	it	cs
 800049a:	2304      	movcs	r3, #4
 800049c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800049e:	69fb      	ldr	r3, [r7, #28]
 80004a0:	3304      	adds	r3, #4
 80004a2:	2b06      	cmp	r3, #6
 80004a4:	d902      	bls.n	80004ac <NVIC_EncodePriority+0x30>
 80004a6:	69fb      	ldr	r3, [r7, #28]
 80004a8:	3b03      	subs	r3, #3
 80004aa:	e000      	b.n	80004ae <NVIC_EncodePriority+0x32>
 80004ac:	2300      	movs	r3, #0
 80004ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80004b0:	f04f 32ff 	mov.w	r2, #4294967295
 80004b4:	69bb      	ldr	r3, [r7, #24]
 80004b6:	fa02 f303 	lsl.w	r3, r2, r3
 80004ba:	43da      	mvns	r2, r3
 80004bc:	68bb      	ldr	r3, [r7, #8]
 80004be:	401a      	ands	r2, r3
 80004c0:	697b      	ldr	r3, [r7, #20]
 80004c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80004c4:	f04f 31ff 	mov.w	r1, #4294967295
 80004c8:	697b      	ldr	r3, [r7, #20]
 80004ca:	fa01 f303 	lsl.w	r3, r1, r3
 80004ce:	43d9      	mvns	r1, r3
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80004d4:	4313      	orrs	r3, r2
         );
}
 80004d6:	4618      	mov	r0, r3
 80004d8:	3724      	adds	r7, #36	; 0x24
 80004da:	46bd      	mov	sp, r7
 80004dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e0:	4770      	bx	lr

080004e2 <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 80004e2:	b480      	push	{r7}
 80004e4:	b083      	sub	sp, #12
 80004e6:	af00      	add	r7, sp, #0
 80004e8:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	681b      	ldr	r3, [r3, #0]
 80004ee:	f043 0201 	orr.w	r2, r3, #1
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	601a      	str	r2, [r3, #0]
}
 80004f6:	bf00      	nop
 80004f8:	370c      	adds	r7, #12
 80004fa:	46bd      	mov	sp, r7
 80004fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000500:	4770      	bx	lr

08000502 <LL_TIM_DisableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_DisableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableCounter(TIM_TypeDef *TIMx)
{
 8000502:	b480      	push	{r7}
 8000504:	b083      	sub	sp, #12
 8000506:	af00      	add	r7, sp, #0
 8000508:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_CEN);
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	681b      	ldr	r3, [r3, #0]
 800050e:	f023 0201 	bic.w	r2, r3, #1
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	601a      	str	r2, [r3, #0]
}
 8000516:	bf00      	nop
 8000518:	370c      	adds	r7, #12
 800051a:	46bd      	mov	sp, r7
 800051c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000520:	4770      	bx	lr

08000522 <LL_TIM_DisableARRPreload>:
  * @rmtoll CR1          ARPE          LL_TIM_DisableARRPreload
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableARRPreload(TIM_TypeDef *TIMx)
{
 8000522:	b480      	push	{r7}
 8000524:	b083      	sub	sp, #12
 8000526:	af00      	add	r7, sp, #0
 8000528:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	681b      	ldr	r3, [r3, #0]
 800052e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	601a      	str	r2, [r3, #0]
}
 8000536:	bf00      	nop
 8000538:	370c      	adds	r7, #12
 800053a:	46bd      	mov	sp, r7
 800053c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000540:	4770      	bx	lr

08000542 <LL_TIM_ClearFlag_UPDATE>:
  * @rmtoll SR           UIF           LL_TIM_ClearFlag_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_UPDATE(TIM_TypeDef *TIMx)
{
 8000542:	b480      	push	{r7}
 8000544:	b083      	sub	sp, #12
 8000546:	af00      	add	r7, sp, #0
 8000548:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	f06f 0201 	mvn.w	r2, #1
 8000550:	611a      	str	r2, [r3, #16]
}
 8000552:	bf00      	nop
 8000554:	370c      	adds	r7, #12
 8000556:	46bd      	mov	sp, r7
 8000558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800055c:	4770      	bx	lr

0800055e <LL_TIM_IsActiveFlag_UPDATE>:
  * @rmtoll SR           UIF           LL_TIM_IsActiveFlag_UPDATE
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_UPDATE(const TIM_TypeDef *TIMx)
{
 800055e:	b480      	push	{r7}
 8000560:	b083      	sub	sp, #12
 8000562:	af00      	add	r7, sp, #0
 8000564:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	691b      	ldr	r3, [r3, #16]
 800056a:	f003 0301 	and.w	r3, r3, #1
 800056e:	2b01      	cmp	r3, #1
 8000570:	d101      	bne.n	8000576 <LL_TIM_IsActiveFlag_UPDATE+0x18>
 8000572:	2301      	movs	r3, #1
 8000574:	e000      	b.n	8000578 <LL_TIM_IsActiveFlag_UPDATE+0x1a>
 8000576:	2300      	movs	r3, #0
}
 8000578:	4618      	mov	r0, r3
 800057a:	370c      	adds	r7, #12
 800057c:	46bd      	mov	sp, r7
 800057e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000582:	4770      	bx	lr

08000584 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8000584:	b480      	push	{r7}
 8000586:	b083      	sub	sp, #12
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	695b      	ldr	r3, [r3, #20]
 8000590:	f043 0201 	orr.w	r2, r3, #1
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	615a      	str	r2, [r3, #20]
}
 8000598:	bf00      	nop
 800059a:	370c      	adds	r7, #12
 800059c:	46bd      	mov	sp, r7
 800059e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a2:	4770      	bx	lr

080005a4 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80005a4:	b480      	push	{r7}
 80005a6:	b085      	sub	sp, #20
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80005ac:	4b08      	ldr	r3, [pc, #32]	; (80005d0 <LL_APB2_GRP1_EnableClock+0x2c>)
 80005ae:	699a      	ldr	r2, [r3, #24]
 80005b0:	4907      	ldr	r1, [pc, #28]	; (80005d0 <LL_APB2_GRP1_EnableClock+0x2c>)
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	4313      	orrs	r3, r2
 80005b6:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80005b8:	4b05      	ldr	r3, [pc, #20]	; (80005d0 <LL_APB2_GRP1_EnableClock+0x2c>)
 80005ba:	699a      	ldr	r2, [r3, #24]
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	4013      	ands	r3, r2
 80005c0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80005c2:	68fb      	ldr	r3, [r7, #12]
}
 80005c4:	bf00      	nop
 80005c6:	3714      	adds	r7, #20
 80005c8:	46bd      	mov	sp, r7
 80005ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ce:	4770      	bx	lr
 80005d0:	40021000 	.word	0x40021000

080005d4 <crc_encode>:
uint8_t wwdg_msg[20] = "Watchdog init\n\r";

/**
 * initializes values for division and carries out the encoding of each crc value
 */
void crc_encode(){
 80005d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80005d8:	b08d      	sub	sp, #52	; 0x34
 80005da:	af02      	add	r7, sp, #8
	int shift = 60;
 80005dc:	233c      	movs	r3, #60	; 0x3c
 80005de:	627b      	str	r3, [r7, #36]	; 0x24
	int position = 0;
 80005e0:	2300      	movs	r3, #0
 80005e2:	623b      	str	r3, [r7, #32]
	uint64_t appended_data = crc_append(data);
 80005e4:	4b25      	ldr	r3, [pc, #148]	; (800067c <crc_encode+0xa8>)
 80005e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80005ea:	4610      	mov	r0, r2
 80005ec:	4619      	mov	r1, r3
 80005ee:	f7ff fdf7 	bl	80001e0 <crc_append>
 80005f2:	e9c7 0106 	strd	r0, r1, [r7, #24]
	uint64_t dividend = appended_data & 0xF000000000000000;
 80005f6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80005fa:	f04f 0a00 	mov.w	sl, #0
 80005fe:	f003 4b70 	and.w	fp, r3, #4026531840	; 0xf0000000
 8000602:	e9c7 ab04 	strd	sl, fp, [r7, #16]
	dividend = dividend >> shift;
 8000606:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800060a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800060c:	f1c1 0620 	rsb	r6, r1, #32
 8000610:	f1a1 0020 	sub.w	r0, r1, #32
 8000614:	fa22 f401 	lsr.w	r4, r2, r1
 8000618:	fa03 f606 	lsl.w	r6, r3, r6
 800061c:	4334      	orrs	r4, r6
 800061e:	fa23 f000 	lsr.w	r0, r3, r0
 8000622:	4304      	orrs	r4, r0
 8000624:	fa23 f501 	lsr.w	r5, r3, r1
 8000628:	e9c7 4504 	strd	r4, r5, [r7, #16]
	uint64_t ans = crc_xor(dividend);
 800062c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8000630:	f7ff fdec 	bl	800020c <crc_xor>
 8000634:	e9c7 0102 	strd	r0, r1, [r7, #8]

	uint64_t remain = crc_division(appended_data, position, shift, ans);
 8000638:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800063c:	e9cd 2300 	strd	r2, r3, [sp]
 8000640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000642:	6a3a      	ldr	r2, [r7, #32]
 8000644:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8000648:	f7ff fe06 	bl	8000258 <crc_division>
 800064c:	e9c7 0100 	strd	r0, r1, [r7]
	TxData[0] = data;
 8000650:	4b0a      	ldr	r3, [pc, #40]	; (800067c <crc_encode+0xa8>)
 8000652:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000656:	490a      	ldr	r1, [pc, #40]	; (8000680 <crc_encode+0xac>)
 8000658:	e9c1 2300 	strd	r2, r3, [r1]
	TxData[1] = appended_data + remain;
 800065c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8000660:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000664:	eb10 0802 	adds.w	r8, r0, r2
 8000668:	eb41 0903 	adc.w	r9, r1, r3
 800066c:	4b04      	ldr	r3, [pc, #16]	; (8000680 <crc_encode+0xac>)
 800066e:	e9c3 8902 	strd	r8, r9, [r3, #8]
}
 8000672:	bf00      	nop
 8000674:	372c      	adds	r7, #44	; 0x2c
 8000676:	46bd      	mov	sp, r7
 8000678:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800067c:	200001e0 	.word	0x200001e0
 8000680:	200001c8 	.word	0x200001c8

08000684 <send_data>:

/**
 * sends data with crc to receiver every 10ms
 */
void send_data(){
 8000684:	b580      	push	{r7, lr}
 8000686:	af00      	add	r7, sp, #0
	crc_encode();
 8000688:	f7ff ffa4 	bl	80005d4 <crc_encode>

	osDelay(10);
 800068c:	200a      	movs	r0, #10
 800068e:	f004 fbdf 	bl	8004e50 <osDelay>
	if(timer_flag){
 8000692:	4b08      	ldr	r3, [pc, #32]	; (80006b4 <send_data+0x30>)
 8000694:	781b      	ldrb	r3, [r3, #0]
 8000696:	2b00      	cmp	r3, #0
 8000698:	d002      	beq.n	80006a0 <send_data+0x1c>
		HAL_WWDG_Refresh(&hwwdg);		//transmitting timeout
 800069a:	4807      	ldr	r0, [pc, #28]	; (80006b8 <send_data+0x34>)
 800069c:	f004 f9e3 	bl	8004a66 <HAL_WWDG_Refresh>
	}
	HAL_UART_Transmit(&huart1, (uint8_t*)TxData, sizeof(TxData), 1000);
 80006a0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006a4:	2218      	movs	r2, #24
 80006a6:	4905      	ldr	r1, [pc, #20]	; (80006bc <send_data+0x38>)
 80006a8:	4805      	ldr	r0, [pc, #20]	; (80006c0 <send_data+0x3c>)
 80006aa:	f003 f9ef 	bl	8003a8c <HAL_UART_Transmit>
}
 80006ae:	bf00      	nop
 80006b0:	bd80      	pop	{r7, pc}
 80006b2:	bf00      	nop
 80006b4:	200001e8 	.word	0x200001e8
 80006b8:	200001a4 	.word	0x200001a4
 80006bc:	200001c8 	.word	0x200001c8
 80006c0:	20000094 	.word	0x20000094

080006c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006c8:	f000 fce2 	bl	8001090 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006cc:	f000 f848 	bl	8000760 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006d0:	f000 f95c 	bl	800098c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80006d4:	f000 f8da 	bl	800088c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80006d8:	f000 f908 	bl	80008ec <MX_USART2_UART_Init>
  MX_TIM16_Init();
 80006dc:	f000 f898 	bl	8000810 <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */
  LL_TIM_EnableCounter(TIM16);
 80006e0:	4813      	ldr	r0, [pc, #76]	; (8000730 <main+0x6c>)
 80006e2:	f7ff fefe 	bl	80004e2 <LL_TIM_EnableCounter>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80006e6:	f004 faa1 	bl	8004c2c <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of BinSem */
  BinSemHandle = osSemaphoreNew(1, 0, &BinSem_attributes);
 80006ea:	4a12      	ldr	r2, [pc, #72]	; (8000734 <main+0x70>)
 80006ec:	2100      	movs	r1, #0
 80006ee:	2001      	movs	r0, #1
 80006f0:	f004 fbdc 	bl	8004eac <osSemaphoreNew>
 80006f4:	4603      	mov	r3, r0
 80006f6:	4a10      	ldr	r2, [pc, #64]	; (8000738 <main+0x74>)
 80006f8:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of read_pins */
  read_pinsHandle = osThreadNew(StartRead02, NULL, &read_pins_attributes);
 80006fa:	4a10      	ldr	r2, [pc, #64]	; (800073c <main+0x78>)
 80006fc:	2100      	movs	r1, #0
 80006fe:	4810      	ldr	r0, [pc, #64]	; (8000740 <main+0x7c>)
 8000700:	f004 fafc 	bl	8004cfc <osThreadNew>
 8000704:	4603      	mov	r3, r0
 8000706:	4a0f      	ldr	r2, [pc, #60]	; (8000744 <main+0x80>)
 8000708:	6013      	str	r3, [r2, #0]

  /* creation of watchdog */
  watchdogHandle = osThreadNew(StartWatchdog01, NULL, &watchdog_attributes);
 800070a:	4a0f      	ldr	r2, [pc, #60]	; (8000748 <main+0x84>)
 800070c:	2100      	movs	r1, #0
 800070e:	480f      	ldr	r0, [pc, #60]	; (800074c <main+0x88>)
 8000710:	f004 faf4 	bl	8004cfc <osThreadNew>
 8000714:	4603      	mov	r3, r0
 8000716:	4a0e      	ldr	r2, [pc, #56]	; (8000750 <main+0x8c>)
 8000718:	6013      	str	r3, [r2, #0]

  /* creation of flash */
  flashHandle = osThreadNew(StartFlash03, NULL, &flash_attributes);
 800071a:	4a0e      	ldr	r2, [pc, #56]	; (8000754 <main+0x90>)
 800071c:	2100      	movs	r1, #0
 800071e:	480e      	ldr	r0, [pc, #56]	; (8000758 <main+0x94>)
 8000720:	f004 faec 	bl	8004cfc <osThreadNew>
 8000724:	4603      	mov	r3, r0
 8000726:	4a0d      	ldr	r2, [pc, #52]	; (800075c <main+0x98>)
 8000728:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800072a:	f004 fab3 	bl	8004c94 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800072e:	e7fe      	b.n	800072e <main+0x6a>
 8000730:	40014400 	.word	0x40014400
 8000734:	08007b14 	.word	0x08007b14
 8000738:	200001c4 	.word	0x200001c4
 800073c:	08007aa8 	.word	0x08007aa8
 8000740:	08000a65 	.word	0x08000a65
 8000744:	200001b8 	.word	0x200001b8
 8000748:	08007acc 	.word	0x08007acc
 800074c:	08000c09 	.word	0x08000c09
 8000750:	200001bc 	.word	0x200001bc
 8000754:	08007af0 	.word	0x08007af0
 8000758:	08000c51 	.word	0x08000c51
 800075c:	200001c0 	.word	0x200001c0

08000760 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b0a6      	sub	sp, #152	; 0x98
 8000764:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000766:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800076a:	2228      	movs	r2, #40	; 0x28
 800076c:	2100      	movs	r1, #0
 800076e:	4618      	mov	r0, r3
 8000770:	f007 f934 	bl	80079dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000774:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000778:	2200      	movs	r2, #0
 800077a:	601a      	str	r2, [r3, #0]
 800077c:	605a      	str	r2, [r3, #4]
 800077e:	609a      	str	r2, [r3, #8]
 8000780:	60da      	str	r2, [r3, #12]
 8000782:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000784:	1d3b      	adds	r3, r7, #4
 8000786:	2258      	movs	r2, #88	; 0x58
 8000788:	2100      	movs	r1, #0
 800078a:	4618      	mov	r0, r3
 800078c:	f007 f926 	bl	80079dc <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000790:	2302      	movs	r3, #2
 8000792:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000794:	2301      	movs	r3, #1
 8000796:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000798:	2310      	movs	r3, #16
 800079a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800079e:	2300      	movs	r3, #0
 80007a0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007a4:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80007a8:	4618      	mov	r0, r3
 80007aa:	f001 f98f 	bl	8001acc <HAL_RCC_OscConfig>
 80007ae:	4603      	mov	r3, r0
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d001      	beq.n	80007b8 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80007b4:	f000 fa8e 	bl	8000cd4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007b8:	230f      	movs	r3, #15
 80007ba:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80007bc:	2300      	movs	r3, #0
 80007be:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007c0:	2300      	movs	r3, #0
 80007c2:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007c4:	2300      	movs	r3, #0
 80007c6:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007c8:	2300      	movs	r3, #0
 80007ca:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80007cc:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80007d0:	2100      	movs	r1, #0
 80007d2:	4618      	mov	r0, r3
 80007d4:	f002 f9ce 	bl	8002b74 <HAL_RCC_ClockConfig>
 80007d8:	4603      	mov	r3, r0
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d001      	beq.n	80007e2 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80007de:	f000 fa79 	bl	8000cd4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2
 80007e2:	4b0a      	ldr	r3, [pc, #40]	; (800080c <SystemClock_Config+0xac>)
 80007e4:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_TIM16;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80007e6:	2300      	movs	r3, #0
 80007e8:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80007ea:	2300      	movs	r3, #0
 80007ec:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Tim16ClockSelection = RCC_TIM16CLK_HCLK;
 80007ee:	2300      	movs	r3, #0
 80007f0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80007f2:	1d3b      	adds	r3, r7, #4
 80007f4:	4618      	mov	r0, r3
 80007f6:	f002 fc0f 	bl	8003018 <HAL_RCCEx_PeriphCLKConfig>
 80007fa:	4603      	mov	r3, r0
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d001      	beq.n	8000804 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8000800:	f000 fa68 	bl	8000cd4 <Error_Handler>
  }
}
 8000804:	bf00      	nop
 8000806:	3798      	adds	r7, #152	; 0x98
 8000808:	46bd      	mov	sp, r7
 800080a:	bd80      	pop	{r7, pc}
 800080c:	00800003 	.word	0x00800003

08000810 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b086      	sub	sp, #24
 8000814:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_Init 0 */
	//f = 8MHz / PSC					PSC = 367
	//T = (1 / f) * period = 3s			Period = 65216
  /* USER CODE END TIM16_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8000816:	1d3b      	adds	r3, r7, #4
 8000818:	2200      	movs	r2, #0
 800081a:	601a      	str	r2, [r3, #0]
 800081c:	605a      	str	r2, [r3, #4]
 800081e:	609a      	str	r2, [r3, #8]
 8000820:	60da      	str	r2, [r3, #12]
 8000822:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_TIM16);
 8000824:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000828:	f7ff febc 	bl	80005a4 <LL_APB2_GRP1_EnableClock>

  /* TIM16 interrupt Init */
  NVIC_SetPriority(TIM1_UP_TIM16_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 800082c:	f7ff fdd0 	bl	80003d0 <__NVIC_GetPriorityGrouping>
 8000830:	4603      	mov	r3, r0
 8000832:	2200      	movs	r2, #0
 8000834:	2105      	movs	r1, #5
 8000836:	4618      	mov	r0, r3
 8000838:	f7ff fe20 	bl	800047c <NVIC_EncodePriority>
 800083c:	4603      	mov	r3, r0
 800083e:	4619      	mov	r1, r3
 8000840:	2019      	movs	r0, #25
 8000842:	f7ff fdf1 	bl	8000428 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000846:	2019      	movs	r0, #25
 8000848:	f7ff fdd0 	bl	80003ec <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  TIM_InitStruct.Prescaler = 367;
 800084c:	f240 136f 	movw	r3, #367	; 0x16f
 8000850:	80bb      	strh	r3, [r7, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8000852:	2300      	movs	r3, #0
 8000854:	60bb      	str	r3, [r7, #8]
  TIM_InitStruct.Autoreload = 65216;
 8000856:	f64f 63c0 	movw	r3, #65216	; 0xfec0
 800085a:	60fb      	str	r3, [r7, #12]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 800085c:	2300      	movs	r3, #0
 800085e:	613b      	str	r3, [r7, #16]
  TIM_InitStruct.RepetitionCounter = 0;
 8000860:	2300      	movs	r3, #0
 8000862:	617b      	str	r3, [r7, #20]
  LL_TIM_Init(TIM16, &TIM_InitStruct);
 8000864:	1d3b      	adds	r3, r7, #4
 8000866:	4619      	mov	r1, r3
 8000868:	4807      	ldr	r0, [pc, #28]	; (8000888 <MX_TIM16_Init+0x78>)
 800086a:	f004 f947 	bl	8004afc <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM16);
 800086e:	4806      	ldr	r0, [pc, #24]	; (8000888 <MX_TIM16_Init+0x78>)
 8000870:	f7ff fe57 	bl	8000522 <LL_TIM_DisableARRPreload>
  /* USER CODE BEGIN TIM16_Init 2 */

	LL_TIM_GenerateEvent_UPDATE(TIM16);
 8000874:	4804      	ldr	r0, [pc, #16]	; (8000888 <MX_TIM16_Init+0x78>)
 8000876:	f7ff fe85 	bl	8000584 <LL_TIM_GenerateEvent_UPDATE>

	LL_TIM_ClearFlag_UPDATE(TIM16);
 800087a:	4803      	ldr	r0, [pc, #12]	; (8000888 <MX_TIM16_Init+0x78>)
 800087c:	f7ff fe61 	bl	8000542 <LL_TIM_ClearFlag_UPDATE>
  /* USER CODE END TIM16_Init 2 */

}
 8000880:	bf00      	nop
 8000882:	3718      	adds	r7, #24
 8000884:	46bd      	mov	sp, r7
 8000886:	bd80      	pop	{r7, pc}
 8000888:	40014400 	.word	0x40014400

0800088c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000890:	4b14      	ldr	r3, [pc, #80]	; (80008e4 <MX_USART1_UART_Init+0x58>)
 8000892:	4a15      	ldr	r2, [pc, #84]	; (80008e8 <MX_USART1_UART_Init+0x5c>)
 8000894:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000896:	4b13      	ldr	r3, [pc, #76]	; (80008e4 <MX_USART1_UART_Init+0x58>)
 8000898:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800089c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800089e:	4b11      	ldr	r3, [pc, #68]	; (80008e4 <MX_USART1_UART_Init+0x58>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80008a4:	4b0f      	ldr	r3, [pc, #60]	; (80008e4 <MX_USART1_UART_Init+0x58>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80008aa:	4b0e      	ldr	r3, [pc, #56]	; (80008e4 <MX_USART1_UART_Init+0x58>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80008b0:	4b0c      	ldr	r3, [pc, #48]	; (80008e4 <MX_USART1_UART_Init+0x58>)
 80008b2:	220c      	movs	r2, #12
 80008b4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008b6:	4b0b      	ldr	r3, [pc, #44]	; (80008e4 <MX_USART1_UART_Init+0x58>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80008bc:	4b09      	ldr	r3, [pc, #36]	; (80008e4 <MX_USART1_UART_Init+0x58>)
 80008be:	2200      	movs	r2, #0
 80008c0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008c2:	4b08      	ldr	r3, [pc, #32]	; (80008e4 <MX_USART1_UART_Init+0x58>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008c8:	4b06      	ldr	r3, [pc, #24]	; (80008e4 <MX_USART1_UART_Init+0x58>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80008ce:	4805      	ldr	r0, [pc, #20]	; (80008e4 <MX_USART1_UART_Init+0x58>)
 80008d0:	f003 f88e 	bl	80039f0 <HAL_UART_Init>
 80008d4:	4603      	mov	r3, r0
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d001      	beq.n	80008de <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80008da:	f000 f9fb 	bl	8000cd4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80008de:	bf00      	nop
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	bf00      	nop
 80008e4:	20000094 	.word	0x20000094
 80008e8:	40013800 	.word	0x40013800

080008ec <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80008f0:	4b14      	ldr	r3, [pc, #80]	; (8000944 <MX_USART2_UART_Init+0x58>)
 80008f2:	4a15      	ldr	r2, [pc, #84]	; (8000948 <MX_USART2_UART_Init+0x5c>)
 80008f4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80008f6:	4b13      	ldr	r3, [pc, #76]	; (8000944 <MX_USART2_UART_Init+0x58>)
 80008f8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008fc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008fe:	4b11      	ldr	r3, [pc, #68]	; (8000944 <MX_USART2_UART_Init+0x58>)
 8000900:	2200      	movs	r2, #0
 8000902:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000904:	4b0f      	ldr	r3, [pc, #60]	; (8000944 <MX_USART2_UART_Init+0x58>)
 8000906:	2200      	movs	r2, #0
 8000908:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800090a:	4b0e      	ldr	r3, [pc, #56]	; (8000944 <MX_USART2_UART_Init+0x58>)
 800090c:	2200      	movs	r2, #0
 800090e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000910:	4b0c      	ldr	r3, [pc, #48]	; (8000944 <MX_USART2_UART_Init+0x58>)
 8000912:	220c      	movs	r2, #12
 8000914:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000916:	4b0b      	ldr	r3, [pc, #44]	; (8000944 <MX_USART2_UART_Init+0x58>)
 8000918:	2200      	movs	r2, #0
 800091a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800091c:	4b09      	ldr	r3, [pc, #36]	; (8000944 <MX_USART2_UART_Init+0x58>)
 800091e:	2200      	movs	r2, #0
 8000920:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000922:	4b08      	ldr	r3, [pc, #32]	; (8000944 <MX_USART2_UART_Init+0x58>)
 8000924:	2200      	movs	r2, #0
 8000926:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000928:	4b06      	ldr	r3, [pc, #24]	; (8000944 <MX_USART2_UART_Init+0x58>)
 800092a:	2200      	movs	r2, #0
 800092c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800092e:	4805      	ldr	r0, [pc, #20]	; (8000944 <MX_USART2_UART_Init+0x58>)
 8000930:	f003 f85e 	bl	80039f0 <HAL_UART_Init>
 8000934:	4603      	mov	r3, r0
 8000936:	2b00      	cmp	r3, #0
 8000938:	d001      	beq.n	800093e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800093a:	f000 f9cb 	bl	8000cd4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800093e:	bf00      	nop
 8000940:	bd80      	pop	{r7, pc}
 8000942:	bf00      	nop
 8000944:	2000011c 	.word	0x2000011c
 8000948:	40004400 	.word	0x40004400

0800094c <MX_WWDG_Init>:
  * @brief WWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_WWDG_Init(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	af00      	add	r7, sp, #0
  /* USER CODE END WWDG_Init 0 */

  /* USER CODE BEGIN WWDG_Init 1 */
	//5-15ms window
  /* USER CODE END WWDG_Init 1 */
  hwwdg.Instance = WWDG;
 8000950:	4b0c      	ldr	r3, [pc, #48]	; (8000984 <MX_WWDG_Init+0x38>)
 8000952:	4a0d      	ldr	r2, [pc, #52]	; (8000988 <MX_WWDG_Init+0x3c>)
 8000954:	601a      	str	r2, [r3, #0]
  hwwdg.Init.Prescaler = WWDG_PRESCALER_4;
 8000956:	4b0b      	ldr	r3, [pc, #44]	; (8000984 <MX_WWDG_Init+0x38>)
 8000958:	f44f 7280 	mov.w	r2, #256	; 0x100
 800095c:	605a      	str	r2, [r3, #4]
  hwwdg.Init.Window = 70;
 800095e:	4b09      	ldr	r3, [pc, #36]	; (8000984 <MX_WWDG_Init+0x38>)
 8000960:	2246      	movs	r2, #70	; 0x46
 8000962:	609a      	str	r2, [r3, #8]
  hwwdg.Init.Counter = 72;
 8000964:	4b07      	ldr	r3, [pc, #28]	; (8000984 <MX_WWDG_Init+0x38>)
 8000966:	2248      	movs	r2, #72	; 0x48
 8000968:	60da      	str	r2, [r3, #12]
  hwwdg.Init.EWIMode = WWDG_EWI_DISABLE;
 800096a:	4b06      	ldr	r3, [pc, #24]	; (8000984 <MX_WWDG_Init+0x38>)
 800096c:	2200      	movs	r2, #0
 800096e:	611a      	str	r2, [r3, #16]
  if (HAL_WWDG_Init(&hwwdg) != HAL_OK)
 8000970:	4804      	ldr	r0, [pc, #16]	; (8000984 <MX_WWDG_Init+0x38>)
 8000972:	f004 f854 	bl	8004a1e <HAL_WWDG_Init>
 8000976:	4603      	mov	r3, r0
 8000978:	2b00      	cmp	r3, #0
 800097a:	d001      	beq.n	8000980 <MX_WWDG_Init+0x34>
  {
    Error_Handler();
 800097c:	f000 f9aa 	bl	8000cd4 <Error_Handler>
  }
  /* USER CODE BEGIN WWDG_Init 2 */

  /* USER CODE END WWDG_Init 2 */

}
 8000980:	bf00      	nop
 8000982:	bd80      	pop	{r7, pc}
 8000984:	200001a4 	.word	0x200001a4
 8000988:	40002c00 	.word	0x40002c00

0800098c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b088      	sub	sp, #32
 8000990:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000992:	f107 030c 	add.w	r3, r7, #12
 8000996:	2200      	movs	r2, #0
 8000998:	601a      	str	r2, [r3, #0]
 800099a:	605a      	str	r2, [r3, #4]
 800099c:	609a      	str	r2, [r3, #8]
 800099e:	60da      	str	r2, [r3, #12]
 80009a0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009a2:	4b2d      	ldr	r3, [pc, #180]	; (8000a58 <MX_GPIO_Init+0xcc>)
 80009a4:	695b      	ldr	r3, [r3, #20]
 80009a6:	4a2c      	ldr	r2, [pc, #176]	; (8000a58 <MX_GPIO_Init+0xcc>)
 80009a8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80009ac:	6153      	str	r3, [r2, #20]
 80009ae:	4b2a      	ldr	r3, [pc, #168]	; (8000a58 <MX_GPIO_Init+0xcc>)
 80009b0:	695b      	ldr	r3, [r3, #20]
 80009b2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80009b6:	60bb      	str	r3, [r7, #8]
 80009b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ba:	4b27      	ldr	r3, [pc, #156]	; (8000a58 <MX_GPIO_Init+0xcc>)
 80009bc:	695b      	ldr	r3, [r3, #20]
 80009be:	4a26      	ldr	r2, [pc, #152]	; (8000a58 <MX_GPIO_Init+0xcc>)
 80009c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009c4:	6153      	str	r3, [r2, #20]
 80009c6:	4b24      	ldr	r3, [pc, #144]	; (8000a58 <MX_GPIO_Init+0xcc>)
 80009c8:	695b      	ldr	r3, [r3, #20]
 80009ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009ce:	607b      	str	r3, [r7, #4]
 80009d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009d2:	4b21      	ldr	r3, [pc, #132]	; (8000a58 <MX_GPIO_Init+0xcc>)
 80009d4:	695b      	ldr	r3, [r3, #20]
 80009d6:	4a20      	ldr	r2, [pc, #128]	; (8000a58 <MX_GPIO_Init+0xcc>)
 80009d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80009dc:	6153      	str	r3, [r2, #20]
 80009de:	4b1e      	ldr	r3, [pc, #120]	; (8000a58 <MX_GPIO_Init+0xcc>)
 80009e0:	695b      	ldr	r3, [r3, #20]
 80009e2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80009e6:	603b      	str	r3, [r7, #0]
 80009e8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pins : PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80009ea:	230c      	movs	r3, #12
 80009ec:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80009ee:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80009f2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009f4:	2301      	movs	r3, #1
 80009f6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009f8:	f107 030c 	add.w	r3, r7, #12
 80009fc:	4619      	mov	r1, r3
 80009fe:	4817      	ldr	r0, [pc, #92]	; (8000a5c <MX_GPIO_Init+0xd0>)
 8000a00:	f000 fe9e 	bl	8001740 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8000a04:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000a08:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a0a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000a0e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a10:	2301      	movs	r3, #1
 8000a12:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a14:	f107 030c 	add.w	r3, r7, #12
 8000a18:	4619      	mov	r1, r3
 8000a1a:	4811      	ldr	r0, [pc, #68]	; (8000a60 <MX_GPIO_Init+0xd4>)
 8000a1c:	f000 fe90 	bl	8001740 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_TSC_IRQn, 5, 0);
 8000a20:	2200      	movs	r2, #0
 8000a22:	2105      	movs	r1, #5
 8000a24:	2008      	movs	r0, #8
 8000a26:	f000 fc0d 	bl	8001244 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_TSC_IRQn);
 8000a2a:	2008      	movs	r0, #8
 8000a2c:	f000 fc26 	bl	800127c <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 5, 0);
 8000a30:	2200      	movs	r2, #0
 8000a32:	2105      	movs	r1, #5
 8000a34:	2009      	movs	r0, #9
 8000a36:	f000 fc05 	bl	8001244 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8000a3a:	2009      	movs	r0, #9
 8000a3c:	f000 fc1e 	bl	800127c <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000a40:	2200      	movs	r2, #0
 8000a42:	2105      	movs	r1, #5
 8000a44:	2028      	movs	r0, #40	; 0x28
 8000a46:	f000 fbfd 	bl	8001244 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000a4a:	2028      	movs	r0, #40	; 0x28
 8000a4c:	f000 fc16 	bl	800127c <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a50:	bf00      	nop
 8000a52:	3720      	adds	r7, #32
 8000a54:	46bd      	mov	sp, r7
 8000a56:	bd80      	pop	{r7, pc}
 8000a58:	40021000 	.word	0x40021000
 8000a5c:	48000800 	.word	0x48000800
 8000a60:	48000400 	.word	0x48000400

08000a64 <StartRead02>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartRead02 */
void StartRead02(void *argument)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b082      	sub	sp, #8
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
  for(;;)
  {
	//  osSemaphoreAcquire(BinSemHandle, osWaitForever);		//wait for semaphore

		//button logic
		if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_2) == 0)
 8000a6c:	2104      	movs	r1, #4
 8000a6e:	485a      	ldr	r0, [pc, #360]	; (8000bd8 <StartRead02+0x174>)
 8000a70:	f000 fff0 	bl	8001a54 <HAL_GPIO_ReadPin>
 8000a74:	4603      	mov	r3, r0
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d114      	bne.n	8000aa4 <StartRead02+0x40>
		{
			data = RELAY1_ON;
 8000a7a:	4958      	ldr	r1, [pc, #352]	; (8000bdc <StartRead02+0x178>)
 8000a7c:	f04f 0201 	mov.w	r2, #1
 8000a80:	f04f 0300 	mov.w	r3, #0
 8000a84:	e9c1 2300 	strd	r2, r3, [r1]
			send_data();
 8000a88:	f7ff fdfc 	bl	8000684 <send_data>
			HAL_UART_Transmit(&huart2, relay1_msg, 20, 10);
 8000a8c:	230a      	movs	r3, #10
 8000a8e:	2214      	movs	r2, #20
 8000a90:	4953      	ldr	r1, [pc, #332]	; (8000be0 <StartRead02+0x17c>)
 8000a92:	4854      	ldr	r0, [pc, #336]	; (8000be4 <StartRead02+0x180>)
 8000a94:	f002 fffa 	bl	8003a8c <HAL_UART_Transmit>
			relay1_count++;
 8000a98:	4b53      	ldr	r3, [pc, #332]	; (8000be8 <StartRead02+0x184>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	3301      	adds	r3, #1
 8000a9e:	4a52      	ldr	r2, [pc, #328]	; (8000be8 <StartRead02+0x184>)
 8000aa0:	6013      	str	r3, [r2, #0]
 8000aa2:	e00f      	b.n	8000ac4 <StartRead02+0x60>
		}else if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_2) == 1){
 8000aa4:	2104      	movs	r1, #4
 8000aa6:	484c      	ldr	r0, [pc, #304]	; (8000bd8 <StartRead02+0x174>)
 8000aa8:	f000 ffd4 	bl	8001a54 <HAL_GPIO_ReadPin>
 8000aac:	4603      	mov	r3, r0
 8000aae:	2b01      	cmp	r3, #1
 8000ab0:	d108      	bne.n	8000ac4 <StartRead02+0x60>
			data = RELAY1_OFF;
 8000ab2:	494a      	ldr	r1, [pc, #296]	; (8000bdc <StartRead02+0x178>)
 8000ab4:	f04f 0202 	mov.w	r2, #2
 8000ab8:	f04f 0300 	mov.w	r3, #0
 8000abc:	e9c1 2300 	strd	r2, r3, [r1]
			send_data();
 8000ac0:	f7ff fde0 	bl	8000684 <send_data>
		}

		if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_3) == 0)
 8000ac4:	2108      	movs	r1, #8
 8000ac6:	4844      	ldr	r0, [pc, #272]	; (8000bd8 <StartRead02+0x174>)
 8000ac8:	f000 ffc4 	bl	8001a54 <HAL_GPIO_ReadPin>
 8000acc:	4603      	mov	r3, r0
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d114      	bne.n	8000afc <StartRead02+0x98>
		{
			data = RELAY2_ON;
 8000ad2:	4942      	ldr	r1, [pc, #264]	; (8000bdc <StartRead02+0x178>)
 8000ad4:	f04f 0203 	mov.w	r2, #3
 8000ad8:	f04f 0300 	mov.w	r3, #0
 8000adc:	e9c1 2300 	strd	r2, r3, [r1]
			send_data();
 8000ae0:	f7ff fdd0 	bl	8000684 <send_data>
			HAL_UART_Transmit(&huart2, relay2_msg, 20, 10);
 8000ae4:	230a      	movs	r3, #10
 8000ae6:	2214      	movs	r2, #20
 8000ae8:	4940      	ldr	r1, [pc, #256]	; (8000bec <StartRead02+0x188>)
 8000aea:	483e      	ldr	r0, [pc, #248]	; (8000be4 <StartRead02+0x180>)
 8000aec:	f002 ffce 	bl	8003a8c <HAL_UART_Transmit>
			relay2_count++;
 8000af0:	4b3f      	ldr	r3, [pc, #252]	; (8000bf0 <StartRead02+0x18c>)
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	3301      	adds	r3, #1
 8000af6:	4a3e      	ldr	r2, [pc, #248]	; (8000bf0 <StartRead02+0x18c>)
 8000af8:	6013      	str	r3, [r2, #0]
 8000afa:	e00f      	b.n	8000b1c <StartRead02+0xb8>
		}else if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_3) == 1){
 8000afc:	2108      	movs	r1, #8
 8000afe:	4836      	ldr	r0, [pc, #216]	; (8000bd8 <StartRead02+0x174>)
 8000b00:	f000 ffa8 	bl	8001a54 <HAL_GPIO_ReadPin>
 8000b04:	4603      	mov	r3, r0
 8000b06:	2b01      	cmp	r3, #1
 8000b08:	d108      	bne.n	8000b1c <StartRead02+0xb8>
			data = RELAY2_OFF;
 8000b0a:	4934      	ldr	r1, [pc, #208]	; (8000bdc <StartRead02+0x178>)
 8000b0c:	f04f 0204 	mov.w	r2, #4
 8000b10:	f04f 0300 	mov.w	r3, #0
 8000b14:	e9c1 2300 	strd	r2, r3, [r1]
			send_data();
 8000b18:	f7ff fdb4 	bl	8000684 <send_data>
		}

		if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14) == 0)
 8000b1c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b20:	4834      	ldr	r0, [pc, #208]	; (8000bf4 <StartRead02+0x190>)
 8000b22:	f000 ff97 	bl	8001a54 <HAL_GPIO_ReadPin>
 8000b26:	4603      	mov	r3, r0
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d114      	bne.n	8000b56 <StartRead02+0xf2>
		{
			data = RELAY3_ON;
 8000b2c:	492b      	ldr	r1, [pc, #172]	; (8000bdc <StartRead02+0x178>)
 8000b2e:	f04f 0205 	mov.w	r2, #5
 8000b32:	f04f 0300 	mov.w	r3, #0
 8000b36:	e9c1 2300 	strd	r2, r3, [r1]
			send_data();
 8000b3a:	f7ff fda3 	bl	8000684 <send_data>
			HAL_UART_Transmit(&huart2, relay3_msg, 20, 10);
 8000b3e:	230a      	movs	r3, #10
 8000b40:	2214      	movs	r2, #20
 8000b42:	492d      	ldr	r1, [pc, #180]	; (8000bf8 <StartRead02+0x194>)
 8000b44:	4827      	ldr	r0, [pc, #156]	; (8000be4 <StartRead02+0x180>)
 8000b46:	f002 ffa1 	bl	8003a8c <HAL_UART_Transmit>
			relay3_count++;
 8000b4a:	4b2c      	ldr	r3, [pc, #176]	; (8000bfc <StartRead02+0x198>)
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	3301      	adds	r3, #1
 8000b50:	4a2a      	ldr	r2, [pc, #168]	; (8000bfc <StartRead02+0x198>)
 8000b52:	6013      	str	r3, [r2, #0]
 8000b54:	e010      	b.n	8000b78 <StartRead02+0x114>
		}else if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14) == 1){
 8000b56:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b5a:	4826      	ldr	r0, [pc, #152]	; (8000bf4 <StartRead02+0x190>)
 8000b5c:	f000 ff7a 	bl	8001a54 <HAL_GPIO_ReadPin>
 8000b60:	4603      	mov	r3, r0
 8000b62:	2b01      	cmp	r3, #1
 8000b64:	d108      	bne.n	8000b78 <StartRead02+0x114>
			data = RELAY3_OFF;
 8000b66:	491d      	ldr	r1, [pc, #116]	; (8000bdc <StartRead02+0x178>)
 8000b68:	f04f 0206 	mov.w	r2, #6
 8000b6c:	f04f 0300 	mov.w	r3, #0
 8000b70:	e9c1 2300 	strd	r2, r3, [r1]
			send_data();
 8000b74:	f7ff fd86 	bl	8000684 <send_data>
		}

		if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15) == 0)
 8000b78:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b7c:	481d      	ldr	r0, [pc, #116]	; (8000bf4 <StartRead02+0x190>)
 8000b7e:	f000 ff69 	bl	8001a54 <HAL_GPIO_ReadPin>
 8000b82:	4603      	mov	r3, r0
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d114      	bne.n	8000bb2 <StartRead02+0x14e>
		{
			data = RELAY4_ON;
 8000b88:	4914      	ldr	r1, [pc, #80]	; (8000bdc <StartRead02+0x178>)
 8000b8a:	f04f 0207 	mov.w	r2, #7
 8000b8e:	f04f 0300 	mov.w	r3, #0
 8000b92:	e9c1 2300 	strd	r2, r3, [r1]
			send_data();
 8000b96:	f7ff fd75 	bl	8000684 <send_data>
			HAL_UART_Transmit(&huart2, relay4_msg, 20, 10);
 8000b9a:	230a      	movs	r3, #10
 8000b9c:	2214      	movs	r2, #20
 8000b9e:	4918      	ldr	r1, [pc, #96]	; (8000c00 <StartRead02+0x19c>)
 8000ba0:	4810      	ldr	r0, [pc, #64]	; (8000be4 <StartRead02+0x180>)
 8000ba2:	f002 ff73 	bl	8003a8c <HAL_UART_Transmit>
			relay4_count++;
 8000ba6:	4b17      	ldr	r3, [pc, #92]	; (8000c04 <StartRead02+0x1a0>)
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	3301      	adds	r3, #1
 8000bac:	4a15      	ldr	r2, [pc, #84]	; (8000c04 <StartRead02+0x1a0>)
 8000bae:	6013      	str	r3, [r2, #0]
 8000bb0:	e75c      	b.n	8000a6c <StartRead02+0x8>
		}else if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15) == 1){
 8000bb2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000bb6:	480f      	ldr	r0, [pc, #60]	; (8000bf4 <StartRead02+0x190>)
 8000bb8:	f000 ff4c 	bl	8001a54 <HAL_GPIO_ReadPin>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	2b01      	cmp	r3, #1
 8000bc0:	f47f af54 	bne.w	8000a6c <StartRead02+0x8>
			data = RELAY4_OFF;
 8000bc4:	4905      	ldr	r1, [pc, #20]	; (8000bdc <StartRead02+0x178>)
 8000bc6:	f04f 0208 	mov.w	r2, #8
 8000bca:	f04f 0300 	mov.w	r3, #0
 8000bce:	e9c1 2300 	strd	r2, r3, [r1]
			send_data();
 8000bd2:	f7ff fd57 	bl	8000684 <send_data>
		if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_2) == 0)
 8000bd6:	e749      	b.n	8000a6c <StartRead02+0x8>
 8000bd8:	48000800 	.word	0x48000800
 8000bdc:	200001e0 	.word	0x200001e0
 8000be0:	20000008 	.word	0x20000008
 8000be4:	2000011c 	.word	0x2000011c
 8000be8:	200001ec 	.word	0x200001ec
 8000bec:	2000001c 	.word	0x2000001c
 8000bf0:	200001f0 	.word	0x200001f0
 8000bf4:	48000400 	.word	0x48000400
 8000bf8:	20000030 	.word	0x20000030
 8000bfc:	200001f4 	.word	0x200001f4
 8000c00:	20000044 	.word	0x20000044
 8000c04:	200001f8 	.word	0x200001f8

08000c08 <StartWatchdog01>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartWatchdog01 */
void StartWatchdog01(void *argument)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b082      	sub	sp, #8
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartWatchdog01 */
  /* Infinite loop */
  for(;;)
  {
		if(LL_TIM_IsActiveFlag_UPDATE(TIM16)){
 8000c10:	480b      	ldr	r0, [pc, #44]	; (8000c40 <StartWatchdog01+0x38>)
 8000c12:	f7ff fca4 	bl	800055e <LL_TIM_IsActiveFlag_UPDATE>
 8000c16:	4603      	mov	r3, r0
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d0f9      	beq.n	8000c10 <StartWatchdog01+0x8>
			LL_TIM_ClearFlag_UPDATE(TIM16);
 8000c1c:	4808      	ldr	r0, [pc, #32]	; (8000c40 <StartWatchdog01+0x38>)
 8000c1e:	f7ff fc90 	bl	8000542 <LL_TIM_ClearFlag_UPDATE>
			LL_TIM_DisableCounter(TIM16);
 8000c22:	4807      	ldr	r0, [pc, #28]	; (8000c40 <StartWatchdog01+0x38>)
 8000c24:	f7ff fc6d 	bl	8000502 <LL_TIM_DisableCounter>
			MX_WWDG_Init();
 8000c28:	f7ff fe90 	bl	800094c <MX_WWDG_Init>
			timer_flag = true;
 8000c2c:	4b05      	ldr	r3, [pc, #20]	; (8000c44 <StartWatchdog01+0x3c>)
 8000c2e:	2201      	movs	r2, #1
 8000c30:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart2, wwdg_msg, 20, 10);
 8000c32:	230a      	movs	r3, #10
 8000c34:	2214      	movs	r2, #20
 8000c36:	4904      	ldr	r1, [pc, #16]	; (8000c48 <StartWatchdog01+0x40>)
 8000c38:	4804      	ldr	r0, [pc, #16]	; (8000c4c <StartWatchdog01+0x44>)
 8000c3a:	f002 ff27 	bl	8003a8c <HAL_UART_Transmit>
		if(LL_TIM_IsActiveFlag_UPDATE(TIM16)){
 8000c3e:	e7e7      	b.n	8000c10 <StartWatchdog01+0x8>
 8000c40:	40014400 	.word	0x40014400
 8000c44:	200001e8 	.word	0x200001e8
 8000c48:	20000058 	.word	0x20000058
 8000c4c:	2000011c 	.word	0x2000011c

08000c50 <StartFlash03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartFlash03 */
void StartFlash03(void *argument)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b082      	sub	sp, #8
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartFlash03 */
  /* Infinite loop */
  for(;;)
  {
//	  osSemaphoreAcquire(BinSemHandle, osWaitForever);		//wait for semaphore
	  flash_write(RELAY1_ADDRESS, relay1_count, timer_flag, &hwwdg);
 8000c58:	4b13      	ldr	r3, [pc, #76]	; (8000ca8 <StartFlash03+0x58>)
 8000c5a:	6819      	ldr	r1, [r3, #0]
 8000c5c:	4b13      	ldr	r3, [pc, #76]	; (8000cac <StartFlash03+0x5c>)
 8000c5e:	781a      	ldrb	r2, [r3, #0]
 8000c60:	4b13      	ldr	r3, [pc, #76]	; (8000cb0 <StartFlash03+0x60>)
 8000c62:	4814      	ldr	r0, [pc, #80]	; (8000cb4 <StartFlash03+0x64>)
 8000c64:	f7ff fb72 	bl	800034c <flash_write>
	  flash_write(RELAY2_ADDRESS, relay2_count, timer_flag, &hwwdg);
 8000c68:	4b13      	ldr	r3, [pc, #76]	; (8000cb8 <StartFlash03+0x68>)
 8000c6a:	6819      	ldr	r1, [r3, #0]
 8000c6c:	4b0f      	ldr	r3, [pc, #60]	; (8000cac <StartFlash03+0x5c>)
 8000c6e:	781a      	ldrb	r2, [r3, #0]
 8000c70:	4b0f      	ldr	r3, [pc, #60]	; (8000cb0 <StartFlash03+0x60>)
 8000c72:	4812      	ldr	r0, [pc, #72]	; (8000cbc <StartFlash03+0x6c>)
 8000c74:	f7ff fb6a 	bl	800034c <flash_write>
	  flash_write(RELAY3_ADDRESS, relay3_count, timer_flag, &hwwdg);
 8000c78:	4b11      	ldr	r3, [pc, #68]	; (8000cc0 <StartFlash03+0x70>)
 8000c7a:	6819      	ldr	r1, [r3, #0]
 8000c7c:	4b0b      	ldr	r3, [pc, #44]	; (8000cac <StartFlash03+0x5c>)
 8000c7e:	781a      	ldrb	r2, [r3, #0]
 8000c80:	4b0b      	ldr	r3, [pc, #44]	; (8000cb0 <StartFlash03+0x60>)
 8000c82:	4810      	ldr	r0, [pc, #64]	; (8000cc4 <StartFlash03+0x74>)
 8000c84:	f7ff fb62 	bl	800034c <flash_write>
	  flash_write(RELAY4_ADDRESS, relay4_count, timer_flag, &hwwdg);
 8000c88:	4b0f      	ldr	r3, [pc, #60]	; (8000cc8 <StartFlash03+0x78>)
 8000c8a:	6819      	ldr	r1, [r3, #0]
 8000c8c:	4b07      	ldr	r3, [pc, #28]	; (8000cac <StartFlash03+0x5c>)
 8000c8e:	781a      	ldrb	r2, [r3, #0]
 8000c90:	4b07      	ldr	r3, [pc, #28]	; (8000cb0 <StartFlash03+0x60>)
 8000c92:	480e      	ldr	r0, [pc, #56]	; (8000ccc <StartFlash03+0x7c>)
 8000c94:	f7ff fb5a 	bl	800034c <flash_write>

	  test = flash_read(RELAY1_ADDRESS);
 8000c98:	4806      	ldr	r0, [pc, #24]	; (8000cb4 <StartFlash03+0x64>)
 8000c9a:	f7ff fb8c 	bl	80003b6 <flash_read>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	4a0b      	ldr	r2, [pc, #44]	; (8000cd0 <StartFlash03+0x80>)
 8000ca2:	6013      	str	r3, [r2, #0]
	  flash_write(RELAY1_ADDRESS, relay1_count, timer_flag, &hwwdg);
 8000ca4:	e7d8      	b.n	8000c58 <StartFlash03+0x8>
 8000ca6:	bf00      	nop
 8000ca8:	200001ec 	.word	0x200001ec
 8000cac:	200001e8 	.word	0x200001e8
 8000cb0:	200001a4 	.word	0x200001a4
 8000cb4:	0803f800 	.word	0x0803f800
 8000cb8:	200001f0 	.word	0x200001f0
 8000cbc:	0803f000 	.word	0x0803f000
 8000cc0:	200001f4 	.word	0x200001f4
 8000cc4:	0803e800 	.word	0x0803e800
 8000cc8:	200001f8 	.word	0x200001f8
 8000ccc:	0803e000 	.word	0x0803e000
 8000cd0:	200001fc 	.word	0x200001fc

08000cd4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cd8:	b672      	cpsid	i
}
 8000cda:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cdc:	e7fe      	b.n	8000cdc <Error_Handler+0x8>
	...

08000ce0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b082      	sub	sp, #8
 8000ce4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ce6:	4b11      	ldr	r3, [pc, #68]	; (8000d2c <HAL_MspInit+0x4c>)
 8000ce8:	699b      	ldr	r3, [r3, #24]
 8000cea:	4a10      	ldr	r2, [pc, #64]	; (8000d2c <HAL_MspInit+0x4c>)
 8000cec:	f043 0301 	orr.w	r3, r3, #1
 8000cf0:	6193      	str	r3, [r2, #24]
 8000cf2:	4b0e      	ldr	r3, [pc, #56]	; (8000d2c <HAL_MspInit+0x4c>)
 8000cf4:	699b      	ldr	r3, [r3, #24]
 8000cf6:	f003 0301 	and.w	r3, r3, #1
 8000cfa:	607b      	str	r3, [r7, #4]
 8000cfc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cfe:	4b0b      	ldr	r3, [pc, #44]	; (8000d2c <HAL_MspInit+0x4c>)
 8000d00:	69db      	ldr	r3, [r3, #28]
 8000d02:	4a0a      	ldr	r2, [pc, #40]	; (8000d2c <HAL_MspInit+0x4c>)
 8000d04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d08:	61d3      	str	r3, [r2, #28]
 8000d0a:	4b08      	ldr	r3, [pc, #32]	; (8000d2c <HAL_MspInit+0x4c>)
 8000d0c:	69db      	ldr	r3, [r3, #28]
 8000d0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d12:	603b      	str	r3, [r7, #0]
 8000d14:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000d16:	2200      	movs	r2, #0
 8000d18:	210f      	movs	r1, #15
 8000d1a:	f06f 0001 	mvn.w	r0, #1
 8000d1e:	f000 fa91 	bl	8001244 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d22:	bf00      	nop
 8000d24:	3708      	adds	r7, #8
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bd80      	pop	{r7, pc}
 8000d2a:	bf00      	nop
 8000d2c:	40021000 	.word	0x40021000

08000d30 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b08c      	sub	sp, #48	; 0x30
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d38:	f107 031c 	add.w	r3, r7, #28
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	601a      	str	r2, [r3, #0]
 8000d40:	605a      	str	r2, [r3, #4]
 8000d42:	609a      	str	r2, [r3, #8]
 8000d44:	60da      	str	r2, [r3, #12]
 8000d46:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	4a36      	ldr	r2, [pc, #216]	; (8000e28 <HAL_UART_MspInit+0xf8>)
 8000d4e:	4293      	cmp	r3, r2
 8000d50:	d130      	bne.n	8000db4 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000d52:	4b36      	ldr	r3, [pc, #216]	; (8000e2c <HAL_UART_MspInit+0xfc>)
 8000d54:	699b      	ldr	r3, [r3, #24]
 8000d56:	4a35      	ldr	r2, [pc, #212]	; (8000e2c <HAL_UART_MspInit+0xfc>)
 8000d58:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d5c:	6193      	str	r3, [r2, #24]
 8000d5e:	4b33      	ldr	r3, [pc, #204]	; (8000e2c <HAL_UART_MspInit+0xfc>)
 8000d60:	699b      	ldr	r3, [r3, #24]
 8000d62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d66:	61bb      	str	r3, [r7, #24]
 8000d68:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d6a:	4b30      	ldr	r3, [pc, #192]	; (8000e2c <HAL_UART_MspInit+0xfc>)
 8000d6c:	695b      	ldr	r3, [r3, #20]
 8000d6e:	4a2f      	ldr	r2, [pc, #188]	; (8000e2c <HAL_UART_MspInit+0xfc>)
 8000d70:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000d74:	6153      	str	r3, [r2, #20]
 8000d76:	4b2d      	ldr	r3, [pc, #180]	; (8000e2c <HAL_UART_MspInit+0xfc>)
 8000d78:	695b      	ldr	r3, [r3, #20]
 8000d7a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000d7e:	617b      	str	r3, [r7, #20]
 8000d80:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000d82:	2330      	movs	r3, #48	; 0x30
 8000d84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d86:	2302      	movs	r3, #2
 8000d88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d8e:	2303      	movs	r3, #3
 8000d90:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000d92:	2307      	movs	r3, #7
 8000d94:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d96:	f107 031c 	add.w	r3, r7, #28
 8000d9a:	4619      	mov	r1, r3
 8000d9c:	4824      	ldr	r0, [pc, #144]	; (8000e30 <HAL_UART_MspInit+0x100>)
 8000d9e:	f000 fccf 	bl	8001740 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8000da2:	2200      	movs	r2, #0
 8000da4:	2105      	movs	r1, #5
 8000da6:	2025      	movs	r0, #37	; 0x25
 8000da8:	f000 fa4c 	bl	8001244 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000dac:	2025      	movs	r0, #37	; 0x25
 8000dae:	f000 fa65 	bl	800127c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000db2:	e035      	b.n	8000e20 <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART2)
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	4a1e      	ldr	r2, [pc, #120]	; (8000e34 <HAL_UART_MspInit+0x104>)
 8000dba:	4293      	cmp	r3, r2
 8000dbc:	d130      	bne.n	8000e20 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000dbe:	4b1b      	ldr	r3, [pc, #108]	; (8000e2c <HAL_UART_MspInit+0xfc>)
 8000dc0:	69db      	ldr	r3, [r3, #28]
 8000dc2:	4a1a      	ldr	r2, [pc, #104]	; (8000e2c <HAL_UART_MspInit+0xfc>)
 8000dc4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000dc8:	61d3      	str	r3, [r2, #28]
 8000dca:	4b18      	ldr	r3, [pc, #96]	; (8000e2c <HAL_UART_MspInit+0xfc>)
 8000dcc:	69db      	ldr	r3, [r3, #28]
 8000dce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dd2:	613b      	str	r3, [r7, #16]
 8000dd4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dd6:	4b15      	ldr	r3, [pc, #84]	; (8000e2c <HAL_UART_MspInit+0xfc>)
 8000dd8:	695b      	ldr	r3, [r3, #20]
 8000dda:	4a14      	ldr	r2, [pc, #80]	; (8000e2c <HAL_UART_MspInit+0xfc>)
 8000ddc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000de0:	6153      	str	r3, [r2, #20]
 8000de2:	4b12      	ldr	r3, [pc, #72]	; (8000e2c <HAL_UART_MspInit+0xfc>)
 8000de4:	695b      	ldr	r3, [r3, #20]
 8000de6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dea:	60fb      	str	r3, [r7, #12]
 8000dec:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000dee:	230c      	movs	r3, #12
 8000df0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000df2:	2302      	movs	r3, #2
 8000df4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df6:	2300      	movs	r3, #0
 8000df8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000dfa:	2303      	movs	r3, #3
 8000dfc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000dfe:	2307      	movs	r3, #7
 8000e00:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e02:	f107 031c 	add.w	r3, r7, #28
 8000e06:	4619      	mov	r1, r3
 8000e08:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e0c:	f000 fc98 	bl	8001740 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8000e10:	2200      	movs	r2, #0
 8000e12:	2105      	movs	r1, #5
 8000e14:	2026      	movs	r0, #38	; 0x26
 8000e16:	f000 fa15 	bl	8001244 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000e1a:	2026      	movs	r0, #38	; 0x26
 8000e1c:	f000 fa2e 	bl	800127c <HAL_NVIC_EnableIRQ>
}
 8000e20:	bf00      	nop
 8000e22:	3730      	adds	r7, #48	; 0x30
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bd80      	pop	{r7, pc}
 8000e28:	40013800 	.word	0x40013800
 8000e2c:	40021000 	.word	0x40021000
 8000e30:	48000800 	.word	0x48000800
 8000e34:	40004400 	.word	0x40004400

08000e38 <HAL_WWDG_MspInit>:
* This function configures the hardware resources used in this example
* @param hwwdg: WWDG handle pointer
* @retval None
*/
void HAL_WWDG_MspInit(WWDG_HandleTypeDef* hwwdg)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	b085      	sub	sp, #20
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
  if(hwwdg->Instance==WWDG)
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	4a0a      	ldr	r2, [pc, #40]	; (8000e70 <HAL_WWDG_MspInit+0x38>)
 8000e46:	4293      	cmp	r3, r2
 8000e48:	d10b      	bne.n	8000e62 <HAL_WWDG_MspInit+0x2a>
  {
  /* USER CODE BEGIN WWDG_MspInit 0 */

  /* USER CODE END WWDG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_WWDG_CLK_ENABLE();
 8000e4a:	4b0a      	ldr	r3, [pc, #40]	; (8000e74 <HAL_WWDG_MspInit+0x3c>)
 8000e4c:	69db      	ldr	r3, [r3, #28]
 8000e4e:	4a09      	ldr	r2, [pc, #36]	; (8000e74 <HAL_WWDG_MspInit+0x3c>)
 8000e50:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000e54:	61d3      	str	r3, [r2, #28]
 8000e56:	4b07      	ldr	r3, [pc, #28]	; (8000e74 <HAL_WWDG_MspInit+0x3c>)
 8000e58:	69db      	ldr	r3, [r3, #28]
 8000e5a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000e5e:	60fb      	str	r3, [r7, #12]
 8000e60:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN WWDG_MspInit 1 */

  /* USER CODE END WWDG_MspInit 1 */
  }

}
 8000e62:	bf00      	nop
 8000e64:	3714      	adds	r7, #20
 8000e66:	46bd      	mov	sp, r7
 8000e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6c:	4770      	bx	lr
 8000e6e:	bf00      	nop
 8000e70:	40002c00 	.word	0x40002c00
 8000e74:	40021000 	.word	0x40021000

08000e78 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b08e      	sub	sp, #56	; 0x38
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000e80:	2300      	movs	r3, #0
 8000e82:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000e84:	2300      	movs	r3, #0
 8000e86:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000e88:	4b33      	ldr	r3, [pc, #204]	; (8000f58 <HAL_InitTick+0xe0>)
 8000e8a:	69db      	ldr	r3, [r3, #28]
 8000e8c:	4a32      	ldr	r2, [pc, #200]	; (8000f58 <HAL_InitTick+0xe0>)
 8000e8e:	f043 0310 	orr.w	r3, r3, #16
 8000e92:	61d3      	str	r3, [r2, #28]
 8000e94:	4b30      	ldr	r3, [pc, #192]	; (8000f58 <HAL_InitTick+0xe0>)
 8000e96:	69db      	ldr	r3, [r3, #28]
 8000e98:	f003 0310 	and.w	r3, r3, #16
 8000e9c:	60fb      	str	r3, [r7, #12]
 8000e9e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000ea0:	f107 0210 	add.w	r2, r7, #16
 8000ea4:	f107 0314 	add.w	r3, r7, #20
 8000ea8:	4611      	mov	r1, r2
 8000eaa:	4618      	mov	r0, r3
 8000eac:	f002 f882 	bl	8002fb4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000eb0:	6a3b      	ldr	r3, [r7, #32]
 8000eb2:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000eb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d103      	bne.n	8000ec2 <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000eba:	f002 f837 	bl	8002f2c <HAL_RCC_GetPCLK1Freq>
 8000ebe:	6378      	str	r0, [r7, #52]	; 0x34
 8000ec0:	e004      	b.n	8000ecc <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000ec2:	f002 f833 	bl	8002f2c <HAL_RCC_GetPCLK1Freq>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	005b      	lsls	r3, r3, #1
 8000eca:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000ecc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ece:	4a23      	ldr	r2, [pc, #140]	; (8000f5c <HAL_InitTick+0xe4>)
 8000ed0:	fba2 2303 	umull	r2, r3, r2, r3
 8000ed4:	0c9b      	lsrs	r3, r3, #18
 8000ed6:	3b01      	subs	r3, #1
 8000ed8:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000eda:	4b21      	ldr	r3, [pc, #132]	; (8000f60 <HAL_InitTick+0xe8>)
 8000edc:	4a21      	ldr	r2, [pc, #132]	; (8000f64 <HAL_InitTick+0xec>)
 8000ede:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000ee0:	4b1f      	ldr	r3, [pc, #124]	; (8000f60 <HAL_InitTick+0xe8>)
 8000ee2:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000ee6:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000ee8:	4a1d      	ldr	r2, [pc, #116]	; (8000f60 <HAL_InitTick+0xe8>)
 8000eea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000eec:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000eee:	4b1c      	ldr	r3, [pc, #112]	; (8000f60 <HAL_InitTick+0xe8>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ef4:	4b1a      	ldr	r3, [pc, #104]	; (8000f60 <HAL_InitTick+0xe8>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000efa:	4b19      	ldr	r3, [pc, #100]	; (8000f60 <HAL_InitTick+0xe8>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000f00:	4817      	ldr	r0, [pc, #92]	; (8000f60 <HAL_InitTick+0xe8>)
 8000f02:	f002 faa7 	bl	8003454 <HAL_TIM_Base_Init>
 8000f06:	4603      	mov	r3, r0
 8000f08:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000f0c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d11b      	bne.n	8000f4c <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000f14:	4812      	ldr	r0, [pc, #72]	; (8000f60 <HAL_InitTick+0xe8>)
 8000f16:	f002 faff 	bl	8003518 <HAL_TIM_Base_Start_IT>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000f20:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d111      	bne.n	8000f4c <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000f28:	2036      	movs	r0, #54	; 0x36
 8000f2a:	f000 f9a7 	bl	800127c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	2b0f      	cmp	r3, #15
 8000f32:	d808      	bhi.n	8000f46 <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000f34:	2200      	movs	r2, #0
 8000f36:	6879      	ldr	r1, [r7, #4]
 8000f38:	2036      	movs	r0, #54	; 0x36
 8000f3a:	f000 f983 	bl	8001244 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f3e:	4a0a      	ldr	r2, [pc, #40]	; (8000f68 <HAL_InitTick+0xf0>)
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	6013      	str	r3, [r2, #0]
 8000f44:	e002      	b.n	8000f4c <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8000f46:	2301      	movs	r3, #1
 8000f48:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000f4c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000f50:	4618      	mov	r0, r3
 8000f52:	3738      	adds	r7, #56	; 0x38
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bd80      	pop	{r7, pc}
 8000f58:	40021000 	.word	0x40021000
 8000f5c:	431bde83 	.word	0x431bde83
 8000f60:	20000200 	.word	0x20000200
 8000f64:	40001000 	.word	0x40001000
 8000f68:	20000070 	.word	0x20000070

08000f6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f70:	e7fe      	b.n	8000f70 <NMI_Handler+0x4>

08000f72 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f72:	b480      	push	{r7}
 8000f74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f76:	e7fe      	b.n	8000f76 <HardFault_Handler+0x4>

08000f78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f7c:	e7fe      	b.n	8000f7c <MemManage_Handler+0x4>

08000f7e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f7e:	b480      	push	{r7}
 8000f80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f82:	e7fe      	b.n	8000f82 <BusFault_Handler+0x4>

08000f84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f84:	b480      	push	{r7}
 8000f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f88:	e7fe      	b.n	8000f88 <UsageFault_Handler+0x4>

08000f8a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f8a:	b480      	push	{r7}
 8000f8c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f8e:	bf00      	nop
 8000f90:	46bd      	mov	sp, r7
 8000f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f96:	4770      	bx	lr

08000f98 <EXTI2_TSC_IRQHandler>:

/**
  * @brief This function handles EXTI line2 and Touch Sense controller interrupts.
  */
void EXTI2_TSC_IRQHandler(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_TSC_IRQn 0 */

  /* USER CODE END EXTI2_TSC_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8000f9c:	2004      	movs	r0, #4
 8000f9e:	f000 fd71 	bl	8001a84 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_TSC_IRQn 1 */

  /* USER CODE END EXTI2_TSC_IRQn 1 */
}
 8000fa2:	bf00      	nop
 8000fa4:	bd80      	pop	{r7, pc}

08000fa6 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8000fa6:	b580      	push	{r7, lr}
 8000fa8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8000faa:	2008      	movs	r0, #8
 8000fac:	f000 fd6a 	bl	8001a84 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8000fb0:	bf00      	nop
 8000fb2:	bd80      	pop	{r7, pc}

08000fb4 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update and TIM16 interrupts.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000fb8:	bf00      	nop
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc0:	4770      	bx	lr
	...

08000fc4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000fc8:	4802      	ldr	r0, [pc, #8]	; (8000fd4 <USART1_IRQHandler+0x10>)
 8000fca:	f002 fde9 	bl	8003ba0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000fce:	bf00      	nop
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	20000094 	.word	0x20000094

08000fd8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000fdc:	4802      	ldr	r0, [pc, #8]	; (8000fe8 <USART2_IRQHandler+0x10>)
 8000fde:	f002 fddf 	bl	8003ba0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000fe2:	bf00      	nop
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	2000011c 	.word	0x2000011c

08000fec <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8000ff0:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000ff4:	f000 fd46 	bl	8001a84 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8000ff8:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000ffc:	f000 fd42 	bl	8001a84 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001000:	bf00      	nop
 8001002:	bd80      	pop	{r7, pc}

08001004 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1 underrun interrupt.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001008:	4802      	ldr	r0, [pc, #8]	; (8001014 <TIM6_DAC_IRQHandler+0x10>)
 800100a:	f002 faf5 	bl	80035f8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800100e:	bf00      	nop
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	20000200 	.word	0x20000200

08001018 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001018:	b480      	push	{r7}
 800101a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800101c:	4b06      	ldr	r3, [pc, #24]	; (8001038 <SystemInit+0x20>)
 800101e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001022:	4a05      	ldr	r2, [pc, #20]	; (8001038 <SystemInit+0x20>)
 8001024:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001028:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800102c:	bf00      	nop
 800102e:	46bd      	mov	sp, r7
 8001030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001034:	4770      	bx	lr
 8001036:	bf00      	nop
 8001038:	e000ed00 	.word	0xe000ed00

0800103c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800103c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001074 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001040:	f7ff ffea 	bl	8001018 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001044:	480c      	ldr	r0, [pc, #48]	; (8001078 <LoopForever+0x6>)
  ldr r1, =_edata
 8001046:	490d      	ldr	r1, [pc, #52]	; (800107c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001048:	4a0d      	ldr	r2, [pc, #52]	; (8001080 <LoopForever+0xe>)
  movs r3, #0
 800104a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800104c:	e002      	b.n	8001054 <LoopCopyDataInit>

0800104e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800104e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001050:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001052:	3304      	adds	r3, #4

08001054 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001054:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001056:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001058:	d3f9      	bcc.n	800104e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800105a:	4a0a      	ldr	r2, [pc, #40]	; (8001084 <LoopForever+0x12>)
  ldr r4, =_ebss
 800105c:	4c0a      	ldr	r4, [pc, #40]	; (8001088 <LoopForever+0x16>)
  movs r3, #0
 800105e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001060:	e001      	b.n	8001066 <LoopFillZerobss>

08001062 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001062:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001064:	3204      	adds	r2, #4

08001066 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001066:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001068:	d3fb      	bcc.n	8001062 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800106a:	f006 fcbf 	bl	80079ec <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800106e:	f7ff fb29 	bl	80006c4 <main>

08001072 <LoopForever>:

LoopForever:
    b LoopForever
 8001072:	e7fe      	b.n	8001072 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001074:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001078:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800107c:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8001080:	08007b64 	.word	0x08007b64
  ldr r2, =_sbss
 8001084:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8001088:	20001bb8 	.word	0x20001bb8

0800108c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800108c:	e7fe      	b.n	800108c <ADC1_2_IRQHandler>
	...

08001090 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001094:	4b08      	ldr	r3, [pc, #32]	; (80010b8 <HAL_Init+0x28>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	4a07      	ldr	r2, [pc, #28]	; (80010b8 <HAL_Init+0x28>)
 800109a:	f043 0310 	orr.w	r3, r3, #16
 800109e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010a0:	2003      	movs	r0, #3
 80010a2:	f000 f8c4 	bl	800122e <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010a6:	200f      	movs	r0, #15
 80010a8:	f7ff fee6 	bl	8000e78 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010ac:	f7ff fe18 	bl	8000ce0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010b0:	2300      	movs	r3, #0
}
 80010b2:	4618      	mov	r0, r3
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	40022000 	.word	0x40022000

080010bc <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010bc:	b480      	push	{r7}
 80010be:	af00      	add	r7, sp, #0
  return uwTick;  
 80010c0:	4b03      	ldr	r3, [pc, #12]	; (80010d0 <HAL_GetTick+0x14>)
 80010c2:	681b      	ldr	r3, [r3, #0]
}
 80010c4:	4618      	mov	r0, r3
 80010c6:	46bd      	mov	sp, r7
 80010c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010cc:	4770      	bx	lr
 80010ce:	bf00      	nop
 80010d0:	2000024c 	.word	0x2000024c

080010d4 <__NVIC_SetPriorityGrouping>:
{
 80010d4:	b480      	push	{r7}
 80010d6:	b085      	sub	sp, #20
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	f003 0307 	and.w	r3, r3, #7
 80010e2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010e4:	4b0c      	ldr	r3, [pc, #48]	; (8001118 <__NVIC_SetPriorityGrouping+0x44>)
 80010e6:	68db      	ldr	r3, [r3, #12]
 80010e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010ea:	68ba      	ldr	r2, [r7, #8]
 80010ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010f0:	4013      	ands	r3, r2
 80010f2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010f8:	68bb      	ldr	r3, [r7, #8]
 80010fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010fc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001100:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001104:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001106:	4a04      	ldr	r2, [pc, #16]	; (8001118 <__NVIC_SetPriorityGrouping+0x44>)
 8001108:	68bb      	ldr	r3, [r7, #8]
 800110a:	60d3      	str	r3, [r2, #12]
}
 800110c:	bf00      	nop
 800110e:	3714      	adds	r7, #20
 8001110:	46bd      	mov	sp, r7
 8001112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001116:	4770      	bx	lr
 8001118:	e000ed00 	.word	0xe000ed00

0800111c <__NVIC_GetPriorityGrouping>:
{
 800111c:	b480      	push	{r7}
 800111e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001120:	4b04      	ldr	r3, [pc, #16]	; (8001134 <__NVIC_GetPriorityGrouping+0x18>)
 8001122:	68db      	ldr	r3, [r3, #12]
 8001124:	0a1b      	lsrs	r3, r3, #8
 8001126:	f003 0307 	and.w	r3, r3, #7
}
 800112a:	4618      	mov	r0, r3
 800112c:	46bd      	mov	sp, r7
 800112e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001132:	4770      	bx	lr
 8001134:	e000ed00 	.word	0xe000ed00

08001138 <__NVIC_EnableIRQ>:
{
 8001138:	b480      	push	{r7}
 800113a:	b083      	sub	sp, #12
 800113c:	af00      	add	r7, sp, #0
 800113e:	4603      	mov	r3, r0
 8001140:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001142:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001146:	2b00      	cmp	r3, #0
 8001148:	db0b      	blt.n	8001162 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800114a:	79fb      	ldrb	r3, [r7, #7]
 800114c:	f003 021f 	and.w	r2, r3, #31
 8001150:	4907      	ldr	r1, [pc, #28]	; (8001170 <__NVIC_EnableIRQ+0x38>)
 8001152:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001156:	095b      	lsrs	r3, r3, #5
 8001158:	2001      	movs	r0, #1
 800115a:	fa00 f202 	lsl.w	r2, r0, r2
 800115e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001162:	bf00      	nop
 8001164:	370c      	adds	r7, #12
 8001166:	46bd      	mov	sp, r7
 8001168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116c:	4770      	bx	lr
 800116e:	bf00      	nop
 8001170:	e000e100 	.word	0xe000e100

08001174 <__NVIC_SetPriority>:
{
 8001174:	b480      	push	{r7}
 8001176:	b083      	sub	sp, #12
 8001178:	af00      	add	r7, sp, #0
 800117a:	4603      	mov	r3, r0
 800117c:	6039      	str	r1, [r7, #0]
 800117e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001180:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001184:	2b00      	cmp	r3, #0
 8001186:	db0a      	blt.n	800119e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001188:	683b      	ldr	r3, [r7, #0]
 800118a:	b2da      	uxtb	r2, r3
 800118c:	490c      	ldr	r1, [pc, #48]	; (80011c0 <__NVIC_SetPriority+0x4c>)
 800118e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001192:	0112      	lsls	r2, r2, #4
 8001194:	b2d2      	uxtb	r2, r2
 8001196:	440b      	add	r3, r1
 8001198:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800119c:	e00a      	b.n	80011b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	b2da      	uxtb	r2, r3
 80011a2:	4908      	ldr	r1, [pc, #32]	; (80011c4 <__NVIC_SetPriority+0x50>)
 80011a4:	79fb      	ldrb	r3, [r7, #7]
 80011a6:	f003 030f 	and.w	r3, r3, #15
 80011aa:	3b04      	subs	r3, #4
 80011ac:	0112      	lsls	r2, r2, #4
 80011ae:	b2d2      	uxtb	r2, r2
 80011b0:	440b      	add	r3, r1
 80011b2:	761a      	strb	r2, [r3, #24]
}
 80011b4:	bf00      	nop
 80011b6:	370c      	adds	r7, #12
 80011b8:	46bd      	mov	sp, r7
 80011ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011be:	4770      	bx	lr
 80011c0:	e000e100 	.word	0xe000e100
 80011c4:	e000ed00 	.word	0xe000ed00

080011c8 <NVIC_EncodePriority>:
{
 80011c8:	b480      	push	{r7}
 80011ca:	b089      	sub	sp, #36	; 0x24
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	60f8      	str	r0, [r7, #12]
 80011d0:	60b9      	str	r1, [r7, #8]
 80011d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	f003 0307 	and.w	r3, r3, #7
 80011da:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011dc:	69fb      	ldr	r3, [r7, #28]
 80011de:	f1c3 0307 	rsb	r3, r3, #7
 80011e2:	2b04      	cmp	r3, #4
 80011e4:	bf28      	it	cs
 80011e6:	2304      	movcs	r3, #4
 80011e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011ea:	69fb      	ldr	r3, [r7, #28]
 80011ec:	3304      	adds	r3, #4
 80011ee:	2b06      	cmp	r3, #6
 80011f0:	d902      	bls.n	80011f8 <NVIC_EncodePriority+0x30>
 80011f2:	69fb      	ldr	r3, [r7, #28]
 80011f4:	3b03      	subs	r3, #3
 80011f6:	e000      	b.n	80011fa <NVIC_EncodePriority+0x32>
 80011f8:	2300      	movs	r3, #0
 80011fa:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011fc:	f04f 32ff 	mov.w	r2, #4294967295
 8001200:	69bb      	ldr	r3, [r7, #24]
 8001202:	fa02 f303 	lsl.w	r3, r2, r3
 8001206:	43da      	mvns	r2, r3
 8001208:	68bb      	ldr	r3, [r7, #8]
 800120a:	401a      	ands	r2, r3
 800120c:	697b      	ldr	r3, [r7, #20]
 800120e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001210:	f04f 31ff 	mov.w	r1, #4294967295
 8001214:	697b      	ldr	r3, [r7, #20]
 8001216:	fa01 f303 	lsl.w	r3, r1, r3
 800121a:	43d9      	mvns	r1, r3
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001220:	4313      	orrs	r3, r2
}
 8001222:	4618      	mov	r0, r3
 8001224:	3724      	adds	r7, #36	; 0x24
 8001226:	46bd      	mov	sp, r7
 8001228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122c:	4770      	bx	lr

0800122e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800122e:	b580      	push	{r7, lr}
 8001230:	b082      	sub	sp, #8
 8001232:	af00      	add	r7, sp, #0
 8001234:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001236:	6878      	ldr	r0, [r7, #4]
 8001238:	f7ff ff4c 	bl	80010d4 <__NVIC_SetPriorityGrouping>
}
 800123c:	bf00      	nop
 800123e:	3708      	adds	r7, #8
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}

08001244 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b086      	sub	sp, #24
 8001248:	af00      	add	r7, sp, #0
 800124a:	4603      	mov	r3, r0
 800124c:	60b9      	str	r1, [r7, #8]
 800124e:	607a      	str	r2, [r7, #4]
 8001250:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001252:	2300      	movs	r3, #0
 8001254:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001256:	f7ff ff61 	bl	800111c <__NVIC_GetPriorityGrouping>
 800125a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800125c:	687a      	ldr	r2, [r7, #4]
 800125e:	68b9      	ldr	r1, [r7, #8]
 8001260:	6978      	ldr	r0, [r7, #20]
 8001262:	f7ff ffb1 	bl	80011c8 <NVIC_EncodePriority>
 8001266:	4602      	mov	r2, r0
 8001268:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800126c:	4611      	mov	r1, r2
 800126e:	4618      	mov	r0, r3
 8001270:	f7ff ff80 	bl	8001174 <__NVIC_SetPriority>
}
 8001274:	bf00      	nop
 8001276:	3718      	adds	r7, #24
 8001278:	46bd      	mov	sp, r7
 800127a:	bd80      	pop	{r7, pc}

0800127c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b082      	sub	sp, #8
 8001280:	af00      	add	r7, sp, #0
 8001282:	4603      	mov	r3, r0
 8001284:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001286:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800128a:	4618      	mov	r0, r3
 800128c:	f7ff ff54 	bl	8001138 <__NVIC_EnableIRQ>
}
 8001290:	bf00      	nop
 8001292:	3708      	adds	r7, #8
 8001294:	46bd      	mov	sp, r7
 8001296:	bd80      	pop	{r7, pc}

08001298 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001298:	b480      	push	{r7}
 800129a:	b083      	sub	sp, #12
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d101      	bne.n	80012aa <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 80012a6:	2301      	movs	r3, #1
 80012a8:	e02e      	b.n	8001308 <HAL_DMA_Abort+0x70>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80012b0:	2b02      	cmp	r3, #2
 80012b2:	d008      	beq.n	80012c6 <HAL_DMA_Abort+0x2e>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	2204      	movs	r2, #4
 80012b8:	639a      	str	r2, [r3, #56]	; 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	2200      	movs	r2, #0
 80012be:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 80012c2:	2301      	movs	r3, #1
 80012c4:	e020      	b.n	8001308 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	681a      	ldr	r2, [r3, #0]
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	f022 020e 	bic.w	r2, r2, #14
 80012d4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	681a      	ldr	r2, [r3, #0]
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	f022 0201 	bic.w	r2, r2, #1
 80012e4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80012ee:	2101      	movs	r1, #1
 80012f0:	fa01 f202 	lsl.w	r2, r1, r2
 80012f4:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	2201      	movs	r2, #1
 80012fa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	2200      	movs	r2, #0
 8001302:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001306:	2300      	movs	r3, #0
}
 8001308:	4618      	mov	r0, r3
 800130a:	370c      	adds	r7, #12
 800130c:	46bd      	mov	sp, r7
 800130e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001312:	4770      	bx	lr

08001314 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b084      	sub	sp, #16
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800131c:	2300      	movs	r3, #0
 800131e:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001326:	2b02      	cmp	r3, #2
 8001328:	d005      	beq.n	8001336 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	2204      	movs	r2, #4
 800132e:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 8001330:	2301      	movs	r3, #1
 8001332:	73fb      	strb	r3, [r7, #15]
 8001334:	e027      	b.n	8001386 <HAL_DMA_Abort_IT+0x72>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	681a      	ldr	r2, [r3, #0]
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	f022 020e 	bic.w	r2, r2, #14
 8001344:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	681a      	ldr	r2, [r3, #0]
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	f022 0201 	bic.w	r2, r2, #1
 8001354:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800135e:	2101      	movs	r1, #1
 8001360:	fa01 f202 	lsl.w	r2, r1, r2
 8001364:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	2201      	movs	r2, #1
 800136a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	2200      	movs	r2, #0
 8001372:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800137a:	2b00      	cmp	r3, #0
 800137c:	d003      	beq.n	8001386 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001382:	6878      	ldr	r0, [r7, #4]
 8001384:	4798      	blx	r3
    }
  }
  return status;
 8001386:	7bfb      	ldrb	r3, [r7, #15]
}
 8001388:	4618      	mov	r0, r3
 800138a:	3710      	adds	r7, #16
 800138c:	46bd      	mov	sp, r7
 800138e:	bd80      	pop	{r7, pc}

08001390 <HAL_FLASH_Program>:
  * @param  Data          Specifie the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8001390:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001392:	b087      	sub	sp, #28
 8001394:	af00      	add	r7, sp, #0
 8001396:	60f8      	str	r0, [r7, #12]
 8001398:	60b9      	str	r1, [r7, #8]
 800139a:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 800139e:	2301      	movs	r3, #1
 80013a0:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0U;
 80013a2:	2300      	movs	r3, #0
 80013a4:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0U;
 80013a6:	2300      	movs	r3, #0
 80013a8:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80013aa:	4b2f      	ldr	r3, [pc, #188]	; (8001468 <HAL_FLASH_Program+0xd8>)
 80013ac:	7e1b      	ldrb	r3, [r3, #24]
 80013ae:	2b01      	cmp	r3, #1
 80013b0:	d101      	bne.n	80013b6 <HAL_FLASH_Program+0x26>
 80013b2:	2302      	movs	r3, #2
 80013b4:	e054      	b.n	8001460 <HAL_FLASH_Program+0xd0>
 80013b6:	4b2c      	ldr	r3, [pc, #176]	; (8001468 <HAL_FLASH_Program+0xd8>)
 80013b8:	2201      	movs	r2, #1
 80013ba:	761a      	strb	r2, [r3, #24]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80013bc:	f24c 3050 	movw	r0, #50000	; 0xc350
 80013c0:	f000 f8a8 	bl	8001514 <FLASH_WaitForLastOperation>
 80013c4:	4603      	mov	r3, r0
 80013c6:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 80013c8:	7dfb      	ldrb	r3, [r7, #23]
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d144      	bne.n	8001458 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	2b01      	cmp	r3, #1
 80013d2:	d102      	bne.n	80013da <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 80013d4:	2301      	movs	r3, #1
 80013d6:	757b      	strb	r3, [r7, #21]
 80013d8:	e007      	b.n	80013ea <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	2b02      	cmp	r3, #2
 80013de:	d102      	bne.n	80013e6 <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 80013e0:	2302      	movs	r3, #2
 80013e2:	757b      	strb	r3, [r7, #21]
 80013e4:	e001      	b.n	80013ea <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 80013e6:	2304      	movs	r3, #4
 80013e8:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 80013ea:	2300      	movs	r3, #0
 80013ec:	75bb      	strb	r3, [r7, #22]
 80013ee:	e02d      	b.n	800144c <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 80013f0:	7dbb      	ldrb	r3, [r7, #22]
 80013f2:	005a      	lsls	r2, r3, #1
 80013f4:	68bb      	ldr	r3, [r7, #8]
 80013f6:	eb02 0c03 	add.w	ip, r2, r3
 80013fa:	7dbb      	ldrb	r3, [r7, #22]
 80013fc:	0119      	lsls	r1, r3, #4
 80013fe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001402:	f1c1 0620 	rsb	r6, r1, #32
 8001406:	f1a1 0020 	sub.w	r0, r1, #32
 800140a:	fa22 f401 	lsr.w	r4, r2, r1
 800140e:	fa03 f606 	lsl.w	r6, r3, r6
 8001412:	4334      	orrs	r4, r6
 8001414:	fa23 f000 	lsr.w	r0, r3, r0
 8001418:	4304      	orrs	r4, r0
 800141a:	fa23 f501 	lsr.w	r5, r3, r1
 800141e:	b2a3      	uxth	r3, r4
 8001420:	4619      	mov	r1, r3
 8001422:	4660      	mov	r0, ip
 8001424:	f000 f85a 	bl	80014dc <FLASH_Program_HalfWord>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8001428:	f24c 3050 	movw	r0, #50000	; 0xc350
 800142c:	f000 f872 	bl	8001514 <FLASH_WaitForLastOperation>
 8001430:	4603      	mov	r3, r0
 8001432:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8001434:	4b0d      	ldr	r3, [pc, #52]	; (800146c <HAL_FLASH_Program+0xdc>)
 8001436:	691b      	ldr	r3, [r3, #16]
 8001438:	4a0c      	ldr	r2, [pc, #48]	; (800146c <HAL_FLASH_Program+0xdc>)
 800143a:	f023 0301 	bic.w	r3, r3, #1
 800143e:	6113      	str	r3, [r2, #16]
      /* In case of error, stop programming procedure */
      if (status != HAL_OK)
 8001440:	7dfb      	ldrb	r3, [r7, #23]
 8001442:	2b00      	cmp	r3, #0
 8001444:	d107      	bne.n	8001456 <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 8001446:	7dbb      	ldrb	r3, [r7, #22]
 8001448:	3301      	adds	r3, #1
 800144a:	75bb      	strb	r3, [r7, #22]
 800144c:	7dba      	ldrb	r2, [r7, #22]
 800144e:	7d7b      	ldrb	r3, [r7, #21]
 8001450:	429a      	cmp	r2, r3
 8001452:	d3cd      	bcc.n	80013f0 <HAL_FLASH_Program+0x60>
 8001454:	e000      	b.n	8001458 <HAL_FLASH_Program+0xc8>
      {
        break;
 8001456:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001458:	4b03      	ldr	r3, [pc, #12]	; (8001468 <HAL_FLASH_Program+0xd8>)
 800145a:	2200      	movs	r2, #0
 800145c:	761a      	strb	r2, [r3, #24]

  return status;
 800145e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001460:	4618      	mov	r0, r3
 8001462:	371c      	adds	r7, #28
 8001464:	46bd      	mov	sp, r7
 8001466:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001468:	20000250 	.word	0x20000250
 800146c:	40022000 	.word	0x40022000

08001470 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8001470:	b480      	push	{r7}
 8001472:	b083      	sub	sp, #12
 8001474:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8001476:	2300      	movs	r3, #0
 8001478:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800147a:	4b0d      	ldr	r3, [pc, #52]	; (80014b0 <HAL_FLASH_Unlock+0x40>)
 800147c:	691b      	ldr	r3, [r3, #16]
 800147e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001482:	2b00      	cmp	r3, #0
 8001484:	d00d      	beq.n	80014a2 <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8001486:	4b0a      	ldr	r3, [pc, #40]	; (80014b0 <HAL_FLASH_Unlock+0x40>)
 8001488:	4a0a      	ldr	r2, [pc, #40]	; (80014b4 <HAL_FLASH_Unlock+0x44>)
 800148a:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800148c:	4b08      	ldr	r3, [pc, #32]	; (80014b0 <HAL_FLASH_Unlock+0x40>)
 800148e:	4a0a      	ldr	r2, [pc, #40]	; (80014b8 <HAL_FLASH_Unlock+0x48>)
 8001490:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001492:	4b07      	ldr	r3, [pc, #28]	; (80014b0 <HAL_FLASH_Unlock+0x40>)
 8001494:	691b      	ldr	r3, [r3, #16]
 8001496:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800149a:	2b00      	cmp	r3, #0
 800149c:	d001      	beq.n	80014a2 <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 800149e:	2301      	movs	r3, #1
 80014a0:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 80014a2:	79fb      	ldrb	r3, [r7, #7]
}
 80014a4:	4618      	mov	r0, r3
 80014a6:	370c      	adds	r7, #12
 80014a8:	46bd      	mov	sp, r7
 80014aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ae:	4770      	bx	lr
 80014b0:	40022000 	.word	0x40022000
 80014b4:	45670123 	.word	0x45670123
 80014b8:	cdef89ab 	.word	0xcdef89ab

080014bc <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80014bc:	b480      	push	{r7}
 80014be:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 80014c0:	4b05      	ldr	r3, [pc, #20]	; (80014d8 <HAL_FLASH_Lock+0x1c>)
 80014c2:	691b      	ldr	r3, [r3, #16]
 80014c4:	4a04      	ldr	r2, [pc, #16]	; (80014d8 <HAL_FLASH_Lock+0x1c>)
 80014c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014ca:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 80014cc:	2300      	movs	r3, #0
}
 80014ce:	4618      	mov	r0, r3
 80014d0:	46bd      	mov	sp, r7
 80014d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d6:	4770      	bx	lr
 80014d8:	40022000 	.word	0x40022000

080014dc <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 80014dc:	b480      	push	{r7}
 80014de:	b083      	sub	sp, #12
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
 80014e4:	460b      	mov	r3, r1
 80014e6:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80014e8:	4b08      	ldr	r3, [pc, #32]	; (800150c <FLASH_Program_HalfWord+0x30>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	61da      	str	r2, [r3, #28]
  
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 80014ee:	4b08      	ldr	r3, [pc, #32]	; (8001510 <FLASH_Program_HalfWord+0x34>)
 80014f0:	691b      	ldr	r3, [r3, #16]
 80014f2:	4a07      	ldr	r2, [pc, #28]	; (8001510 <FLASH_Program_HalfWord+0x34>)
 80014f4:	f043 0301 	orr.w	r3, r3, #1
 80014f8:	6113      	str	r3, [r2, #16]

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	887a      	ldrh	r2, [r7, #2]
 80014fe:	801a      	strh	r2, [r3, #0]
}
 8001500:	bf00      	nop
 8001502:	370c      	adds	r7, #12
 8001504:	46bd      	mov	sp, r7
 8001506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150a:	4770      	bx	lr
 800150c:	20000250 	.word	0x20000250
 8001510:	40022000 	.word	0x40022000

08001514 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b084      	sub	sp, #16
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 800151c:	f7ff fdce 	bl	80010bc <HAL_GetTick>
 8001520:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8001522:	e010      	b.n	8001546 <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	f1b3 3fff 	cmp.w	r3, #4294967295
 800152a:	d00c      	beq.n	8001546 <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	2b00      	cmp	r3, #0
 8001530:	d007      	beq.n	8001542 <FLASH_WaitForLastOperation+0x2e>
 8001532:	f7ff fdc3 	bl	80010bc <HAL_GetTick>
 8001536:	4602      	mov	r2, r0
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	1ad3      	subs	r3, r2, r3
 800153c:	687a      	ldr	r2, [r7, #4]
 800153e:	429a      	cmp	r2, r3
 8001540:	d201      	bcs.n	8001546 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8001542:	2303      	movs	r3, #3
 8001544:	e01f      	b.n	8001586 <FLASH_WaitForLastOperation+0x72>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8001546:	4b12      	ldr	r3, [pc, #72]	; (8001590 <FLASH_WaitForLastOperation+0x7c>)
 8001548:	68db      	ldr	r3, [r3, #12]
 800154a:	f003 0301 	and.w	r3, r3, #1
 800154e:	2b01      	cmp	r3, #1
 8001550:	d0e8      	beq.n	8001524 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8001552:	4b0f      	ldr	r3, [pc, #60]	; (8001590 <FLASH_WaitForLastOperation+0x7c>)
 8001554:	68db      	ldr	r3, [r3, #12]
 8001556:	f003 0320 	and.w	r3, r3, #32
 800155a:	2b20      	cmp	r3, #32
 800155c:	d102      	bne.n	8001564 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800155e:	4b0c      	ldr	r3, [pc, #48]	; (8001590 <FLASH_WaitForLastOperation+0x7c>)
 8001560:	2220      	movs	r2, #32
 8001562:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8001564:	4b0a      	ldr	r3, [pc, #40]	; (8001590 <FLASH_WaitForLastOperation+0x7c>)
 8001566:	68db      	ldr	r3, [r3, #12]
 8001568:	f003 0310 	and.w	r3, r3, #16
 800156c:	2b10      	cmp	r3, #16
 800156e:	d005      	beq.n	800157c <FLASH_WaitForLastOperation+0x68>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8001570:	4b07      	ldr	r3, [pc, #28]	; (8001590 <FLASH_WaitForLastOperation+0x7c>)
 8001572:	68db      	ldr	r3, [r3, #12]
 8001574:	f003 0304 	and.w	r3, r3, #4
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8001578:	2b04      	cmp	r3, #4
 800157a:	d103      	bne.n	8001584 <FLASH_WaitForLastOperation+0x70>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 800157c:	f000 f80a 	bl	8001594 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8001580:	2301      	movs	r3, #1
 8001582:	e000      	b.n	8001586 <FLASH_WaitForLastOperation+0x72>
  }

  /* There is no error flag set */
  return HAL_OK;
 8001584:	2300      	movs	r3, #0
}
 8001586:	4618      	mov	r0, r3
 8001588:	3710      	adds	r7, #16
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}
 800158e:	bf00      	nop
 8001590:	40022000 	.word	0x40022000

08001594 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8001594:	b480      	push	{r7}
 8001596:	b083      	sub	sp, #12
 8001598:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 800159a:	2300      	movs	r3, #0
 800159c:	607b      	str	r3, [r7, #4]
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 800159e:	4b14      	ldr	r3, [pc, #80]	; (80015f0 <FLASH_SetErrorCode+0x5c>)
 80015a0:	68db      	ldr	r3, [r3, #12]
 80015a2:	f003 0310 	and.w	r3, r3, #16
 80015a6:	2b10      	cmp	r3, #16
 80015a8:	d109      	bne.n	80015be <FLASH_SetErrorCode+0x2a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80015aa:	4b12      	ldr	r3, [pc, #72]	; (80015f4 <FLASH_SetErrorCode+0x60>)
 80015ac:	69db      	ldr	r3, [r3, #28]
 80015ae:	f043 0302 	orr.w	r3, r3, #2
 80015b2:	4a10      	ldr	r2, [pc, #64]	; (80015f4 <FLASH_SetErrorCode+0x60>)
 80015b4:	61d3      	str	r3, [r2, #28]
    flags |= FLASH_FLAG_WRPERR;
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	f043 0310 	orr.w	r3, r3, #16
 80015bc:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80015be:	4b0c      	ldr	r3, [pc, #48]	; (80015f0 <FLASH_SetErrorCode+0x5c>)
 80015c0:	68db      	ldr	r3, [r3, #12]
 80015c2:	f003 0304 	and.w	r3, r3, #4
 80015c6:	2b04      	cmp	r3, #4
 80015c8:	d109      	bne.n	80015de <FLASH_SetErrorCode+0x4a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 80015ca:	4b0a      	ldr	r3, [pc, #40]	; (80015f4 <FLASH_SetErrorCode+0x60>)
 80015cc:	69db      	ldr	r3, [r3, #28]
 80015ce:	f043 0301 	orr.w	r3, r3, #1
 80015d2:	4a08      	ldr	r2, [pc, #32]	; (80015f4 <FLASH_SetErrorCode+0x60>)
 80015d4:	61d3      	str	r3, [r2, #28]
    flags |= FLASH_FLAG_PGERR;
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	f043 0304 	orr.w	r3, r3, #4
 80015dc:	607b      	str	r3, [r7, #4]
  }
  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 80015de:	4a04      	ldr	r2, [pc, #16]	; (80015f0 <FLASH_SetErrorCode+0x5c>)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	60d3      	str	r3, [r2, #12]
}  
 80015e4:	bf00      	nop
 80015e6:	370c      	adds	r7, #12
 80015e8:	46bd      	mov	sp, r7
 80015ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ee:	4770      	bx	lr
 80015f0:	40022000 	.word	0x40022000
 80015f4:	20000250 	.word	0x20000250

080015f8 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b084      	sub	sp, #16
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
 8001600:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001602:	2301      	movs	r3, #1
 8001604:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 8001606:	2300      	movs	r3, #0
 8001608:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800160a:	4b2e      	ldr	r3, [pc, #184]	; (80016c4 <HAL_FLASHEx_Erase+0xcc>)
 800160c:	7e1b      	ldrb	r3, [r3, #24]
 800160e:	2b01      	cmp	r3, #1
 8001610:	d101      	bne.n	8001616 <HAL_FLASHEx_Erase+0x1e>
 8001612:	2302      	movs	r3, #2
 8001614:	e052      	b.n	80016bc <HAL_FLASHEx_Erase+0xc4>
 8001616:	4b2b      	ldr	r3, [pc, #172]	; (80016c4 <HAL_FLASHEx_Erase+0xcc>)
 8001618:	2201      	movs	r2, #1
 800161a:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	2b01      	cmp	r3, #1
 8001622:	d115      	bne.n	8001650 <HAL_FLASHEx_Erase+0x58>
  {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8001624:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001628:	f7ff ff74 	bl	8001514 <FLASH_WaitForLastOperation>
 800162c:	4603      	mov	r3, r0
 800162e:	2b00      	cmp	r3, #0
 8001630:	d140      	bne.n	80016b4 <HAL_FLASHEx_Erase+0xbc>
      {
        /*Mass erase to be done*/
        FLASH_MassErase();
 8001632:	f000 f84b 	bl	80016cc <FLASH_MassErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001636:	f24c 3050 	movw	r0, #50000	; 0xc350
 800163a:	f7ff ff6b 	bl	8001514 <FLASH_WaitForLastOperation>
 800163e:	4603      	mov	r3, r0
 8001640:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8001642:	4b21      	ldr	r3, [pc, #132]	; (80016c8 <HAL_FLASHEx_Erase+0xd0>)
 8001644:	691b      	ldr	r3, [r3, #16]
 8001646:	4a20      	ldr	r2, [pc, #128]	; (80016c8 <HAL_FLASHEx_Erase+0xd0>)
 8001648:	f023 0304 	bic.w	r3, r3, #4
 800164c:	6113      	str	r3, [r2, #16]
 800164e:	e031      	b.n	80016b4 <HAL_FLASHEx_Erase+0xbc>
    assert_param(IS_FLASH_PROGRAM_ADDRESS(pEraseInit->PageAddress));
    assert_param(IS_FLASH_NB_PAGES(pEraseInit->PageAddress, pEraseInit->NbPages));

      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8001650:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001654:	f7ff ff5e 	bl	8001514 <FLASH_WaitForLastOperation>
 8001658:	4603      	mov	r3, r0
 800165a:	2b00      	cmp	r3, #0
 800165c:	d12a      	bne.n	80016b4 <HAL_FLASHEx_Erase+0xbc>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	f04f 32ff 	mov.w	r2, #4294967295
 8001664:	601a      	str	r2, [r3, #0]

        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	685b      	ldr	r3, [r3, #4]
 800166a:	60bb      	str	r3, [r7, #8]
 800166c:	e019      	b.n	80016a2 <HAL_FLASHEx_Erase+0xaa>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 800166e:	68b8      	ldr	r0, [r7, #8]
 8001670:	f000 f846 	bl	8001700 <FLASH_PageErase>

          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001674:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001678:	f7ff ff4c 	bl	8001514 <FLASH_WaitForLastOperation>
 800167c:	4603      	mov	r3, r0
 800167e:	73fb      	strb	r3, [r7, #15]

          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8001680:	4b11      	ldr	r3, [pc, #68]	; (80016c8 <HAL_FLASHEx_Erase+0xd0>)
 8001682:	691b      	ldr	r3, [r3, #16]
 8001684:	4a10      	ldr	r2, [pc, #64]	; (80016c8 <HAL_FLASHEx_Erase+0xd0>)
 8001686:	f023 0302 	bic.w	r3, r3, #2
 800168a:	6113      	str	r3, [r2, #16]

          if (status != HAL_OK)
 800168c:	7bfb      	ldrb	r3, [r7, #15]
 800168e:	2b00      	cmp	r3, #0
 8001690:	d003      	beq.n	800169a <HAL_FLASHEx_Erase+0xa2>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 8001692:	683b      	ldr	r3, [r7, #0]
 8001694:	68ba      	ldr	r2, [r7, #8]
 8001696:	601a      	str	r2, [r3, #0]
            break;
 8001698:	e00c      	b.n	80016b4 <HAL_FLASHEx_Erase+0xbc>
            address += FLASH_PAGE_SIZE)
 800169a:	68bb      	ldr	r3, [r7, #8]
 800169c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80016a0:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	689b      	ldr	r3, [r3, #8]
 80016a6:	02da      	lsls	r2, r3, #11
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	685b      	ldr	r3, [r3, #4]
 80016ac:	4413      	add	r3, r2
 80016ae:	68ba      	ldr	r2, [r7, #8]
 80016b0:	429a      	cmp	r2, r3
 80016b2:	d3dc      	bcc.n	800166e <HAL_FLASHEx_Erase+0x76>
        }
      }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80016b4:	4b03      	ldr	r3, [pc, #12]	; (80016c4 <HAL_FLASHEx_Erase+0xcc>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	761a      	strb	r2, [r3, #24]

  return status;
 80016ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80016bc:	4618      	mov	r0, r3
 80016be:	3710      	adds	r7, #16
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bd80      	pop	{r7, pc}
 80016c4:	20000250 	.word	0x20000250
 80016c8:	40022000 	.word	0x40022000

080016cc <FLASH_MassErase>:
  * @brief  Full erase of FLASH memory Bank
  *
  * @retval None
  */
static void FLASH_MassErase(void)
{
 80016cc:	b480      	push	{r7}
 80016ce:	af00      	add	r7, sp, #0
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80016d0:	4b09      	ldr	r3, [pc, #36]	; (80016f8 <FLASH_MassErase+0x2c>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	61da      	str	r2, [r3, #28]

    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 80016d6:	4b09      	ldr	r3, [pc, #36]	; (80016fc <FLASH_MassErase+0x30>)
 80016d8:	691b      	ldr	r3, [r3, #16]
 80016da:	4a08      	ldr	r2, [pc, #32]	; (80016fc <FLASH_MassErase+0x30>)
 80016dc:	f043 0304 	orr.w	r3, r3, #4
 80016e0:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80016e2:	4b06      	ldr	r3, [pc, #24]	; (80016fc <FLASH_MassErase+0x30>)
 80016e4:	691b      	ldr	r3, [r3, #16]
 80016e6:	4a05      	ldr	r2, [pc, #20]	; (80016fc <FLASH_MassErase+0x30>)
 80016e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80016ec:	6113      	str	r3, [r2, #16]
}
 80016ee:	bf00      	nop
 80016f0:	46bd      	mov	sp, r7
 80016f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f6:	4770      	bx	lr
 80016f8:	20000250 	.word	0x20000250
 80016fc:	40022000 	.word	0x40022000

08001700 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series
  *
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8001700:	b480      	push	{r7}
 8001702:	b083      	sub	sp, #12
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001708:	4b0b      	ldr	r3, [pc, #44]	; (8001738 <FLASH_PageErase+0x38>)
 800170a:	2200      	movs	r2, #0
 800170c:	61da      	str	r2, [r3, #28]

    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 800170e:	4b0b      	ldr	r3, [pc, #44]	; (800173c <FLASH_PageErase+0x3c>)
 8001710:	691b      	ldr	r3, [r3, #16]
 8001712:	4a0a      	ldr	r2, [pc, #40]	; (800173c <FLASH_PageErase+0x3c>)
 8001714:	f043 0302 	orr.w	r3, r3, #2
 8001718:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 800171a:	4a08      	ldr	r2, [pc, #32]	; (800173c <FLASH_PageErase+0x3c>)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8001720:	4b06      	ldr	r3, [pc, #24]	; (800173c <FLASH_PageErase+0x3c>)
 8001722:	691b      	ldr	r3, [r3, #16]
 8001724:	4a05      	ldr	r2, [pc, #20]	; (800173c <FLASH_PageErase+0x3c>)
 8001726:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800172a:	6113      	str	r3, [r2, #16]
}
 800172c:	bf00      	nop
 800172e:	370c      	adds	r7, #12
 8001730:	46bd      	mov	sp, r7
 8001732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001736:	4770      	bx	lr
 8001738:	20000250 	.word	0x20000250
 800173c:	40022000 	.word	0x40022000

08001740 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001740:	b480      	push	{r7}
 8001742:	b087      	sub	sp, #28
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
 8001748:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800174a:	2300      	movs	r3, #0
 800174c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800174e:	e160      	b.n	8001a12 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	681a      	ldr	r2, [r3, #0]
 8001754:	2101      	movs	r1, #1
 8001756:	697b      	ldr	r3, [r7, #20]
 8001758:	fa01 f303 	lsl.w	r3, r1, r3
 800175c:	4013      	ands	r3, r2
 800175e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	2b00      	cmp	r3, #0
 8001764:	f000 8152 	beq.w	8001a0c <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	685b      	ldr	r3, [r3, #4]
 800176c:	f003 0303 	and.w	r3, r3, #3
 8001770:	2b01      	cmp	r3, #1
 8001772:	d005      	beq.n	8001780 <HAL_GPIO_Init+0x40>
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	685b      	ldr	r3, [r3, #4]
 8001778:	f003 0303 	and.w	r3, r3, #3
 800177c:	2b02      	cmp	r3, #2
 800177e:	d130      	bne.n	80017e2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	689b      	ldr	r3, [r3, #8]
 8001784:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001786:	697b      	ldr	r3, [r7, #20]
 8001788:	005b      	lsls	r3, r3, #1
 800178a:	2203      	movs	r2, #3
 800178c:	fa02 f303 	lsl.w	r3, r2, r3
 8001790:	43db      	mvns	r3, r3
 8001792:	693a      	ldr	r2, [r7, #16]
 8001794:	4013      	ands	r3, r2
 8001796:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	68da      	ldr	r2, [r3, #12]
 800179c:	697b      	ldr	r3, [r7, #20]
 800179e:	005b      	lsls	r3, r3, #1
 80017a0:	fa02 f303 	lsl.w	r3, r2, r3
 80017a4:	693a      	ldr	r2, [r7, #16]
 80017a6:	4313      	orrs	r3, r2
 80017a8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	693a      	ldr	r2, [r7, #16]
 80017ae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	685b      	ldr	r3, [r3, #4]
 80017b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80017b6:	2201      	movs	r2, #1
 80017b8:	697b      	ldr	r3, [r7, #20]
 80017ba:	fa02 f303 	lsl.w	r3, r2, r3
 80017be:	43db      	mvns	r3, r3
 80017c0:	693a      	ldr	r2, [r7, #16]
 80017c2:	4013      	ands	r3, r2
 80017c4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80017c6:	683b      	ldr	r3, [r7, #0]
 80017c8:	685b      	ldr	r3, [r3, #4]
 80017ca:	091b      	lsrs	r3, r3, #4
 80017cc:	f003 0201 	and.w	r2, r3, #1
 80017d0:	697b      	ldr	r3, [r7, #20]
 80017d2:	fa02 f303 	lsl.w	r3, r2, r3
 80017d6:	693a      	ldr	r2, [r7, #16]
 80017d8:	4313      	orrs	r3, r2
 80017da:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	693a      	ldr	r2, [r7, #16]
 80017e0:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80017e2:	683b      	ldr	r3, [r7, #0]
 80017e4:	685b      	ldr	r3, [r3, #4]
 80017e6:	f003 0303 	and.w	r3, r3, #3
 80017ea:	2b03      	cmp	r3, #3
 80017ec:	d017      	beq.n	800181e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	68db      	ldr	r3, [r3, #12]
 80017f2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80017f4:	697b      	ldr	r3, [r7, #20]
 80017f6:	005b      	lsls	r3, r3, #1
 80017f8:	2203      	movs	r2, #3
 80017fa:	fa02 f303 	lsl.w	r3, r2, r3
 80017fe:	43db      	mvns	r3, r3
 8001800:	693a      	ldr	r2, [r7, #16]
 8001802:	4013      	ands	r3, r2
 8001804:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001806:	683b      	ldr	r3, [r7, #0]
 8001808:	689a      	ldr	r2, [r3, #8]
 800180a:	697b      	ldr	r3, [r7, #20]
 800180c:	005b      	lsls	r3, r3, #1
 800180e:	fa02 f303 	lsl.w	r3, r2, r3
 8001812:	693a      	ldr	r2, [r7, #16]
 8001814:	4313      	orrs	r3, r2
 8001816:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	693a      	ldr	r2, [r7, #16]
 800181c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	685b      	ldr	r3, [r3, #4]
 8001822:	f003 0303 	and.w	r3, r3, #3
 8001826:	2b02      	cmp	r3, #2
 8001828:	d123      	bne.n	8001872 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800182a:	697b      	ldr	r3, [r7, #20]
 800182c:	08da      	lsrs	r2, r3, #3
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	3208      	adds	r2, #8
 8001832:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001836:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001838:	697b      	ldr	r3, [r7, #20]
 800183a:	f003 0307 	and.w	r3, r3, #7
 800183e:	009b      	lsls	r3, r3, #2
 8001840:	220f      	movs	r2, #15
 8001842:	fa02 f303 	lsl.w	r3, r2, r3
 8001846:	43db      	mvns	r3, r3
 8001848:	693a      	ldr	r2, [r7, #16]
 800184a:	4013      	ands	r3, r2
 800184c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	691a      	ldr	r2, [r3, #16]
 8001852:	697b      	ldr	r3, [r7, #20]
 8001854:	f003 0307 	and.w	r3, r3, #7
 8001858:	009b      	lsls	r3, r3, #2
 800185a:	fa02 f303 	lsl.w	r3, r2, r3
 800185e:	693a      	ldr	r2, [r7, #16]
 8001860:	4313      	orrs	r3, r2
 8001862:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001864:	697b      	ldr	r3, [r7, #20]
 8001866:	08da      	lsrs	r2, r3, #3
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	3208      	adds	r2, #8
 800186c:	6939      	ldr	r1, [r7, #16]
 800186e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001878:	697b      	ldr	r3, [r7, #20]
 800187a:	005b      	lsls	r3, r3, #1
 800187c:	2203      	movs	r2, #3
 800187e:	fa02 f303 	lsl.w	r3, r2, r3
 8001882:	43db      	mvns	r3, r3
 8001884:	693a      	ldr	r2, [r7, #16]
 8001886:	4013      	ands	r3, r2
 8001888:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	685b      	ldr	r3, [r3, #4]
 800188e:	f003 0203 	and.w	r2, r3, #3
 8001892:	697b      	ldr	r3, [r7, #20]
 8001894:	005b      	lsls	r3, r3, #1
 8001896:	fa02 f303 	lsl.w	r3, r2, r3
 800189a:	693a      	ldr	r2, [r7, #16]
 800189c:	4313      	orrs	r3, r2
 800189e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	693a      	ldr	r2, [r7, #16]
 80018a4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	685b      	ldr	r3, [r3, #4]
 80018aa:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	f000 80ac 	beq.w	8001a0c <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018b4:	4b5e      	ldr	r3, [pc, #376]	; (8001a30 <HAL_GPIO_Init+0x2f0>)
 80018b6:	699b      	ldr	r3, [r3, #24]
 80018b8:	4a5d      	ldr	r2, [pc, #372]	; (8001a30 <HAL_GPIO_Init+0x2f0>)
 80018ba:	f043 0301 	orr.w	r3, r3, #1
 80018be:	6193      	str	r3, [r2, #24]
 80018c0:	4b5b      	ldr	r3, [pc, #364]	; (8001a30 <HAL_GPIO_Init+0x2f0>)
 80018c2:	699b      	ldr	r3, [r3, #24]
 80018c4:	f003 0301 	and.w	r3, r3, #1
 80018c8:	60bb      	str	r3, [r7, #8]
 80018ca:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80018cc:	4a59      	ldr	r2, [pc, #356]	; (8001a34 <HAL_GPIO_Init+0x2f4>)
 80018ce:	697b      	ldr	r3, [r7, #20]
 80018d0:	089b      	lsrs	r3, r3, #2
 80018d2:	3302      	adds	r3, #2
 80018d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018d8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80018da:	697b      	ldr	r3, [r7, #20]
 80018dc:	f003 0303 	and.w	r3, r3, #3
 80018e0:	009b      	lsls	r3, r3, #2
 80018e2:	220f      	movs	r2, #15
 80018e4:	fa02 f303 	lsl.w	r3, r2, r3
 80018e8:	43db      	mvns	r3, r3
 80018ea:	693a      	ldr	r2, [r7, #16]
 80018ec:	4013      	ands	r3, r2
 80018ee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80018f6:	d025      	beq.n	8001944 <HAL_GPIO_Init+0x204>
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	4a4f      	ldr	r2, [pc, #316]	; (8001a38 <HAL_GPIO_Init+0x2f8>)
 80018fc:	4293      	cmp	r3, r2
 80018fe:	d01f      	beq.n	8001940 <HAL_GPIO_Init+0x200>
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	4a4e      	ldr	r2, [pc, #312]	; (8001a3c <HAL_GPIO_Init+0x2fc>)
 8001904:	4293      	cmp	r3, r2
 8001906:	d019      	beq.n	800193c <HAL_GPIO_Init+0x1fc>
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	4a4d      	ldr	r2, [pc, #308]	; (8001a40 <HAL_GPIO_Init+0x300>)
 800190c:	4293      	cmp	r3, r2
 800190e:	d013      	beq.n	8001938 <HAL_GPIO_Init+0x1f8>
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	4a4c      	ldr	r2, [pc, #304]	; (8001a44 <HAL_GPIO_Init+0x304>)
 8001914:	4293      	cmp	r3, r2
 8001916:	d00d      	beq.n	8001934 <HAL_GPIO_Init+0x1f4>
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	4a4b      	ldr	r2, [pc, #300]	; (8001a48 <HAL_GPIO_Init+0x308>)
 800191c:	4293      	cmp	r3, r2
 800191e:	d007      	beq.n	8001930 <HAL_GPIO_Init+0x1f0>
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	4a4a      	ldr	r2, [pc, #296]	; (8001a4c <HAL_GPIO_Init+0x30c>)
 8001924:	4293      	cmp	r3, r2
 8001926:	d101      	bne.n	800192c <HAL_GPIO_Init+0x1ec>
 8001928:	2306      	movs	r3, #6
 800192a:	e00c      	b.n	8001946 <HAL_GPIO_Init+0x206>
 800192c:	2307      	movs	r3, #7
 800192e:	e00a      	b.n	8001946 <HAL_GPIO_Init+0x206>
 8001930:	2305      	movs	r3, #5
 8001932:	e008      	b.n	8001946 <HAL_GPIO_Init+0x206>
 8001934:	2304      	movs	r3, #4
 8001936:	e006      	b.n	8001946 <HAL_GPIO_Init+0x206>
 8001938:	2303      	movs	r3, #3
 800193a:	e004      	b.n	8001946 <HAL_GPIO_Init+0x206>
 800193c:	2302      	movs	r3, #2
 800193e:	e002      	b.n	8001946 <HAL_GPIO_Init+0x206>
 8001940:	2301      	movs	r3, #1
 8001942:	e000      	b.n	8001946 <HAL_GPIO_Init+0x206>
 8001944:	2300      	movs	r3, #0
 8001946:	697a      	ldr	r2, [r7, #20]
 8001948:	f002 0203 	and.w	r2, r2, #3
 800194c:	0092      	lsls	r2, r2, #2
 800194e:	4093      	lsls	r3, r2
 8001950:	693a      	ldr	r2, [r7, #16]
 8001952:	4313      	orrs	r3, r2
 8001954:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001956:	4937      	ldr	r1, [pc, #220]	; (8001a34 <HAL_GPIO_Init+0x2f4>)
 8001958:	697b      	ldr	r3, [r7, #20]
 800195a:	089b      	lsrs	r3, r3, #2
 800195c:	3302      	adds	r3, #2
 800195e:	693a      	ldr	r2, [r7, #16]
 8001960:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001964:	4b3a      	ldr	r3, [pc, #232]	; (8001a50 <HAL_GPIO_Init+0x310>)
 8001966:	689b      	ldr	r3, [r3, #8]
 8001968:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	43db      	mvns	r3, r3
 800196e:	693a      	ldr	r2, [r7, #16]
 8001970:	4013      	ands	r3, r2
 8001972:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	685b      	ldr	r3, [r3, #4]
 8001978:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800197c:	2b00      	cmp	r3, #0
 800197e:	d003      	beq.n	8001988 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8001980:	693a      	ldr	r2, [r7, #16]
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	4313      	orrs	r3, r2
 8001986:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001988:	4a31      	ldr	r2, [pc, #196]	; (8001a50 <HAL_GPIO_Init+0x310>)
 800198a:	693b      	ldr	r3, [r7, #16]
 800198c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800198e:	4b30      	ldr	r3, [pc, #192]	; (8001a50 <HAL_GPIO_Init+0x310>)
 8001990:	68db      	ldr	r3, [r3, #12]
 8001992:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	43db      	mvns	r3, r3
 8001998:	693a      	ldr	r2, [r7, #16]
 800199a:	4013      	ands	r3, r2
 800199c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	685b      	ldr	r3, [r3, #4]
 80019a2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d003      	beq.n	80019b2 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 80019aa:	693a      	ldr	r2, [r7, #16]
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	4313      	orrs	r3, r2
 80019b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80019b2:	4a27      	ldr	r2, [pc, #156]	; (8001a50 <HAL_GPIO_Init+0x310>)
 80019b4:	693b      	ldr	r3, [r7, #16]
 80019b6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80019b8:	4b25      	ldr	r3, [pc, #148]	; (8001a50 <HAL_GPIO_Init+0x310>)
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	43db      	mvns	r3, r3
 80019c2:	693a      	ldr	r2, [r7, #16]
 80019c4:	4013      	ands	r3, r2
 80019c6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	685b      	ldr	r3, [r3, #4]
 80019cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d003      	beq.n	80019dc <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 80019d4:	693a      	ldr	r2, [r7, #16]
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	4313      	orrs	r3, r2
 80019da:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80019dc:	4a1c      	ldr	r2, [pc, #112]	; (8001a50 <HAL_GPIO_Init+0x310>)
 80019de:	693b      	ldr	r3, [r7, #16]
 80019e0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80019e2:	4b1b      	ldr	r3, [pc, #108]	; (8001a50 <HAL_GPIO_Init+0x310>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	43db      	mvns	r3, r3
 80019ec:	693a      	ldr	r2, [r7, #16]
 80019ee:	4013      	ands	r3, r2
 80019f0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	685b      	ldr	r3, [r3, #4]
 80019f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d003      	beq.n	8001a06 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 80019fe:	693a      	ldr	r2, [r7, #16]
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	4313      	orrs	r3, r2
 8001a04:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001a06:	4a12      	ldr	r2, [pc, #72]	; (8001a50 <HAL_GPIO_Init+0x310>)
 8001a08:	693b      	ldr	r3, [r7, #16]
 8001a0a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001a0c:	697b      	ldr	r3, [r7, #20]
 8001a0e:	3301      	adds	r3, #1
 8001a10:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	681a      	ldr	r2, [r3, #0]
 8001a16:	697b      	ldr	r3, [r7, #20]
 8001a18:	fa22 f303 	lsr.w	r3, r2, r3
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	f47f ae97 	bne.w	8001750 <HAL_GPIO_Init+0x10>
  }
}
 8001a22:	bf00      	nop
 8001a24:	bf00      	nop
 8001a26:	371c      	adds	r7, #28
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2e:	4770      	bx	lr
 8001a30:	40021000 	.word	0x40021000
 8001a34:	40010000 	.word	0x40010000
 8001a38:	48000400 	.word	0x48000400
 8001a3c:	48000800 	.word	0x48000800
 8001a40:	48000c00 	.word	0x48000c00
 8001a44:	48001000 	.word	0x48001000
 8001a48:	48001400 	.word	0x48001400
 8001a4c:	48001800 	.word	0x48001800
 8001a50:	40010400 	.word	0x40010400

08001a54 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001a54:	b480      	push	{r7}
 8001a56:	b085      	sub	sp, #20
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
 8001a5c:	460b      	mov	r3, r1
 8001a5e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	691a      	ldr	r2, [r3, #16]
 8001a64:	887b      	ldrh	r3, [r7, #2]
 8001a66:	4013      	ands	r3, r2
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d002      	beq.n	8001a72 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001a6c:	2301      	movs	r3, #1
 8001a6e:	73fb      	strb	r3, [r7, #15]
 8001a70:	e001      	b.n	8001a76 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001a72:	2300      	movs	r3, #0
 8001a74:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001a76:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a78:	4618      	mov	r0, r3
 8001a7a:	3714      	adds	r7, #20
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a82:	4770      	bx	lr

08001a84 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b082      	sub	sp, #8
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001a8e:	4b08      	ldr	r3, [pc, #32]	; (8001ab0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001a90:	695a      	ldr	r2, [r3, #20]
 8001a92:	88fb      	ldrh	r3, [r7, #6]
 8001a94:	4013      	ands	r3, r2
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d006      	beq.n	8001aa8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001a9a:	4a05      	ldr	r2, [pc, #20]	; (8001ab0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001a9c:	88fb      	ldrh	r3, [r7, #6]
 8001a9e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001aa0:	88fb      	ldrh	r3, [r7, #6]
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	f000 f806 	bl	8001ab4 <HAL_GPIO_EXTI_Callback>
  }
}
 8001aa8:	bf00      	nop
 8001aaa:	3708      	adds	r7, #8
 8001aac:	46bd      	mov	sp, r7
 8001aae:	bd80      	pop	{r7, pc}
 8001ab0:	40010400 	.word	0x40010400

08001ab4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	b083      	sub	sp, #12
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	4603      	mov	r3, r0
 8001abc:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001abe:	bf00      	nop
 8001ac0:	370c      	adds	r7, #12
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac8:	4770      	bx	lr
	...

08001acc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8001ad2:	af00      	add	r7, sp, #0
 8001ad4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ad8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001adc:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001ade:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ae2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d102      	bne.n	8001af2 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001aec:	2301      	movs	r3, #1
 8001aee:	f001 b83a 	b.w	8002b66 <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001af2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001af6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f003 0301 	and.w	r3, r3, #1
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	f000 816f 	beq.w	8001de6 <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001b08:	4bb5      	ldr	r3, [pc, #724]	; (8001de0 <HAL_RCC_OscConfig+0x314>)
 8001b0a:	685b      	ldr	r3, [r3, #4]
 8001b0c:	f003 030c 	and.w	r3, r3, #12
 8001b10:	2b04      	cmp	r3, #4
 8001b12:	d00c      	beq.n	8001b2e <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001b14:	4bb2      	ldr	r3, [pc, #712]	; (8001de0 <HAL_RCC_OscConfig+0x314>)
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	f003 030c 	and.w	r3, r3, #12
 8001b1c:	2b08      	cmp	r3, #8
 8001b1e:	d15c      	bne.n	8001bda <HAL_RCC_OscConfig+0x10e>
 8001b20:	4baf      	ldr	r3, [pc, #700]	; (8001de0 <HAL_RCC_OscConfig+0x314>)
 8001b22:	685b      	ldr	r3, [r3, #4]
 8001b24:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8001b28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b2c:	d155      	bne.n	8001bda <HAL_RCC_OscConfig+0x10e>
 8001b2e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b32:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b36:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001b3a:	fa93 f3a3 	rbit	r3, r3
 8001b3e:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001b42:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b46:	fab3 f383 	clz	r3, r3
 8001b4a:	b2db      	uxtb	r3, r3
 8001b4c:	095b      	lsrs	r3, r3, #5
 8001b4e:	b2db      	uxtb	r3, r3
 8001b50:	f043 0301 	orr.w	r3, r3, #1
 8001b54:	b2db      	uxtb	r3, r3
 8001b56:	2b01      	cmp	r3, #1
 8001b58:	d102      	bne.n	8001b60 <HAL_RCC_OscConfig+0x94>
 8001b5a:	4ba1      	ldr	r3, [pc, #644]	; (8001de0 <HAL_RCC_OscConfig+0x314>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	e015      	b.n	8001b8c <HAL_RCC_OscConfig+0xc0>
 8001b60:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b64:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b68:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8001b6c:	fa93 f3a3 	rbit	r3, r3
 8001b70:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8001b74:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b78:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001b7c:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8001b80:	fa93 f3a3 	rbit	r3, r3
 8001b84:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001b88:	4b95      	ldr	r3, [pc, #596]	; (8001de0 <HAL_RCC_OscConfig+0x314>)
 8001b8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b8c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001b90:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8001b94:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8001b98:	fa92 f2a2 	rbit	r2, r2
 8001b9c:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8001ba0:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001ba4:	fab2 f282 	clz	r2, r2
 8001ba8:	b2d2      	uxtb	r2, r2
 8001baa:	f042 0220 	orr.w	r2, r2, #32
 8001bae:	b2d2      	uxtb	r2, r2
 8001bb0:	f002 021f 	and.w	r2, r2, #31
 8001bb4:	2101      	movs	r1, #1
 8001bb6:	fa01 f202 	lsl.w	r2, r1, r2
 8001bba:	4013      	ands	r3, r2
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	f000 8111 	beq.w	8001de4 <HAL_RCC_OscConfig+0x318>
 8001bc2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001bc6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	685b      	ldr	r3, [r3, #4]
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	f040 8108 	bne.w	8001de4 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 8001bd4:	2301      	movs	r3, #1
 8001bd6:	f000 bfc6 	b.w	8002b66 <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001bda:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001bde:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	685b      	ldr	r3, [r3, #4]
 8001be6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001bea:	d106      	bne.n	8001bfa <HAL_RCC_OscConfig+0x12e>
 8001bec:	4b7c      	ldr	r3, [pc, #496]	; (8001de0 <HAL_RCC_OscConfig+0x314>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4a7b      	ldr	r2, [pc, #492]	; (8001de0 <HAL_RCC_OscConfig+0x314>)
 8001bf2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bf6:	6013      	str	r3, [r2, #0]
 8001bf8:	e036      	b.n	8001c68 <HAL_RCC_OscConfig+0x19c>
 8001bfa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001bfe:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	685b      	ldr	r3, [r3, #4]
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d10c      	bne.n	8001c24 <HAL_RCC_OscConfig+0x158>
 8001c0a:	4b75      	ldr	r3, [pc, #468]	; (8001de0 <HAL_RCC_OscConfig+0x314>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	4a74      	ldr	r2, [pc, #464]	; (8001de0 <HAL_RCC_OscConfig+0x314>)
 8001c10:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c14:	6013      	str	r3, [r2, #0]
 8001c16:	4b72      	ldr	r3, [pc, #456]	; (8001de0 <HAL_RCC_OscConfig+0x314>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	4a71      	ldr	r2, [pc, #452]	; (8001de0 <HAL_RCC_OscConfig+0x314>)
 8001c1c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c20:	6013      	str	r3, [r2, #0]
 8001c22:	e021      	b.n	8001c68 <HAL_RCC_OscConfig+0x19c>
 8001c24:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c28:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	685b      	ldr	r3, [r3, #4]
 8001c30:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c34:	d10c      	bne.n	8001c50 <HAL_RCC_OscConfig+0x184>
 8001c36:	4b6a      	ldr	r3, [pc, #424]	; (8001de0 <HAL_RCC_OscConfig+0x314>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	4a69      	ldr	r2, [pc, #420]	; (8001de0 <HAL_RCC_OscConfig+0x314>)
 8001c3c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c40:	6013      	str	r3, [r2, #0]
 8001c42:	4b67      	ldr	r3, [pc, #412]	; (8001de0 <HAL_RCC_OscConfig+0x314>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	4a66      	ldr	r2, [pc, #408]	; (8001de0 <HAL_RCC_OscConfig+0x314>)
 8001c48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c4c:	6013      	str	r3, [r2, #0]
 8001c4e:	e00b      	b.n	8001c68 <HAL_RCC_OscConfig+0x19c>
 8001c50:	4b63      	ldr	r3, [pc, #396]	; (8001de0 <HAL_RCC_OscConfig+0x314>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4a62      	ldr	r2, [pc, #392]	; (8001de0 <HAL_RCC_OscConfig+0x314>)
 8001c56:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c5a:	6013      	str	r3, [r2, #0]
 8001c5c:	4b60      	ldr	r3, [pc, #384]	; (8001de0 <HAL_RCC_OscConfig+0x314>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	4a5f      	ldr	r2, [pc, #380]	; (8001de0 <HAL_RCC_OscConfig+0x314>)
 8001c62:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c66:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c68:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c6c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	685b      	ldr	r3, [r3, #4]
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d059      	beq.n	8001d2c <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c78:	f7ff fa20 	bl	80010bc <HAL_GetTick>
 8001c7c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c80:	e00a      	b.n	8001c98 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c82:	f7ff fa1b 	bl	80010bc <HAL_GetTick>
 8001c86:	4602      	mov	r2, r0
 8001c88:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001c8c:	1ad3      	subs	r3, r2, r3
 8001c8e:	2b64      	cmp	r3, #100	; 0x64
 8001c90:	d902      	bls.n	8001c98 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8001c92:	2303      	movs	r3, #3
 8001c94:	f000 bf67 	b.w	8002b66 <HAL_RCC_OscConfig+0x109a>
 8001c98:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c9c:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ca0:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8001ca4:	fa93 f3a3 	rbit	r3, r3
 8001ca8:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8001cac:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cb0:	fab3 f383 	clz	r3, r3
 8001cb4:	b2db      	uxtb	r3, r3
 8001cb6:	095b      	lsrs	r3, r3, #5
 8001cb8:	b2db      	uxtb	r3, r3
 8001cba:	f043 0301 	orr.w	r3, r3, #1
 8001cbe:	b2db      	uxtb	r3, r3
 8001cc0:	2b01      	cmp	r3, #1
 8001cc2:	d102      	bne.n	8001cca <HAL_RCC_OscConfig+0x1fe>
 8001cc4:	4b46      	ldr	r3, [pc, #280]	; (8001de0 <HAL_RCC_OscConfig+0x314>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	e015      	b.n	8001cf6 <HAL_RCC_OscConfig+0x22a>
 8001cca:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001cce:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cd2:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8001cd6:	fa93 f3a3 	rbit	r3, r3
 8001cda:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8001cde:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001ce2:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001ce6:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8001cea:	fa93 f3a3 	rbit	r3, r3
 8001cee:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001cf2:	4b3b      	ldr	r3, [pc, #236]	; (8001de0 <HAL_RCC_OscConfig+0x314>)
 8001cf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cf6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001cfa:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8001cfe:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8001d02:	fa92 f2a2 	rbit	r2, r2
 8001d06:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8001d0a:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001d0e:	fab2 f282 	clz	r2, r2
 8001d12:	b2d2      	uxtb	r2, r2
 8001d14:	f042 0220 	orr.w	r2, r2, #32
 8001d18:	b2d2      	uxtb	r2, r2
 8001d1a:	f002 021f 	and.w	r2, r2, #31
 8001d1e:	2101      	movs	r1, #1
 8001d20:	fa01 f202 	lsl.w	r2, r1, r2
 8001d24:	4013      	ands	r3, r2
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d0ab      	beq.n	8001c82 <HAL_RCC_OscConfig+0x1b6>
 8001d2a:	e05c      	b.n	8001de6 <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d2c:	f7ff f9c6 	bl	80010bc <HAL_GetTick>
 8001d30:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d34:	e00a      	b.n	8001d4c <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d36:	f7ff f9c1 	bl	80010bc <HAL_GetTick>
 8001d3a:	4602      	mov	r2, r0
 8001d3c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001d40:	1ad3      	subs	r3, r2, r3
 8001d42:	2b64      	cmp	r3, #100	; 0x64
 8001d44:	d902      	bls.n	8001d4c <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 8001d46:	2303      	movs	r3, #3
 8001d48:	f000 bf0d 	b.w	8002b66 <HAL_RCC_OscConfig+0x109a>
 8001d4c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d50:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d54:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8001d58:	fa93 f3a3 	rbit	r3, r3
 8001d5c:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8001d60:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d64:	fab3 f383 	clz	r3, r3
 8001d68:	b2db      	uxtb	r3, r3
 8001d6a:	095b      	lsrs	r3, r3, #5
 8001d6c:	b2db      	uxtb	r3, r3
 8001d6e:	f043 0301 	orr.w	r3, r3, #1
 8001d72:	b2db      	uxtb	r3, r3
 8001d74:	2b01      	cmp	r3, #1
 8001d76:	d102      	bne.n	8001d7e <HAL_RCC_OscConfig+0x2b2>
 8001d78:	4b19      	ldr	r3, [pc, #100]	; (8001de0 <HAL_RCC_OscConfig+0x314>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	e015      	b.n	8001daa <HAL_RCC_OscConfig+0x2de>
 8001d7e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d82:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d86:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8001d8a:	fa93 f3a3 	rbit	r3, r3
 8001d8e:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8001d92:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d96:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001d9a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8001d9e:	fa93 f3a3 	rbit	r3, r3
 8001da2:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001da6:	4b0e      	ldr	r3, [pc, #56]	; (8001de0 <HAL_RCC_OscConfig+0x314>)
 8001da8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001daa:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001dae:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8001db2:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8001db6:	fa92 f2a2 	rbit	r2, r2
 8001dba:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8001dbe:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001dc2:	fab2 f282 	clz	r2, r2
 8001dc6:	b2d2      	uxtb	r2, r2
 8001dc8:	f042 0220 	orr.w	r2, r2, #32
 8001dcc:	b2d2      	uxtb	r2, r2
 8001dce:	f002 021f 	and.w	r2, r2, #31
 8001dd2:	2101      	movs	r1, #1
 8001dd4:	fa01 f202 	lsl.w	r2, r1, r2
 8001dd8:	4013      	ands	r3, r2
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d1ab      	bne.n	8001d36 <HAL_RCC_OscConfig+0x26a>
 8001dde:	e002      	b.n	8001de6 <HAL_RCC_OscConfig+0x31a>
 8001de0:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001de4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001de6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001dea:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f003 0302 	and.w	r3, r3, #2
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	f000 817f 	beq.w	80020fa <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001dfc:	4ba7      	ldr	r3, [pc, #668]	; (800209c <HAL_RCC_OscConfig+0x5d0>)
 8001dfe:	685b      	ldr	r3, [r3, #4]
 8001e00:	f003 030c 	and.w	r3, r3, #12
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d00c      	beq.n	8001e22 <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001e08:	4ba4      	ldr	r3, [pc, #656]	; (800209c <HAL_RCC_OscConfig+0x5d0>)
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	f003 030c 	and.w	r3, r3, #12
 8001e10:	2b08      	cmp	r3, #8
 8001e12:	d173      	bne.n	8001efc <HAL_RCC_OscConfig+0x430>
 8001e14:	4ba1      	ldr	r3, [pc, #644]	; (800209c <HAL_RCC_OscConfig+0x5d0>)
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8001e1c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001e20:	d16c      	bne.n	8001efc <HAL_RCC_OscConfig+0x430>
 8001e22:	2302      	movs	r3, #2
 8001e24:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e28:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8001e2c:	fa93 f3a3 	rbit	r3, r3
 8001e30:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8001e34:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e38:	fab3 f383 	clz	r3, r3
 8001e3c:	b2db      	uxtb	r3, r3
 8001e3e:	095b      	lsrs	r3, r3, #5
 8001e40:	b2db      	uxtb	r3, r3
 8001e42:	f043 0301 	orr.w	r3, r3, #1
 8001e46:	b2db      	uxtb	r3, r3
 8001e48:	2b01      	cmp	r3, #1
 8001e4a:	d102      	bne.n	8001e52 <HAL_RCC_OscConfig+0x386>
 8001e4c:	4b93      	ldr	r3, [pc, #588]	; (800209c <HAL_RCC_OscConfig+0x5d0>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	e013      	b.n	8001e7a <HAL_RCC_OscConfig+0x3ae>
 8001e52:	2302      	movs	r3, #2
 8001e54:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e58:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8001e5c:	fa93 f3a3 	rbit	r3, r3
 8001e60:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8001e64:	2302      	movs	r3, #2
 8001e66:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001e6a:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8001e6e:	fa93 f3a3 	rbit	r3, r3
 8001e72:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001e76:	4b89      	ldr	r3, [pc, #548]	; (800209c <HAL_RCC_OscConfig+0x5d0>)
 8001e78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e7a:	2202      	movs	r2, #2
 8001e7c:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8001e80:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8001e84:	fa92 f2a2 	rbit	r2, r2
 8001e88:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8001e8c:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001e90:	fab2 f282 	clz	r2, r2
 8001e94:	b2d2      	uxtb	r2, r2
 8001e96:	f042 0220 	orr.w	r2, r2, #32
 8001e9a:	b2d2      	uxtb	r2, r2
 8001e9c:	f002 021f 	and.w	r2, r2, #31
 8001ea0:	2101      	movs	r1, #1
 8001ea2:	fa01 f202 	lsl.w	r2, r1, r2
 8001ea6:	4013      	ands	r3, r2
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d00a      	beq.n	8001ec2 <HAL_RCC_OscConfig+0x3f6>
 8001eac:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001eb0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	68db      	ldr	r3, [r3, #12]
 8001eb8:	2b01      	cmp	r3, #1
 8001eba:	d002      	beq.n	8001ec2 <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 8001ebc:	2301      	movs	r3, #1
 8001ebe:	f000 be52 	b.w	8002b66 <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ec2:	4b76      	ldr	r3, [pc, #472]	; (800209c <HAL_RCC_OscConfig+0x5d0>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001eca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ece:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	691b      	ldr	r3, [r3, #16]
 8001ed6:	21f8      	movs	r1, #248	; 0xf8
 8001ed8:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001edc:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8001ee0:	fa91 f1a1 	rbit	r1, r1
 8001ee4:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8001ee8:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001eec:	fab1 f181 	clz	r1, r1
 8001ef0:	b2c9      	uxtb	r1, r1
 8001ef2:	408b      	lsls	r3, r1
 8001ef4:	4969      	ldr	r1, [pc, #420]	; (800209c <HAL_RCC_OscConfig+0x5d0>)
 8001ef6:	4313      	orrs	r3, r2
 8001ef8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001efa:	e0fe      	b.n	80020fa <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001efc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f00:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	68db      	ldr	r3, [r3, #12]
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	f000 8088 	beq.w	800201e <HAL_RCC_OscConfig+0x552>
 8001f0e:	2301      	movs	r3, #1
 8001f10:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f14:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8001f18:	fa93 f3a3 	rbit	r3, r3
 8001f1c:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8001f20:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f24:	fab3 f383 	clz	r3, r3
 8001f28:	b2db      	uxtb	r3, r3
 8001f2a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001f2e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001f32:	009b      	lsls	r3, r3, #2
 8001f34:	461a      	mov	r2, r3
 8001f36:	2301      	movs	r3, #1
 8001f38:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f3a:	f7ff f8bf 	bl	80010bc <HAL_GetTick>
 8001f3e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f42:	e00a      	b.n	8001f5a <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f44:	f7ff f8ba 	bl	80010bc <HAL_GetTick>
 8001f48:	4602      	mov	r2, r0
 8001f4a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001f4e:	1ad3      	subs	r3, r2, r3
 8001f50:	2b02      	cmp	r3, #2
 8001f52:	d902      	bls.n	8001f5a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8001f54:	2303      	movs	r3, #3
 8001f56:	f000 be06 	b.w	8002b66 <HAL_RCC_OscConfig+0x109a>
 8001f5a:	2302      	movs	r3, #2
 8001f5c:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f60:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8001f64:	fa93 f3a3 	rbit	r3, r3
 8001f68:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8001f6c:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f70:	fab3 f383 	clz	r3, r3
 8001f74:	b2db      	uxtb	r3, r3
 8001f76:	095b      	lsrs	r3, r3, #5
 8001f78:	b2db      	uxtb	r3, r3
 8001f7a:	f043 0301 	orr.w	r3, r3, #1
 8001f7e:	b2db      	uxtb	r3, r3
 8001f80:	2b01      	cmp	r3, #1
 8001f82:	d102      	bne.n	8001f8a <HAL_RCC_OscConfig+0x4be>
 8001f84:	4b45      	ldr	r3, [pc, #276]	; (800209c <HAL_RCC_OscConfig+0x5d0>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	e013      	b.n	8001fb2 <HAL_RCC_OscConfig+0x4e6>
 8001f8a:	2302      	movs	r3, #2
 8001f8c:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f90:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8001f94:	fa93 f3a3 	rbit	r3, r3
 8001f98:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8001f9c:	2302      	movs	r3, #2
 8001f9e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001fa2:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8001fa6:	fa93 f3a3 	rbit	r3, r3
 8001faa:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001fae:	4b3b      	ldr	r3, [pc, #236]	; (800209c <HAL_RCC_OscConfig+0x5d0>)
 8001fb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fb2:	2202      	movs	r2, #2
 8001fb4:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8001fb8:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8001fbc:	fa92 f2a2 	rbit	r2, r2
 8001fc0:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8001fc4:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001fc8:	fab2 f282 	clz	r2, r2
 8001fcc:	b2d2      	uxtb	r2, r2
 8001fce:	f042 0220 	orr.w	r2, r2, #32
 8001fd2:	b2d2      	uxtb	r2, r2
 8001fd4:	f002 021f 	and.w	r2, r2, #31
 8001fd8:	2101      	movs	r1, #1
 8001fda:	fa01 f202 	lsl.w	r2, r1, r2
 8001fde:	4013      	ands	r3, r2
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d0af      	beq.n	8001f44 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fe4:	4b2d      	ldr	r3, [pc, #180]	; (800209c <HAL_RCC_OscConfig+0x5d0>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001fec:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ff0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	691b      	ldr	r3, [r3, #16]
 8001ff8:	21f8      	movs	r1, #248	; 0xf8
 8001ffa:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ffe:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8002002:	fa91 f1a1 	rbit	r1, r1
 8002006:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 800200a:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800200e:	fab1 f181 	clz	r1, r1
 8002012:	b2c9      	uxtb	r1, r1
 8002014:	408b      	lsls	r3, r1
 8002016:	4921      	ldr	r1, [pc, #132]	; (800209c <HAL_RCC_OscConfig+0x5d0>)
 8002018:	4313      	orrs	r3, r2
 800201a:	600b      	str	r3, [r1, #0]
 800201c:	e06d      	b.n	80020fa <HAL_RCC_OscConfig+0x62e>
 800201e:	2301      	movs	r3, #1
 8002020:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002024:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8002028:	fa93 f3a3 	rbit	r3, r3
 800202c:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8002030:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002034:	fab3 f383 	clz	r3, r3
 8002038:	b2db      	uxtb	r3, r3
 800203a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800203e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002042:	009b      	lsls	r3, r3, #2
 8002044:	461a      	mov	r2, r3
 8002046:	2300      	movs	r3, #0
 8002048:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800204a:	f7ff f837 	bl	80010bc <HAL_GetTick>
 800204e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002052:	e00a      	b.n	800206a <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002054:	f7ff f832 	bl	80010bc <HAL_GetTick>
 8002058:	4602      	mov	r2, r0
 800205a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800205e:	1ad3      	subs	r3, r2, r3
 8002060:	2b02      	cmp	r3, #2
 8002062:	d902      	bls.n	800206a <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 8002064:	2303      	movs	r3, #3
 8002066:	f000 bd7e 	b.w	8002b66 <HAL_RCC_OscConfig+0x109a>
 800206a:	2302      	movs	r3, #2
 800206c:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002070:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8002074:	fa93 f3a3 	rbit	r3, r3
 8002078:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 800207c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002080:	fab3 f383 	clz	r3, r3
 8002084:	b2db      	uxtb	r3, r3
 8002086:	095b      	lsrs	r3, r3, #5
 8002088:	b2db      	uxtb	r3, r3
 800208a:	f043 0301 	orr.w	r3, r3, #1
 800208e:	b2db      	uxtb	r3, r3
 8002090:	2b01      	cmp	r3, #1
 8002092:	d105      	bne.n	80020a0 <HAL_RCC_OscConfig+0x5d4>
 8002094:	4b01      	ldr	r3, [pc, #4]	; (800209c <HAL_RCC_OscConfig+0x5d0>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	e016      	b.n	80020c8 <HAL_RCC_OscConfig+0x5fc>
 800209a:	bf00      	nop
 800209c:	40021000 	.word	0x40021000
 80020a0:	2302      	movs	r3, #2
 80020a2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020a6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80020aa:	fa93 f3a3 	rbit	r3, r3
 80020ae:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80020b2:	2302      	movs	r3, #2
 80020b4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80020b8:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80020bc:	fa93 f3a3 	rbit	r3, r3
 80020c0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80020c4:	4bbf      	ldr	r3, [pc, #764]	; (80023c4 <HAL_RCC_OscConfig+0x8f8>)
 80020c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020c8:	2202      	movs	r2, #2
 80020ca:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 80020ce:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 80020d2:	fa92 f2a2 	rbit	r2, r2
 80020d6:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 80020da:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80020de:	fab2 f282 	clz	r2, r2
 80020e2:	b2d2      	uxtb	r2, r2
 80020e4:	f042 0220 	orr.w	r2, r2, #32
 80020e8:	b2d2      	uxtb	r2, r2
 80020ea:	f002 021f 	and.w	r2, r2, #31
 80020ee:	2101      	movs	r1, #1
 80020f0:	fa01 f202 	lsl.w	r2, r1, r2
 80020f4:	4013      	ands	r3, r2
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d1ac      	bne.n	8002054 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80020fa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020fe:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f003 0308 	and.w	r3, r3, #8
 800210a:	2b00      	cmp	r3, #0
 800210c:	f000 8113 	beq.w	8002336 <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002110:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002114:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	695b      	ldr	r3, [r3, #20]
 800211c:	2b00      	cmp	r3, #0
 800211e:	d07c      	beq.n	800221a <HAL_RCC_OscConfig+0x74e>
 8002120:	2301      	movs	r3, #1
 8002122:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002126:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800212a:	fa93 f3a3 	rbit	r3, r3
 800212e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 8002132:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002136:	fab3 f383 	clz	r3, r3
 800213a:	b2db      	uxtb	r3, r3
 800213c:	461a      	mov	r2, r3
 800213e:	4ba2      	ldr	r3, [pc, #648]	; (80023c8 <HAL_RCC_OscConfig+0x8fc>)
 8002140:	4413      	add	r3, r2
 8002142:	009b      	lsls	r3, r3, #2
 8002144:	461a      	mov	r2, r3
 8002146:	2301      	movs	r3, #1
 8002148:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800214a:	f7fe ffb7 	bl	80010bc <HAL_GetTick>
 800214e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002152:	e00a      	b.n	800216a <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002154:	f7fe ffb2 	bl	80010bc <HAL_GetTick>
 8002158:	4602      	mov	r2, r0
 800215a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800215e:	1ad3      	subs	r3, r2, r3
 8002160:	2b02      	cmp	r3, #2
 8002162:	d902      	bls.n	800216a <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8002164:	2303      	movs	r3, #3
 8002166:	f000 bcfe 	b.w	8002b66 <HAL_RCC_OscConfig+0x109a>
 800216a:	2302      	movs	r3, #2
 800216c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002170:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002174:	fa93 f2a3 	rbit	r2, r3
 8002178:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800217c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002180:	601a      	str	r2, [r3, #0]
 8002182:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002186:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800218a:	2202      	movs	r2, #2
 800218c:	601a      	str	r2, [r3, #0]
 800218e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002192:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	fa93 f2a3 	rbit	r2, r3
 800219c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80021a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80021a4:	601a      	str	r2, [r3, #0]
 80021a6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80021aa:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80021ae:	2202      	movs	r2, #2
 80021b0:	601a      	str	r2, [r3, #0]
 80021b2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80021b6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	fa93 f2a3 	rbit	r2, r3
 80021c0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80021c4:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80021c8:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021ca:	4b7e      	ldr	r3, [pc, #504]	; (80023c4 <HAL_RCC_OscConfig+0x8f8>)
 80021cc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80021ce:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80021d2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80021d6:	2102      	movs	r1, #2
 80021d8:	6019      	str	r1, [r3, #0]
 80021da:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80021de:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	fa93 f1a3 	rbit	r1, r3
 80021e8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80021ec:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80021f0:	6019      	str	r1, [r3, #0]
  return result;
 80021f2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80021f6:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	fab3 f383 	clz	r3, r3
 8002200:	b2db      	uxtb	r3, r3
 8002202:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002206:	b2db      	uxtb	r3, r3
 8002208:	f003 031f 	and.w	r3, r3, #31
 800220c:	2101      	movs	r1, #1
 800220e:	fa01 f303 	lsl.w	r3, r1, r3
 8002212:	4013      	ands	r3, r2
 8002214:	2b00      	cmp	r3, #0
 8002216:	d09d      	beq.n	8002154 <HAL_RCC_OscConfig+0x688>
 8002218:	e08d      	b.n	8002336 <HAL_RCC_OscConfig+0x86a>
 800221a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800221e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002222:	2201      	movs	r2, #1
 8002224:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002226:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800222a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	fa93 f2a3 	rbit	r2, r3
 8002234:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002238:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800223c:	601a      	str	r2, [r3, #0]
  return result;
 800223e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002242:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002246:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002248:	fab3 f383 	clz	r3, r3
 800224c:	b2db      	uxtb	r3, r3
 800224e:	461a      	mov	r2, r3
 8002250:	4b5d      	ldr	r3, [pc, #372]	; (80023c8 <HAL_RCC_OscConfig+0x8fc>)
 8002252:	4413      	add	r3, r2
 8002254:	009b      	lsls	r3, r3, #2
 8002256:	461a      	mov	r2, r3
 8002258:	2300      	movs	r3, #0
 800225a:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800225c:	f7fe ff2e 	bl	80010bc <HAL_GetTick>
 8002260:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002264:	e00a      	b.n	800227c <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002266:	f7fe ff29 	bl	80010bc <HAL_GetTick>
 800226a:	4602      	mov	r2, r0
 800226c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002270:	1ad3      	subs	r3, r2, r3
 8002272:	2b02      	cmp	r3, #2
 8002274:	d902      	bls.n	800227c <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 8002276:	2303      	movs	r3, #3
 8002278:	f000 bc75 	b.w	8002b66 <HAL_RCC_OscConfig+0x109a>
 800227c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002280:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8002284:	2202      	movs	r2, #2
 8002286:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002288:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800228c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	fa93 f2a3 	rbit	r2, r3
 8002296:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800229a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800229e:	601a      	str	r2, [r3, #0]
 80022a0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80022a4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80022a8:	2202      	movs	r2, #2
 80022aa:	601a      	str	r2, [r3, #0]
 80022ac:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80022b0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	fa93 f2a3 	rbit	r2, r3
 80022ba:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80022be:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80022c2:	601a      	str	r2, [r3, #0]
 80022c4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80022c8:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80022cc:	2202      	movs	r2, #2
 80022ce:	601a      	str	r2, [r3, #0]
 80022d0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80022d4:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	fa93 f2a3 	rbit	r2, r3
 80022de:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80022e2:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80022e6:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022e8:	4b36      	ldr	r3, [pc, #216]	; (80023c4 <HAL_RCC_OscConfig+0x8f8>)
 80022ea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80022ec:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80022f0:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80022f4:	2102      	movs	r1, #2
 80022f6:	6019      	str	r1, [r3, #0]
 80022f8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80022fc:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	fa93 f1a3 	rbit	r1, r3
 8002306:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800230a:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800230e:	6019      	str	r1, [r3, #0]
  return result;
 8002310:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002314:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	fab3 f383 	clz	r3, r3
 800231e:	b2db      	uxtb	r3, r3
 8002320:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002324:	b2db      	uxtb	r3, r3
 8002326:	f003 031f 	and.w	r3, r3, #31
 800232a:	2101      	movs	r1, #1
 800232c:	fa01 f303 	lsl.w	r3, r1, r3
 8002330:	4013      	ands	r3, r2
 8002332:	2b00      	cmp	r3, #0
 8002334:	d197      	bne.n	8002266 <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002336:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800233a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f003 0304 	and.w	r3, r3, #4
 8002346:	2b00      	cmp	r3, #0
 8002348:	f000 81a5 	beq.w	8002696 <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 800234c:	2300      	movs	r3, #0
 800234e:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002352:	4b1c      	ldr	r3, [pc, #112]	; (80023c4 <HAL_RCC_OscConfig+0x8f8>)
 8002354:	69db      	ldr	r3, [r3, #28]
 8002356:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800235a:	2b00      	cmp	r3, #0
 800235c:	d116      	bne.n	800238c <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800235e:	4b19      	ldr	r3, [pc, #100]	; (80023c4 <HAL_RCC_OscConfig+0x8f8>)
 8002360:	69db      	ldr	r3, [r3, #28]
 8002362:	4a18      	ldr	r2, [pc, #96]	; (80023c4 <HAL_RCC_OscConfig+0x8f8>)
 8002364:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002368:	61d3      	str	r3, [r2, #28]
 800236a:	4b16      	ldr	r3, [pc, #88]	; (80023c4 <HAL_RCC_OscConfig+0x8f8>)
 800236c:	69db      	ldr	r3, [r3, #28]
 800236e:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002372:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002376:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800237a:	601a      	str	r2, [r3, #0]
 800237c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002380:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002384:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002386:	2301      	movs	r3, #1
 8002388:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800238c:	4b0f      	ldr	r3, [pc, #60]	; (80023cc <HAL_RCC_OscConfig+0x900>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002394:	2b00      	cmp	r3, #0
 8002396:	d121      	bne.n	80023dc <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002398:	4b0c      	ldr	r3, [pc, #48]	; (80023cc <HAL_RCC_OscConfig+0x900>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	4a0b      	ldr	r2, [pc, #44]	; (80023cc <HAL_RCC_OscConfig+0x900>)
 800239e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023a2:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80023a4:	f7fe fe8a 	bl	80010bc <HAL_GetTick>
 80023a8:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023ac:	e010      	b.n	80023d0 <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023ae:	f7fe fe85 	bl	80010bc <HAL_GetTick>
 80023b2:	4602      	mov	r2, r0
 80023b4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80023b8:	1ad3      	subs	r3, r2, r3
 80023ba:	2b64      	cmp	r3, #100	; 0x64
 80023bc:	d908      	bls.n	80023d0 <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 80023be:	2303      	movs	r3, #3
 80023c0:	e3d1      	b.n	8002b66 <HAL_RCC_OscConfig+0x109a>
 80023c2:	bf00      	nop
 80023c4:	40021000 	.word	0x40021000
 80023c8:	10908120 	.word	0x10908120
 80023cc:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023d0:	4b8d      	ldr	r3, [pc, #564]	; (8002608 <HAL_RCC_OscConfig+0xb3c>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d0e8      	beq.n	80023ae <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023dc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80023e0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	689b      	ldr	r3, [r3, #8]
 80023e8:	2b01      	cmp	r3, #1
 80023ea:	d106      	bne.n	80023fa <HAL_RCC_OscConfig+0x92e>
 80023ec:	4b87      	ldr	r3, [pc, #540]	; (800260c <HAL_RCC_OscConfig+0xb40>)
 80023ee:	6a1b      	ldr	r3, [r3, #32]
 80023f0:	4a86      	ldr	r2, [pc, #536]	; (800260c <HAL_RCC_OscConfig+0xb40>)
 80023f2:	f043 0301 	orr.w	r3, r3, #1
 80023f6:	6213      	str	r3, [r2, #32]
 80023f8:	e035      	b.n	8002466 <HAL_RCC_OscConfig+0x99a>
 80023fa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80023fe:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	689b      	ldr	r3, [r3, #8]
 8002406:	2b00      	cmp	r3, #0
 8002408:	d10c      	bne.n	8002424 <HAL_RCC_OscConfig+0x958>
 800240a:	4b80      	ldr	r3, [pc, #512]	; (800260c <HAL_RCC_OscConfig+0xb40>)
 800240c:	6a1b      	ldr	r3, [r3, #32]
 800240e:	4a7f      	ldr	r2, [pc, #508]	; (800260c <HAL_RCC_OscConfig+0xb40>)
 8002410:	f023 0301 	bic.w	r3, r3, #1
 8002414:	6213      	str	r3, [r2, #32]
 8002416:	4b7d      	ldr	r3, [pc, #500]	; (800260c <HAL_RCC_OscConfig+0xb40>)
 8002418:	6a1b      	ldr	r3, [r3, #32]
 800241a:	4a7c      	ldr	r2, [pc, #496]	; (800260c <HAL_RCC_OscConfig+0xb40>)
 800241c:	f023 0304 	bic.w	r3, r3, #4
 8002420:	6213      	str	r3, [r2, #32]
 8002422:	e020      	b.n	8002466 <HAL_RCC_OscConfig+0x99a>
 8002424:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002428:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	689b      	ldr	r3, [r3, #8]
 8002430:	2b05      	cmp	r3, #5
 8002432:	d10c      	bne.n	800244e <HAL_RCC_OscConfig+0x982>
 8002434:	4b75      	ldr	r3, [pc, #468]	; (800260c <HAL_RCC_OscConfig+0xb40>)
 8002436:	6a1b      	ldr	r3, [r3, #32]
 8002438:	4a74      	ldr	r2, [pc, #464]	; (800260c <HAL_RCC_OscConfig+0xb40>)
 800243a:	f043 0304 	orr.w	r3, r3, #4
 800243e:	6213      	str	r3, [r2, #32]
 8002440:	4b72      	ldr	r3, [pc, #456]	; (800260c <HAL_RCC_OscConfig+0xb40>)
 8002442:	6a1b      	ldr	r3, [r3, #32]
 8002444:	4a71      	ldr	r2, [pc, #452]	; (800260c <HAL_RCC_OscConfig+0xb40>)
 8002446:	f043 0301 	orr.w	r3, r3, #1
 800244a:	6213      	str	r3, [r2, #32]
 800244c:	e00b      	b.n	8002466 <HAL_RCC_OscConfig+0x99a>
 800244e:	4b6f      	ldr	r3, [pc, #444]	; (800260c <HAL_RCC_OscConfig+0xb40>)
 8002450:	6a1b      	ldr	r3, [r3, #32]
 8002452:	4a6e      	ldr	r2, [pc, #440]	; (800260c <HAL_RCC_OscConfig+0xb40>)
 8002454:	f023 0301 	bic.w	r3, r3, #1
 8002458:	6213      	str	r3, [r2, #32]
 800245a:	4b6c      	ldr	r3, [pc, #432]	; (800260c <HAL_RCC_OscConfig+0xb40>)
 800245c:	6a1b      	ldr	r3, [r3, #32]
 800245e:	4a6b      	ldr	r2, [pc, #428]	; (800260c <HAL_RCC_OscConfig+0xb40>)
 8002460:	f023 0304 	bic.w	r3, r3, #4
 8002464:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002466:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800246a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	689b      	ldr	r3, [r3, #8]
 8002472:	2b00      	cmp	r3, #0
 8002474:	f000 8081 	beq.w	800257a <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002478:	f7fe fe20 	bl	80010bc <HAL_GetTick>
 800247c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002480:	e00b      	b.n	800249a <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002482:	f7fe fe1b 	bl	80010bc <HAL_GetTick>
 8002486:	4602      	mov	r2, r0
 8002488:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800248c:	1ad3      	subs	r3, r2, r3
 800248e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002492:	4293      	cmp	r3, r2
 8002494:	d901      	bls.n	800249a <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 8002496:	2303      	movs	r3, #3
 8002498:	e365      	b.n	8002b66 <HAL_RCC_OscConfig+0x109a>
 800249a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800249e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80024a2:	2202      	movs	r2, #2
 80024a4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024a6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80024aa:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	fa93 f2a3 	rbit	r2, r3
 80024b4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80024b8:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80024bc:	601a      	str	r2, [r3, #0]
 80024be:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80024c2:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80024c6:	2202      	movs	r2, #2
 80024c8:	601a      	str	r2, [r3, #0]
 80024ca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80024ce:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	fa93 f2a3 	rbit	r2, r3
 80024d8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80024dc:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80024e0:	601a      	str	r2, [r3, #0]
  return result;
 80024e2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80024e6:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80024ea:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024ec:	fab3 f383 	clz	r3, r3
 80024f0:	b2db      	uxtb	r3, r3
 80024f2:	095b      	lsrs	r3, r3, #5
 80024f4:	b2db      	uxtb	r3, r3
 80024f6:	f043 0302 	orr.w	r3, r3, #2
 80024fa:	b2db      	uxtb	r3, r3
 80024fc:	2b02      	cmp	r3, #2
 80024fe:	d102      	bne.n	8002506 <HAL_RCC_OscConfig+0xa3a>
 8002500:	4b42      	ldr	r3, [pc, #264]	; (800260c <HAL_RCC_OscConfig+0xb40>)
 8002502:	6a1b      	ldr	r3, [r3, #32]
 8002504:	e013      	b.n	800252e <HAL_RCC_OscConfig+0xa62>
 8002506:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800250a:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800250e:	2202      	movs	r2, #2
 8002510:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002512:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002516:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	fa93 f2a3 	rbit	r2, r3
 8002520:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002524:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8002528:	601a      	str	r2, [r3, #0]
 800252a:	4b38      	ldr	r3, [pc, #224]	; (800260c <HAL_RCC_OscConfig+0xb40>)
 800252c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800252e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002532:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002536:	2102      	movs	r1, #2
 8002538:	6011      	str	r1, [r2, #0]
 800253a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800253e:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002542:	6812      	ldr	r2, [r2, #0]
 8002544:	fa92 f1a2 	rbit	r1, r2
 8002548:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800254c:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8002550:	6011      	str	r1, [r2, #0]
  return result;
 8002552:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002556:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 800255a:	6812      	ldr	r2, [r2, #0]
 800255c:	fab2 f282 	clz	r2, r2
 8002560:	b2d2      	uxtb	r2, r2
 8002562:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002566:	b2d2      	uxtb	r2, r2
 8002568:	f002 021f 	and.w	r2, r2, #31
 800256c:	2101      	movs	r1, #1
 800256e:	fa01 f202 	lsl.w	r2, r1, r2
 8002572:	4013      	ands	r3, r2
 8002574:	2b00      	cmp	r3, #0
 8002576:	d084      	beq.n	8002482 <HAL_RCC_OscConfig+0x9b6>
 8002578:	e083      	b.n	8002682 <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800257a:	f7fe fd9f 	bl	80010bc <HAL_GetTick>
 800257e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002582:	e00b      	b.n	800259c <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002584:	f7fe fd9a 	bl	80010bc <HAL_GetTick>
 8002588:	4602      	mov	r2, r0
 800258a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800258e:	1ad3      	subs	r3, r2, r3
 8002590:	f241 3288 	movw	r2, #5000	; 0x1388
 8002594:	4293      	cmp	r3, r2
 8002596:	d901      	bls.n	800259c <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 8002598:	2303      	movs	r3, #3
 800259a:	e2e4      	b.n	8002b66 <HAL_RCC_OscConfig+0x109a>
 800259c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80025a0:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80025a4:	2202      	movs	r2, #2
 80025a6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025a8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80025ac:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	fa93 f2a3 	rbit	r2, r3
 80025b6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80025ba:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80025be:	601a      	str	r2, [r3, #0]
 80025c0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80025c4:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80025c8:	2202      	movs	r2, #2
 80025ca:	601a      	str	r2, [r3, #0]
 80025cc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80025d0:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	fa93 f2a3 	rbit	r2, r3
 80025da:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80025de:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80025e2:	601a      	str	r2, [r3, #0]
  return result;
 80025e4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80025e8:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80025ec:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025ee:	fab3 f383 	clz	r3, r3
 80025f2:	b2db      	uxtb	r3, r3
 80025f4:	095b      	lsrs	r3, r3, #5
 80025f6:	b2db      	uxtb	r3, r3
 80025f8:	f043 0302 	orr.w	r3, r3, #2
 80025fc:	b2db      	uxtb	r3, r3
 80025fe:	2b02      	cmp	r3, #2
 8002600:	d106      	bne.n	8002610 <HAL_RCC_OscConfig+0xb44>
 8002602:	4b02      	ldr	r3, [pc, #8]	; (800260c <HAL_RCC_OscConfig+0xb40>)
 8002604:	6a1b      	ldr	r3, [r3, #32]
 8002606:	e017      	b.n	8002638 <HAL_RCC_OscConfig+0xb6c>
 8002608:	40007000 	.word	0x40007000
 800260c:	40021000 	.word	0x40021000
 8002610:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002614:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8002618:	2202      	movs	r2, #2
 800261a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800261c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002620:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	fa93 f2a3 	rbit	r2, r3
 800262a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800262e:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8002632:	601a      	str	r2, [r3, #0]
 8002634:	4bb3      	ldr	r3, [pc, #716]	; (8002904 <HAL_RCC_OscConfig+0xe38>)
 8002636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002638:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800263c:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002640:	2102      	movs	r1, #2
 8002642:	6011      	str	r1, [r2, #0]
 8002644:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002648:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800264c:	6812      	ldr	r2, [r2, #0]
 800264e:	fa92 f1a2 	rbit	r1, r2
 8002652:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002656:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 800265a:	6011      	str	r1, [r2, #0]
  return result;
 800265c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002660:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8002664:	6812      	ldr	r2, [r2, #0]
 8002666:	fab2 f282 	clz	r2, r2
 800266a:	b2d2      	uxtb	r2, r2
 800266c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002670:	b2d2      	uxtb	r2, r2
 8002672:	f002 021f 	and.w	r2, r2, #31
 8002676:	2101      	movs	r1, #1
 8002678:	fa01 f202 	lsl.w	r2, r1, r2
 800267c:	4013      	ands	r3, r2
 800267e:	2b00      	cmp	r3, #0
 8002680:	d180      	bne.n	8002584 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002682:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8002686:	2b01      	cmp	r3, #1
 8002688:	d105      	bne.n	8002696 <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800268a:	4b9e      	ldr	r3, [pc, #632]	; (8002904 <HAL_RCC_OscConfig+0xe38>)
 800268c:	69db      	ldr	r3, [r3, #28]
 800268e:	4a9d      	ldr	r2, [pc, #628]	; (8002904 <HAL_RCC_OscConfig+0xe38>)
 8002690:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002694:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002696:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800269a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	699b      	ldr	r3, [r3, #24]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	f000 825e 	beq.w	8002b64 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80026a8:	4b96      	ldr	r3, [pc, #600]	; (8002904 <HAL_RCC_OscConfig+0xe38>)
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	f003 030c 	and.w	r3, r3, #12
 80026b0:	2b08      	cmp	r3, #8
 80026b2:	f000 821f 	beq.w	8002af4 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80026b6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80026ba:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	699b      	ldr	r3, [r3, #24]
 80026c2:	2b02      	cmp	r3, #2
 80026c4:	f040 8170 	bne.w	80029a8 <HAL_RCC_OscConfig+0xedc>
 80026c8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80026cc:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80026d0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80026d4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026d6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80026da:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	fa93 f2a3 	rbit	r2, r3
 80026e4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80026e8:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80026ec:	601a      	str	r2, [r3, #0]
  return result;
 80026ee:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80026f2:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80026f6:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026f8:	fab3 f383 	clz	r3, r3
 80026fc:	b2db      	uxtb	r3, r3
 80026fe:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002702:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002706:	009b      	lsls	r3, r3, #2
 8002708:	461a      	mov	r2, r3
 800270a:	2300      	movs	r3, #0
 800270c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800270e:	f7fe fcd5 	bl	80010bc <HAL_GetTick>
 8002712:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002716:	e009      	b.n	800272c <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002718:	f7fe fcd0 	bl	80010bc <HAL_GetTick>
 800271c:	4602      	mov	r2, r0
 800271e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002722:	1ad3      	subs	r3, r2, r3
 8002724:	2b02      	cmp	r3, #2
 8002726:	d901      	bls.n	800272c <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 8002728:	2303      	movs	r3, #3
 800272a:	e21c      	b.n	8002b66 <HAL_RCC_OscConfig+0x109a>
 800272c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002730:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002734:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002738:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800273a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800273e:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	fa93 f2a3 	rbit	r2, r3
 8002748:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800274c:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002750:	601a      	str	r2, [r3, #0]
  return result;
 8002752:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002756:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800275a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800275c:	fab3 f383 	clz	r3, r3
 8002760:	b2db      	uxtb	r3, r3
 8002762:	095b      	lsrs	r3, r3, #5
 8002764:	b2db      	uxtb	r3, r3
 8002766:	f043 0301 	orr.w	r3, r3, #1
 800276a:	b2db      	uxtb	r3, r3
 800276c:	2b01      	cmp	r3, #1
 800276e:	d102      	bne.n	8002776 <HAL_RCC_OscConfig+0xcaa>
 8002770:	4b64      	ldr	r3, [pc, #400]	; (8002904 <HAL_RCC_OscConfig+0xe38>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	e027      	b.n	80027c6 <HAL_RCC_OscConfig+0xcfa>
 8002776:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800277a:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 800277e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002782:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002784:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002788:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	fa93 f2a3 	rbit	r2, r3
 8002792:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002796:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800279a:	601a      	str	r2, [r3, #0]
 800279c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80027a0:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80027a4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80027a8:	601a      	str	r2, [r3, #0]
 80027aa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80027ae:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	fa93 f2a3 	rbit	r2, r3
 80027b8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80027bc:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 80027c0:	601a      	str	r2, [r3, #0]
 80027c2:	4b50      	ldr	r3, [pc, #320]	; (8002904 <HAL_RCC_OscConfig+0xe38>)
 80027c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027c6:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80027ca:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80027ce:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80027d2:	6011      	str	r1, [r2, #0]
 80027d4:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80027d8:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80027dc:	6812      	ldr	r2, [r2, #0]
 80027de:	fa92 f1a2 	rbit	r1, r2
 80027e2:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80027e6:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 80027ea:	6011      	str	r1, [r2, #0]
  return result;
 80027ec:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80027f0:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 80027f4:	6812      	ldr	r2, [r2, #0]
 80027f6:	fab2 f282 	clz	r2, r2
 80027fa:	b2d2      	uxtb	r2, r2
 80027fc:	f042 0220 	orr.w	r2, r2, #32
 8002800:	b2d2      	uxtb	r2, r2
 8002802:	f002 021f 	and.w	r2, r2, #31
 8002806:	2101      	movs	r1, #1
 8002808:	fa01 f202 	lsl.w	r2, r1, r2
 800280c:	4013      	ands	r3, r2
 800280e:	2b00      	cmp	r3, #0
 8002810:	d182      	bne.n	8002718 <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002812:	4b3c      	ldr	r3, [pc, #240]	; (8002904 <HAL_RCC_OscConfig+0xe38>)
 8002814:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002816:	f023 020f 	bic.w	r2, r3, #15
 800281a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800281e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002826:	4937      	ldr	r1, [pc, #220]	; (8002904 <HAL_RCC_OscConfig+0xe38>)
 8002828:	4313      	orrs	r3, r2
 800282a:	62cb      	str	r3, [r1, #44]	; 0x2c
 800282c:	4b35      	ldr	r3, [pc, #212]	; (8002904 <HAL_RCC_OscConfig+0xe38>)
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8002834:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002838:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	6a19      	ldr	r1, [r3, #32]
 8002840:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002844:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	69db      	ldr	r3, [r3, #28]
 800284c:	430b      	orrs	r3, r1
 800284e:	492d      	ldr	r1, [pc, #180]	; (8002904 <HAL_RCC_OscConfig+0xe38>)
 8002850:	4313      	orrs	r3, r2
 8002852:	604b      	str	r3, [r1, #4]
 8002854:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002858:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800285c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002860:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002862:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002866:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	fa93 f2a3 	rbit	r2, r3
 8002870:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002874:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002878:	601a      	str	r2, [r3, #0]
  return result;
 800287a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800287e:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002882:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002884:	fab3 f383 	clz	r3, r3
 8002888:	b2db      	uxtb	r3, r3
 800288a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800288e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002892:	009b      	lsls	r3, r3, #2
 8002894:	461a      	mov	r2, r3
 8002896:	2301      	movs	r3, #1
 8002898:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800289a:	f7fe fc0f 	bl	80010bc <HAL_GetTick>
 800289e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80028a2:	e009      	b.n	80028b8 <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028a4:	f7fe fc0a 	bl	80010bc <HAL_GetTick>
 80028a8:	4602      	mov	r2, r0
 80028aa:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80028ae:	1ad3      	subs	r3, r2, r3
 80028b0:	2b02      	cmp	r3, #2
 80028b2:	d901      	bls.n	80028b8 <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 80028b4:	2303      	movs	r3, #3
 80028b6:	e156      	b.n	8002b66 <HAL_RCC_OscConfig+0x109a>
 80028b8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80028bc:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80028c0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80028c4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028c6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80028ca:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	fa93 f2a3 	rbit	r2, r3
 80028d4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80028d8:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80028dc:	601a      	str	r2, [r3, #0]
  return result;
 80028de:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80028e2:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80028e6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80028e8:	fab3 f383 	clz	r3, r3
 80028ec:	b2db      	uxtb	r3, r3
 80028ee:	095b      	lsrs	r3, r3, #5
 80028f0:	b2db      	uxtb	r3, r3
 80028f2:	f043 0301 	orr.w	r3, r3, #1
 80028f6:	b2db      	uxtb	r3, r3
 80028f8:	2b01      	cmp	r3, #1
 80028fa:	d105      	bne.n	8002908 <HAL_RCC_OscConfig+0xe3c>
 80028fc:	4b01      	ldr	r3, [pc, #4]	; (8002904 <HAL_RCC_OscConfig+0xe38>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	e02a      	b.n	8002958 <HAL_RCC_OscConfig+0xe8c>
 8002902:	bf00      	nop
 8002904:	40021000 	.word	0x40021000
 8002908:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800290c:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8002910:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002914:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002916:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800291a:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	fa93 f2a3 	rbit	r2, r3
 8002924:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002928:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800292c:	601a      	str	r2, [r3, #0]
 800292e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002932:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8002936:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800293a:	601a      	str	r2, [r3, #0]
 800293c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002940:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	fa93 f2a3 	rbit	r2, r3
 800294a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800294e:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8002952:	601a      	str	r2, [r3, #0]
 8002954:	4b86      	ldr	r3, [pc, #536]	; (8002b70 <HAL_RCC_OscConfig+0x10a4>)
 8002956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002958:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800295c:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002960:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002964:	6011      	str	r1, [r2, #0]
 8002966:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800296a:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 800296e:	6812      	ldr	r2, [r2, #0]
 8002970:	fa92 f1a2 	rbit	r1, r2
 8002974:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002978:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 800297c:	6011      	str	r1, [r2, #0]
  return result;
 800297e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002982:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8002986:	6812      	ldr	r2, [r2, #0]
 8002988:	fab2 f282 	clz	r2, r2
 800298c:	b2d2      	uxtb	r2, r2
 800298e:	f042 0220 	orr.w	r2, r2, #32
 8002992:	b2d2      	uxtb	r2, r2
 8002994:	f002 021f 	and.w	r2, r2, #31
 8002998:	2101      	movs	r1, #1
 800299a:	fa01 f202 	lsl.w	r2, r1, r2
 800299e:	4013      	ands	r3, r2
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	f43f af7f 	beq.w	80028a4 <HAL_RCC_OscConfig+0xdd8>
 80029a6:	e0dd      	b.n	8002b64 <HAL_RCC_OscConfig+0x1098>
 80029a8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80029ac:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80029b0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80029b4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029b6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80029ba:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	fa93 f2a3 	rbit	r2, r3
 80029c4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80029c8:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80029cc:	601a      	str	r2, [r3, #0]
  return result;
 80029ce:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80029d2:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80029d6:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029d8:	fab3 f383 	clz	r3, r3
 80029dc:	b2db      	uxtb	r3, r3
 80029de:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80029e2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80029e6:	009b      	lsls	r3, r3, #2
 80029e8:	461a      	mov	r2, r3
 80029ea:	2300      	movs	r3, #0
 80029ec:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029ee:	f7fe fb65 	bl	80010bc <HAL_GetTick>
 80029f2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029f6:	e009      	b.n	8002a0c <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029f8:	f7fe fb60 	bl	80010bc <HAL_GetTick>
 80029fc:	4602      	mov	r2, r0
 80029fe:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002a02:	1ad3      	subs	r3, r2, r3
 8002a04:	2b02      	cmp	r3, #2
 8002a06:	d901      	bls.n	8002a0c <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 8002a08:	2303      	movs	r3, #3
 8002a0a:	e0ac      	b.n	8002b66 <HAL_RCC_OscConfig+0x109a>
 8002a0c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a10:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002a14:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002a18:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a1a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a1e:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	fa93 f2a3 	rbit	r2, r3
 8002a28:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a2c:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002a30:	601a      	str	r2, [r3, #0]
  return result;
 8002a32:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a36:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002a3a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a3c:	fab3 f383 	clz	r3, r3
 8002a40:	b2db      	uxtb	r3, r3
 8002a42:	095b      	lsrs	r3, r3, #5
 8002a44:	b2db      	uxtb	r3, r3
 8002a46:	f043 0301 	orr.w	r3, r3, #1
 8002a4a:	b2db      	uxtb	r3, r3
 8002a4c:	2b01      	cmp	r3, #1
 8002a4e:	d102      	bne.n	8002a56 <HAL_RCC_OscConfig+0xf8a>
 8002a50:	4b47      	ldr	r3, [pc, #284]	; (8002b70 <HAL_RCC_OscConfig+0x10a4>)
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	e027      	b.n	8002aa6 <HAL_RCC_OscConfig+0xfda>
 8002a56:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a5a:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8002a5e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002a62:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a64:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a68:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	fa93 f2a3 	rbit	r2, r3
 8002a72:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a76:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002a7a:	601a      	str	r2, [r3, #0]
 8002a7c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a80:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8002a84:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002a88:	601a      	str	r2, [r3, #0]
 8002a8a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a8e:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	fa93 f2a3 	rbit	r2, r3
 8002a98:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a9c:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 8002aa0:	601a      	str	r2, [r3, #0]
 8002aa2:	4b33      	ldr	r3, [pc, #204]	; (8002b70 <HAL_RCC_OscConfig+0x10a4>)
 8002aa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aa6:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002aaa:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002aae:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002ab2:	6011      	str	r1, [r2, #0]
 8002ab4:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002ab8:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002abc:	6812      	ldr	r2, [r2, #0]
 8002abe:	fa92 f1a2 	rbit	r1, r2
 8002ac2:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002ac6:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8002aca:	6011      	str	r1, [r2, #0]
  return result;
 8002acc:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002ad0:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8002ad4:	6812      	ldr	r2, [r2, #0]
 8002ad6:	fab2 f282 	clz	r2, r2
 8002ada:	b2d2      	uxtb	r2, r2
 8002adc:	f042 0220 	orr.w	r2, r2, #32
 8002ae0:	b2d2      	uxtb	r2, r2
 8002ae2:	f002 021f 	and.w	r2, r2, #31
 8002ae6:	2101      	movs	r1, #1
 8002ae8:	fa01 f202 	lsl.w	r2, r1, r2
 8002aec:	4013      	ands	r3, r2
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d182      	bne.n	80029f8 <HAL_RCC_OscConfig+0xf2c>
 8002af2:	e037      	b.n	8002b64 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002af4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002af8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	699b      	ldr	r3, [r3, #24]
 8002b00:	2b01      	cmp	r3, #1
 8002b02:	d101      	bne.n	8002b08 <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 8002b04:	2301      	movs	r3, #1
 8002b06:	e02e      	b.n	8002b66 <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002b08:	4b19      	ldr	r3, [pc, #100]	; (8002b70 <HAL_RCC_OscConfig+0x10a4>)
 8002b0a:	685b      	ldr	r3, [r3, #4]
 8002b0c:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8002b10:	4b17      	ldr	r3, [pc, #92]	; (8002b70 <HAL_RCC_OscConfig+0x10a4>)
 8002b12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b14:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002b18:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8002b1c:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8002b20:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b24:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	69db      	ldr	r3, [r3, #28]
 8002b2c:	429a      	cmp	r2, r3
 8002b2e:	d117      	bne.n	8002b60 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002b30:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8002b34:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002b38:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b3c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002b44:	429a      	cmp	r2, r3
 8002b46:	d10b      	bne.n	8002b60 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8002b48:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002b4c:	f003 020f 	and.w	r2, r3, #15
 8002b50:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b54:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002b5c:	429a      	cmp	r2, r3
 8002b5e:	d001      	beq.n	8002b64 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8002b60:	2301      	movs	r3, #1
 8002b62:	e000      	b.n	8002b66 <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 8002b64:	2300      	movs	r3, #0
}
 8002b66:	4618      	mov	r0, r3
 8002b68:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	bd80      	pop	{r7, pc}
 8002b70:	40021000 	.word	0x40021000

08002b74 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b09e      	sub	sp, #120	; 0x78
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
 8002b7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002b7e:	2300      	movs	r3, #0
 8002b80:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d101      	bne.n	8002b8c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002b88:	2301      	movs	r3, #1
 8002b8a:	e162      	b.n	8002e52 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002b8c:	4b90      	ldr	r3, [pc, #576]	; (8002dd0 <HAL_RCC_ClockConfig+0x25c>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f003 0307 	and.w	r3, r3, #7
 8002b94:	683a      	ldr	r2, [r7, #0]
 8002b96:	429a      	cmp	r2, r3
 8002b98:	d910      	bls.n	8002bbc <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b9a:	4b8d      	ldr	r3, [pc, #564]	; (8002dd0 <HAL_RCC_ClockConfig+0x25c>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f023 0207 	bic.w	r2, r3, #7
 8002ba2:	498b      	ldr	r1, [pc, #556]	; (8002dd0 <HAL_RCC_ClockConfig+0x25c>)
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	4313      	orrs	r3, r2
 8002ba8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002baa:	4b89      	ldr	r3, [pc, #548]	; (8002dd0 <HAL_RCC_ClockConfig+0x25c>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f003 0307 	and.w	r3, r3, #7
 8002bb2:	683a      	ldr	r2, [r7, #0]
 8002bb4:	429a      	cmp	r2, r3
 8002bb6:	d001      	beq.n	8002bbc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002bb8:	2301      	movs	r3, #1
 8002bba:	e14a      	b.n	8002e52 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f003 0302 	and.w	r3, r3, #2
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d008      	beq.n	8002bda <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002bc8:	4b82      	ldr	r3, [pc, #520]	; (8002dd4 <HAL_RCC_ClockConfig+0x260>)
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	689b      	ldr	r3, [r3, #8]
 8002bd4:	497f      	ldr	r1, [pc, #508]	; (8002dd4 <HAL_RCC_ClockConfig+0x260>)
 8002bd6:	4313      	orrs	r3, r2
 8002bd8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f003 0301 	and.w	r3, r3, #1
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	f000 80dc 	beq.w	8002da0 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	685b      	ldr	r3, [r3, #4]
 8002bec:	2b01      	cmp	r3, #1
 8002bee:	d13c      	bne.n	8002c6a <HAL_RCC_ClockConfig+0xf6>
 8002bf0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002bf4:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bf6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002bf8:	fa93 f3a3 	rbit	r3, r3
 8002bfc:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002bfe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c00:	fab3 f383 	clz	r3, r3
 8002c04:	b2db      	uxtb	r3, r3
 8002c06:	095b      	lsrs	r3, r3, #5
 8002c08:	b2db      	uxtb	r3, r3
 8002c0a:	f043 0301 	orr.w	r3, r3, #1
 8002c0e:	b2db      	uxtb	r3, r3
 8002c10:	2b01      	cmp	r3, #1
 8002c12:	d102      	bne.n	8002c1a <HAL_RCC_ClockConfig+0xa6>
 8002c14:	4b6f      	ldr	r3, [pc, #444]	; (8002dd4 <HAL_RCC_ClockConfig+0x260>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	e00f      	b.n	8002c3a <HAL_RCC_ClockConfig+0xc6>
 8002c1a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002c1e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c20:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002c22:	fa93 f3a3 	rbit	r3, r3
 8002c26:	667b      	str	r3, [r7, #100]	; 0x64
 8002c28:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002c2c:	663b      	str	r3, [r7, #96]	; 0x60
 8002c2e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002c30:	fa93 f3a3 	rbit	r3, r3
 8002c34:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002c36:	4b67      	ldr	r3, [pc, #412]	; (8002dd4 <HAL_RCC_ClockConfig+0x260>)
 8002c38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c3a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002c3e:	65ba      	str	r2, [r7, #88]	; 0x58
 8002c40:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002c42:	fa92 f2a2 	rbit	r2, r2
 8002c46:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002c48:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002c4a:	fab2 f282 	clz	r2, r2
 8002c4e:	b2d2      	uxtb	r2, r2
 8002c50:	f042 0220 	orr.w	r2, r2, #32
 8002c54:	b2d2      	uxtb	r2, r2
 8002c56:	f002 021f 	and.w	r2, r2, #31
 8002c5a:	2101      	movs	r1, #1
 8002c5c:	fa01 f202 	lsl.w	r2, r1, r2
 8002c60:	4013      	ands	r3, r2
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d17b      	bne.n	8002d5e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002c66:	2301      	movs	r3, #1
 8002c68:	e0f3      	b.n	8002e52 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	685b      	ldr	r3, [r3, #4]
 8002c6e:	2b02      	cmp	r3, #2
 8002c70:	d13c      	bne.n	8002cec <HAL_RCC_ClockConfig+0x178>
 8002c72:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002c76:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c78:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c7a:	fa93 f3a3 	rbit	r3, r3
 8002c7e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002c80:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c82:	fab3 f383 	clz	r3, r3
 8002c86:	b2db      	uxtb	r3, r3
 8002c88:	095b      	lsrs	r3, r3, #5
 8002c8a:	b2db      	uxtb	r3, r3
 8002c8c:	f043 0301 	orr.w	r3, r3, #1
 8002c90:	b2db      	uxtb	r3, r3
 8002c92:	2b01      	cmp	r3, #1
 8002c94:	d102      	bne.n	8002c9c <HAL_RCC_ClockConfig+0x128>
 8002c96:	4b4f      	ldr	r3, [pc, #316]	; (8002dd4 <HAL_RCC_ClockConfig+0x260>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	e00f      	b.n	8002cbc <HAL_RCC_ClockConfig+0x148>
 8002c9c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002ca0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ca2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ca4:	fa93 f3a3 	rbit	r3, r3
 8002ca8:	647b      	str	r3, [r7, #68]	; 0x44
 8002caa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002cae:	643b      	str	r3, [r7, #64]	; 0x40
 8002cb0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002cb2:	fa93 f3a3 	rbit	r3, r3
 8002cb6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002cb8:	4b46      	ldr	r3, [pc, #280]	; (8002dd4 <HAL_RCC_ClockConfig+0x260>)
 8002cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cbc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002cc0:	63ba      	str	r2, [r7, #56]	; 0x38
 8002cc2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002cc4:	fa92 f2a2 	rbit	r2, r2
 8002cc8:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8002cca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002ccc:	fab2 f282 	clz	r2, r2
 8002cd0:	b2d2      	uxtb	r2, r2
 8002cd2:	f042 0220 	orr.w	r2, r2, #32
 8002cd6:	b2d2      	uxtb	r2, r2
 8002cd8:	f002 021f 	and.w	r2, r2, #31
 8002cdc:	2101      	movs	r1, #1
 8002cde:	fa01 f202 	lsl.w	r2, r1, r2
 8002ce2:	4013      	ands	r3, r2
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d13a      	bne.n	8002d5e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002ce8:	2301      	movs	r3, #1
 8002cea:	e0b2      	b.n	8002e52 <HAL_RCC_ClockConfig+0x2de>
 8002cec:	2302      	movs	r3, #2
 8002cee:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cf2:	fa93 f3a3 	rbit	r3, r3
 8002cf6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002cf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cfa:	fab3 f383 	clz	r3, r3
 8002cfe:	b2db      	uxtb	r3, r3
 8002d00:	095b      	lsrs	r3, r3, #5
 8002d02:	b2db      	uxtb	r3, r3
 8002d04:	f043 0301 	orr.w	r3, r3, #1
 8002d08:	b2db      	uxtb	r3, r3
 8002d0a:	2b01      	cmp	r3, #1
 8002d0c:	d102      	bne.n	8002d14 <HAL_RCC_ClockConfig+0x1a0>
 8002d0e:	4b31      	ldr	r3, [pc, #196]	; (8002dd4 <HAL_RCC_ClockConfig+0x260>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	e00d      	b.n	8002d30 <HAL_RCC_ClockConfig+0x1bc>
 8002d14:	2302      	movs	r3, #2
 8002d16:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d1a:	fa93 f3a3 	rbit	r3, r3
 8002d1e:	627b      	str	r3, [r7, #36]	; 0x24
 8002d20:	2302      	movs	r3, #2
 8002d22:	623b      	str	r3, [r7, #32]
 8002d24:	6a3b      	ldr	r3, [r7, #32]
 8002d26:	fa93 f3a3 	rbit	r3, r3
 8002d2a:	61fb      	str	r3, [r7, #28]
 8002d2c:	4b29      	ldr	r3, [pc, #164]	; (8002dd4 <HAL_RCC_ClockConfig+0x260>)
 8002d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d30:	2202      	movs	r2, #2
 8002d32:	61ba      	str	r2, [r7, #24]
 8002d34:	69ba      	ldr	r2, [r7, #24]
 8002d36:	fa92 f2a2 	rbit	r2, r2
 8002d3a:	617a      	str	r2, [r7, #20]
  return result;
 8002d3c:	697a      	ldr	r2, [r7, #20]
 8002d3e:	fab2 f282 	clz	r2, r2
 8002d42:	b2d2      	uxtb	r2, r2
 8002d44:	f042 0220 	orr.w	r2, r2, #32
 8002d48:	b2d2      	uxtb	r2, r2
 8002d4a:	f002 021f 	and.w	r2, r2, #31
 8002d4e:	2101      	movs	r1, #1
 8002d50:	fa01 f202 	lsl.w	r2, r1, r2
 8002d54:	4013      	ands	r3, r2
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d101      	bne.n	8002d5e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	e079      	b.n	8002e52 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d5e:	4b1d      	ldr	r3, [pc, #116]	; (8002dd4 <HAL_RCC_ClockConfig+0x260>)
 8002d60:	685b      	ldr	r3, [r3, #4]
 8002d62:	f023 0203 	bic.w	r2, r3, #3
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	685b      	ldr	r3, [r3, #4]
 8002d6a:	491a      	ldr	r1, [pc, #104]	; (8002dd4 <HAL_RCC_ClockConfig+0x260>)
 8002d6c:	4313      	orrs	r3, r2
 8002d6e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002d70:	f7fe f9a4 	bl	80010bc <HAL_GetTick>
 8002d74:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d76:	e00a      	b.n	8002d8e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d78:	f7fe f9a0 	bl	80010bc <HAL_GetTick>
 8002d7c:	4602      	mov	r2, r0
 8002d7e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002d80:	1ad3      	subs	r3, r2, r3
 8002d82:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d901      	bls.n	8002d8e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002d8a:	2303      	movs	r3, #3
 8002d8c:	e061      	b.n	8002e52 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d8e:	4b11      	ldr	r3, [pc, #68]	; (8002dd4 <HAL_RCC_ClockConfig+0x260>)
 8002d90:	685b      	ldr	r3, [r3, #4]
 8002d92:	f003 020c 	and.w	r2, r3, #12
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	685b      	ldr	r3, [r3, #4]
 8002d9a:	009b      	lsls	r3, r3, #2
 8002d9c:	429a      	cmp	r2, r3
 8002d9e:	d1eb      	bne.n	8002d78 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002da0:	4b0b      	ldr	r3, [pc, #44]	; (8002dd0 <HAL_RCC_ClockConfig+0x25c>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f003 0307 	and.w	r3, r3, #7
 8002da8:	683a      	ldr	r2, [r7, #0]
 8002daa:	429a      	cmp	r2, r3
 8002dac:	d214      	bcs.n	8002dd8 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dae:	4b08      	ldr	r3, [pc, #32]	; (8002dd0 <HAL_RCC_ClockConfig+0x25c>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f023 0207 	bic.w	r2, r3, #7
 8002db6:	4906      	ldr	r1, [pc, #24]	; (8002dd0 <HAL_RCC_ClockConfig+0x25c>)
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	4313      	orrs	r3, r2
 8002dbc:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dbe:	4b04      	ldr	r3, [pc, #16]	; (8002dd0 <HAL_RCC_ClockConfig+0x25c>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f003 0307 	and.w	r3, r3, #7
 8002dc6:	683a      	ldr	r2, [r7, #0]
 8002dc8:	429a      	cmp	r2, r3
 8002dca:	d005      	beq.n	8002dd8 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002dcc:	2301      	movs	r3, #1
 8002dce:	e040      	b.n	8002e52 <HAL_RCC_ClockConfig+0x2de>
 8002dd0:	40022000 	.word	0x40022000
 8002dd4:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f003 0304 	and.w	r3, r3, #4
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d008      	beq.n	8002df6 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002de4:	4b1d      	ldr	r3, [pc, #116]	; (8002e5c <HAL_RCC_ClockConfig+0x2e8>)
 8002de6:	685b      	ldr	r3, [r3, #4]
 8002de8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	68db      	ldr	r3, [r3, #12]
 8002df0:	491a      	ldr	r1, [pc, #104]	; (8002e5c <HAL_RCC_ClockConfig+0x2e8>)
 8002df2:	4313      	orrs	r3, r2
 8002df4:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f003 0308 	and.w	r3, r3, #8
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d009      	beq.n	8002e16 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002e02:	4b16      	ldr	r3, [pc, #88]	; (8002e5c <HAL_RCC_ClockConfig+0x2e8>)
 8002e04:	685b      	ldr	r3, [r3, #4]
 8002e06:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	691b      	ldr	r3, [r3, #16]
 8002e0e:	00db      	lsls	r3, r3, #3
 8002e10:	4912      	ldr	r1, [pc, #72]	; (8002e5c <HAL_RCC_ClockConfig+0x2e8>)
 8002e12:	4313      	orrs	r3, r2
 8002e14:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002e16:	f000 f829 	bl	8002e6c <HAL_RCC_GetSysClockFreq>
 8002e1a:	4601      	mov	r1, r0
 8002e1c:	4b0f      	ldr	r3, [pc, #60]	; (8002e5c <HAL_RCC_ClockConfig+0x2e8>)
 8002e1e:	685b      	ldr	r3, [r3, #4]
 8002e20:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002e24:	22f0      	movs	r2, #240	; 0xf0
 8002e26:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e28:	693a      	ldr	r2, [r7, #16]
 8002e2a:	fa92 f2a2 	rbit	r2, r2
 8002e2e:	60fa      	str	r2, [r7, #12]
  return result;
 8002e30:	68fa      	ldr	r2, [r7, #12]
 8002e32:	fab2 f282 	clz	r2, r2
 8002e36:	b2d2      	uxtb	r2, r2
 8002e38:	40d3      	lsrs	r3, r2
 8002e3a:	4a09      	ldr	r2, [pc, #36]	; (8002e60 <HAL_RCC_ClockConfig+0x2ec>)
 8002e3c:	5cd3      	ldrb	r3, [r2, r3]
 8002e3e:	fa21 f303 	lsr.w	r3, r1, r3
 8002e42:	4a08      	ldr	r2, [pc, #32]	; (8002e64 <HAL_RCC_ClockConfig+0x2f0>)
 8002e44:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002e46:	4b08      	ldr	r3, [pc, #32]	; (8002e68 <HAL_RCC_ClockConfig+0x2f4>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	f7fe f814 	bl	8000e78 <HAL_InitTick>
  
  return HAL_OK;
 8002e50:	2300      	movs	r3, #0
}
 8002e52:	4618      	mov	r0, r3
 8002e54:	3778      	adds	r7, #120	; 0x78
 8002e56:	46bd      	mov	sp, r7
 8002e58:	bd80      	pop	{r7, pc}
 8002e5a:	bf00      	nop
 8002e5c:	40021000 	.word	0x40021000
 8002e60:	08007b24 	.word	0x08007b24
 8002e64:	2000006c 	.word	0x2000006c
 8002e68:	20000070 	.word	0x20000070

08002e6c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e6c:	b480      	push	{r7}
 8002e6e:	b087      	sub	sp, #28
 8002e70:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002e72:	2300      	movs	r3, #0
 8002e74:	60fb      	str	r3, [r7, #12]
 8002e76:	2300      	movs	r3, #0
 8002e78:	60bb      	str	r3, [r7, #8]
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	617b      	str	r3, [r7, #20]
 8002e7e:	2300      	movs	r3, #0
 8002e80:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002e82:	2300      	movs	r3, #0
 8002e84:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8002e86:	4b1f      	ldr	r3, [pc, #124]	; (8002f04 <HAL_RCC_GetSysClockFreq+0x98>)
 8002e88:	685b      	ldr	r3, [r3, #4]
 8002e8a:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	f003 030c 	and.w	r3, r3, #12
 8002e92:	2b04      	cmp	r3, #4
 8002e94:	d002      	beq.n	8002e9c <HAL_RCC_GetSysClockFreq+0x30>
 8002e96:	2b08      	cmp	r3, #8
 8002e98:	d003      	beq.n	8002ea2 <HAL_RCC_GetSysClockFreq+0x36>
 8002e9a:	e029      	b.n	8002ef0 <HAL_RCC_GetSysClockFreq+0x84>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002e9c:	4b1a      	ldr	r3, [pc, #104]	; (8002f08 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002e9e:	613b      	str	r3, [r7, #16]
      break;
 8002ea0:	e029      	b.n	8002ef6 <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	0c9b      	lsrs	r3, r3, #18
 8002ea6:	f003 030f 	and.w	r3, r3, #15
 8002eaa:	4a18      	ldr	r2, [pc, #96]	; (8002f0c <HAL_RCC_GetSysClockFreq+0xa0>)
 8002eac:	5cd3      	ldrb	r3, [r2, r3]
 8002eae:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8002eb0:	4b14      	ldr	r3, [pc, #80]	; (8002f04 <HAL_RCC_GetSysClockFreq+0x98>)
 8002eb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eb4:	f003 030f 	and.w	r3, r3, #15
 8002eb8:	4a15      	ldr	r2, [pc, #84]	; (8002f10 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002eba:	5cd3      	ldrb	r3, [r2, r3]
 8002ebc:	60bb      	str	r3, [r7, #8]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d008      	beq.n	8002eda <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002ec8:	4a0f      	ldr	r2, [pc, #60]	; (8002f08 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002eca:	68bb      	ldr	r3, [r7, #8]
 8002ecc:	fbb2 f2f3 	udiv	r2, r2, r3
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	fb02 f303 	mul.w	r3, r2, r3
 8002ed6:	617b      	str	r3, [r7, #20]
 8002ed8:	e007      	b.n	8002eea <HAL_RCC_GetSysClockFreq+0x7e>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002eda:	4a0b      	ldr	r2, [pc, #44]	; (8002f08 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002edc:	68bb      	ldr	r3, [r7, #8]
 8002ede:	fbb2 f2f3 	udiv	r2, r2, r3
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	fb02 f303 	mul.w	r3, r2, r3
 8002ee8:	617b      	str	r3, [r7, #20]
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002eea:	697b      	ldr	r3, [r7, #20]
 8002eec:	613b      	str	r3, [r7, #16]
      break;
 8002eee:	e002      	b.n	8002ef6 <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002ef0:	4b05      	ldr	r3, [pc, #20]	; (8002f08 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002ef2:	613b      	str	r3, [r7, #16]
      break;
 8002ef4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002ef6:	693b      	ldr	r3, [r7, #16]
}
 8002ef8:	4618      	mov	r0, r3
 8002efa:	371c      	adds	r7, #28
 8002efc:	46bd      	mov	sp, r7
 8002efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f02:	4770      	bx	lr
 8002f04:	40021000 	.word	0x40021000
 8002f08:	007a1200 	.word	0x007a1200
 8002f0c:	08007b3c 	.word	0x08007b3c
 8002f10:	08007b4c 	.word	0x08007b4c

08002f14 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f14:	b480      	push	{r7}
 8002f16:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f18:	4b03      	ldr	r3, [pc, #12]	; (8002f28 <HAL_RCC_GetHCLKFreq+0x14>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
}
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f24:	4770      	bx	lr
 8002f26:	bf00      	nop
 8002f28:	2000006c 	.word	0x2000006c

08002f2c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b082      	sub	sp, #8
 8002f30:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002f32:	f7ff ffef 	bl	8002f14 <HAL_RCC_GetHCLKFreq>
 8002f36:	4601      	mov	r1, r0
 8002f38:	4b0b      	ldr	r3, [pc, #44]	; (8002f68 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002f3a:	685b      	ldr	r3, [r3, #4]
 8002f3c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002f40:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002f44:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f46:	687a      	ldr	r2, [r7, #4]
 8002f48:	fa92 f2a2 	rbit	r2, r2
 8002f4c:	603a      	str	r2, [r7, #0]
  return result;
 8002f4e:	683a      	ldr	r2, [r7, #0]
 8002f50:	fab2 f282 	clz	r2, r2
 8002f54:	b2d2      	uxtb	r2, r2
 8002f56:	40d3      	lsrs	r3, r2
 8002f58:	4a04      	ldr	r2, [pc, #16]	; (8002f6c <HAL_RCC_GetPCLK1Freq+0x40>)
 8002f5a:	5cd3      	ldrb	r3, [r2, r3]
 8002f5c:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002f60:	4618      	mov	r0, r3
 8002f62:	3708      	adds	r7, #8
 8002f64:	46bd      	mov	sp, r7
 8002f66:	bd80      	pop	{r7, pc}
 8002f68:	40021000 	.word	0x40021000
 8002f6c:	08007b34 	.word	0x08007b34

08002f70 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b082      	sub	sp, #8
 8002f74:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002f76:	f7ff ffcd 	bl	8002f14 <HAL_RCC_GetHCLKFreq>
 8002f7a:	4601      	mov	r1, r0
 8002f7c:	4b0b      	ldr	r3, [pc, #44]	; (8002fac <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002f7e:	685b      	ldr	r3, [r3, #4]
 8002f80:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8002f84:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002f88:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f8a:	687a      	ldr	r2, [r7, #4]
 8002f8c:	fa92 f2a2 	rbit	r2, r2
 8002f90:	603a      	str	r2, [r7, #0]
  return result;
 8002f92:	683a      	ldr	r2, [r7, #0]
 8002f94:	fab2 f282 	clz	r2, r2
 8002f98:	b2d2      	uxtb	r2, r2
 8002f9a:	40d3      	lsrs	r3, r2
 8002f9c:	4a04      	ldr	r2, [pc, #16]	; (8002fb0 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002f9e:	5cd3      	ldrb	r3, [r2, r3]
 8002fa0:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	3708      	adds	r7, #8
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	bd80      	pop	{r7, pc}
 8002fac:	40021000 	.word	0x40021000
 8002fb0:	08007b34 	.word	0x08007b34

08002fb4 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	b083      	sub	sp, #12
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
 8002fbc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	220f      	movs	r2, #15
 8002fc2:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002fc4:	4b12      	ldr	r3, [pc, #72]	; (8003010 <HAL_RCC_GetClockConfig+0x5c>)
 8002fc6:	685b      	ldr	r3, [r3, #4]
 8002fc8:	f003 0203 	and.w	r2, r3, #3
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8002fd0:	4b0f      	ldr	r3, [pc, #60]	; (8003010 <HAL_RCC_GetClockConfig+0x5c>)
 8002fd2:	685b      	ldr	r3, [r3, #4]
 8002fd4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 8002fdc:	4b0c      	ldr	r3, [pc, #48]	; (8003010 <HAL_RCC_GetClockConfig+0x5c>)
 8002fde:	685b      	ldr	r3, [r3, #4]
 8002fe0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002fe8:	4b09      	ldr	r3, [pc, #36]	; (8003010 <HAL_RCC_GetClockConfig+0x5c>)
 8002fea:	685b      	ldr	r3, [r3, #4]
 8002fec:	08db      	lsrs	r3, r3, #3
 8002fee:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 8002ff6:	4b07      	ldr	r3, [pc, #28]	; (8003014 <HAL_RCC_GetClockConfig+0x60>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f003 0207 	and.w	r2, r3, #7
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	601a      	str	r2, [r3, #0]
}
 8003002:	bf00      	nop
 8003004:	370c      	adds	r7, #12
 8003006:	46bd      	mov	sp, r7
 8003008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300c:	4770      	bx	lr
 800300e:	bf00      	nop
 8003010:	40021000 	.word	0x40021000
 8003014:	40022000 	.word	0x40022000

08003018 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b092      	sub	sp, #72	; 0x48
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003020:	2300      	movs	r3, #0
 8003022:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8003024:	2300      	movs	r3, #0
 8003026:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003028:	2300      	movs	r3, #0
 800302a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003036:	2b00      	cmp	r3, #0
 8003038:	f000 80d4 	beq.w	80031e4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800303c:	4b4e      	ldr	r3, [pc, #312]	; (8003178 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800303e:	69db      	ldr	r3, [r3, #28]
 8003040:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003044:	2b00      	cmp	r3, #0
 8003046:	d10e      	bne.n	8003066 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003048:	4b4b      	ldr	r3, [pc, #300]	; (8003178 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800304a:	69db      	ldr	r3, [r3, #28]
 800304c:	4a4a      	ldr	r2, [pc, #296]	; (8003178 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800304e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003052:	61d3      	str	r3, [r2, #28]
 8003054:	4b48      	ldr	r3, [pc, #288]	; (8003178 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003056:	69db      	ldr	r3, [r3, #28]
 8003058:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800305c:	60bb      	str	r3, [r7, #8]
 800305e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003060:	2301      	movs	r3, #1
 8003062:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003066:	4b45      	ldr	r3, [pc, #276]	; (800317c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800306e:	2b00      	cmp	r3, #0
 8003070:	d118      	bne.n	80030a4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003072:	4b42      	ldr	r3, [pc, #264]	; (800317c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	4a41      	ldr	r2, [pc, #260]	; (800317c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003078:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800307c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800307e:	f7fe f81d 	bl	80010bc <HAL_GetTick>
 8003082:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003084:	e008      	b.n	8003098 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003086:	f7fe f819 	bl	80010bc <HAL_GetTick>
 800308a:	4602      	mov	r2, r0
 800308c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800308e:	1ad3      	subs	r3, r2, r3
 8003090:	2b64      	cmp	r3, #100	; 0x64
 8003092:	d901      	bls.n	8003098 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003094:	2303      	movs	r3, #3
 8003096:	e1d6      	b.n	8003446 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003098:	4b38      	ldr	r3, [pc, #224]	; (800317c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d0f0      	beq.n	8003086 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80030a4:	4b34      	ldr	r3, [pc, #208]	; (8003178 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80030a6:	6a1b      	ldr	r3, [r3, #32]
 80030a8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80030ac:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80030ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	f000 8084 	beq.w	80031be <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	685b      	ldr	r3, [r3, #4]
 80030ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80030be:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80030c0:	429a      	cmp	r2, r3
 80030c2:	d07c      	beq.n	80031be <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80030c4:	4b2c      	ldr	r3, [pc, #176]	; (8003178 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80030c6:	6a1b      	ldr	r3, [r3, #32]
 80030c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80030cc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80030ce:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80030d2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030d6:	fa93 f3a3 	rbit	r3, r3
 80030da:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80030dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80030de:	fab3 f383 	clz	r3, r3
 80030e2:	b2db      	uxtb	r3, r3
 80030e4:	461a      	mov	r2, r3
 80030e6:	4b26      	ldr	r3, [pc, #152]	; (8003180 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80030e8:	4413      	add	r3, r2
 80030ea:	009b      	lsls	r3, r3, #2
 80030ec:	461a      	mov	r2, r3
 80030ee:	2301      	movs	r3, #1
 80030f0:	6013      	str	r3, [r2, #0]
 80030f2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80030f6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030fa:	fa93 f3a3 	rbit	r3, r3
 80030fe:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003100:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003102:	fab3 f383 	clz	r3, r3
 8003106:	b2db      	uxtb	r3, r3
 8003108:	461a      	mov	r2, r3
 800310a:	4b1d      	ldr	r3, [pc, #116]	; (8003180 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800310c:	4413      	add	r3, r2
 800310e:	009b      	lsls	r3, r3, #2
 8003110:	461a      	mov	r2, r3
 8003112:	2300      	movs	r3, #0
 8003114:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003116:	4a18      	ldr	r2, [pc, #96]	; (8003178 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003118:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800311a:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800311c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800311e:	f003 0301 	and.w	r3, r3, #1
 8003122:	2b00      	cmp	r3, #0
 8003124:	d04b      	beq.n	80031be <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003126:	f7fd ffc9 	bl	80010bc <HAL_GetTick>
 800312a:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800312c:	e00a      	b.n	8003144 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800312e:	f7fd ffc5 	bl	80010bc <HAL_GetTick>
 8003132:	4602      	mov	r2, r0
 8003134:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003136:	1ad3      	subs	r3, r2, r3
 8003138:	f241 3288 	movw	r2, #5000	; 0x1388
 800313c:	4293      	cmp	r3, r2
 800313e:	d901      	bls.n	8003144 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8003140:	2303      	movs	r3, #3
 8003142:	e180      	b.n	8003446 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8003144:	2302      	movs	r3, #2
 8003146:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003148:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800314a:	fa93 f3a3 	rbit	r3, r3
 800314e:	627b      	str	r3, [r7, #36]	; 0x24
 8003150:	2302      	movs	r3, #2
 8003152:	623b      	str	r3, [r7, #32]
 8003154:	6a3b      	ldr	r3, [r7, #32]
 8003156:	fa93 f3a3 	rbit	r3, r3
 800315a:	61fb      	str	r3, [r7, #28]
  return result;
 800315c:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800315e:	fab3 f383 	clz	r3, r3
 8003162:	b2db      	uxtb	r3, r3
 8003164:	095b      	lsrs	r3, r3, #5
 8003166:	b2db      	uxtb	r3, r3
 8003168:	f043 0302 	orr.w	r3, r3, #2
 800316c:	b2db      	uxtb	r3, r3
 800316e:	2b02      	cmp	r3, #2
 8003170:	d108      	bne.n	8003184 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8003172:	4b01      	ldr	r3, [pc, #4]	; (8003178 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003174:	6a1b      	ldr	r3, [r3, #32]
 8003176:	e00d      	b.n	8003194 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8003178:	40021000 	.word	0x40021000
 800317c:	40007000 	.word	0x40007000
 8003180:	10908100 	.word	0x10908100
 8003184:	2302      	movs	r3, #2
 8003186:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003188:	69bb      	ldr	r3, [r7, #24]
 800318a:	fa93 f3a3 	rbit	r3, r3
 800318e:	617b      	str	r3, [r7, #20]
 8003190:	4b9a      	ldr	r3, [pc, #616]	; (80033fc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003194:	2202      	movs	r2, #2
 8003196:	613a      	str	r2, [r7, #16]
 8003198:	693a      	ldr	r2, [r7, #16]
 800319a:	fa92 f2a2 	rbit	r2, r2
 800319e:	60fa      	str	r2, [r7, #12]
  return result;
 80031a0:	68fa      	ldr	r2, [r7, #12]
 80031a2:	fab2 f282 	clz	r2, r2
 80031a6:	b2d2      	uxtb	r2, r2
 80031a8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80031ac:	b2d2      	uxtb	r2, r2
 80031ae:	f002 021f 	and.w	r2, r2, #31
 80031b2:	2101      	movs	r1, #1
 80031b4:	fa01 f202 	lsl.w	r2, r1, r2
 80031b8:	4013      	ands	r3, r2
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d0b7      	beq.n	800312e <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80031be:	4b8f      	ldr	r3, [pc, #572]	; (80033fc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80031c0:	6a1b      	ldr	r3, [r3, #32]
 80031c2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	685b      	ldr	r3, [r3, #4]
 80031ca:	498c      	ldr	r1, [pc, #560]	; (80033fc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80031cc:	4313      	orrs	r3, r2
 80031ce:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80031d0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80031d4:	2b01      	cmp	r3, #1
 80031d6:	d105      	bne.n	80031e4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031d8:	4b88      	ldr	r3, [pc, #544]	; (80033fc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80031da:	69db      	ldr	r3, [r3, #28]
 80031dc:	4a87      	ldr	r2, [pc, #540]	; (80033fc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80031de:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80031e2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f003 0301 	and.w	r3, r3, #1
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d008      	beq.n	8003202 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80031f0:	4b82      	ldr	r3, [pc, #520]	; (80033fc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80031f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031f4:	f023 0203 	bic.w	r2, r3, #3
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	689b      	ldr	r3, [r3, #8]
 80031fc:	497f      	ldr	r1, [pc, #508]	; (80033fc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80031fe:	4313      	orrs	r3, r2
 8003200:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f003 0302 	and.w	r3, r3, #2
 800320a:	2b00      	cmp	r3, #0
 800320c:	d008      	beq.n	8003220 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800320e:	4b7b      	ldr	r3, [pc, #492]	; (80033fc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003212:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	68db      	ldr	r3, [r3, #12]
 800321a:	4978      	ldr	r1, [pc, #480]	; (80033fc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800321c:	4313      	orrs	r3, r2
 800321e:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f003 0304 	and.w	r3, r3, #4
 8003228:	2b00      	cmp	r3, #0
 800322a:	d008      	beq.n	800323e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800322c:	4b73      	ldr	r3, [pc, #460]	; (80033fc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800322e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003230:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	691b      	ldr	r3, [r3, #16]
 8003238:	4970      	ldr	r1, [pc, #448]	; (80033fc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800323a:	4313      	orrs	r3, r2
 800323c:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f003 0320 	and.w	r3, r3, #32
 8003246:	2b00      	cmp	r3, #0
 8003248:	d008      	beq.n	800325c <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800324a:	4b6c      	ldr	r3, [pc, #432]	; (80033fc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800324c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800324e:	f023 0210 	bic.w	r2, r3, #16
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	69db      	ldr	r3, [r3, #28]
 8003256:	4969      	ldr	r1, [pc, #420]	; (80033fc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003258:	4313      	orrs	r3, r2
 800325a:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003264:	2b00      	cmp	r3, #0
 8003266:	d008      	beq.n	800327a <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8003268:	4b64      	ldr	r3, [pc, #400]	; (80033fc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800326a:	685b      	ldr	r3, [r3, #4]
 800326c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003274:	4961      	ldr	r1, [pc, #388]	; (80033fc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003276:	4313      	orrs	r3, r2
 8003278:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003282:	2b00      	cmp	r3, #0
 8003284:	d008      	beq.n	8003298 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003286:	4b5d      	ldr	r3, [pc, #372]	; (80033fc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800328a:	f023 0220 	bic.w	r2, r3, #32
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6a1b      	ldr	r3, [r3, #32]
 8003292:	495a      	ldr	r1, [pc, #360]	; (80033fc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003294:	4313      	orrs	r3, r2
 8003296:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d008      	beq.n	80032b6 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80032a4:	4b55      	ldr	r3, [pc, #340]	; (80033fc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80032a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032a8:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032b0:	4952      	ldr	r1, [pc, #328]	; (80033fc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80032b2:	4313      	orrs	r3, r2
 80032b4:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f003 0308 	and.w	r3, r3, #8
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d008      	beq.n	80032d4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80032c2:	4b4e      	ldr	r3, [pc, #312]	; (80033fc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80032c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032c6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	695b      	ldr	r3, [r3, #20]
 80032ce:	494b      	ldr	r1, [pc, #300]	; (80033fc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80032d0:	4313      	orrs	r3, r2
 80032d2:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f003 0310 	and.w	r3, r3, #16
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d008      	beq.n	80032f2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80032e0:	4b46      	ldr	r3, [pc, #280]	; (80033fc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80032e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032e4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	699b      	ldr	r3, [r3, #24]
 80032ec:	4943      	ldr	r1, [pc, #268]	; (80033fc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80032ee:	4313      	orrs	r3, r2
 80032f0:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d008      	beq.n	8003310 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80032fe:	4b3f      	ldr	r3, [pc, #252]	; (80033fc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003300:	685b      	ldr	r3, [r3, #4]
 8003302:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800330a:	493c      	ldr	r1, [pc, #240]	; (80033fc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800330c:	4313      	orrs	r3, r2
 800330e:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003318:	2b00      	cmp	r3, #0
 800331a:	d008      	beq.n	800332e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800331c:	4b37      	ldr	r3, [pc, #220]	; (80033fc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800331e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003320:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003328:	4934      	ldr	r1, [pc, #208]	; (80033fc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800332a:	4313      	orrs	r3, r2
 800332c:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003336:	2b00      	cmp	r3, #0
 8003338:	d008      	beq.n	800334c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 800333a:	4b30      	ldr	r3, [pc, #192]	; (80033fc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800333c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800333e:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003346:	492d      	ldr	r1, [pc, #180]	; (80033fc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003348:	4313      	orrs	r3, r2
 800334a:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003354:	2b00      	cmp	r3, #0
 8003356:	d008      	beq.n	800336a <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003358:	4b28      	ldr	r3, [pc, #160]	; (80033fc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800335a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800335c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003364:	4925      	ldr	r1, [pc, #148]	; (80033fc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003366:	4313      	orrs	r3, r2
 8003368:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003372:	2b00      	cmp	r3, #0
 8003374:	d008      	beq.n	8003388 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8003376:	4b21      	ldr	r3, [pc, #132]	; (80033fc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800337a:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003382:	491e      	ldr	r1, [pc, #120]	; (80033fc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003384:	4313      	orrs	r3, r2
 8003386:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003390:	2b00      	cmp	r3, #0
 8003392:	d008      	beq.n	80033a6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8003394:	4b19      	ldr	r3, [pc, #100]	; (80033fc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003396:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003398:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033a0:	4916      	ldr	r1, [pc, #88]	; (80033fc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80033a2:	4313      	orrs	r3, r2
 80033a4:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d008      	beq.n	80033c4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 80033b2:	4b12      	ldr	r3, [pc, #72]	; (80033fc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80033b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033b6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033be:	490f      	ldr	r1, [pc, #60]	; (80033fc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80033c0:	4313      	orrs	r3, r2
 80033c2:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d008      	beq.n	80033e2 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80033d0:	4b0a      	ldr	r3, [pc, #40]	; (80033fc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80033d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033d4:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033dc:	4907      	ldr	r1, [pc, #28]	; (80033fc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80033de:	4313      	orrs	r3, r2
 80033e0:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d00c      	beq.n	8003408 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 80033ee:	4b03      	ldr	r3, [pc, #12]	; (80033fc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80033f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033f2:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	e002      	b.n	8003400 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 80033fa:	bf00      	nop
 80033fc:	40021000 	.word	0x40021000
 8003400:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003402:	4913      	ldr	r1, [pc, #76]	; (8003450 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003404:	4313      	orrs	r3, r2
 8003406:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003410:	2b00      	cmp	r3, #0
 8003412:	d008      	beq.n	8003426 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8003414:	4b0e      	ldr	r3, [pc, #56]	; (8003450 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003416:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003418:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003420:	490b      	ldr	r1, [pc, #44]	; (8003450 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003422:	4313      	orrs	r3, r2
 8003424:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800342e:	2b00      	cmp	r3, #0
 8003430:	d008      	beq.n	8003444 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8003432:	4b07      	ldr	r3, [pc, #28]	; (8003450 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003436:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800343e:	4904      	ldr	r1, [pc, #16]	; (8003450 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003440:	4313      	orrs	r3, r2
 8003442:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003444:	2300      	movs	r3, #0
}
 8003446:	4618      	mov	r0, r3
 8003448:	3748      	adds	r7, #72	; 0x48
 800344a:	46bd      	mov	sp, r7
 800344c:	bd80      	pop	{r7, pc}
 800344e:	bf00      	nop
 8003450:	40021000 	.word	0x40021000

08003454 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	b082      	sub	sp, #8
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2b00      	cmp	r3, #0
 8003460:	d101      	bne.n	8003466 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003462:	2301      	movs	r3, #1
 8003464:	e049      	b.n	80034fa <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800346c:	b2db      	uxtb	r3, r3
 800346e:	2b00      	cmp	r3, #0
 8003470:	d106      	bne.n	8003480 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	2200      	movs	r2, #0
 8003476:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800347a:	6878      	ldr	r0, [r7, #4]
 800347c:	f000 f841 	bl	8003502 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2202      	movs	r2, #2
 8003484:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681a      	ldr	r2, [r3, #0]
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	3304      	adds	r3, #4
 8003490:	4619      	mov	r1, r3
 8003492:	4610      	mov	r0, r2
 8003494:	f000 f9e4 	bl	8003860 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2201      	movs	r2, #1
 800349c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2201      	movs	r2, #1
 80034a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2201      	movs	r2, #1
 80034ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2201      	movs	r2, #1
 80034b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2201      	movs	r2, #1
 80034bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2201      	movs	r2, #1
 80034c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2201      	movs	r2, #1
 80034cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2201      	movs	r2, #1
 80034d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2201      	movs	r2, #1
 80034dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2201      	movs	r2, #1
 80034e4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2201      	movs	r2, #1
 80034ec:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2201      	movs	r2, #1
 80034f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80034f8:	2300      	movs	r3, #0
}
 80034fa:	4618      	mov	r0, r3
 80034fc:	3708      	adds	r7, #8
 80034fe:	46bd      	mov	sp, r7
 8003500:	bd80      	pop	{r7, pc}

08003502 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003502:	b480      	push	{r7}
 8003504:	b083      	sub	sp, #12
 8003506:	af00      	add	r7, sp, #0
 8003508:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800350a:	bf00      	nop
 800350c:	370c      	adds	r7, #12
 800350e:	46bd      	mov	sp, r7
 8003510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003514:	4770      	bx	lr
	...

08003518 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003518:	b480      	push	{r7}
 800351a:	b085      	sub	sp, #20
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003526:	b2db      	uxtb	r3, r3
 8003528:	2b01      	cmp	r3, #1
 800352a:	d001      	beq.n	8003530 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800352c:	2301      	movs	r3, #1
 800352e:	e04f      	b.n	80035d0 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2202      	movs	r2, #2
 8003534:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	68da      	ldr	r2, [r3, #12]
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f042 0201 	orr.w	r2, r2, #1
 8003546:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	4a23      	ldr	r2, [pc, #140]	; (80035dc <HAL_TIM_Base_Start_IT+0xc4>)
 800354e:	4293      	cmp	r3, r2
 8003550:	d01d      	beq.n	800358e <HAL_TIM_Base_Start_IT+0x76>
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800355a:	d018      	beq.n	800358e <HAL_TIM_Base_Start_IT+0x76>
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	4a1f      	ldr	r2, [pc, #124]	; (80035e0 <HAL_TIM_Base_Start_IT+0xc8>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d013      	beq.n	800358e <HAL_TIM_Base_Start_IT+0x76>
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	4a1e      	ldr	r2, [pc, #120]	; (80035e4 <HAL_TIM_Base_Start_IT+0xcc>)
 800356c:	4293      	cmp	r3, r2
 800356e:	d00e      	beq.n	800358e <HAL_TIM_Base_Start_IT+0x76>
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	4a1c      	ldr	r2, [pc, #112]	; (80035e8 <HAL_TIM_Base_Start_IT+0xd0>)
 8003576:	4293      	cmp	r3, r2
 8003578:	d009      	beq.n	800358e <HAL_TIM_Base_Start_IT+0x76>
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	4a1b      	ldr	r2, [pc, #108]	; (80035ec <HAL_TIM_Base_Start_IT+0xd4>)
 8003580:	4293      	cmp	r3, r2
 8003582:	d004      	beq.n	800358e <HAL_TIM_Base_Start_IT+0x76>
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	4a19      	ldr	r2, [pc, #100]	; (80035f0 <HAL_TIM_Base_Start_IT+0xd8>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d115      	bne.n	80035ba <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	689a      	ldr	r2, [r3, #8]
 8003594:	4b17      	ldr	r3, [pc, #92]	; (80035f4 <HAL_TIM_Base_Start_IT+0xdc>)
 8003596:	4013      	ands	r3, r2
 8003598:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	2b06      	cmp	r3, #6
 800359e:	d015      	beq.n	80035cc <HAL_TIM_Base_Start_IT+0xb4>
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035a6:	d011      	beq.n	80035cc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	681a      	ldr	r2, [r3, #0]
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f042 0201 	orr.w	r2, r2, #1
 80035b6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035b8:	e008      	b.n	80035cc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	681a      	ldr	r2, [r3, #0]
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f042 0201 	orr.w	r2, r2, #1
 80035c8:	601a      	str	r2, [r3, #0]
 80035ca:	e000      	b.n	80035ce <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035cc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80035ce:	2300      	movs	r3, #0
}
 80035d0:	4618      	mov	r0, r3
 80035d2:	3714      	adds	r7, #20
 80035d4:	46bd      	mov	sp, r7
 80035d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035da:	4770      	bx	lr
 80035dc:	40012c00 	.word	0x40012c00
 80035e0:	40000400 	.word	0x40000400
 80035e4:	40000800 	.word	0x40000800
 80035e8:	40013400 	.word	0x40013400
 80035ec:	40014000 	.word	0x40014000
 80035f0:	40015000 	.word	0x40015000
 80035f4:	00010007 	.word	0x00010007

080035f8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b084      	sub	sp, #16
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	68db      	ldr	r3, [r3, #12]
 8003606:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	691b      	ldr	r3, [r3, #16]
 800360e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003610:	68bb      	ldr	r3, [r7, #8]
 8003612:	f003 0302 	and.w	r3, r3, #2
 8003616:	2b00      	cmp	r3, #0
 8003618:	d020      	beq.n	800365c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	f003 0302 	and.w	r3, r3, #2
 8003620:	2b00      	cmp	r3, #0
 8003622:	d01b      	beq.n	800365c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f06f 0202 	mvn.w	r2, #2
 800362c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2201      	movs	r2, #1
 8003632:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	699b      	ldr	r3, [r3, #24]
 800363a:	f003 0303 	and.w	r3, r3, #3
 800363e:	2b00      	cmp	r3, #0
 8003640:	d003      	beq.n	800364a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003642:	6878      	ldr	r0, [r7, #4]
 8003644:	f000 f8ee 	bl	8003824 <HAL_TIM_IC_CaptureCallback>
 8003648:	e005      	b.n	8003656 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800364a:	6878      	ldr	r0, [r7, #4]
 800364c:	f000 f8e0 	bl	8003810 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003650:	6878      	ldr	r0, [r7, #4]
 8003652:	f000 f8f1 	bl	8003838 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	2200      	movs	r2, #0
 800365a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800365c:	68bb      	ldr	r3, [r7, #8]
 800365e:	f003 0304 	and.w	r3, r3, #4
 8003662:	2b00      	cmp	r3, #0
 8003664:	d020      	beq.n	80036a8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	f003 0304 	and.w	r3, r3, #4
 800366c:	2b00      	cmp	r3, #0
 800366e:	d01b      	beq.n	80036a8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f06f 0204 	mvn.w	r2, #4
 8003678:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	2202      	movs	r2, #2
 800367e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	699b      	ldr	r3, [r3, #24]
 8003686:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800368a:	2b00      	cmp	r3, #0
 800368c:	d003      	beq.n	8003696 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800368e:	6878      	ldr	r0, [r7, #4]
 8003690:	f000 f8c8 	bl	8003824 <HAL_TIM_IC_CaptureCallback>
 8003694:	e005      	b.n	80036a2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003696:	6878      	ldr	r0, [r7, #4]
 8003698:	f000 f8ba 	bl	8003810 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800369c:	6878      	ldr	r0, [r7, #4]
 800369e:	f000 f8cb 	bl	8003838 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	2200      	movs	r2, #0
 80036a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80036a8:	68bb      	ldr	r3, [r7, #8]
 80036aa:	f003 0308 	and.w	r3, r3, #8
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d020      	beq.n	80036f4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	f003 0308 	and.w	r3, r3, #8
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d01b      	beq.n	80036f4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f06f 0208 	mvn.w	r2, #8
 80036c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2204      	movs	r2, #4
 80036ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	69db      	ldr	r3, [r3, #28]
 80036d2:	f003 0303 	and.w	r3, r3, #3
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d003      	beq.n	80036e2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80036da:	6878      	ldr	r0, [r7, #4]
 80036dc:	f000 f8a2 	bl	8003824 <HAL_TIM_IC_CaptureCallback>
 80036e0:	e005      	b.n	80036ee <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80036e2:	6878      	ldr	r0, [r7, #4]
 80036e4:	f000 f894 	bl	8003810 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036e8:	6878      	ldr	r0, [r7, #4]
 80036ea:	f000 f8a5 	bl	8003838 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2200      	movs	r2, #0
 80036f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80036f4:	68bb      	ldr	r3, [r7, #8]
 80036f6:	f003 0310 	and.w	r3, r3, #16
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d020      	beq.n	8003740 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	f003 0310 	and.w	r3, r3, #16
 8003704:	2b00      	cmp	r3, #0
 8003706:	d01b      	beq.n	8003740 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f06f 0210 	mvn.w	r2, #16
 8003710:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	2208      	movs	r2, #8
 8003716:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	69db      	ldr	r3, [r3, #28]
 800371e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003722:	2b00      	cmp	r3, #0
 8003724:	d003      	beq.n	800372e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003726:	6878      	ldr	r0, [r7, #4]
 8003728:	f000 f87c 	bl	8003824 <HAL_TIM_IC_CaptureCallback>
 800372c:	e005      	b.n	800373a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800372e:	6878      	ldr	r0, [r7, #4]
 8003730:	f000 f86e 	bl	8003810 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003734:	6878      	ldr	r0, [r7, #4]
 8003736:	f000 f87f 	bl	8003838 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2200      	movs	r2, #0
 800373e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003740:	68bb      	ldr	r3, [r7, #8]
 8003742:	f003 0301 	and.w	r3, r3, #1
 8003746:	2b00      	cmp	r3, #0
 8003748:	d00c      	beq.n	8003764 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	f003 0301 	and.w	r3, r3, #1
 8003750:	2b00      	cmp	r3, #0
 8003752:	d007      	beq.n	8003764 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f06f 0201 	mvn.w	r2, #1
 800375c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800375e:	6878      	ldr	r0, [r7, #4]
 8003760:	f000 f84c 	bl	80037fc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003764:	68bb      	ldr	r3, [r7, #8]
 8003766:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800376a:	2b00      	cmp	r3, #0
 800376c:	d00c      	beq.n	8003788 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003774:	2b00      	cmp	r3, #0
 8003776:	d007      	beq.n	8003788 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003780:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003782:	6878      	ldr	r0, [r7, #4]
 8003784:	f000 f920 	bl	80039c8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8003788:	68bb      	ldr	r3, [r7, #8]
 800378a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800378e:	2b00      	cmp	r3, #0
 8003790:	d00c      	beq.n	80037ac <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003798:	2b00      	cmp	r3, #0
 800379a:	d007      	beq.n	80037ac <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80037a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80037a6:	6878      	ldr	r0, [r7, #4]
 80037a8:	f000 f918 	bl	80039dc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80037ac:	68bb      	ldr	r3, [r7, #8]
 80037ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d00c      	beq.n	80037d0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d007      	beq.n	80037d0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80037c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80037ca:	6878      	ldr	r0, [r7, #4]
 80037cc:	f000 f83e 	bl	800384c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80037d0:	68bb      	ldr	r3, [r7, #8]
 80037d2:	f003 0320 	and.w	r3, r3, #32
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d00c      	beq.n	80037f4 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	f003 0320 	and.w	r3, r3, #32
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d007      	beq.n	80037f4 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f06f 0220 	mvn.w	r2, #32
 80037ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80037ee:	6878      	ldr	r0, [r7, #4]
 80037f0:	f000 f8e0 	bl	80039b4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80037f4:	bf00      	nop
 80037f6:	3710      	adds	r7, #16
 80037f8:	46bd      	mov	sp, r7
 80037fa:	bd80      	pop	{r7, pc}

080037fc <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80037fc:	b480      	push	{r7}
 80037fe:	b083      	sub	sp, #12
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003804:	bf00      	nop
 8003806:	370c      	adds	r7, #12
 8003808:	46bd      	mov	sp, r7
 800380a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380e:	4770      	bx	lr

08003810 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003810:	b480      	push	{r7}
 8003812:	b083      	sub	sp, #12
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003818:	bf00      	nop
 800381a:	370c      	adds	r7, #12
 800381c:	46bd      	mov	sp, r7
 800381e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003822:	4770      	bx	lr

08003824 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003824:	b480      	push	{r7}
 8003826:	b083      	sub	sp, #12
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800382c:	bf00      	nop
 800382e:	370c      	adds	r7, #12
 8003830:	46bd      	mov	sp, r7
 8003832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003836:	4770      	bx	lr

08003838 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003838:	b480      	push	{r7}
 800383a:	b083      	sub	sp, #12
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003840:	bf00      	nop
 8003842:	370c      	adds	r7, #12
 8003844:	46bd      	mov	sp, r7
 8003846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384a:	4770      	bx	lr

0800384c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800384c:	b480      	push	{r7}
 800384e:	b083      	sub	sp, #12
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003854:	bf00      	nop
 8003856:	370c      	adds	r7, #12
 8003858:	46bd      	mov	sp, r7
 800385a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385e:	4770      	bx	lr

08003860 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003860:	b480      	push	{r7}
 8003862:	b085      	sub	sp, #20
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
 8003868:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	4a48      	ldr	r2, [pc, #288]	; (8003994 <TIM_Base_SetConfig+0x134>)
 8003874:	4293      	cmp	r3, r2
 8003876:	d013      	beq.n	80038a0 <TIM_Base_SetConfig+0x40>
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800387e:	d00f      	beq.n	80038a0 <TIM_Base_SetConfig+0x40>
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	4a45      	ldr	r2, [pc, #276]	; (8003998 <TIM_Base_SetConfig+0x138>)
 8003884:	4293      	cmp	r3, r2
 8003886:	d00b      	beq.n	80038a0 <TIM_Base_SetConfig+0x40>
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	4a44      	ldr	r2, [pc, #272]	; (800399c <TIM_Base_SetConfig+0x13c>)
 800388c:	4293      	cmp	r3, r2
 800388e:	d007      	beq.n	80038a0 <TIM_Base_SetConfig+0x40>
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	4a43      	ldr	r2, [pc, #268]	; (80039a0 <TIM_Base_SetConfig+0x140>)
 8003894:	4293      	cmp	r3, r2
 8003896:	d003      	beq.n	80038a0 <TIM_Base_SetConfig+0x40>
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	4a42      	ldr	r2, [pc, #264]	; (80039a4 <TIM_Base_SetConfig+0x144>)
 800389c:	4293      	cmp	r3, r2
 800389e:	d108      	bne.n	80038b2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	685b      	ldr	r3, [r3, #4]
 80038ac:	68fa      	ldr	r2, [r7, #12]
 80038ae:	4313      	orrs	r3, r2
 80038b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	4a37      	ldr	r2, [pc, #220]	; (8003994 <TIM_Base_SetConfig+0x134>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d01f      	beq.n	80038fa <TIM_Base_SetConfig+0x9a>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038c0:	d01b      	beq.n	80038fa <TIM_Base_SetConfig+0x9a>
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	4a34      	ldr	r2, [pc, #208]	; (8003998 <TIM_Base_SetConfig+0x138>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d017      	beq.n	80038fa <TIM_Base_SetConfig+0x9a>
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	4a33      	ldr	r2, [pc, #204]	; (800399c <TIM_Base_SetConfig+0x13c>)
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d013      	beq.n	80038fa <TIM_Base_SetConfig+0x9a>
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	4a32      	ldr	r2, [pc, #200]	; (80039a0 <TIM_Base_SetConfig+0x140>)
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d00f      	beq.n	80038fa <TIM_Base_SetConfig+0x9a>
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	4a32      	ldr	r2, [pc, #200]	; (80039a8 <TIM_Base_SetConfig+0x148>)
 80038de:	4293      	cmp	r3, r2
 80038e0:	d00b      	beq.n	80038fa <TIM_Base_SetConfig+0x9a>
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	4a31      	ldr	r2, [pc, #196]	; (80039ac <TIM_Base_SetConfig+0x14c>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d007      	beq.n	80038fa <TIM_Base_SetConfig+0x9a>
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	4a30      	ldr	r2, [pc, #192]	; (80039b0 <TIM_Base_SetConfig+0x150>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d003      	beq.n	80038fa <TIM_Base_SetConfig+0x9a>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	4a2b      	ldr	r2, [pc, #172]	; (80039a4 <TIM_Base_SetConfig+0x144>)
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d108      	bne.n	800390c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003900:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003902:	683b      	ldr	r3, [r7, #0]
 8003904:	68db      	ldr	r3, [r3, #12]
 8003906:	68fa      	ldr	r2, [r7, #12]
 8003908:	4313      	orrs	r3, r2
 800390a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	695b      	ldr	r3, [r3, #20]
 8003916:	4313      	orrs	r3, r2
 8003918:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	68fa      	ldr	r2, [r7, #12]
 800391e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	689a      	ldr	r2, [r3, #8]
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	681a      	ldr	r2, [r3, #0]
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	4a18      	ldr	r2, [pc, #96]	; (8003994 <TIM_Base_SetConfig+0x134>)
 8003934:	4293      	cmp	r3, r2
 8003936:	d013      	beq.n	8003960 <TIM_Base_SetConfig+0x100>
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	4a19      	ldr	r2, [pc, #100]	; (80039a0 <TIM_Base_SetConfig+0x140>)
 800393c:	4293      	cmp	r3, r2
 800393e:	d00f      	beq.n	8003960 <TIM_Base_SetConfig+0x100>
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	4a19      	ldr	r2, [pc, #100]	; (80039a8 <TIM_Base_SetConfig+0x148>)
 8003944:	4293      	cmp	r3, r2
 8003946:	d00b      	beq.n	8003960 <TIM_Base_SetConfig+0x100>
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	4a18      	ldr	r2, [pc, #96]	; (80039ac <TIM_Base_SetConfig+0x14c>)
 800394c:	4293      	cmp	r3, r2
 800394e:	d007      	beq.n	8003960 <TIM_Base_SetConfig+0x100>
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	4a17      	ldr	r2, [pc, #92]	; (80039b0 <TIM_Base_SetConfig+0x150>)
 8003954:	4293      	cmp	r3, r2
 8003956:	d003      	beq.n	8003960 <TIM_Base_SetConfig+0x100>
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	4a12      	ldr	r2, [pc, #72]	; (80039a4 <TIM_Base_SetConfig+0x144>)
 800395c:	4293      	cmp	r3, r2
 800395e:	d103      	bne.n	8003968 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	691a      	ldr	r2, [r3, #16]
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2201      	movs	r2, #1
 800396c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	691b      	ldr	r3, [r3, #16]
 8003972:	f003 0301 	and.w	r3, r3, #1
 8003976:	2b01      	cmp	r3, #1
 8003978:	d105      	bne.n	8003986 <TIM_Base_SetConfig+0x126>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	691b      	ldr	r3, [r3, #16]
 800397e:	f023 0201 	bic.w	r2, r3, #1
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	611a      	str	r2, [r3, #16]
  }
}
 8003986:	bf00      	nop
 8003988:	3714      	adds	r7, #20
 800398a:	46bd      	mov	sp, r7
 800398c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003990:	4770      	bx	lr
 8003992:	bf00      	nop
 8003994:	40012c00 	.word	0x40012c00
 8003998:	40000400 	.word	0x40000400
 800399c:	40000800 	.word	0x40000800
 80039a0:	40013400 	.word	0x40013400
 80039a4:	40015000 	.word	0x40015000
 80039a8:	40014000 	.word	0x40014000
 80039ac:	40014400 	.word	0x40014400
 80039b0:	40014800 	.word	0x40014800

080039b4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80039b4:	b480      	push	{r7}
 80039b6:	b083      	sub	sp, #12
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80039bc:	bf00      	nop
 80039be:	370c      	adds	r7, #12
 80039c0:	46bd      	mov	sp, r7
 80039c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c6:	4770      	bx	lr

080039c8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80039c8:	b480      	push	{r7}
 80039ca:	b083      	sub	sp, #12
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80039d0:	bf00      	nop
 80039d2:	370c      	adds	r7, #12
 80039d4:	46bd      	mov	sp, r7
 80039d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039da:	4770      	bx	lr

080039dc <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80039dc:	b480      	push	{r7}
 80039de:	b083      	sub	sp, #12
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80039e4:	bf00      	nop
 80039e6:	370c      	adds	r7, #12
 80039e8:	46bd      	mov	sp, r7
 80039ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ee:	4770      	bx	lr

080039f0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b082      	sub	sp, #8
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d101      	bne.n	8003a02 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80039fe:	2301      	movs	r3, #1
 8003a00:	e040      	b.n	8003a84 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d106      	bne.n	8003a18 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003a12:	6878      	ldr	r0, [r7, #4]
 8003a14:	f7fd f98c 	bl	8000d30 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2224      	movs	r2, #36	; 0x24
 8003a1c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	681a      	ldr	r2, [r3, #0]
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f022 0201 	bic.w	r2, r2, #1
 8003a2c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d002      	beq.n	8003a3c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003a36:	6878      	ldr	r0, [r7, #4]
 8003a38:	f000 fd8c 	bl	8004554 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003a3c:	6878      	ldr	r0, [r7, #4]
 8003a3e:	f000 fbb5 	bl	80041ac <UART_SetConfig>
 8003a42:	4603      	mov	r3, r0
 8003a44:	2b01      	cmp	r3, #1
 8003a46:	d101      	bne.n	8003a4c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003a48:	2301      	movs	r3, #1
 8003a4a:	e01b      	b.n	8003a84 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	685a      	ldr	r2, [r3, #4]
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003a5a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	689a      	ldr	r2, [r3, #8]
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003a6a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	681a      	ldr	r2, [r3, #0]
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f042 0201 	orr.w	r2, r2, #1
 8003a7a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003a7c:	6878      	ldr	r0, [r7, #4]
 8003a7e:	f000 fe0b 	bl	8004698 <UART_CheckIdleState>
 8003a82:	4603      	mov	r3, r0
}
 8003a84:	4618      	mov	r0, r3
 8003a86:	3708      	adds	r7, #8
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	bd80      	pop	{r7, pc}

08003a8c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b08a      	sub	sp, #40	; 0x28
 8003a90:	af02      	add	r7, sp, #8
 8003a92:	60f8      	str	r0, [r7, #12]
 8003a94:	60b9      	str	r1, [r7, #8]
 8003a96:	603b      	str	r3, [r7, #0]
 8003a98:	4613      	mov	r3, r2
 8003a9a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003aa0:	2b20      	cmp	r3, #32
 8003aa2:	d178      	bne.n	8003b96 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003aa4:	68bb      	ldr	r3, [r7, #8]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d002      	beq.n	8003ab0 <HAL_UART_Transmit+0x24>
 8003aaa:	88fb      	ldrh	r3, [r7, #6]
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d101      	bne.n	8003ab4 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003ab0:	2301      	movs	r3, #1
 8003ab2:	e071      	b.n	8003b98 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	2221      	movs	r2, #33	; 0x21
 8003ac0:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003ac2:	f7fd fafb 	bl	80010bc <HAL_GetTick>
 8003ac6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	88fa      	ldrh	r2, [r7, #6]
 8003acc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	88fa      	ldrh	r2, [r7, #6]
 8003ad4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	689b      	ldr	r3, [r3, #8]
 8003adc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ae0:	d108      	bne.n	8003af4 <HAL_UART_Transmit+0x68>
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	691b      	ldr	r3, [r3, #16]
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d104      	bne.n	8003af4 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003aea:	2300      	movs	r3, #0
 8003aec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003aee:	68bb      	ldr	r3, [r7, #8]
 8003af0:	61bb      	str	r3, [r7, #24]
 8003af2:	e003      	b.n	8003afc <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003af4:	68bb      	ldr	r3, [r7, #8]
 8003af6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003af8:	2300      	movs	r3, #0
 8003afa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003afc:	e030      	b.n	8003b60 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003afe:	683b      	ldr	r3, [r7, #0]
 8003b00:	9300      	str	r3, [sp, #0]
 8003b02:	697b      	ldr	r3, [r7, #20]
 8003b04:	2200      	movs	r2, #0
 8003b06:	2180      	movs	r1, #128	; 0x80
 8003b08:	68f8      	ldr	r0, [r7, #12]
 8003b0a:	f000 fe6d 	bl	80047e8 <UART_WaitOnFlagUntilTimeout>
 8003b0e:	4603      	mov	r3, r0
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d004      	beq.n	8003b1e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	2220      	movs	r2, #32
 8003b18:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8003b1a:	2303      	movs	r3, #3
 8003b1c:	e03c      	b.n	8003b98 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8003b1e:	69fb      	ldr	r3, [r7, #28]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d10b      	bne.n	8003b3c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003b24:	69bb      	ldr	r3, [r7, #24]
 8003b26:	881a      	ldrh	r2, [r3, #0]
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003b30:	b292      	uxth	r2, r2
 8003b32:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003b34:	69bb      	ldr	r3, [r7, #24]
 8003b36:	3302      	adds	r3, #2
 8003b38:	61bb      	str	r3, [r7, #24]
 8003b3a:	e008      	b.n	8003b4e <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003b3c:	69fb      	ldr	r3, [r7, #28]
 8003b3e:	781a      	ldrb	r2, [r3, #0]
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	b292      	uxth	r2, r2
 8003b46:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003b48:	69fb      	ldr	r3, [r7, #28]
 8003b4a:	3301      	adds	r3, #1
 8003b4c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003b54:	b29b      	uxth	r3, r3
 8003b56:	3b01      	subs	r3, #1
 8003b58:	b29a      	uxth	r2, r3
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003b66:	b29b      	uxth	r3, r3
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d1c8      	bne.n	8003afe <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	9300      	str	r3, [sp, #0]
 8003b70:	697b      	ldr	r3, [r7, #20]
 8003b72:	2200      	movs	r2, #0
 8003b74:	2140      	movs	r1, #64	; 0x40
 8003b76:	68f8      	ldr	r0, [r7, #12]
 8003b78:	f000 fe36 	bl	80047e8 <UART_WaitOnFlagUntilTimeout>
 8003b7c:	4603      	mov	r3, r0
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d004      	beq.n	8003b8c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	2220      	movs	r2, #32
 8003b86:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8003b88:	2303      	movs	r3, #3
 8003b8a:	e005      	b.n	8003b98 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	2220      	movs	r2, #32
 8003b90:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8003b92:	2300      	movs	r3, #0
 8003b94:	e000      	b.n	8003b98 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8003b96:	2302      	movs	r3, #2
  }
}
 8003b98:	4618      	mov	r0, r3
 8003b9a:	3720      	adds	r7, #32
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	bd80      	pop	{r7, pc}

08003ba0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	b0ba      	sub	sp, #232	; 0xe8
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	69db      	ldr	r3, [r3, #28]
 8003bae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	689b      	ldr	r3, [r3, #8]
 8003bc2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003bc6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8003bca:	f640 030f 	movw	r3, #2063	; 0x80f
 8003bce:	4013      	ands	r3, r2
 8003bd0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8003bd4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d115      	bne.n	8003c08 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003bdc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003be0:	f003 0320 	and.w	r3, r3, #32
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d00f      	beq.n	8003c08 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003be8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003bec:	f003 0320 	and.w	r3, r3, #32
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d009      	beq.n	8003c08 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	f000 82ab 	beq.w	8004154 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003c02:	6878      	ldr	r0, [r7, #4]
 8003c04:	4798      	blx	r3
      }
      return;
 8003c06:	e2a5      	b.n	8004154 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003c08:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	f000 8117 	beq.w	8003e40 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003c12:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003c16:	f003 0301 	and.w	r3, r3, #1
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d106      	bne.n	8003c2c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003c1e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8003c22:	4b85      	ldr	r3, [pc, #532]	; (8003e38 <HAL_UART_IRQHandler+0x298>)
 8003c24:	4013      	ands	r3, r2
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	f000 810a 	beq.w	8003e40 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003c2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c30:	f003 0301 	and.w	r3, r3, #1
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d011      	beq.n	8003c5c <HAL_UART_IRQHandler+0xbc>
 8003c38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d00b      	beq.n	8003c5c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	2201      	movs	r2, #1
 8003c4a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c52:	f043 0201 	orr.w	r2, r3, #1
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003c5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c60:	f003 0302 	and.w	r3, r3, #2
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d011      	beq.n	8003c8c <HAL_UART_IRQHandler+0xec>
 8003c68:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003c6c:	f003 0301 	and.w	r3, r3, #1
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d00b      	beq.n	8003c8c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	2202      	movs	r2, #2
 8003c7a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c82:	f043 0204 	orr.w	r2, r3, #4
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003c8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c90:	f003 0304 	and.w	r3, r3, #4
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d011      	beq.n	8003cbc <HAL_UART_IRQHandler+0x11c>
 8003c98:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003c9c:	f003 0301 	and.w	r3, r3, #1
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d00b      	beq.n	8003cbc <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	2204      	movs	r2, #4
 8003caa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003cb2:	f043 0202 	orr.w	r2, r3, #2
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003cbc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003cc0:	f003 0308 	and.w	r3, r3, #8
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d017      	beq.n	8003cf8 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003cc8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ccc:	f003 0320 	and.w	r3, r3, #32
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d105      	bne.n	8003ce0 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003cd4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003cd8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d00b      	beq.n	8003cf8 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	2208      	movs	r2, #8
 8003ce6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003cee:	f043 0208 	orr.w	r2, r3, #8
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003cf8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003cfc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d012      	beq.n	8003d2a <HAL_UART_IRQHandler+0x18a>
 8003d04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d08:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d00c      	beq.n	8003d2a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003d18:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d20:	f043 0220 	orr.w	r2, r3, #32
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	f000 8211 	beq.w	8004158 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003d36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d3a:	f003 0320 	and.w	r3, r3, #32
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d00d      	beq.n	8003d5e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003d42:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d46:	f003 0320 	and.w	r3, r3, #32
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d007      	beq.n	8003d5e <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d003      	beq.n	8003d5e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003d5a:	6878      	ldr	r0, [r7, #4]
 8003d5c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d64:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	689b      	ldr	r3, [r3, #8]
 8003d6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d72:	2b40      	cmp	r3, #64	; 0x40
 8003d74:	d005      	beq.n	8003d82 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003d76:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003d7a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d04f      	beq.n	8003e22 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003d82:	6878      	ldr	r0, [r7, #4]
 8003d84:	f000 fd9d 	bl	80048c2 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	689b      	ldr	r3, [r3, #8]
 8003d8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d92:	2b40      	cmp	r3, #64	; 0x40
 8003d94:	d141      	bne.n	8003e1a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	3308      	adds	r3, #8
 8003d9c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003da0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003da4:	e853 3f00 	ldrex	r3, [r3]
 8003da8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003dac:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003db0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003db4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	3308      	adds	r3, #8
 8003dbe:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003dc2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003dc6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dca:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003dce:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003dd2:	e841 2300 	strex	r3, r2, [r1]
 8003dd6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003dda:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d1d9      	bne.n	8003d96 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d013      	beq.n	8003e12 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003dee:	4a13      	ldr	r2, [pc, #76]	; (8003e3c <HAL_UART_IRQHandler+0x29c>)
 8003df0:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003df6:	4618      	mov	r0, r3
 8003df8:	f7fd fa8c 	bl	8001314 <HAL_DMA_Abort_IT>
 8003dfc:	4603      	mov	r3, r0
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d017      	beq.n	8003e32 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e08:	687a      	ldr	r2, [r7, #4]
 8003e0a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003e0c:	4610      	mov	r0, r2
 8003e0e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e10:	e00f      	b.n	8003e32 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003e12:	6878      	ldr	r0, [r7, #4]
 8003e14:	f000 f9b4 	bl	8004180 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e18:	e00b      	b.n	8003e32 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003e1a:	6878      	ldr	r0, [r7, #4]
 8003e1c:	f000 f9b0 	bl	8004180 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e20:	e007      	b.n	8003e32 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003e22:	6878      	ldr	r0, [r7, #4]
 8003e24:	f000 f9ac 	bl	8004180 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8003e30:	e192      	b.n	8004158 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e32:	bf00      	nop
    return;
 8003e34:	e190      	b.n	8004158 <HAL_UART_IRQHandler+0x5b8>
 8003e36:	bf00      	nop
 8003e38:	04000120 	.word	0x04000120
 8003e3c:	0800498b 	.word	0x0800498b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e44:	2b01      	cmp	r3, #1
 8003e46:	f040 814b 	bne.w	80040e0 <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003e4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e4e:	f003 0310 	and.w	r3, r3, #16
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	f000 8144 	beq.w	80040e0 <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003e58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e5c:	f003 0310 	and.w	r3, r3, #16
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	f000 813d 	beq.w	80040e0 <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	2210      	movs	r2, #16
 8003e6c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	689b      	ldr	r3, [r3, #8]
 8003e74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e78:	2b40      	cmp	r3, #64	; 0x40
 8003e7a:	f040 80b5 	bne.w	8003fe8 <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	685b      	ldr	r3, [r3, #4]
 8003e86:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003e8a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	f000 8164 	beq.w	800415c <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003e9a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003e9e:	429a      	cmp	r2, r3
 8003ea0:	f080 815c 	bcs.w	800415c <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003eaa:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003eb2:	699b      	ldr	r3, [r3, #24]
 8003eb4:	2b20      	cmp	r3, #32
 8003eb6:	f000 8086 	beq.w	8003fc6 <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ec2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003ec6:	e853 3f00 	ldrex	r3, [r3]
 8003eca:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003ece:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003ed2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003ed6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	461a      	mov	r2, r3
 8003ee0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003ee4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003ee8:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003eec:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003ef0:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003ef4:	e841 2300 	strex	r3, r2, [r1]
 8003ef8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003efc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d1da      	bne.n	8003eba <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	3308      	adds	r3, #8
 8003f0a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f0c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003f0e:	e853 3f00 	ldrex	r3, [r3]
 8003f12:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003f14:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003f16:	f023 0301 	bic.w	r3, r3, #1
 8003f1a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	3308      	adds	r3, #8
 8003f24:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003f28:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003f2c:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f2e:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003f30:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003f34:	e841 2300 	strex	r3, r2, [r1]
 8003f38:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003f3a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d1e1      	bne.n	8003f04 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	3308      	adds	r3, #8
 8003f46:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f48:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003f4a:	e853 3f00 	ldrex	r3, [r3]
 8003f4e:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003f50:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003f52:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f56:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	3308      	adds	r3, #8
 8003f60:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003f64:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003f66:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f68:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003f6a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003f6c:	e841 2300 	strex	r3, r2, [r1]
 8003f70:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003f72:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d1e3      	bne.n	8003f40 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2220      	movs	r2, #32
 8003f7c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2200      	movs	r2, #0
 8003f84:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f8e:	e853 3f00 	ldrex	r3, [r3]
 8003f92:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003f94:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f96:	f023 0310 	bic.w	r3, r3, #16
 8003f9a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	461a      	mov	r2, r3
 8003fa4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003fa8:	65bb      	str	r3, [r7, #88]	; 0x58
 8003faa:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fac:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003fae:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003fb0:	e841 2300 	strex	r3, r2, [r1]
 8003fb4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003fb6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d1e4      	bne.n	8003f86 <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	f7fd f969 	bl	8001298 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	2202      	movs	r2, #2
 8003fca:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003fd8:	b29b      	uxth	r3, r3
 8003fda:	1ad3      	subs	r3, r2, r3
 8003fdc:	b29b      	uxth	r3, r3
 8003fde:	4619      	mov	r1, r3
 8003fe0:	6878      	ldr	r0, [r7, #4]
 8003fe2:	f000 f8d7 	bl	8004194 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003fe6:	e0b9      	b.n	800415c <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003ff4:	b29b      	uxth	r3, r3
 8003ff6:	1ad3      	subs	r3, r2, r3
 8003ff8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004002:	b29b      	uxth	r3, r3
 8004004:	2b00      	cmp	r3, #0
 8004006:	f000 80ab 	beq.w	8004160 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 800400a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800400e:	2b00      	cmp	r3, #0
 8004010:	f000 80a6 	beq.w	8004160 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800401a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800401c:	e853 3f00 	ldrex	r3, [r3]
 8004020:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004022:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004024:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004028:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	461a      	mov	r2, r3
 8004032:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004036:	647b      	str	r3, [r7, #68]	; 0x44
 8004038:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800403a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800403c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800403e:	e841 2300 	strex	r3, r2, [r1]
 8004042:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004044:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004046:	2b00      	cmp	r3, #0
 8004048:	d1e4      	bne.n	8004014 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	3308      	adds	r3, #8
 8004050:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004054:	e853 3f00 	ldrex	r3, [r3]
 8004058:	623b      	str	r3, [r7, #32]
   return(result);
 800405a:	6a3b      	ldr	r3, [r7, #32]
 800405c:	f023 0301 	bic.w	r3, r3, #1
 8004060:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	3308      	adds	r3, #8
 800406a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800406e:	633a      	str	r2, [r7, #48]	; 0x30
 8004070:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004072:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004074:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004076:	e841 2300 	strex	r3, r2, [r1]
 800407a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800407c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800407e:	2b00      	cmp	r3, #0
 8004080:	d1e3      	bne.n	800404a <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	2220      	movs	r2, #32
 8004086:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	2200      	movs	r2, #0
 800408e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2200      	movs	r2, #0
 8004094:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800409c:	693b      	ldr	r3, [r7, #16]
 800409e:	e853 3f00 	ldrex	r3, [r3]
 80040a2:	60fb      	str	r3, [r7, #12]
   return(result);
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	f023 0310 	bic.w	r3, r3, #16
 80040aa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	461a      	mov	r2, r3
 80040b4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80040b8:	61fb      	str	r3, [r7, #28]
 80040ba:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040bc:	69b9      	ldr	r1, [r7, #24]
 80040be:	69fa      	ldr	r2, [r7, #28]
 80040c0:	e841 2300 	strex	r3, r2, [r1]
 80040c4:	617b      	str	r3, [r7, #20]
   return(result);
 80040c6:	697b      	ldr	r3, [r7, #20]
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d1e4      	bne.n	8004096 <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2202      	movs	r2, #2
 80040d0:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80040d2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80040d6:	4619      	mov	r1, r3
 80040d8:	6878      	ldr	r0, [r7, #4]
 80040da:	f000 f85b 	bl	8004194 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80040de:	e03f      	b.n	8004160 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80040e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80040e4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d00e      	beq.n	800410a <HAL_UART_IRQHandler+0x56a>
 80040ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80040f0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d008      	beq.n	800410a <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004100:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004102:	6878      	ldr	r0, [r7, #4]
 8004104:	f000 fc81 	bl	8004a0a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004108:	e02d      	b.n	8004166 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800410a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800410e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004112:	2b00      	cmp	r3, #0
 8004114:	d00e      	beq.n	8004134 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004116:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800411a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800411e:	2b00      	cmp	r3, #0
 8004120:	d008      	beq.n	8004134 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004126:	2b00      	cmp	r3, #0
 8004128:	d01c      	beq.n	8004164 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800412e:	6878      	ldr	r0, [r7, #4]
 8004130:	4798      	blx	r3
    }
    return;
 8004132:	e017      	b.n	8004164 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004134:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004138:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800413c:	2b00      	cmp	r3, #0
 800413e:	d012      	beq.n	8004166 <HAL_UART_IRQHandler+0x5c6>
 8004140:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004144:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004148:	2b00      	cmp	r3, #0
 800414a:	d00c      	beq.n	8004166 <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 800414c:	6878      	ldr	r0, [r7, #4]
 800414e:	f000 fc32 	bl	80049b6 <UART_EndTransmit_IT>
    return;
 8004152:	e008      	b.n	8004166 <HAL_UART_IRQHandler+0x5c6>
      return;
 8004154:	bf00      	nop
 8004156:	e006      	b.n	8004166 <HAL_UART_IRQHandler+0x5c6>
    return;
 8004158:	bf00      	nop
 800415a:	e004      	b.n	8004166 <HAL_UART_IRQHandler+0x5c6>
      return;
 800415c:	bf00      	nop
 800415e:	e002      	b.n	8004166 <HAL_UART_IRQHandler+0x5c6>
      return;
 8004160:	bf00      	nop
 8004162:	e000      	b.n	8004166 <HAL_UART_IRQHandler+0x5c6>
    return;
 8004164:	bf00      	nop
  }

}
 8004166:	37e8      	adds	r7, #232	; 0xe8
 8004168:	46bd      	mov	sp, r7
 800416a:	bd80      	pop	{r7, pc}

0800416c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800416c:	b480      	push	{r7}
 800416e:	b083      	sub	sp, #12
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004174:	bf00      	nop
 8004176:	370c      	adds	r7, #12
 8004178:	46bd      	mov	sp, r7
 800417a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417e:	4770      	bx	lr

08004180 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004180:	b480      	push	{r7}
 8004182:	b083      	sub	sp, #12
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004188:	bf00      	nop
 800418a:	370c      	adds	r7, #12
 800418c:	46bd      	mov	sp, r7
 800418e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004192:	4770      	bx	lr

08004194 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004194:	b480      	push	{r7}
 8004196:	b083      	sub	sp, #12
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
 800419c:	460b      	mov	r3, r1
 800419e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80041a0:	bf00      	nop
 80041a2:	370c      	adds	r7, #12
 80041a4:	46bd      	mov	sp, r7
 80041a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041aa:	4770      	bx	lr

080041ac <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	b088      	sub	sp, #32
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80041b4:	2300      	movs	r3, #0
 80041b6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	689a      	ldr	r2, [r3, #8]
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	691b      	ldr	r3, [r3, #16]
 80041c0:	431a      	orrs	r2, r3
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	695b      	ldr	r3, [r3, #20]
 80041c6:	431a      	orrs	r2, r3
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	69db      	ldr	r3, [r3, #28]
 80041cc:	4313      	orrs	r3, r2
 80041ce:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	681a      	ldr	r2, [r3, #0]
 80041d6:	4b92      	ldr	r3, [pc, #584]	; (8004420 <UART_SetConfig+0x274>)
 80041d8:	4013      	ands	r3, r2
 80041da:	687a      	ldr	r2, [r7, #4]
 80041dc:	6812      	ldr	r2, [r2, #0]
 80041de:	6979      	ldr	r1, [r7, #20]
 80041e0:	430b      	orrs	r3, r1
 80041e2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	685b      	ldr	r3, [r3, #4]
 80041ea:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	68da      	ldr	r2, [r3, #12]
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	430a      	orrs	r2, r1
 80041f8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	699b      	ldr	r3, [r3, #24]
 80041fe:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	6a1b      	ldr	r3, [r3, #32]
 8004204:	697a      	ldr	r2, [r7, #20]
 8004206:	4313      	orrs	r3, r2
 8004208:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	689b      	ldr	r3, [r3, #8]
 8004210:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	697a      	ldr	r2, [r7, #20]
 800421a:	430a      	orrs	r2, r1
 800421c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	4a80      	ldr	r2, [pc, #512]	; (8004424 <UART_SetConfig+0x278>)
 8004224:	4293      	cmp	r3, r2
 8004226:	d120      	bne.n	800426a <UART_SetConfig+0xbe>
 8004228:	4b7f      	ldr	r3, [pc, #508]	; (8004428 <UART_SetConfig+0x27c>)
 800422a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800422c:	f003 0303 	and.w	r3, r3, #3
 8004230:	2b03      	cmp	r3, #3
 8004232:	d817      	bhi.n	8004264 <UART_SetConfig+0xb8>
 8004234:	a201      	add	r2, pc, #4	; (adr r2, 800423c <UART_SetConfig+0x90>)
 8004236:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800423a:	bf00      	nop
 800423c:	0800424d 	.word	0x0800424d
 8004240:	08004259 	.word	0x08004259
 8004244:	0800425f 	.word	0x0800425f
 8004248:	08004253 	.word	0x08004253
 800424c:	2301      	movs	r3, #1
 800424e:	77fb      	strb	r3, [r7, #31]
 8004250:	e0b5      	b.n	80043be <UART_SetConfig+0x212>
 8004252:	2302      	movs	r3, #2
 8004254:	77fb      	strb	r3, [r7, #31]
 8004256:	e0b2      	b.n	80043be <UART_SetConfig+0x212>
 8004258:	2304      	movs	r3, #4
 800425a:	77fb      	strb	r3, [r7, #31]
 800425c:	e0af      	b.n	80043be <UART_SetConfig+0x212>
 800425e:	2308      	movs	r3, #8
 8004260:	77fb      	strb	r3, [r7, #31]
 8004262:	e0ac      	b.n	80043be <UART_SetConfig+0x212>
 8004264:	2310      	movs	r3, #16
 8004266:	77fb      	strb	r3, [r7, #31]
 8004268:	e0a9      	b.n	80043be <UART_SetConfig+0x212>
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	4a6f      	ldr	r2, [pc, #444]	; (800442c <UART_SetConfig+0x280>)
 8004270:	4293      	cmp	r3, r2
 8004272:	d124      	bne.n	80042be <UART_SetConfig+0x112>
 8004274:	4b6c      	ldr	r3, [pc, #432]	; (8004428 <UART_SetConfig+0x27c>)
 8004276:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004278:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800427c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004280:	d011      	beq.n	80042a6 <UART_SetConfig+0xfa>
 8004282:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004286:	d817      	bhi.n	80042b8 <UART_SetConfig+0x10c>
 8004288:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800428c:	d011      	beq.n	80042b2 <UART_SetConfig+0x106>
 800428e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004292:	d811      	bhi.n	80042b8 <UART_SetConfig+0x10c>
 8004294:	2b00      	cmp	r3, #0
 8004296:	d003      	beq.n	80042a0 <UART_SetConfig+0xf4>
 8004298:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800429c:	d006      	beq.n	80042ac <UART_SetConfig+0x100>
 800429e:	e00b      	b.n	80042b8 <UART_SetConfig+0x10c>
 80042a0:	2300      	movs	r3, #0
 80042a2:	77fb      	strb	r3, [r7, #31]
 80042a4:	e08b      	b.n	80043be <UART_SetConfig+0x212>
 80042a6:	2302      	movs	r3, #2
 80042a8:	77fb      	strb	r3, [r7, #31]
 80042aa:	e088      	b.n	80043be <UART_SetConfig+0x212>
 80042ac:	2304      	movs	r3, #4
 80042ae:	77fb      	strb	r3, [r7, #31]
 80042b0:	e085      	b.n	80043be <UART_SetConfig+0x212>
 80042b2:	2308      	movs	r3, #8
 80042b4:	77fb      	strb	r3, [r7, #31]
 80042b6:	e082      	b.n	80043be <UART_SetConfig+0x212>
 80042b8:	2310      	movs	r3, #16
 80042ba:	77fb      	strb	r3, [r7, #31]
 80042bc:	e07f      	b.n	80043be <UART_SetConfig+0x212>
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	4a5b      	ldr	r2, [pc, #364]	; (8004430 <UART_SetConfig+0x284>)
 80042c4:	4293      	cmp	r3, r2
 80042c6:	d124      	bne.n	8004312 <UART_SetConfig+0x166>
 80042c8:	4b57      	ldr	r3, [pc, #348]	; (8004428 <UART_SetConfig+0x27c>)
 80042ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042cc:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80042d0:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80042d4:	d011      	beq.n	80042fa <UART_SetConfig+0x14e>
 80042d6:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80042da:	d817      	bhi.n	800430c <UART_SetConfig+0x160>
 80042dc:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80042e0:	d011      	beq.n	8004306 <UART_SetConfig+0x15a>
 80042e2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80042e6:	d811      	bhi.n	800430c <UART_SetConfig+0x160>
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d003      	beq.n	80042f4 <UART_SetConfig+0x148>
 80042ec:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80042f0:	d006      	beq.n	8004300 <UART_SetConfig+0x154>
 80042f2:	e00b      	b.n	800430c <UART_SetConfig+0x160>
 80042f4:	2300      	movs	r3, #0
 80042f6:	77fb      	strb	r3, [r7, #31]
 80042f8:	e061      	b.n	80043be <UART_SetConfig+0x212>
 80042fa:	2302      	movs	r3, #2
 80042fc:	77fb      	strb	r3, [r7, #31]
 80042fe:	e05e      	b.n	80043be <UART_SetConfig+0x212>
 8004300:	2304      	movs	r3, #4
 8004302:	77fb      	strb	r3, [r7, #31]
 8004304:	e05b      	b.n	80043be <UART_SetConfig+0x212>
 8004306:	2308      	movs	r3, #8
 8004308:	77fb      	strb	r3, [r7, #31]
 800430a:	e058      	b.n	80043be <UART_SetConfig+0x212>
 800430c:	2310      	movs	r3, #16
 800430e:	77fb      	strb	r3, [r7, #31]
 8004310:	e055      	b.n	80043be <UART_SetConfig+0x212>
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	4a47      	ldr	r2, [pc, #284]	; (8004434 <UART_SetConfig+0x288>)
 8004318:	4293      	cmp	r3, r2
 800431a:	d124      	bne.n	8004366 <UART_SetConfig+0x1ba>
 800431c:	4b42      	ldr	r3, [pc, #264]	; (8004428 <UART_SetConfig+0x27c>)
 800431e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004320:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8004324:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004328:	d011      	beq.n	800434e <UART_SetConfig+0x1a2>
 800432a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800432e:	d817      	bhi.n	8004360 <UART_SetConfig+0x1b4>
 8004330:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004334:	d011      	beq.n	800435a <UART_SetConfig+0x1ae>
 8004336:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800433a:	d811      	bhi.n	8004360 <UART_SetConfig+0x1b4>
 800433c:	2b00      	cmp	r3, #0
 800433e:	d003      	beq.n	8004348 <UART_SetConfig+0x19c>
 8004340:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004344:	d006      	beq.n	8004354 <UART_SetConfig+0x1a8>
 8004346:	e00b      	b.n	8004360 <UART_SetConfig+0x1b4>
 8004348:	2300      	movs	r3, #0
 800434a:	77fb      	strb	r3, [r7, #31]
 800434c:	e037      	b.n	80043be <UART_SetConfig+0x212>
 800434e:	2302      	movs	r3, #2
 8004350:	77fb      	strb	r3, [r7, #31]
 8004352:	e034      	b.n	80043be <UART_SetConfig+0x212>
 8004354:	2304      	movs	r3, #4
 8004356:	77fb      	strb	r3, [r7, #31]
 8004358:	e031      	b.n	80043be <UART_SetConfig+0x212>
 800435a:	2308      	movs	r3, #8
 800435c:	77fb      	strb	r3, [r7, #31]
 800435e:	e02e      	b.n	80043be <UART_SetConfig+0x212>
 8004360:	2310      	movs	r3, #16
 8004362:	77fb      	strb	r3, [r7, #31]
 8004364:	e02b      	b.n	80043be <UART_SetConfig+0x212>
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	4a33      	ldr	r2, [pc, #204]	; (8004438 <UART_SetConfig+0x28c>)
 800436c:	4293      	cmp	r3, r2
 800436e:	d124      	bne.n	80043ba <UART_SetConfig+0x20e>
 8004370:	4b2d      	ldr	r3, [pc, #180]	; (8004428 <UART_SetConfig+0x27c>)
 8004372:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004374:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8004378:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800437c:	d011      	beq.n	80043a2 <UART_SetConfig+0x1f6>
 800437e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004382:	d817      	bhi.n	80043b4 <UART_SetConfig+0x208>
 8004384:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004388:	d011      	beq.n	80043ae <UART_SetConfig+0x202>
 800438a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800438e:	d811      	bhi.n	80043b4 <UART_SetConfig+0x208>
 8004390:	2b00      	cmp	r3, #0
 8004392:	d003      	beq.n	800439c <UART_SetConfig+0x1f0>
 8004394:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004398:	d006      	beq.n	80043a8 <UART_SetConfig+0x1fc>
 800439a:	e00b      	b.n	80043b4 <UART_SetConfig+0x208>
 800439c:	2300      	movs	r3, #0
 800439e:	77fb      	strb	r3, [r7, #31]
 80043a0:	e00d      	b.n	80043be <UART_SetConfig+0x212>
 80043a2:	2302      	movs	r3, #2
 80043a4:	77fb      	strb	r3, [r7, #31]
 80043a6:	e00a      	b.n	80043be <UART_SetConfig+0x212>
 80043a8:	2304      	movs	r3, #4
 80043aa:	77fb      	strb	r3, [r7, #31]
 80043ac:	e007      	b.n	80043be <UART_SetConfig+0x212>
 80043ae:	2308      	movs	r3, #8
 80043b0:	77fb      	strb	r3, [r7, #31]
 80043b2:	e004      	b.n	80043be <UART_SetConfig+0x212>
 80043b4:	2310      	movs	r3, #16
 80043b6:	77fb      	strb	r3, [r7, #31]
 80043b8:	e001      	b.n	80043be <UART_SetConfig+0x212>
 80043ba:	2310      	movs	r3, #16
 80043bc:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	69db      	ldr	r3, [r3, #28]
 80043c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80043c6:	d16b      	bne.n	80044a0 <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 80043c8:	7ffb      	ldrb	r3, [r7, #31]
 80043ca:	2b08      	cmp	r3, #8
 80043cc:	d838      	bhi.n	8004440 <UART_SetConfig+0x294>
 80043ce:	a201      	add	r2, pc, #4	; (adr r2, 80043d4 <UART_SetConfig+0x228>)
 80043d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043d4:	080043f9 	.word	0x080043f9
 80043d8:	08004401 	.word	0x08004401
 80043dc:	08004409 	.word	0x08004409
 80043e0:	08004441 	.word	0x08004441
 80043e4:	0800440f 	.word	0x0800440f
 80043e8:	08004441 	.word	0x08004441
 80043ec:	08004441 	.word	0x08004441
 80043f0:	08004441 	.word	0x08004441
 80043f4:	08004417 	.word	0x08004417
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80043f8:	f7fe fd98 	bl	8002f2c <HAL_RCC_GetPCLK1Freq>
 80043fc:	61b8      	str	r0, [r7, #24]
        break;
 80043fe:	e024      	b.n	800444a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004400:	f7fe fdb6 	bl	8002f70 <HAL_RCC_GetPCLK2Freq>
 8004404:	61b8      	str	r0, [r7, #24]
        break;
 8004406:	e020      	b.n	800444a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004408:	4b0c      	ldr	r3, [pc, #48]	; (800443c <UART_SetConfig+0x290>)
 800440a:	61bb      	str	r3, [r7, #24]
        break;
 800440c:	e01d      	b.n	800444a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800440e:	f7fe fd2d 	bl	8002e6c <HAL_RCC_GetSysClockFreq>
 8004412:	61b8      	str	r0, [r7, #24]
        break;
 8004414:	e019      	b.n	800444a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004416:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800441a:	61bb      	str	r3, [r7, #24]
        break;
 800441c:	e015      	b.n	800444a <UART_SetConfig+0x29e>
 800441e:	bf00      	nop
 8004420:	efff69f3 	.word	0xefff69f3
 8004424:	40013800 	.word	0x40013800
 8004428:	40021000 	.word	0x40021000
 800442c:	40004400 	.word	0x40004400
 8004430:	40004800 	.word	0x40004800
 8004434:	40004c00 	.word	0x40004c00
 8004438:	40005000 	.word	0x40005000
 800443c:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 8004440:	2300      	movs	r3, #0
 8004442:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004444:	2301      	movs	r3, #1
 8004446:	77bb      	strb	r3, [r7, #30]
        break;
 8004448:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800444a:	69bb      	ldr	r3, [r7, #24]
 800444c:	2b00      	cmp	r3, #0
 800444e:	d073      	beq.n	8004538 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004450:	69bb      	ldr	r3, [r7, #24]
 8004452:	005a      	lsls	r2, r3, #1
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	685b      	ldr	r3, [r3, #4]
 8004458:	085b      	lsrs	r3, r3, #1
 800445a:	441a      	add	r2, r3
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	685b      	ldr	r3, [r3, #4]
 8004460:	fbb2 f3f3 	udiv	r3, r2, r3
 8004464:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004466:	693b      	ldr	r3, [r7, #16]
 8004468:	2b0f      	cmp	r3, #15
 800446a:	d916      	bls.n	800449a <UART_SetConfig+0x2ee>
 800446c:	693b      	ldr	r3, [r7, #16]
 800446e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004472:	d212      	bcs.n	800449a <UART_SetConfig+0x2ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004474:	693b      	ldr	r3, [r7, #16]
 8004476:	b29b      	uxth	r3, r3
 8004478:	f023 030f 	bic.w	r3, r3, #15
 800447c:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800447e:	693b      	ldr	r3, [r7, #16]
 8004480:	085b      	lsrs	r3, r3, #1
 8004482:	b29b      	uxth	r3, r3
 8004484:	f003 0307 	and.w	r3, r3, #7
 8004488:	b29a      	uxth	r2, r3
 800448a:	89fb      	ldrh	r3, [r7, #14]
 800448c:	4313      	orrs	r3, r2
 800448e:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	89fa      	ldrh	r2, [r7, #14]
 8004496:	60da      	str	r2, [r3, #12]
 8004498:	e04e      	b.n	8004538 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 800449a:	2301      	movs	r3, #1
 800449c:	77bb      	strb	r3, [r7, #30]
 800449e:	e04b      	b.n	8004538 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80044a0:	7ffb      	ldrb	r3, [r7, #31]
 80044a2:	2b08      	cmp	r3, #8
 80044a4:	d827      	bhi.n	80044f6 <UART_SetConfig+0x34a>
 80044a6:	a201      	add	r2, pc, #4	; (adr r2, 80044ac <UART_SetConfig+0x300>)
 80044a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044ac:	080044d1 	.word	0x080044d1
 80044b0:	080044d9 	.word	0x080044d9
 80044b4:	080044e1 	.word	0x080044e1
 80044b8:	080044f7 	.word	0x080044f7
 80044bc:	080044e7 	.word	0x080044e7
 80044c0:	080044f7 	.word	0x080044f7
 80044c4:	080044f7 	.word	0x080044f7
 80044c8:	080044f7 	.word	0x080044f7
 80044cc:	080044ef 	.word	0x080044ef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80044d0:	f7fe fd2c 	bl	8002f2c <HAL_RCC_GetPCLK1Freq>
 80044d4:	61b8      	str	r0, [r7, #24]
        break;
 80044d6:	e013      	b.n	8004500 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80044d8:	f7fe fd4a 	bl	8002f70 <HAL_RCC_GetPCLK2Freq>
 80044dc:	61b8      	str	r0, [r7, #24]
        break;
 80044de:	e00f      	b.n	8004500 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80044e0:	4b1b      	ldr	r3, [pc, #108]	; (8004550 <UART_SetConfig+0x3a4>)
 80044e2:	61bb      	str	r3, [r7, #24]
        break;
 80044e4:	e00c      	b.n	8004500 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80044e6:	f7fe fcc1 	bl	8002e6c <HAL_RCC_GetSysClockFreq>
 80044ea:	61b8      	str	r0, [r7, #24]
        break;
 80044ec:	e008      	b.n	8004500 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80044ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80044f2:	61bb      	str	r3, [r7, #24]
        break;
 80044f4:	e004      	b.n	8004500 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 80044f6:	2300      	movs	r3, #0
 80044f8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80044fa:	2301      	movs	r3, #1
 80044fc:	77bb      	strb	r3, [r7, #30]
        break;
 80044fe:	bf00      	nop
    }

    if (pclk != 0U)
 8004500:	69bb      	ldr	r3, [r7, #24]
 8004502:	2b00      	cmp	r3, #0
 8004504:	d018      	beq.n	8004538 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	685b      	ldr	r3, [r3, #4]
 800450a:	085a      	lsrs	r2, r3, #1
 800450c:	69bb      	ldr	r3, [r7, #24]
 800450e:	441a      	add	r2, r3
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	685b      	ldr	r3, [r3, #4]
 8004514:	fbb2 f3f3 	udiv	r3, r2, r3
 8004518:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800451a:	693b      	ldr	r3, [r7, #16]
 800451c:	2b0f      	cmp	r3, #15
 800451e:	d909      	bls.n	8004534 <UART_SetConfig+0x388>
 8004520:	693b      	ldr	r3, [r7, #16]
 8004522:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004526:	d205      	bcs.n	8004534 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004528:	693b      	ldr	r3, [r7, #16]
 800452a:	b29a      	uxth	r2, r3
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	60da      	str	r2, [r3, #12]
 8004532:	e001      	b.n	8004538 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8004534:	2301      	movs	r3, #1
 8004536:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2200      	movs	r2, #0
 800453c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	2200      	movs	r2, #0
 8004542:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004544:	7fbb      	ldrb	r3, [r7, #30]
}
 8004546:	4618      	mov	r0, r3
 8004548:	3720      	adds	r7, #32
 800454a:	46bd      	mov	sp, r7
 800454c:	bd80      	pop	{r7, pc}
 800454e:	bf00      	nop
 8004550:	007a1200 	.word	0x007a1200

08004554 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004554:	b480      	push	{r7}
 8004556:	b083      	sub	sp, #12
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004560:	f003 0308 	and.w	r3, r3, #8
 8004564:	2b00      	cmp	r3, #0
 8004566:	d00a      	beq.n	800457e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	685b      	ldr	r3, [r3, #4]
 800456e:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	430a      	orrs	r2, r1
 800457c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004582:	f003 0301 	and.w	r3, r3, #1
 8004586:	2b00      	cmp	r3, #0
 8004588:	d00a      	beq.n	80045a0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	685b      	ldr	r3, [r3, #4]
 8004590:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	430a      	orrs	r2, r1
 800459e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045a4:	f003 0302 	and.w	r3, r3, #2
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d00a      	beq.n	80045c2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	685b      	ldr	r3, [r3, #4]
 80045b2:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	430a      	orrs	r2, r1
 80045c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045c6:	f003 0304 	and.w	r3, r3, #4
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d00a      	beq.n	80045e4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	685b      	ldr	r3, [r3, #4]
 80045d4:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	430a      	orrs	r2, r1
 80045e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045e8:	f003 0310 	and.w	r3, r3, #16
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d00a      	beq.n	8004606 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	689b      	ldr	r3, [r3, #8]
 80045f6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	430a      	orrs	r2, r1
 8004604:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800460a:	f003 0320 	and.w	r3, r3, #32
 800460e:	2b00      	cmp	r3, #0
 8004610:	d00a      	beq.n	8004628 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	689b      	ldr	r3, [r3, #8]
 8004618:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	430a      	orrs	r2, r1
 8004626:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800462c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004630:	2b00      	cmp	r3, #0
 8004632:	d01a      	beq.n	800466a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	685b      	ldr	r3, [r3, #4]
 800463a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	430a      	orrs	r2, r1
 8004648:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800464e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004652:	d10a      	bne.n	800466a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	685b      	ldr	r3, [r3, #4]
 800465a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	430a      	orrs	r2, r1
 8004668:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800466e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004672:	2b00      	cmp	r3, #0
 8004674:	d00a      	beq.n	800468c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	685b      	ldr	r3, [r3, #4]
 800467c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	430a      	orrs	r2, r1
 800468a:	605a      	str	r2, [r3, #4]
  }
}
 800468c:	bf00      	nop
 800468e:	370c      	adds	r7, #12
 8004690:	46bd      	mov	sp, r7
 8004692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004696:	4770      	bx	lr

08004698 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004698:	b580      	push	{r7, lr}
 800469a:	b098      	sub	sp, #96	; 0x60
 800469c:	af02      	add	r7, sp, #8
 800469e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2200      	movs	r2, #0
 80046a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80046a8:	f7fc fd08 	bl	80010bc <HAL_GetTick>
 80046ac:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f003 0308 	and.w	r3, r3, #8
 80046b8:	2b08      	cmp	r3, #8
 80046ba:	d12e      	bne.n	800471a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80046bc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80046c0:	9300      	str	r3, [sp, #0]
 80046c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80046c4:	2200      	movs	r2, #0
 80046c6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80046ca:	6878      	ldr	r0, [r7, #4]
 80046cc:	f000 f88c 	bl	80047e8 <UART_WaitOnFlagUntilTimeout>
 80046d0:	4603      	mov	r3, r0
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d021      	beq.n	800471a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046de:	e853 3f00 	ldrex	r3, [r3]
 80046e2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80046e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046e6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80046ea:	653b      	str	r3, [r7, #80]	; 0x50
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	461a      	mov	r2, r3
 80046f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80046f4:	647b      	str	r3, [r7, #68]	; 0x44
 80046f6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046f8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80046fa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80046fc:	e841 2300 	strex	r3, r2, [r1]
 8004700:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004702:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004704:	2b00      	cmp	r3, #0
 8004706:	d1e6      	bne.n	80046d6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2220      	movs	r2, #32
 800470c:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	2200      	movs	r2, #0
 8004712:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004716:	2303      	movs	r3, #3
 8004718:	e062      	b.n	80047e0 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f003 0304 	and.w	r3, r3, #4
 8004724:	2b04      	cmp	r3, #4
 8004726:	d149      	bne.n	80047bc <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004728:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800472c:	9300      	str	r3, [sp, #0]
 800472e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004730:	2200      	movs	r2, #0
 8004732:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004736:	6878      	ldr	r0, [r7, #4]
 8004738:	f000 f856 	bl	80047e8 <UART_WaitOnFlagUntilTimeout>
 800473c:	4603      	mov	r3, r0
 800473e:	2b00      	cmp	r3, #0
 8004740:	d03c      	beq.n	80047bc <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800474a:	e853 3f00 	ldrex	r3, [r3]
 800474e:	623b      	str	r3, [r7, #32]
   return(result);
 8004750:	6a3b      	ldr	r3, [r7, #32]
 8004752:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004756:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	461a      	mov	r2, r3
 800475e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004760:	633b      	str	r3, [r7, #48]	; 0x30
 8004762:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004764:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004766:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004768:	e841 2300 	strex	r3, r2, [r1]
 800476c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800476e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004770:	2b00      	cmp	r3, #0
 8004772:	d1e6      	bne.n	8004742 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	3308      	adds	r3, #8
 800477a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800477c:	693b      	ldr	r3, [r7, #16]
 800477e:	e853 3f00 	ldrex	r3, [r3]
 8004782:	60fb      	str	r3, [r7, #12]
   return(result);
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	f023 0301 	bic.w	r3, r3, #1
 800478a:	64bb      	str	r3, [r7, #72]	; 0x48
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	3308      	adds	r3, #8
 8004792:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004794:	61fa      	str	r2, [r7, #28]
 8004796:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004798:	69b9      	ldr	r1, [r7, #24]
 800479a:	69fa      	ldr	r2, [r7, #28]
 800479c:	e841 2300 	strex	r3, r2, [r1]
 80047a0:	617b      	str	r3, [r7, #20]
   return(result);
 80047a2:	697b      	ldr	r3, [r7, #20]
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d1e5      	bne.n	8004774 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2220      	movs	r2, #32
 80047ac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2200      	movs	r2, #0
 80047b4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80047b8:	2303      	movs	r3, #3
 80047ba:	e011      	b.n	80047e0 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2220      	movs	r2, #32
 80047c0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	2220      	movs	r2, #32
 80047c6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	2200      	movs	r2, #0
 80047ce:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2200      	movs	r2, #0
 80047d4:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	2200      	movs	r2, #0
 80047da:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80047de:	2300      	movs	r3, #0
}
 80047e0:	4618      	mov	r0, r3
 80047e2:	3758      	adds	r7, #88	; 0x58
 80047e4:	46bd      	mov	sp, r7
 80047e6:	bd80      	pop	{r7, pc}

080047e8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80047e8:	b580      	push	{r7, lr}
 80047ea:	b084      	sub	sp, #16
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	60f8      	str	r0, [r7, #12]
 80047f0:	60b9      	str	r1, [r7, #8]
 80047f2:	603b      	str	r3, [r7, #0]
 80047f4:	4613      	mov	r3, r2
 80047f6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80047f8:	e04f      	b.n	800489a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047fa:	69bb      	ldr	r3, [r7, #24]
 80047fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004800:	d04b      	beq.n	800489a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004802:	f7fc fc5b 	bl	80010bc <HAL_GetTick>
 8004806:	4602      	mov	r2, r0
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	1ad3      	subs	r3, r2, r3
 800480c:	69ba      	ldr	r2, [r7, #24]
 800480e:	429a      	cmp	r2, r3
 8004810:	d302      	bcc.n	8004818 <UART_WaitOnFlagUntilTimeout+0x30>
 8004812:	69bb      	ldr	r3, [r7, #24]
 8004814:	2b00      	cmp	r3, #0
 8004816:	d101      	bne.n	800481c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004818:	2303      	movs	r3, #3
 800481a:	e04e      	b.n	80048ba <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f003 0304 	and.w	r3, r3, #4
 8004826:	2b00      	cmp	r3, #0
 8004828:	d037      	beq.n	800489a <UART_WaitOnFlagUntilTimeout+0xb2>
 800482a:	68bb      	ldr	r3, [r7, #8]
 800482c:	2b80      	cmp	r3, #128	; 0x80
 800482e:	d034      	beq.n	800489a <UART_WaitOnFlagUntilTimeout+0xb2>
 8004830:	68bb      	ldr	r3, [r7, #8]
 8004832:	2b40      	cmp	r3, #64	; 0x40
 8004834:	d031      	beq.n	800489a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	69db      	ldr	r3, [r3, #28]
 800483c:	f003 0308 	and.w	r3, r3, #8
 8004840:	2b08      	cmp	r3, #8
 8004842:	d110      	bne.n	8004866 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	2208      	movs	r2, #8
 800484a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800484c:	68f8      	ldr	r0, [r7, #12]
 800484e:	f000 f838 	bl	80048c2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	2208      	movs	r2, #8
 8004856:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	2200      	movs	r2, #0
 800485e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8004862:	2301      	movs	r3, #1
 8004864:	e029      	b.n	80048ba <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	69db      	ldr	r3, [r3, #28]
 800486c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004870:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004874:	d111      	bne.n	800489a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800487e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004880:	68f8      	ldr	r0, [r7, #12]
 8004882:	f000 f81e 	bl	80048c2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	2220      	movs	r2, #32
 800488a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	2200      	movs	r2, #0
 8004892:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8004896:	2303      	movs	r3, #3
 8004898:	e00f      	b.n	80048ba <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	69da      	ldr	r2, [r3, #28]
 80048a0:	68bb      	ldr	r3, [r7, #8]
 80048a2:	4013      	ands	r3, r2
 80048a4:	68ba      	ldr	r2, [r7, #8]
 80048a6:	429a      	cmp	r2, r3
 80048a8:	bf0c      	ite	eq
 80048aa:	2301      	moveq	r3, #1
 80048ac:	2300      	movne	r3, #0
 80048ae:	b2db      	uxtb	r3, r3
 80048b0:	461a      	mov	r2, r3
 80048b2:	79fb      	ldrb	r3, [r7, #7]
 80048b4:	429a      	cmp	r2, r3
 80048b6:	d0a0      	beq.n	80047fa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80048b8:	2300      	movs	r3, #0
}
 80048ba:	4618      	mov	r0, r3
 80048bc:	3710      	adds	r7, #16
 80048be:	46bd      	mov	sp, r7
 80048c0:	bd80      	pop	{r7, pc}

080048c2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80048c2:	b480      	push	{r7}
 80048c4:	b095      	sub	sp, #84	; 0x54
 80048c6:	af00      	add	r7, sp, #0
 80048c8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048d2:	e853 3f00 	ldrex	r3, [r3]
 80048d6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80048d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048da:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80048de:	64fb      	str	r3, [r7, #76]	; 0x4c
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	461a      	mov	r2, r3
 80048e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80048e8:	643b      	str	r3, [r7, #64]	; 0x40
 80048ea:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048ec:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80048ee:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80048f0:	e841 2300 	strex	r3, r2, [r1]
 80048f4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80048f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d1e6      	bne.n	80048ca <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	3308      	adds	r3, #8
 8004902:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004904:	6a3b      	ldr	r3, [r7, #32]
 8004906:	e853 3f00 	ldrex	r3, [r3]
 800490a:	61fb      	str	r3, [r7, #28]
   return(result);
 800490c:	69fb      	ldr	r3, [r7, #28]
 800490e:	f023 0301 	bic.w	r3, r3, #1
 8004912:	64bb      	str	r3, [r7, #72]	; 0x48
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	3308      	adds	r3, #8
 800491a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800491c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800491e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004920:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004922:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004924:	e841 2300 	strex	r3, r2, [r1]
 8004928:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800492a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800492c:	2b00      	cmp	r3, #0
 800492e:	d1e5      	bne.n	80048fc <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004934:	2b01      	cmp	r3, #1
 8004936:	d118      	bne.n	800496a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	e853 3f00 	ldrex	r3, [r3]
 8004944:	60bb      	str	r3, [r7, #8]
   return(result);
 8004946:	68bb      	ldr	r3, [r7, #8]
 8004948:	f023 0310 	bic.w	r3, r3, #16
 800494c:	647b      	str	r3, [r7, #68]	; 0x44
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	461a      	mov	r2, r3
 8004954:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004956:	61bb      	str	r3, [r7, #24]
 8004958:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800495a:	6979      	ldr	r1, [r7, #20]
 800495c:	69ba      	ldr	r2, [r7, #24]
 800495e:	e841 2300 	strex	r3, r2, [r1]
 8004962:	613b      	str	r3, [r7, #16]
   return(result);
 8004964:	693b      	ldr	r3, [r7, #16]
 8004966:	2b00      	cmp	r3, #0
 8004968:	d1e6      	bne.n	8004938 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	2220      	movs	r2, #32
 800496e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	2200      	movs	r2, #0
 8004976:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2200      	movs	r2, #0
 800497c:	669a      	str	r2, [r3, #104]	; 0x68
}
 800497e:	bf00      	nop
 8004980:	3754      	adds	r7, #84	; 0x54
 8004982:	46bd      	mov	sp, r7
 8004984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004988:	4770      	bx	lr

0800498a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800498a:	b580      	push	{r7, lr}
 800498c:	b084      	sub	sp, #16
 800498e:	af00      	add	r7, sp, #0
 8004990:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004996:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	2200      	movs	r2, #0
 800499c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	2200      	movs	r2, #0
 80049a4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80049a8:	68f8      	ldr	r0, [r7, #12]
 80049aa:	f7ff fbe9 	bl	8004180 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80049ae:	bf00      	nop
 80049b0:	3710      	adds	r7, #16
 80049b2:	46bd      	mov	sp, r7
 80049b4:	bd80      	pop	{r7, pc}

080049b6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80049b6:	b580      	push	{r7, lr}
 80049b8:	b088      	sub	sp, #32
 80049ba:	af00      	add	r7, sp, #0
 80049bc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	e853 3f00 	ldrex	r3, [r3]
 80049ca:	60bb      	str	r3, [r7, #8]
   return(result);
 80049cc:	68bb      	ldr	r3, [r7, #8]
 80049ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80049d2:	61fb      	str	r3, [r7, #28]
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	461a      	mov	r2, r3
 80049da:	69fb      	ldr	r3, [r7, #28]
 80049dc:	61bb      	str	r3, [r7, #24]
 80049de:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049e0:	6979      	ldr	r1, [r7, #20]
 80049e2:	69ba      	ldr	r2, [r7, #24]
 80049e4:	e841 2300 	strex	r3, r2, [r1]
 80049e8:	613b      	str	r3, [r7, #16]
   return(result);
 80049ea:	693b      	ldr	r3, [r7, #16]
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d1e6      	bne.n	80049be <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2220      	movs	r2, #32
 80049f4:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	2200      	movs	r2, #0
 80049fa:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80049fc:	6878      	ldr	r0, [r7, #4]
 80049fe:	f7ff fbb5 	bl	800416c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004a02:	bf00      	nop
 8004a04:	3720      	adds	r7, #32
 8004a06:	46bd      	mov	sp, r7
 8004a08:	bd80      	pop	{r7, pc}

08004a0a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004a0a:	b480      	push	{r7}
 8004a0c:	b083      	sub	sp, #12
 8004a0e:	af00      	add	r7, sp, #0
 8004a10:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004a12:	bf00      	nop
 8004a14:	370c      	adds	r7, #12
 8004a16:	46bd      	mov	sp, r7
 8004a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1c:	4770      	bx	lr

08004a1e <HAL_WWDG_Init>:
  * @param  hwwdg  pointer to a WWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified WWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_WWDG_Init(WWDG_HandleTypeDef *hwwdg)
{
 8004a1e:	b580      	push	{r7, lr}
 8004a20:	b082      	sub	sp, #8
 8004a22:	af00      	add	r7, sp, #0
 8004a24:	6078      	str	r0, [r7, #4]
  /* Check the WWDG handle allocation */
  if (hwwdg == NULL)
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d101      	bne.n	8004a30 <HAL_WWDG_Init+0x12>
  {
    return HAL_ERROR;
 8004a2c:	2301      	movs	r3, #1
 8004a2e:	e016      	b.n	8004a5e <HAL_WWDG_Init+0x40>

  /* Init the low level hardware */
  hwwdg->MspInitCallback(hwwdg);
#else
  /* Init the low level hardware */
  HAL_WWDG_MspInit(hwwdg);
 8004a30:	6878      	ldr	r0, [r7, #4]
 8004a32:	f7fc fa01 	bl	8000e38 <HAL_WWDG_MspInit>
#endif /* USE_HAL_WWDG_REGISTER_CALLBACKS */

  /* Set WWDG Counter */
  WRITE_REG(hwwdg->Instance->CR, (WWDG_CR_WDGA | hwwdg->Init.Counter));
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	68da      	ldr	r2, [r3, #12]
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004a42:	601a      	str	r2, [r3, #0]

  /* Set WWDG Prescaler and Window */
  WRITE_REG(hwwdg->Instance->CFR, (hwwdg->Init.EWIMode | hwwdg->Init.Prescaler | hwwdg->Init.Window));
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	691a      	ldr	r2, [r3, #16]
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	685b      	ldr	r3, [r3, #4]
 8004a4c:	ea42 0103 	orr.w	r1, r2, r3
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	689a      	ldr	r2, [r3, #8]
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	430a      	orrs	r2, r1
 8004a5a:	605a      	str	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8004a5c:	2300      	movs	r3, #0
}
 8004a5e:	4618      	mov	r0, r3
 8004a60:	3708      	adds	r7, #8
 8004a62:	46bd      	mov	sp, r7
 8004a64:	bd80      	pop	{r7, pc}

08004a66 <HAL_WWDG_Refresh>:
  * @param  hwwdg  pointer to a WWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified WWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_WWDG_Refresh(WWDG_HandleTypeDef *hwwdg)
{
 8004a66:	b480      	push	{r7}
 8004a68:	b083      	sub	sp, #12
 8004a6a:	af00      	add	r7, sp, #0
 8004a6c:	6078      	str	r0, [r7, #4]
  /* Write to WWDG CR the WWDG Counter value to refresh with */
  WRITE_REG(hwwdg->Instance->CR, (hwwdg->Init.Counter));
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	687a      	ldr	r2, [r7, #4]
 8004a74:	68d2      	ldr	r2, [r2, #12]
 8004a76:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004a78:	2300      	movs	r3, #0
}
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	370c      	adds	r7, #12
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a84:	4770      	bx	lr

08004a86 <LL_TIM_SetPrescaler>:
{
 8004a86:	b480      	push	{r7}
 8004a88:	b083      	sub	sp, #12
 8004a8a:	af00      	add	r7, sp, #0
 8004a8c:	6078      	str	r0, [r7, #4]
 8004a8e:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	683a      	ldr	r2, [r7, #0]
 8004a94:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004a96:	bf00      	nop
 8004a98:	370c      	adds	r7, #12
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa0:	4770      	bx	lr

08004aa2 <LL_TIM_SetAutoReload>:
{
 8004aa2:	b480      	push	{r7}
 8004aa4:	b083      	sub	sp, #12
 8004aa6:	af00      	add	r7, sp, #0
 8004aa8:	6078      	str	r0, [r7, #4]
 8004aaa:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	683a      	ldr	r2, [r7, #0]
 8004ab0:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8004ab2:	bf00      	nop
 8004ab4:	370c      	adds	r7, #12
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004abc:	4770      	bx	lr

08004abe <LL_TIM_SetRepetitionCounter>:
{
 8004abe:	b480      	push	{r7}
 8004ac0:	b083      	sub	sp, #12
 8004ac2:	af00      	add	r7, sp, #0
 8004ac4:	6078      	str	r0, [r7, #4]
 8004ac6:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	683a      	ldr	r2, [r7, #0]
 8004acc:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004ace:	bf00      	nop
 8004ad0:	370c      	adds	r7, #12
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad8:	4770      	bx	lr

08004ada <LL_TIM_GenerateEvent_UPDATE>:
{
 8004ada:	b480      	push	{r7}
 8004adc:	b083      	sub	sp, #12
 8004ade:	af00      	add	r7, sp, #0
 8004ae0:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	695b      	ldr	r3, [r3, #20]
 8004ae6:	f043 0201 	orr.w	r2, r3, #1
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	615a      	str	r2, [r3, #20]
}
 8004aee:	bf00      	nop
 8004af0:	370c      	adds	r7, #12
 8004af2:	46bd      	mov	sp, r7
 8004af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af8:	4770      	bx	lr
	...

08004afc <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, const LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8004afc:	b580      	push	{r7, lr}
 8004afe:	b084      	sub	sp, #16
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
 8004b04:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	4a3f      	ldr	r2, [pc, #252]	; (8004c0c <LL_TIM_Init+0x110>)
 8004b10:	4293      	cmp	r3, r2
 8004b12:	d013      	beq.n	8004b3c <LL_TIM_Init+0x40>
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b1a:	d00f      	beq.n	8004b3c <LL_TIM_Init+0x40>
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	4a3c      	ldr	r2, [pc, #240]	; (8004c10 <LL_TIM_Init+0x114>)
 8004b20:	4293      	cmp	r3, r2
 8004b22:	d00b      	beq.n	8004b3c <LL_TIM_Init+0x40>
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	4a3b      	ldr	r2, [pc, #236]	; (8004c14 <LL_TIM_Init+0x118>)
 8004b28:	4293      	cmp	r3, r2
 8004b2a:	d007      	beq.n	8004b3c <LL_TIM_Init+0x40>
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	4a3a      	ldr	r2, [pc, #232]	; (8004c18 <LL_TIM_Init+0x11c>)
 8004b30:	4293      	cmp	r3, r2
 8004b32:	d003      	beq.n	8004b3c <LL_TIM_Init+0x40>
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	4a39      	ldr	r2, [pc, #228]	; (8004c1c <LL_TIM_Init+0x120>)
 8004b38:	4293      	cmp	r3, r2
 8004b3a:	d106      	bne.n	8004b4a <LL_TIM_Init+0x4e>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004b42:	683b      	ldr	r3, [r7, #0]
 8004b44:	685b      	ldr	r3, [r3, #4]
 8004b46:	4313      	orrs	r3, r2
 8004b48:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	4a2f      	ldr	r2, [pc, #188]	; (8004c0c <LL_TIM_Init+0x110>)
 8004b4e:	4293      	cmp	r3, r2
 8004b50:	d01f      	beq.n	8004b92 <LL_TIM_Init+0x96>
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b58:	d01b      	beq.n	8004b92 <LL_TIM_Init+0x96>
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	4a2c      	ldr	r2, [pc, #176]	; (8004c10 <LL_TIM_Init+0x114>)
 8004b5e:	4293      	cmp	r3, r2
 8004b60:	d017      	beq.n	8004b92 <LL_TIM_Init+0x96>
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	4a2b      	ldr	r2, [pc, #172]	; (8004c14 <LL_TIM_Init+0x118>)
 8004b66:	4293      	cmp	r3, r2
 8004b68:	d013      	beq.n	8004b92 <LL_TIM_Init+0x96>
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	4a2a      	ldr	r2, [pc, #168]	; (8004c18 <LL_TIM_Init+0x11c>)
 8004b6e:	4293      	cmp	r3, r2
 8004b70:	d00f      	beq.n	8004b92 <LL_TIM_Init+0x96>
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	4a2a      	ldr	r2, [pc, #168]	; (8004c20 <LL_TIM_Init+0x124>)
 8004b76:	4293      	cmp	r3, r2
 8004b78:	d00b      	beq.n	8004b92 <LL_TIM_Init+0x96>
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	4a29      	ldr	r2, [pc, #164]	; (8004c24 <LL_TIM_Init+0x128>)
 8004b7e:	4293      	cmp	r3, r2
 8004b80:	d007      	beq.n	8004b92 <LL_TIM_Init+0x96>
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	4a28      	ldr	r2, [pc, #160]	; (8004c28 <LL_TIM_Init+0x12c>)
 8004b86:	4293      	cmp	r3, r2
 8004b88:	d003      	beq.n	8004b92 <LL_TIM_Init+0x96>
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	4a23      	ldr	r2, [pc, #140]	; (8004c1c <LL_TIM_Init+0x120>)
 8004b8e:	4293      	cmp	r3, r2
 8004b90:	d106      	bne.n	8004ba0 <LL_TIM_Init+0xa4>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004b98:	683b      	ldr	r3, [r7, #0]
 8004b9a:	68db      	ldr	r3, [r3, #12]
 8004b9c:	4313      	orrs	r3, r2
 8004b9e:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	68fa      	ldr	r2, [r7, #12]
 8004ba4:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8004ba6:	683b      	ldr	r3, [r7, #0]
 8004ba8:	689b      	ldr	r3, [r3, #8]
 8004baa:	4619      	mov	r1, r3
 8004bac:	6878      	ldr	r0, [r7, #4]
 8004bae:	f7ff ff78 	bl	8004aa2 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8004bb2:	683b      	ldr	r3, [r7, #0]
 8004bb4:	881b      	ldrh	r3, [r3, #0]
 8004bb6:	4619      	mov	r1, r3
 8004bb8:	6878      	ldr	r0, [r7, #4]
 8004bba:	f7ff ff64 	bl	8004a86 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	4a12      	ldr	r2, [pc, #72]	; (8004c0c <LL_TIM_Init+0x110>)
 8004bc2:	4293      	cmp	r3, r2
 8004bc4:	d013      	beq.n	8004bee <LL_TIM_Init+0xf2>
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	4a13      	ldr	r2, [pc, #76]	; (8004c18 <LL_TIM_Init+0x11c>)
 8004bca:	4293      	cmp	r3, r2
 8004bcc:	d00f      	beq.n	8004bee <LL_TIM_Init+0xf2>
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	4a13      	ldr	r2, [pc, #76]	; (8004c20 <LL_TIM_Init+0x124>)
 8004bd2:	4293      	cmp	r3, r2
 8004bd4:	d00b      	beq.n	8004bee <LL_TIM_Init+0xf2>
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	4a12      	ldr	r2, [pc, #72]	; (8004c24 <LL_TIM_Init+0x128>)
 8004bda:	4293      	cmp	r3, r2
 8004bdc:	d007      	beq.n	8004bee <LL_TIM_Init+0xf2>
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	4a11      	ldr	r2, [pc, #68]	; (8004c28 <LL_TIM_Init+0x12c>)
 8004be2:	4293      	cmp	r3, r2
 8004be4:	d003      	beq.n	8004bee <LL_TIM_Init+0xf2>
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	4a0c      	ldr	r2, [pc, #48]	; (8004c1c <LL_TIM_Init+0x120>)
 8004bea:	4293      	cmp	r3, r2
 8004bec:	d105      	bne.n	8004bfa <LL_TIM_Init+0xfe>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8004bee:	683b      	ldr	r3, [r7, #0]
 8004bf0:	691b      	ldr	r3, [r3, #16]
 8004bf2:	4619      	mov	r1, r3
 8004bf4:	6878      	ldr	r0, [r7, #4]
 8004bf6:	f7ff ff62 	bl	8004abe <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 8004bfa:	6878      	ldr	r0, [r7, #4]
 8004bfc:	f7ff ff6d 	bl	8004ada <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8004c00:	2300      	movs	r3, #0
}
 8004c02:	4618      	mov	r0, r3
 8004c04:	3710      	adds	r7, #16
 8004c06:	46bd      	mov	sp, r7
 8004c08:	bd80      	pop	{r7, pc}
 8004c0a:	bf00      	nop
 8004c0c:	40012c00 	.word	0x40012c00
 8004c10:	40000400 	.word	0x40000400
 8004c14:	40000800 	.word	0x40000800
 8004c18:	40013400 	.word	0x40013400
 8004c1c:	40015000 	.word	0x40015000
 8004c20:	40014000 	.word	0x40014000
 8004c24:	40014400 	.word	0x40014400
 8004c28:	40014800 	.word	0x40014800

08004c2c <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004c2c:	b480      	push	{r7}
 8004c2e:	b085      	sub	sp, #20
 8004c30:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004c32:	f3ef 8305 	mrs	r3, IPSR
 8004c36:	60bb      	str	r3, [r7, #8]
  return(result);
 8004c38:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d10f      	bne.n	8004c5e <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c3e:	f3ef 8310 	mrs	r3, PRIMASK
 8004c42:	607b      	str	r3, [r7, #4]
  return(result);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d109      	bne.n	8004c5e <osKernelInitialize+0x32>
 8004c4a:	4b11      	ldr	r3, [pc, #68]	; (8004c90 <osKernelInitialize+0x64>)
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	2b02      	cmp	r3, #2
 8004c50:	d109      	bne.n	8004c66 <osKernelInitialize+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004c52:	f3ef 8311 	mrs	r3, BASEPRI
 8004c56:	603b      	str	r3, [r7, #0]
  return(result);
 8004c58:	683b      	ldr	r3, [r7, #0]
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d003      	beq.n	8004c66 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8004c5e:	f06f 0305 	mvn.w	r3, #5
 8004c62:	60fb      	str	r3, [r7, #12]
 8004c64:	e00c      	b.n	8004c80 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004c66:	4b0a      	ldr	r3, [pc, #40]	; (8004c90 <osKernelInitialize+0x64>)
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d105      	bne.n	8004c7a <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8004c6e:	4b08      	ldr	r3, [pc, #32]	; (8004c90 <osKernelInitialize+0x64>)
 8004c70:	2201      	movs	r2, #1
 8004c72:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004c74:	2300      	movs	r3, #0
 8004c76:	60fb      	str	r3, [r7, #12]
 8004c78:	e002      	b.n	8004c80 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8004c7a:	f04f 33ff 	mov.w	r3, #4294967295
 8004c7e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8004c80:	68fb      	ldr	r3, [r7, #12]
}
 8004c82:	4618      	mov	r0, r3
 8004c84:	3714      	adds	r7, #20
 8004c86:	46bd      	mov	sp, r7
 8004c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8c:	4770      	bx	lr
 8004c8e:	bf00      	nop
 8004c90:	20000270 	.word	0x20000270

08004c94 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004c94:	b580      	push	{r7, lr}
 8004c96:	b084      	sub	sp, #16
 8004c98:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004c9a:	f3ef 8305 	mrs	r3, IPSR
 8004c9e:	60bb      	str	r3, [r7, #8]
  return(result);
 8004ca0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d10f      	bne.n	8004cc6 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ca6:	f3ef 8310 	mrs	r3, PRIMASK
 8004caa:	607b      	str	r3, [r7, #4]
  return(result);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d109      	bne.n	8004cc6 <osKernelStart+0x32>
 8004cb2:	4b11      	ldr	r3, [pc, #68]	; (8004cf8 <osKernelStart+0x64>)
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	2b02      	cmp	r3, #2
 8004cb8:	d109      	bne.n	8004cce <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004cba:	f3ef 8311 	mrs	r3, BASEPRI
 8004cbe:	603b      	str	r3, [r7, #0]
  return(result);
 8004cc0:	683b      	ldr	r3, [r7, #0]
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d003      	beq.n	8004cce <osKernelStart+0x3a>
    stat = osErrorISR;
 8004cc6:	f06f 0305 	mvn.w	r3, #5
 8004cca:	60fb      	str	r3, [r7, #12]
 8004ccc:	e00e      	b.n	8004cec <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8004cce:	4b0a      	ldr	r3, [pc, #40]	; (8004cf8 <osKernelStart+0x64>)
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	2b01      	cmp	r3, #1
 8004cd4:	d107      	bne.n	8004ce6 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8004cd6:	4b08      	ldr	r3, [pc, #32]	; (8004cf8 <osKernelStart+0x64>)
 8004cd8:	2202      	movs	r2, #2
 8004cda:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8004cdc:	f001 fa12 	bl	8006104 <vTaskStartScheduler>
      stat = osOK;
 8004ce0:	2300      	movs	r3, #0
 8004ce2:	60fb      	str	r3, [r7, #12]
 8004ce4:	e002      	b.n	8004cec <osKernelStart+0x58>
    } else {
      stat = osError;
 8004ce6:	f04f 33ff 	mov.w	r3, #4294967295
 8004cea:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8004cec:	68fb      	ldr	r3, [r7, #12]
}
 8004cee:	4618      	mov	r0, r3
 8004cf0:	3710      	adds	r7, #16
 8004cf2:	46bd      	mov	sp, r7
 8004cf4:	bd80      	pop	{r7, pc}
 8004cf6:	bf00      	nop
 8004cf8:	20000270 	.word	0x20000270

08004cfc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	b092      	sub	sp, #72	; 0x48
 8004d00:	af04      	add	r7, sp, #16
 8004d02:	60f8      	str	r0, [r7, #12]
 8004d04:	60b9      	str	r1, [r7, #8]
 8004d06:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004d08:	2300      	movs	r3, #0
 8004d0a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004d0c:	f3ef 8305 	mrs	r3, IPSR
 8004d10:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8004d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	f040 8094 	bne.w	8004e42 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d1a:	f3ef 8310 	mrs	r3, PRIMASK
 8004d1e:	623b      	str	r3, [r7, #32]
  return(result);
 8004d20:	6a3b      	ldr	r3, [r7, #32]
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	f040 808d 	bne.w	8004e42 <osThreadNew+0x146>
 8004d28:	4b48      	ldr	r3, [pc, #288]	; (8004e4c <osThreadNew+0x150>)
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	2b02      	cmp	r3, #2
 8004d2e:	d106      	bne.n	8004d3e <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004d30:	f3ef 8311 	mrs	r3, BASEPRI
 8004d34:	61fb      	str	r3, [r7, #28]
  return(result);
 8004d36:	69fb      	ldr	r3, [r7, #28]
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	f040 8082 	bne.w	8004e42 <osThreadNew+0x146>
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d07e      	beq.n	8004e42 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8004d44:	2380      	movs	r3, #128	; 0x80
 8004d46:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8004d48:	2318      	movs	r3, #24
 8004d4a:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8004d4c:	2300      	movs	r3, #0
 8004d4e:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8004d50:	f107 031b 	add.w	r3, r7, #27
 8004d54:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8004d56:	f04f 33ff 	mov.w	r3, #4294967295
 8004d5a:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d045      	beq.n	8004dee <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d002      	beq.n	8004d70 <osThreadNew+0x74>
        name = attr->name;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	699b      	ldr	r3, [r3, #24]
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d002      	beq.n	8004d7e <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	699b      	ldr	r3, [r3, #24]
 8004d7c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004d7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d008      	beq.n	8004d96 <osThreadNew+0x9a>
 8004d84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d86:	2b38      	cmp	r3, #56	; 0x38
 8004d88:	d805      	bhi.n	8004d96 <osThreadNew+0x9a>
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	685b      	ldr	r3, [r3, #4]
 8004d8e:	f003 0301 	and.w	r3, r3, #1
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d001      	beq.n	8004d9a <osThreadNew+0x9e>
        return (NULL);
 8004d96:	2300      	movs	r3, #0
 8004d98:	e054      	b.n	8004e44 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	695b      	ldr	r3, [r3, #20]
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d003      	beq.n	8004daa <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	695b      	ldr	r3, [r3, #20]
 8004da6:	089b      	lsrs	r3, r3, #2
 8004da8:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	689b      	ldr	r3, [r3, #8]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d00e      	beq.n	8004dd0 <osThreadNew+0xd4>
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	68db      	ldr	r3, [r3, #12]
 8004db6:	2b5b      	cmp	r3, #91	; 0x5b
 8004db8:	d90a      	bls.n	8004dd0 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d006      	beq.n	8004dd0 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	695b      	ldr	r3, [r3, #20]
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d002      	beq.n	8004dd0 <osThreadNew+0xd4>
        mem = 1;
 8004dca:	2301      	movs	r3, #1
 8004dcc:	62bb      	str	r3, [r7, #40]	; 0x28
 8004dce:	e010      	b.n	8004df2 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	689b      	ldr	r3, [r3, #8]
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d10c      	bne.n	8004df2 <osThreadNew+0xf6>
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	68db      	ldr	r3, [r3, #12]
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d108      	bne.n	8004df2 <osThreadNew+0xf6>
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	691b      	ldr	r3, [r3, #16]
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d104      	bne.n	8004df2 <osThreadNew+0xf6>
          mem = 0;
 8004de8:	2300      	movs	r3, #0
 8004dea:	62bb      	str	r3, [r7, #40]	; 0x28
 8004dec:	e001      	b.n	8004df2 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8004dee:	2300      	movs	r3, #0
 8004df0:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8004df2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004df4:	2b01      	cmp	r3, #1
 8004df6:	d110      	bne.n	8004e1a <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8004dfc:	687a      	ldr	r2, [r7, #4]
 8004dfe:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004e00:	9202      	str	r2, [sp, #8]
 8004e02:	9301      	str	r3, [sp, #4]
 8004e04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e06:	9300      	str	r3, [sp, #0]
 8004e08:	68bb      	ldr	r3, [r7, #8]
 8004e0a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e0c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004e0e:	68f8      	ldr	r0, [r7, #12]
 8004e10:	f000 ffac 	bl	8005d6c <xTaskCreateStatic>
 8004e14:	4603      	mov	r3, r0
 8004e16:	617b      	str	r3, [r7, #20]
 8004e18:	e013      	b.n	8004e42 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8004e1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d110      	bne.n	8004e42 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004e20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e22:	b29a      	uxth	r2, r3
 8004e24:	f107 0314 	add.w	r3, r7, #20
 8004e28:	9301      	str	r3, [sp, #4]
 8004e2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e2c:	9300      	str	r3, [sp, #0]
 8004e2e:	68bb      	ldr	r3, [r7, #8]
 8004e30:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004e32:	68f8      	ldr	r0, [r7, #12]
 8004e34:	f000 fff6 	bl	8005e24 <xTaskCreate>
 8004e38:	4603      	mov	r3, r0
 8004e3a:	2b01      	cmp	r3, #1
 8004e3c:	d001      	beq.n	8004e42 <osThreadNew+0x146>
          hTask = NULL;
 8004e3e:	2300      	movs	r3, #0
 8004e40:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004e42:	697b      	ldr	r3, [r7, #20]
}
 8004e44:	4618      	mov	r0, r3
 8004e46:	3738      	adds	r7, #56	; 0x38
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	bd80      	pop	{r7, pc}
 8004e4c:	20000270 	.word	0x20000270

08004e50 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8004e50:	b580      	push	{r7, lr}
 8004e52:	b086      	sub	sp, #24
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004e58:	f3ef 8305 	mrs	r3, IPSR
 8004e5c:	613b      	str	r3, [r7, #16]
  return(result);
 8004e5e:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d10f      	bne.n	8004e84 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e64:	f3ef 8310 	mrs	r3, PRIMASK
 8004e68:	60fb      	str	r3, [r7, #12]
  return(result);
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d109      	bne.n	8004e84 <osDelay+0x34>
 8004e70:	4b0d      	ldr	r3, [pc, #52]	; (8004ea8 <osDelay+0x58>)
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	2b02      	cmp	r3, #2
 8004e76:	d109      	bne.n	8004e8c <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004e78:	f3ef 8311 	mrs	r3, BASEPRI
 8004e7c:	60bb      	str	r3, [r7, #8]
  return(result);
 8004e7e:	68bb      	ldr	r3, [r7, #8]
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d003      	beq.n	8004e8c <osDelay+0x3c>
    stat = osErrorISR;
 8004e84:	f06f 0305 	mvn.w	r3, #5
 8004e88:	617b      	str	r3, [r7, #20]
 8004e8a:	e007      	b.n	8004e9c <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8004e8c:	2300      	movs	r3, #0
 8004e8e:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d002      	beq.n	8004e9c <osDelay+0x4c>
      vTaskDelay(ticks);
 8004e96:	6878      	ldr	r0, [r7, #4]
 8004e98:	f001 f900 	bl	800609c <vTaskDelay>
    }
  }

  return (stat);
 8004e9c:	697b      	ldr	r3, [r7, #20]
}
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	3718      	adds	r7, #24
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	bd80      	pop	{r7, pc}
 8004ea6:	bf00      	nop
 8004ea8:	20000270 	.word	0x20000270

08004eac <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8004eac:	b580      	push	{r7, lr}
 8004eae:	b08c      	sub	sp, #48	; 0x30
 8004eb0:	af02      	add	r7, sp, #8
 8004eb2:	60f8      	str	r0, [r7, #12]
 8004eb4:	60b9      	str	r1, [r7, #8]
 8004eb6:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8004eb8:	2300      	movs	r3, #0
 8004eba:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004ebc:	f3ef 8305 	mrs	r3, IPSR
 8004ec0:	61bb      	str	r3, [r7, #24]
  return(result);
 8004ec2:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	f040 8086 	bne.w	8004fd6 <osSemaphoreNew+0x12a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004eca:	f3ef 8310 	mrs	r3, PRIMASK
 8004ece:	617b      	str	r3, [r7, #20]
  return(result);
 8004ed0:	697b      	ldr	r3, [r7, #20]
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d17f      	bne.n	8004fd6 <osSemaphoreNew+0x12a>
 8004ed6:	4b42      	ldr	r3, [pc, #264]	; (8004fe0 <osSemaphoreNew+0x134>)
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	2b02      	cmp	r3, #2
 8004edc:	d105      	bne.n	8004eea <osSemaphoreNew+0x3e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004ede:	f3ef 8311 	mrs	r3, BASEPRI
 8004ee2:	613b      	str	r3, [r7, #16]
  return(result);
 8004ee4:	693b      	ldr	r3, [r7, #16]
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d175      	bne.n	8004fd6 <osSemaphoreNew+0x12a>
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d072      	beq.n	8004fd6 <osSemaphoreNew+0x12a>
 8004ef0:	68ba      	ldr	r2, [r7, #8]
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	429a      	cmp	r2, r3
 8004ef6:	d86e      	bhi.n	8004fd6 <osSemaphoreNew+0x12a>
    mem = -1;
 8004ef8:	f04f 33ff 	mov.w	r3, #4294967295
 8004efc:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d015      	beq.n	8004f30 <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	689b      	ldr	r3, [r3, #8]
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d006      	beq.n	8004f1a <osSemaphoreNew+0x6e>
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	68db      	ldr	r3, [r3, #12]
 8004f10:	2b4f      	cmp	r3, #79	; 0x4f
 8004f12:	d902      	bls.n	8004f1a <osSemaphoreNew+0x6e>
        mem = 1;
 8004f14:	2301      	movs	r3, #1
 8004f16:	623b      	str	r3, [r7, #32]
 8004f18:	e00c      	b.n	8004f34 <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	689b      	ldr	r3, [r3, #8]
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d108      	bne.n	8004f34 <osSemaphoreNew+0x88>
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	68db      	ldr	r3, [r3, #12]
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d104      	bne.n	8004f34 <osSemaphoreNew+0x88>
          mem = 0;
 8004f2a:	2300      	movs	r3, #0
 8004f2c:	623b      	str	r3, [r7, #32]
 8004f2e:	e001      	b.n	8004f34 <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 8004f30:	2300      	movs	r3, #0
 8004f32:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 8004f34:	6a3b      	ldr	r3, [r7, #32]
 8004f36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f3a:	d04c      	beq.n	8004fd6 <osSemaphoreNew+0x12a>
      if (max_count == 1U) {
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	2b01      	cmp	r3, #1
 8004f40:	d128      	bne.n	8004f94 <osSemaphoreNew+0xe8>
        if (mem == 1) {
 8004f42:	6a3b      	ldr	r3, [r7, #32]
 8004f44:	2b01      	cmp	r3, #1
 8004f46:	d10a      	bne.n	8004f5e <osSemaphoreNew+0xb2>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	689b      	ldr	r3, [r3, #8]
 8004f4c:	2203      	movs	r2, #3
 8004f4e:	9200      	str	r2, [sp, #0]
 8004f50:	2200      	movs	r2, #0
 8004f52:	2100      	movs	r1, #0
 8004f54:	2001      	movs	r0, #1
 8004f56:	f000 f995 	bl	8005284 <xQueueGenericCreateStatic>
 8004f5a:	6278      	str	r0, [r7, #36]	; 0x24
 8004f5c:	e005      	b.n	8004f6a <osSemaphoreNew+0xbe>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 8004f5e:	2203      	movs	r2, #3
 8004f60:	2100      	movs	r1, #0
 8004f62:	2001      	movs	r0, #1
 8004f64:	f000 fa05 	bl	8005372 <xQueueGenericCreate>
 8004f68:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8004f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d022      	beq.n	8004fb6 <osSemaphoreNew+0x10a>
 8004f70:	68bb      	ldr	r3, [r7, #8]
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d01f      	beq.n	8004fb6 <osSemaphoreNew+0x10a>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8004f76:	2300      	movs	r3, #0
 8004f78:	2200      	movs	r2, #0
 8004f7a:	2100      	movs	r1, #0
 8004f7c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004f7e:	f000 fac3 	bl	8005508 <xQueueGenericSend>
 8004f82:	4603      	mov	r3, r0
 8004f84:	2b01      	cmp	r3, #1
 8004f86:	d016      	beq.n	8004fb6 <osSemaphoreNew+0x10a>
            vSemaphoreDelete (hSemaphore);
 8004f88:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004f8a:	f000 fd33 	bl	80059f4 <vQueueDelete>
            hSemaphore = NULL;
 8004f8e:	2300      	movs	r3, #0
 8004f90:	627b      	str	r3, [r7, #36]	; 0x24
 8004f92:	e010      	b.n	8004fb6 <osSemaphoreNew+0x10a>
          }
        }
      }
      else {
        if (mem == 1) {
 8004f94:	6a3b      	ldr	r3, [r7, #32]
 8004f96:	2b01      	cmp	r3, #1
 8004f98:	d108      	bne.n	8004fac <osSemaphoreNew+0x100>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	689b      	ldr	r3, [r3, #8]
 8004f9e:	461a      	mov	r2, r3
 8004fa0:	68b9      	ldr	r1, [r7, #8]
 8004fa2:	68f8      	ldr	r0, [r7, #12]
 8004fa4:	f000 fa46 	bl	8005434 <xQueueCreateCountingSemaphoreStatic>
 8004fa8:	6278      	str	r0, [r7, #36]	; 0x24
 8004faa:	e004      	b.n	8004fb6 <osSemaphoreNew+0x10a>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8004fac:	68b9      	ldr	r1, [r7, #8]
 8004fae:	68f8      	ldr	r0, [r7, #12]
 8004fb0:	f000 fa77 	bl	80054a2 <xQueueCreateCountingSemaphore>
 8004fb4:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8004fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d00c      	beq.n	8004fd6 <osSemaphoreNew+0x12a>
        if (attr != NULL) {
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d003      	beq.n	8004fca <osSemaphoreNew+0x11e>
          name = attr->name;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	61fb      	str	r3, [r7, #28]
 8004fc8:	e001      	b.n	8004fce <osSemaphoreNew+0x122>
        } else {
          name = NULL;
 8004fca:	2300      	movs	r3, #0
 8004fcc:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8004fce:	69f9      	ldr	r1, [r7, #28]
 8004fd0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004fd2:	f000 fe43 	bl	8005c5c <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8004fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004fd8:	4618      	mov	r0, r3
 8004fda:	3728      	adds	r7, #40	; 0x28
 8004fdc:	46bd      	mov	sp, r7
 8004fde:	bd80      	pop	{r7, pc}
 8004fe0:	20000270 	.word	0x20000270

08004fe4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004fe4:	b480      	push	{r7}
 8004fe6:	b085      	sub	sp, #20
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	60f8      	str	r0, [r7, #12]
 8004fec:	60b9      	str	r1, [r7, #8]
 8004fee:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	4a07      	ldr	r2, [pc, #28]	; (8005010 <vApplicationGetIdleTaskMemory+0x2c>)
 8004ff4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004ff6:	68bb      	ldr	r3, [r7, #8]
 8004ff8:	4a06      	ldr	r2, [pc, #24]	; (8005014 <vApplicationGetIdleTaskMemory+0x30>)
 8004ffa:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2280      	movs	r2, #128	; 0x80
 8005000:	601a      	str	r2, [r3, #0]
}
 8005002:	bf00      	nop
 8005004:	3714      	adds	r7, #20
 8005006:	46bd      	mov	sp, r7
 8005008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500c:	4770      	bx	lr
 800500e:	bf00      	nop
 8005010:	20000274 	.word	0x20000274
 8005014:	200002d0 	.word	0x200002d0

08005018 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005018:	b480      	push	{r7}
 800501a:	b085      	sub	sp, #20
 800501c:	af00      	add	r7, sp, #0
 800501e:	60f8      	str	r0, [r7, #12]
 8005020:	60b9      	str	r1, [r7, #8]
 8005022:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	4a07      	ldr	r2, [pc, #28]	; (8005044 <vApplicationGetTimerTaskMemory+0x2c>)
 8005028:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800502a:	68bb      	ldr	r3, [r7, #8]
 800502c:	4a06      	ldr	r2, [pc, #24]	; (8005048 <vApplicationGetTimerTaskMemory+0x30>)
 800502e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005036:	601a      	str	r2, [r3, #0]
}
 8005038:	bf00      	nop
 800503a:	3714      	adds	r7, #20
 800503c:	46bd      	mov	sp, r7
 800503e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005042:	4770      	bx	lr
 8005044:	200004d0 	.word	0x200004d0
 8005048:	2000052c 	.word	0x2000052c

0800504c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800504c:	b480      	push	{r7}
 800504e:	b083      	sub	sp, #12
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	f103 0208 	add.w	r2, r3, #8
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	f04f 32ff 	mov.w	r2, #4294967295
 8005064:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	f103 0208 	add.w	r2, r3, #8
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	f103 0208 	add.w	r2, r3, #8
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	2200      	movs	r2, #0
 800507e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005080:	bf00      	nop
 8005082:	370c      	adds	r7, #12
 8005084:	46bd      	mov	sp, r7
 8005086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508a:	4770      	bx	lr

0800508c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800508c:	b480      	push	{r7}
 800508e:	b083      	sub	sp, #12
 8005090:	af00      	add	r7, sp, #0
 8005092:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2200      	movs	r2, #0
 8005098:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800509a:	bf00      	nop
 800509c:	370c      	adds	r7, #12
 800509e:	46bd      	mov	sp, r7
 80050a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a4:	4770      	bx	lr

080050a6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80050a6:	b480      	push	{r7}
 80050a8:	b085      	sub	sp, #20
 80050aa:	af00      	add	r7, sp, #0
 80050ac:	6078      	str	r0, [r7, #4]
 80050ae:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	685b      	ldr	r3, [r3, #4]
 80050b4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80050b6:	683b      	ldr	r3, [r7, #0]
 80050b8:	68fa      	ldr	r2, [r7, #12]
 80050ba:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	689a      	ldr	r2, [r3, #8]
 80050c0:	683b      	ldr	r3, [r7, #0]
 80050c2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	689b      	ldr	r3, [r3, #8]
 80050c8:	683a      	ldr	r2, [r7, #0]
 80050ca:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	683a      	ldr	r2, [r7, #0]
 80050d0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80050d2:	683b      	ldr	r3, [r7, #0]
 80050d4:	687a      	ldr	r2, [r7, #4]
 80050d6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	1c5a      	adds	r2, r3, #1
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	601a      	str	r2, [r3, #0]
}
 80050e2:	bf00      	nop
 80050e4:	3714      	adds	r7, #20
 80050e6:	46bd      	mov	sp, r7
 80050e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ec:	4770      	bx	lr

080050ee <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80050ee:	b480      	push	{r7}
 80050f0:	b085      	sub	sp, #20
 80050f2:	af00      	add	r7, sp, #0
 80050f4:	6078      	str	r0, [r7, #4]
 80050f6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80050f8:	683b      	ldr	r3, [r7, #0]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80050fe:	68bb      	ldr	r3, [r7, #8]
 8005100:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005104:	d103      	bne.n	800510e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	691b      	ldr	r3, [r3, #16]
 800510a:	60fb      	str	r3, [r7, #12]
 800510c:	e00c      	b.n	8005128 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	3308      	adds	r3, #8
 8005112:	60fb      	str	r3, [r7, #12]
 8005114:	e002      	b.n	800511c <vListInsert+0x2e>
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	685b      	ldr	r3, [r3, #4]
 800511a:	60fb      	str	r3, [r7, #12]
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	685b      	ldr	r3, [r3, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	68ba      	ldr	r2, [r7, #8]
 8005124:	429a      	cmp	r2, r3
 8005126:	d2f6      	bcs.n	8005116 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	685a      	ldr	r2, [r3, #4]
 800512c:	683b      	ldr	r3, [r7, #0]
 800512e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005130:	683b      	ldr	r3, [r7, #0]
 8005132:	685b      	ldr	r3, [r3, #4]
 8005134:	683a      	ldr	r2, [r7, #0]
 8005136:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005138:	683b      	ldr	r3, [r7, #0]
 800513a:	68fa      	ldr	r2, [r7, #12]
 800513c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	683a      	ldr	r2, [r7, #0]
 8005142:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8005144:	683b      	ldr	r3, [r7, #0]
 8005146:	687a      	ldr	r2, [r7, #4]
 8005148:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	1c5a      	adds	r2, r3, #1
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	601a      	str	r2, [r3, #0]
}
 8005154:	bf00      	nop
 8005156:	3714      	adds	r7, #20
 8005158:	46bd      	mov	sp, r7
 800515a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515e:	4770      	bx	lr

08005160 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005160:	b480      	push	{r7}
 8005162:	b085      	sub	sp, #20
 8005164:	af00      	add	r7, sp, #0
 8005166:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	691b      	ldr	r3, [r3, #16]
 800516c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	685b      	ldr	r3, [r3, #4]
 8005172:	687a      	ldr	r2, [r7, #4]
 8005174:	6892      	ldr	r2, [r2, #8]
 8005176:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	689b      	ldr	r3, [r3, #8]
 800517c:	687a      	ldr	r2, [r7, #4]
 800517e:	6852      	ldr	r2, [r2, #4]
 8005180:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	685b      	ldr	r3, [r3, #4]
 8005186:	687a      	ldr	r2, [r7, #4]
 8005188:	429a      	cmp	r2, r3
 800518a:	d103      	bne.n	8005194 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	689a      	ldr	r2, [r3, #8]
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	2200      	movs	r2, #0
 8005198:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	1e5a      	subs	r2, r3, #1
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	681b      	ldr	r3, [r3, #0]
}
 80051a8:	4618      	mov	r0, r3
 80051aa:	3714      	adds	r7, #20
 80051ac:	46bd      	mov	sp, r7
 80051ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b2:	4770      	bx	lr

080051b4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80051b4:	b580      	push	{r7, lr}
 80051b6:	b084      	sub	sp, #16
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	6078      	str	r0, [r7, #4]
 80051bc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d10a      	bne.n	80051de <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80051c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051cc:	f383 8811 	msr	BASEPRI, r3
 80051d0:	f3bf 8f6f 	isb	sy
 80051d4:	f3bf 8f4f 	dsb	sy
 80051d8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80051da:	bf00      	nop
 80051dc:	e7fe      	b.n	80051dc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80051de:	f002 f901 	bl	80073e4 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	681a      	ldr	r2, [r3, #0]
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051ea:	68f9      	ldr	r1, [r7, #12]
 80051ec:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80051ee:	fb01 f303 	mul.w	r3, r1, r3
 80051f2:	441a      	add	r2, r3
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	2200      	movs	r2, #0
 80051fc:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	681a      	ldr	r2, [r3, #0]
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	681a      	ldr	r2, [r3, #0]
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800520e:	3b01      	subs	r3, #1
 8005210:	68f9      	ldr	r1, [r7, #12]
 8005212:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005214:	fb01 f303 	mul.w	r3, r1, r3
 8005218:	441a      	add	r2, r3
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	22ff      	movs	r2, #255	; 0xff
 8005222:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	22ff      	movs	r2, #255	; 0xff
 800522a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800522e:	683b      	ldr	r3, [r7, #0]
 8005230:	2b00      	cmp	r3, #0
 8005232:	d114      	bne.n	800525e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	691b      	ldr	r3, [r3, #16]
 8005238:	2b00      	cmp	r3, #0
 800523a:	d01a      	beq.n	8005272 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	3310      	adds	r3, #16
 8005240:	4618      	mov	r0, r3
 8005242:	f001 f9ed 	bl	8006620 <xTaskRemoveFromEventList>
 8005246:	4603      	mov	r3, r0
 8005248:	2b00      	cmp	r3, #0
 800524a:	d012      	beq.n	8005272 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800524c:	4b0c      	ldr	r3, [pc, #48]	; (8005280 <xQueueGenericReset+0xcc>)
 800524e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005252:	601a      	str	r2, [r3, #0]
 8005254:	f3bf 8f4f 	dsb	sy
 8005258:	f3bf 8f6f 	isb	sy
 800525c:	e009      	b.n	8005272 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	3310      	adds	r3, #16
 8005262:	4618      	mov	r0, r3
 8005264:	f7ff fef2 	bl	800504c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	3324      	adds	r3, #36	; 0x24
 800526c:	4618      	mov	r0, r3
 800526e:	f7ff feed 	bl	800504c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005272:	f002 f8e7 	bl	8007444 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005276:	2301      	movs	r3, #1
}
 8005278:	4618      	mov	r0, r3
 800527a:	3710      	adds	r7, #16
 800527c:	46bd      	mov	sp, r7
 800527e:	bd80      	pop	{r7, pc}
 8005280:	e000ed04 	.word	0xe000ed04

08005284 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005284:	b580      	push	{r7, lr}
 8005286:	b08e      	sub	sp, #56	; 0x38
 8005288:	af02      	add	r7, sp, #8
 800528a:	60f8      	str	r0, [r7, #12]
 800528c:	60b9      	str	r1, [r7, #8]
 800528e:	607a      	str	r2, [r7, #4]
 8005290:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	2b00      	cmp	r3, #0
 8005296:	d10a      	bne.n	80052ae <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8005298:	f04f 0350 	mov.w	r3, #80	; 0x50
 800529c:	f383 8811 	msr	BASEPRI, r3
 80052a0:	f3bf 8f6f 	isb	sy
 80052a4:	f3bf 8f4f 	dsb	sy
 80052a8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80052aa:	bf00      	nop
 80052ac:	e7fe      	b.n	80052ac <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80052ae:	683b      	ldr	r3, [r7, #0]
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d10a      	bne.n	80052ca <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80052b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052b8:	f383 8811 	msr	BASEPRI, r3
 80052bc:	f3bf 8f6f 	isb	sy
 80052c0:	f3bf 8f4f 	dsb	sy
 80052c4:	627b      	str	r3, [r7, #36]	; 0x24
}
 80052c6:	bf00      	nop
 80052c8:	e7fe      	b.n	80052c8 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d002      	beq.n	80052d6 <xQueueGenericCreateStatic+0x52>
 80052d0:	68bb      	ldr	r3, [r7, #8]
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d001      	beq.n	80052da <xQueueGenericCreateStatic+0x56>
 80052d6:	2301      	movs	r3, #1
 80052d8:	e000      	b.n	80052dc <xQueueGenericCreateStatic+0x58>
 80052da:	2300      	movs	r3, #0
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d10a      	bne.n	80052f6 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80052e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052e4:	f383 8811 	msr	BASEPRI, r3
 80052e8:	f3bf 8f6f 	isb	sy
 80052ec:	f3bf 8f4f 	dsb	sy
 80052f0:	623b      	str	r3, [r7, #32]
}
 80052f2:	bf00      	nop
 80052f4:	e7fe      	b.n	80052f4 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d102      	bne.n	8005302 <xQueueGenericCreateStatic+0x7e>
 80052fc:	68bb      	ldr	r3, [r7, #8]
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d101      	bne.n	8005306 <xQueueGenericCreateStatic+0x82>
 8005302:	2301      	movs	r3, #1
 8005304:	e000      	b.n	8005308 <xQueueGenericCreateStatic+0x84>
 8005306:	2300      	movs	r3, #0
 8005308:	2b00      	cmp	r3, #0
 800530a:	d10a      	bne.n	8005322 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800530c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005310:	f383 8811 	msr	BASEPRI, r3
 8005314:	f3bf 8f6f 	isb	sy
 8005318:	f3bf 8f4f 	dsb	sy
 800531c:	61fb      	str	r3, [r7, #28]
}
 800531e:	bf00      	nop
 8005320:	e7fe      	b.n	8005320 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005322:	2350      	movs	r3, #80	; 0x50
 8005324:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005326:	697b      	ldr	r3, [r7, #20]
 8005328:	2b50      	cmp	r3, #80	; 0x50
 800532a:	d00a      	beq.n	8005342 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800532c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005330:	f383 8811 	msr	BASEPRI, r3
 8005334:	f3bf 8f6f 	isb	sy
 8005338:	f3bf 8f4f 	dsb	sy
 800533c:	61bb      	str	r3, [r7, #24]
}
 800533e:	bf00      	nop
 8005340:	e7fe      	b.n	8005340 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005342:	683b      	ldr	r3, [r7, #0]
 8005344:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8005346:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005348:	2b00      	cmp	r3, #0
 800534a:	d00d      	beq.n	8005368 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800534c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800534e:	2201      	movs	r2, #1
 8005350:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005354:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8005358:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800535a:	9300      	str	r3, [sp, #0]
 800535c:	4613      	mov	r3, r2
 800535e:	687a      	ldr	r2, [r7, #4]
 8005360:	68b9      	ldr	r1, [r7, #8]
 8005362:	68f8      	ldr	r0, [r7, #12]
 8005364:	f000 f843 	bl	80053ee <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8005368:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800536a:	4618      	mov	r0, r3
 800536c:	3730      	adds	r7, #48	; 0x30
 800536e:	46bd      	mov	sp, r7
 8005370:	bd80      	pop	{r7, pc}

08005372 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005372:	b580      	push	{r7, lr}
 8005374:	b08a      	sub	sp, #40	; 0x28
 8005376:	af02      	add	r7, sp, #8
 8005378:	60f8      	str	r0, [r7, #12]
 800537a:	60b9      	str	r1, [r7, #8]
 800537c:	4613      	mov	r3, r2
 800537e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	2b00      	cmp	r3, #0
 8005384:	d10a      	bne.n	800539c <xQueueGenericCreate+0x2a>
	__asm volatile
 8005386:	f04f 0350 	mov.w	r3, #80	; 0x50
 800538a:	f383 8811 	msr	BASEPRI, r3
 800538e:	f3bf 8f6f 	isb	sy
 8005392:	f3bf 8f4f 	dsb	sy
 8005396:	613b      	str	r3, [r7, #16]
}
 8005398:	bf00      	nop
 800539a:	e7fe      	b.n	800539a <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800539c:	68bb      	ldr	r3, [r7, #8]
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d102      	bne.n	80053a8 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80053a2:	2300      	movs	r3, #0
 80053a4:	61fb      	str	r3, [r7, #28]
 80053a6:	e004      	b.n	80053b2 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	68ba      	ldr	r2, [r7, #8]
 80053ac:	fb02 f303 	mul.w	r3, r2, r3
 80053b0:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 80053b2:	69fb      	ldr	r3, [r7, #28]
 80053b4:	3350      	adds	r3, #80	; 0x50
 80053b6:	4618      	mov	r0, r3
 80053b8:	f002 f936 	bl	8007628 <pvPortMalloc>
 80053bc:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80053be:	69bb      	ldr	r3, [r7, #24]
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d00f      	beq.n	80053e4 <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 80053c4:	69bb      	ldr	r3, [r7, #24]
 80053c6:	3350      	adds	r3, #80	; 0x50
 80053c8:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80053ca:	69bb      	ldr	r3, [r7, #24]
 80053cc:	2200      	movs	r2, #0
 80053ce:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80053d2:	79fa      	ldrb	r2, [r7, #7]
 80053d4:	69bb      	ldr	r3, [r7, #24]
 80053d6:	9300      	str	r3, [sp, #0]
 80053d8:	4613      	mov	r3, r2
 80053da:	697a      	ldr	r2, [r7, #20]
 80053dc:	68b9      	ldr	r1, [r7, #8]
 80053de:	68f8      	ldr	r0, [r7, #12]
 80053e0:	f000 f805 	bl	80053ee <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80053e4:	69bb      	ldr	r3, [r7, #24]
	}
 80053e6:	4618      	mov	r0, r3
 80053e8:	3720      	adds	r7, #32
 80053ea:	46bd      	mov	sp, r7
 80053ec:	bd80      	pop	{r7, pc}

080053ee <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80053ee:	b580      	push	{r7, lr}
 80053f0:	b084      	sub	sp, #16
 80053f2:	af00      	add	r7, sp, #0
 80053f4:	60f8      	str	r0, [r7, #12]
 80053f6:	60b9      	str	r1, [r7, #8]
 80053f8:	607a      	str	r2, [r7, #4]
 80053fa:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80053fc:	68bb      	ldr	r3, [r7, #8]
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d103      	bne.n	800540a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005402:	69bb      	ldr	r3, [r7, #24]
 8005404:	69ba      	ldr	r2, [r7, #24]
 8005406:	601a      	str	r2, [r3, #0]
 8005408:	e002      	b.n	8005410 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800540a:	69bb      	ldr	r3, [r7, #24]
 800540c:	687a      	ldr	r2, [r7, #4]
 800540e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005410:	69bb      	ldr	r3, [r7, #24]
 8005412:	68fa      	ldr	r2, [r7, #12]
 8005414:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005416:	69bb      	ldr	r3, [r7, #24]
 8005418:	68ba      	ldr	r2, [r7, #8]
 800541a:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800541c:	2101      	movs	r1, #1
 800541e:	69b8      	ldr	r0, [r7, #24]
 8005420:	f7ff fec8 	bl	80051b4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005424:	69bb      	ldr	r3, [r7, #24]
 8005426:	78fa      	ldrb	r2, [r7, #3]
 8005428:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800542c:	bf00      	nop
 800542e:	3710      	adds	r7, #16
 8005430:	46bd      	mov	sp, r7
 8005432:	bd80      	pop	{r7, pc}

08005434 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8005434:	b580      	push	{r7, lr}
 8005436:	b08a      	sub	sp, #40	; 0x28
 8005438:	af02      	add	r7, sp, #8
 800543a:	60f8      	str	r0, [r7, #12]
 800543c:	60b9      	str	r1, [r7, #8]
 800543e:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	2b00      	cmp	r3, #0
 8005444:	d10a      	bne.n	800545c <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8005446:	f04f 0350 	mov.w	r3, #80	; 0x50
 800544a:	f383 8811 	msr	BASEPRI, r3
 800544e:	f3bf 8f6f 	isb	sy
 8005452:	f3bf 8f4f 	dsb	sy
 8005456:	61bb      	str	r3, [r7, #24]
}
 8005458:	bf00      	nop
 800545a:	e7fe      	b.n	800545a <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800545c:	68ba      	ldr	r2, [r7, #8]
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	429a      	cmp	r2, r3
 8005462:	d90a      	bls.n	800547a <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8005464:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005468:	f383 8811 	msr	BASEPRI, r3
 800546c:	f3bf 8f6f 	isb	sy
 8005470:	f3bf 8f4f 	dsb	sy
 8005474:	617b      	str	r3, [r7, #20]
}
 8005476:	bf00      	nop
 8005478:	e7fe      	b.n	8005478 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800547a:	2302      	movs	r3, #2
 800547c:	9300      	str	r3, [sp, #0]
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	2200      	movs	r2, #0
 8005482:	2100      	movs	r1, #0
 8005484:	68f8      	ldr	r0, [r7, #12]
 8005486:	f7ff fefd 	bl	8005284 <xQueueGenericCreateStatic>
 800548a:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800548c:	69fb      	ldr	r3, [r7, #28]
 800548e:	2b00      	cmp	r3, #0
 8005490:	d002      	beq.n	8005498 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8005492:	69fb      	ldr	r3, [r7, #28]
 8005494:	68ba      	ldr	r2, [r7, #8]
 8005496:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8005498:	69fb      	ldr	r3, [r7, #28]
	}
 800549a:	4618      	mov	r0, r3
 800549c:	3720      	adds	r7, #32
 800549e:	46bd      	mov	sp, r7
 80054a0:	bd80      	pop	{r7, pc}

080054a2 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 80054a2:	b580      	push	{r7, lr}
 80054a4:	b086      	sub	sp, #24
 80054a6:	af00      	add	r7, sp, #0
 80054a8:	6078      	str	r0, [r7, #4]
 80054aa:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d10a      	bne.n	80054c8 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 80054b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054b6:	f383 8811 	msr	BASEPRI, r3
 80054ba:	f3bf 8f6f 	isb	sy
 80054be:	f3bf 8f4f 	dsb	sy
 80054c2:	613b      	str	r3, [r7, #16]
}
 80054c4:	bf00      	nop
 80054c6:	e7fe      	b.n	80054c6 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 80054c8:	683a      	ldr	r2, [r7, #0]
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	429a      	cmp	r2, r3
 80054ce:	d90a      	bls.n	80054e6 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 80054d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054d4:	f383 8811 	msr	BASEPRI, r3
 80054d8:	f3bf 8f6f 	isb	sy
 80054dc:	f3bf 8f4f 	dsb	sy
 80054e0:	60fb      	str	r3, [r7, #12]
}
 80054e2:	bf00      	nop
 80054e4:	e7fe      	b.n	80054e4 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80054e6:	2202      	movs	r2, #2
 80054e8:	2100      	movs	r1, #0
 80054ea:	6878      	ldr	r0, [r7, #4]
 80054ec:	f7ff ff41 	bl	8005372 <xQueueGenericCreate>
 80054f0:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 80054f2:	697b      	ldr	r3, [r7, #20]
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d002      	beq.n	80054fe <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80054f8:	697b      	ldr	r3, [r7, #20]
 80054fa:	683a      	ldr	r2, [r7, #0]
 80054fc:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80054fe:	697b      	ldr	r3, [r7, #20]
	}
 8005500:	4618      	mov	r0, r3
 8005502:	3718      	adds	r7, #24
 8005504:	46bd      	mov	sp, r7
 8005506:	bd80      	pop	{r7, pc}

08005508 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005508:	b580      	push	{r7, lr}
 800550a:	b08e      	sub	sp, #56	; 0x38
 800550c:	af00      	add	r7, sp, #0
 800550e:	60f8      	str	r0, [r7, #12]
 8005510:	60b9      	str	r1, [r7, #8]
 8005512:	607a      	str	r2, [r7, #4]
 8005514:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005516:	2300      	movs	r3, #0
 8005518:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800551e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005520:	2b00      	cmp	r3, #0
 8005522:	d10a      	bne.n	800553a <xQueueGenericSend+0x32>
	__asm volatile
 8005524:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005528:	f383 8811 	msr	BASEPRI, r3
 800552c:	f3bf 8f6f 	isb	sy
 8005530:	f3bf 8f4f 	dsb	sy
 8005534:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005536:	bf00      	nop
 8005538:	e7fe      	b.n	8005538 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800553a:	68bb      	ldr	r3, [r7, #8]
 800553c:	2b00      	cmp	r3, #0
 800553e:	d103      	bne.n	8005548 <xQueueGenericSend+0x40>
 8005540:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005542:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005544:	2b00      	cmp	r3, #0
 8005546:	d101      	bne.n	800554c <xQueueGenericSend+0x44>
 8005548:	2301      	movs	r3, #1
 800554a:	e000      	b.n	800554e <xQueueGenericSend+0x46>
 800554c:	2300      	movs	r3, #0
 800554e:	2b00      	cmp	r3, #0
 8005550:	d10a      	bne.n	8005568 <xQueueGenericSend+0x60>
	__asm volatile
 8005552:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005556:	f383 8811 	msr	BASEPRI, r3
 800555a:	f3bf 8f6f 	isb	sy
 800555e:	f3bf 8f4f 	dsb	sy
 8005562:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005564:	bf00      	nop
 8005566:	e7fe      	b.n	8005566 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005568:	683b      	ldr	r3, [r7, #0]
 800556a:	2b02      	cmp	r3, #2
 800556c:	d103      	bne.n	8005576 <xQueueGenericSend+0x6e>
 800556e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005570:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005572:	2b01      	cmp	r3, #1
 8005574:	d101      	bne.n	800557a <xQueueGenericSend+0x72>
 8005576:	2301      	movs	r3, #1
 8005578:	e000      	b.n	800557c <xQueueGenericSend+0x74>
 800557a:	2300      	movs	r3, #0
 800557c:	2b00      	cmp	r3, #0
 800557e:	d10a      	bne.n	8005596 <xQueueGenericSend+0x8e>
	__asm volatile
 8005580:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005584:	f383 8811 	msr	BASEPRI, r3
 8005588:	f3bf 8f6f 	isb	sy
 800558c:	f3bf 8f4f 	dsb	sy
 8005590:	623b      	str	r3, [r7, #32]
}
 8005592:	bf00      	nop
 8005594:	e7fe      	b.n	8005594 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005596:	f001 fa07 	bl	80069a8 <xTaskGetSchedulerState>
 800559a:	4603      	mov	r3, r0
 800559c:	2b00      	cmp	r3, #0
 800559e:	d102      	bne.n	80055a6 <xQueueGenericSend+0x9e>
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d101      	bne.n	80055aa <xQueueGenericSend+0xa2>
 80055a6:	2301      	movs	r3, #1
 80055a8:	e000      	b.n	80055ac <xQueueGenericSend+0xa4>
 80055aa:	2300      	movs	r3, #0
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d10a      	bne.n	80055c6 <xQueueGenericSend+0xbe>
	__asm volatile
 80055b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055b4:	f383 8811 	msr	BASEPRI, r3
 80055b8:	f3bf 8f6f 	isb	sy
 80055bc:	f3bf 8f4f 	dsb	sy
 80055c0:	61fb      	str	r3, [r7, #28]
}
 80055c2:	bf00      	nop
 80055c4:	e7fe      	b.n	80055c4 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80055c6:	f001 ff0d 	bl	80073e4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80055ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80055ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055d2:	429a      	cmp	r2, r3
 80055d4:	d302      	bcc.n	80055dc <xQueueGenericSend+0xd4>
 80055d6:	683b      	ldr	r3, [r7, #0]
 80055d8:	2b02      	cmp	r3, #2
 80055da:	d129      	bne.n	8005630 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80055dc:	683a      	ldr	r2, [r7, #0]
 80055de:	68b9      	ldr	r1, [r7, #8]
 80055e0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80055e2:	f000 fa2a 	bl	8005a3a <prvCopyDataToQueue>
 80055e6:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80055e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d010      	beq.n	8005612 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80055f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055f2:	3324      	adds	r3, #36	; 0x24
 80055f4:	4618      	mov	r0, r3
 80055f6:	f001 f813 	bl	8006620 <xTaskRemoveFromEventList>
 80055fa:	4603      	mov	r3, r0
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d013      	beq.n	8005628 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005600:	4b3f      	ldr	r3, [pc, #252]	; (8005700 <xQueueGenericSend+0x1f8>)
 8005602:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005606:	601a      	str	r2, [r3, #0]
 8005608:	f3bf 8f4f 	dsb	sy
 800560c:	f3bf 8f6f 	isb	sy
 8005610:	e00a      	b.n	8005628 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005612:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005614:	2b00      	cmp	r3, #0
 8005616:	d007      	beq.n	8005628 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005618:	4b39      	ldr	r3, [pc, #228]	; (8005700 <xQueueGenericSend+0x1f8>)
 800561a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800561e:	601a      	str	r2, [r3, #0]
 8005620:	f3bf 8f4f 	dsb	sy
 8005624:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005628:	f001 ff0c 	bl	8007444 <vPortExitCritical>
				return pdPASS;
 800562c:	2301      	movs	r3, #1
 800562e:	e063      	b.n	80056f8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	2b00      	cmp	r3, #0
 8005634:	d103      	bne.n	800563e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005636:	f001 ff05 	bl	8007444 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800563a:	2300      	movs	r3, #0
 800563c:	e05c      	b.n	80056f8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800563e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005640:	2b00      	cmp	r3, #0
 8005642:	d106      	bne.n	8005652 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005644:	f107 0314 	add.w	r3, r7, #20
 8005648:	4618      	mov	r0, r3
 800564a:	f001 f84d 	bl	80066e8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800564e:	2301      	movs	r3, #1
 8005650:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005652:	f001 fef7 	bl	8007444 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005656:	f000 fdbb 	bl	80061d0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800565a:	f001 fec3 	bl	80073e4 <vPortEnterCritical>
 800565e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005660:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005664:	b25b      	sxtb	r3, r3
 8005666:	f1b3 3fff 	cmp.w	r3, #4294967295
 800566a:	d103      	bne.n	8005674 <xQueueGenericSend+0x16c>
 800566c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800566e:	2200      	movs	r2, #0
 8005670:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005674:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005676:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800567a:	b25b      	sxtb	r3, r3
 800567c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005680:	d103      	bne.n	800568a <xQueueGenericSend+0x182>
 8005682:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005684:	2200      	movs	r2, #0
 8005686:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800568a:	f001 fedb 	bl	8007444 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800568e:	1d3a      	adds	r2, r7, #4
 8005690:	f107 0314 	add.w	r3, r7, #20
 8005694:	4611      	mov	r1, r2
 8005696:	4618      	mov	r0, r3
 8005698:	f001 f83c 	bl	8006714 <xTaskCheckForTimeOut>
 800569c:	4603      	mov	r3, r0
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d124      	bne.n	80056ec <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80056a2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80056a4:	f000 fac1 	bl	8005c2a <prvIsQueueFull>
 80056a8:	4603      	mov	r3, r0
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d018      	beq.n	80056e0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80056ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056b0:	3310      	adds	r3, #16
 80056b2:	687a      	ldr	r2, [r7, #4]
 80056b4:	4611      	mov	r1, r2
 80056b6:	4618      	mov	r0, r3
 80056b8:	f000 ff62 	bl	8006580 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80056bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80056be:	f000 fa4c 	bl	8005b5a <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80056c2:	f000 fd93 	bl	80061ec <xTaskResumeAll>
 80056c6:	4603      	mov	r3, r0
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	f47f af7c 	bne.w	80055c6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80056ce:	4b0c      	ldr	r3, [pc, #48]	; (8005700 <xQueueGenericSend+0x1f8>)
 80056d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80056d4:	601a      	str	r2, [r3, #0]
 80056d6:	f3bf 8f4f 	dsb	sy
 80056da:	f3bf 8f6f 	isb	sy
 80056de:	e772      	b.n	80055c6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80056e0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80056e2:	f000 fa3a 	bl	8005b5a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80056e6:	f000 fd81 	bl	80061ec <xTaskResumeAll>
 80056ea:	e76c      	b.n	80055c6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80056ec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80056ee:	f000 fa34 	bl	8005b5a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80056f2:	f000 fd7b 	bl	80061ec <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80056f6:	2300      	movs	r3, #0
		}
	}
}
 80056f8:	4618      	mov	r0, r3
 80056fa:	3738      	adds	r7, #56	; 0x38
 80056fc:	46bd      	mov	sp, r7
 80056fe:	bd80      	pop	{r7, pc}
 8005700:	e000ed04 	.word	0xe000ed04

08005704 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005704:	b580      	push	{r7, lr}
 8005706:	b08e      	sub	sp, #56	; 0x38
 8005708:	af00      	add	r7, sp, #0
 800570a:	60f8      	str	r0, [r7, #12]
 800570c:	60b9      	str	r1, [r7, #8]
 800570e:	607a      	str	r2, [r7, #4]
 8005710:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005716:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005718:	2b00      	cmp	r3, #0
 800571a:	d10a      	bne.n	8005732 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800571c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005720:	f383 8811 	msr	BASEPRI, r3
 8005724:	f3bf 8f6f 	isb	sy
 8005728:	f3bf 8f4f 	dsb	sy
 800572c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800572e:	bf00      	nop
 8005730:	e7fe      	b.n	8005730 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005732:	68bb      	ldr	r3, [r7, #8]
 8005734:	2b00      	cmp	r3, #0
 8005736:	d103      	bne.n	8005740 <xQueueGenericSendFromISR+0x3c>
 8005738:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800573a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800573c:	2b00      	cmp	r3, #0
 800573e:	d101      	bne.n	8005744 <xQueueGenericSendFromISR+0x40>
 8005740:	2301      	movs	r3, #1
 8005742:	e000      	b.n	8005746 <xQueueGenericSendFromISR+0x42>
 8005744:	2300      	movs	r3, #0
 8005746:	2b00      	cmp	r3, #0
 8005748:	d10a      	bne.n	8005760 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800574a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800574e:	f383 8811 	msr	BASEPRI, r3
 8005752:	f3bf 8f6f 	isb	sy
 8005756:	f3bf 8f4f 	dsb	sy
 800575a:	623b      	str	r3, [r7, #32]
}
 800575c:	bf00      	nop
 800575e:	e7fe      	b.n	800575e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005760:	683b      	ldr	r3, [r7, #0]
 8005762:	2b02      	cmp	r3, #2
 8005764:	d103      	bne.n	800576e <xQueueGenericSendFromISR+0x6a>
 8005766:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005768:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800576a:	2b01      	cmp	r3, #1
 800576c:	d101      	bne.n	8005772 <xQueueGenericSendFromISR+0x6e>
 800576e:	2301      	movs	r3, #1
 8005770:	e000      	b.n	8005774 <xQueueGenericSendFromISR+0x70>
 8005772:	2300      	movs	r3, #0
 8005774:	2b00      	cmp	r3, #0
 8005776:	d10a      	bne.n	800578e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8005778:	f04f 0350 	mov.w	r3, #80	; 0x50
 800577c:	f383 8811 	msr	BASEPRI, r3
 8005780:	f3bf 8f6f 	isb	sy
 8005784:	f3bf 8f4f 	dsb	sy
 8005788:	61fb      	str	r3, [r7, #28]
}
 800578a:	bf00      	nop
 800578c:	e7fe      	b.n	800578c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800578e:	f001 ff0b 	bl	80075a8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005792:	f3ef 8211 	mrs	r2, BASEPRI
 8005796:	f04f 0350 	mov.w	r3, #80	; 0x50
 800579a:	f383 8811 	msr	BASEPRI, r3
 800579e:	f3bf 8f6f 	isb	sy
 80057a2:	f3bf 8f4f 	dsb	sy
 80057a6:	61ba      	str	r2, [r7, #24]
 80057a8:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80057aa:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80057ac:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80057ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80057b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057b6:	429a      	cmp	r2, r3
 80057b8:	d302      	bcc.n	80057c0 <xQueueGenericSendFromISR+0xbc>
 80057ba:	683b      	ldr	r3, [r7, #0]
 80057bc:	2b02      	cmp	r3, #2
 80057be:	d12c      	bne.n	800581a <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80057c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057c2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80057c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80057ca:	683a      	ldr	r2, [r7, #0]
 80057cc:	68b9      	ldr	r1, [r7, #8]
 80057ce:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80057d0:	f000 f933 	bl	8005a3a <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80057d4:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80057d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057dc:	d112      	bne.n	8005804 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80057de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d016      	beq.n	8005814 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80057e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057e8:	3324      	adds	r3, #36	; 0x24
 80057ea:	4618      	mov	r0, r3
 80057ec:	f000 ff18 	bl	8006620 <xTaskRemoveFromEventList>
 80057f0:	4603      	mov	r3, r0
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d00e      	beq.n	8005814 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d00b      	beq.n	8005814 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2201      	movs	r2, #1
 8005800:	601a      	str	r2, [r3, #0]
 8005802:	e007      	b.n	8005814 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005804:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005808:	3301      	adds	r3, #1
 800580a:	b2db      	uxtb	r3, r3
 800580c:	b25a      	sxtb	r2, r3
 800580e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005810:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005814:	2301      	movs	r3, #1
 8005816:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8005818:	e001      	b.n	800581e <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800581a:	2300      	movs	r3, #0
 800581c:	637b      	str	r3, [r7, #52]	; 0x34
 800581e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005820:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005822:	693b      	ldr	r3, [r7, #16]
 8005824:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005828:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800582a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800582c:	4618      	mov	r0, r3
 800582e:	3738      	adds	r7, #56	; 0x38
 8005830:	46bd      	mov	sp, r7
 8005832:	bd80      	pop	{r7, pc}

08005834 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005834:	b580      	push	{r7, lr}
 8005836:	b08c      	sub	sp, #48	; 0x30
 8005838:	af00      	add	r7, sp, #0
 800583a:	60f8      	str	r0, [r7, #12]
 800583c:	60b9      	str	r1, [r7, #8]
 800583e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005840:	2300      	movs	r3, #0
 8005842:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005848:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800584a:	2b00      	cmp	r3, #0
 800584c:	d10a      	bne.n	8005864 <xQueueReceive+0x30>
	__asm volatile
 800584e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005852:	f383 8811 	msr	BASEPRI, r3
 8005856:	f3bf 8f6f 	isb	sy
 800585a:	f3bf 8f4f 	dsb	sy
 800585e:	623b      	str	r3, [r7, #32]
}
 8005860:	bf00      	nop
 8005862:	e7fe      	b.n	8005862 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005864:	68bb      	ldr	r3, [r7, #8]
 8005866:	2b00      	cmp	r3, #0
 8005868:	d103      	bne.n	8005872 <xQueueReceive+0x3e>
 800586a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800586c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800586e:	2b00      	cmp	r3, #0
 8005870:	d101      	bne.n	8005876 <xQueueReceive+0x42>
 8005872:	2301      	movs	r3, #1
 8005874:	e000      	b.n	8005878 <xQueueReceive+0x44>
 8005876:	2300      	movs	r3, #0
 8005878:	2b00      	cmp	r3, #0
 800587a:	d10a      	bne.n	8005892 <xQueueReceive+0x5e>
	__asm volatile
 800587c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005880:	f383 8811 	msr	BASEPRI, r3
 8005884:	f3bf 8f6f 	isb	sy
 8005888:	f3bf 8f4f 	dsb	sy
 800588c:	61fb      	str	r3, [r7, #28]
}
 800588e:	bf00      	nop
 8005890:	e7fe      	b.n	8005890 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005892:	f001 f889 	bl	80069a8 <xTaskGetSchedulerState>
 8005896:	4603      	mov	r3, r0
 8005898:	2b00      	cmp	r3, #0
 800589a:	d102      	bne.n	80058a2 <xQueueReceive+0x6e>
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d101      	bne.n	80058a6 <xQueueReceive+0x72>
 80058a2:	2301      	movs	r3, #1
 80058a4:	e000      	b.n	80058a8 <xQueueReceive+0x74>
 80058a6:	2300      	movs	r3, #0
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d10a      	bne.n	80058c2 <xQueueReceive+0x8e>
	__asm volatile
 80058ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058b0:	f383 8811 	msr	BASEPRI, r3
 80058b4:	f3bf 8f6f 	isb	sy
 80058b8:	f3bf 8f4f 	dsb	sy
 80058bc:	61bb      	str	r3, [r7, #24]
}
 80058be:	bf00      	nop
 80058c0:	e7fe      	b.n	80058c0 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80058c2:	f001 fd8f 	bl	80073e4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80058c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058ca:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80058cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d01f      	beq.n	8005912 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80058d2:	68b9      	ldr	r1, [r7, #8]
 80058d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80058d6:	f000 f91a 	bl	8005b0e <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80058da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058dc:	1e5a      	subs	r2, r3, #1
 80058de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058e0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80058e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058e4:	691b      	ldr	r3, [r3, #16]
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d00f      	beq.n	800590a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80058ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058ec:	3310      	adds	r3, #16
 80058ee:	4618      	mov	r0, r3
 80058f0:	f000 fe96 	bl	8006620 <xTaskRemoveFromEventList>
 80058f4:	4603      	mov	r3, r0
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d007      	beq.n	800590a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80058fa:	4b3d      	ldr	r3, [pc, #244]	; (80059f0 <xQueueReceive+0x1bc>)
 80058fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005900:	601a      	str	r2, [r3, #0]
 8005902:	f3bf 8f4f 	dsb	sy
 8005906:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800590a:	f001 fd9b 	bl	8007444 <vPortExitCritical>
				return pdPASS;
 800590e:	2301      	movs	r3, #1
 8005910:	e069      	b.n	80059e6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	2b00      	cmp	r3, #0
 8005916:	d103      	bne.n	8005920 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005918:	f001 fd94 	bl	8007444 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800591c:	2300      	movs	r3, #0
 800591e:	e062      	b.n	80059e6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005920:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005922:	2b00      	cmp	r3, #0
 8005924:	d106      	bne.n	8005934 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005926:	f107 0310 	add.w	r3, r7, #16
 800592a:	4618      	mov	r0, r3
 800592c:	f000 fedc 	bl	80066e8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005930:	2301      	movs	r3, #1
 8005932:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005934:	f001 fd86 	bl	8007444 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005938:	f000 fc4a 	bl	80061d0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800593c:	f001 fd52 	bl	80073e4 <vPortEnterCritical>
 8005940:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005942:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005946:	b25b      	sxtb	r3, r3
 8005948:	f1b3 3fff 	cmp.w	r3, #4294967295
 800594c:	d103      	bne.n	8005956 <xQueueReceive+0x122>
 800594e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005950:	2200      	movs	r2, #0
 8005952:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005956:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005958:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800595c:	b25b      	sxtb	r3, r3
 800595e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005962:	d103      	bne.n	800596c <xQueueReceive+0x138>
 8005964:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005966:	2200      	movs	r2, #0
 8005968:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800596c:	f001 fd6a 	bl	8007444 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005970:	1d3a      	adds	r2, r7, #4
 8005972:	f107 0310 	add.w	r3, r7, #16
 8005976:	4611      	mov	r1, r2
 8005978:	4618      	mov	r0, r3
 800597a:	f000 fecb 	bl	8006714 <xTaskCheckForTimeOut>
 800597e:	4603      	mov	r3, r0
 8005980:	2b00      	cmp	r3, #0
 8005982:	d123      	bne.n	80059cc <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005984:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005986:	f000 f93a 	bl	8005bfe <prvIsQueueEmpty>
 800598a:	4603      	mov	r3, r0
 800598c:	2b00      	cmp	r3, #0
 800598e:	d017      	beq.n	80059c0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005990:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005992:	3324      	adds	r3, #36	; 0x24
 8005994:	687a      	ldr	r2, [r7, #4]
 8005996:	4611      	mov	r1, r2
 8005998:	4618      	mov	r0, r3
 800599a:	f000 fdf1 	bl	8006580 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800599e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80059a0:	f000 f8db 	bl	8005b5a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80059a4:	f000 fc22 	bl	80061ec <xTaskResumeAll>
 80059a8:	4603      	mov	r3, r0
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d189      	bne.n	80058c2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80059ae:	4b10      	ldr	r3, [pc, #64]	; (80059f0 <xQueueReceive+0x1bc>)
 80059b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80059b4:	601a      	str	r2, [r3, #0]
 80059b6:	f3bf 8f4f 	dsb	sy
 80059ba:	f3bf 8f6f 	isb	sy
 80059be:	e780      	b.n	80058c2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80059c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80059c2:	f000 f8ca 	bl	8005b5a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80059c6:	f000 fc11 	bl	80061ec <xTaskResumeAll>
 80059ca:	e77a      	b.n	80058c2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80059cc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80059ce:	f000 f8c4 	bl	8005b5a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80059d2:	f000 fc0b 	bl	80061ec <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80059d6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80059d8:	f000 f911 	bl	8005bfe <prvIsQueueEmpty>
 80059dc:	4603      	mov	r3, r0
 80059de:	2b00      	cmp	r3, #0
 80059e0:	f43f af6f 	beq.w	80058c2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80059e4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80059e6:	4618      	mov	r0, r3
 80059e8:	3730      	adds	r7, #48	; 0x30
 80059ea:	46bd      	mov	sp, r7
 80059ec:	bd80      	pop	{r7, pc}
 80059ee:	bf00      	nop
 80059f0:	e000ed04 	.word	0xe000ed04

080059f4 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 80059f4:	b580      	push	{r7, lr}
 80059f6:	b084      	sub	sp, #16
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d10a      	bne.n	8005a1c <vQueueDelete+0x28>
	__asm volatile
 8005a06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a0a:	f383 8811 	msr	BASEPRI, r3
 8005a0e:	f3bf 8f6f 	isb	sy
 8005a12:	f3bf 8f4f 	dsb	sy
 8005a16:	60bb      	str	r3, [r7, #8]
}
 8005a18:	bf00      	nop
 8005a1a:	e7fe      	b.n	8005a1a <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8005a1c:	68f8      	ldr	r0, [r7, #12]
 8005a1e:	f000 f947 	bl	8005cb0 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d102      	bne.n	8005a32 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8005a2c:	68f8      	ldr	r0, [r7, #12]
 8005a2e:	f001 febf 	bl	80077b0 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8005a32:	bf00      	nop
 8005a34:	3710      	adds	r7, #16
 8005a36:	46bd      	mov	sp, r7
 8005a38:	bd80      	pop	{r7, pc}

08005a3a <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005a3a:	b580      	push	{r7, lr}
 8005a3c:	b086      	sub	sp, #24
 8005a3e:	af00      	add	r7, sp, #0
 8005a40:	60f8      	str	r0, [r7, #12]
 8005a42:	60b9      	str	r1, [r7, #8]
 8005a44:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005a46:	2300      	movs	r3, #0
 8005a48:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a4e:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d10d      	bne.n	8005a74 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d14d      	bne.n	8005afc <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	685b      	ldr	r3, [r3, #4]
 8005a64:	4618      	mov	r0, r3
 8005a66:	f000 ffbd 	bl	80069e4 <xTaskPriorityDisinherit>
 8005a6a:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	2200      	movs	r2, #0
 8005a70:	605a      	str	r2, [r3, #4]
 8005a72:	e043      	b.n	8005afc <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d119      	bne.n	8005aae <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	6898      	ldr	r0, [r3, #8]
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a82:	461a      	mov	r2, r3
 8005a84:	68b9      	ldr	r1, [r7, #8]
 8005a86:	f001 ffd5 	bl	8007a34 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	689a      	ldr	r2, [r3, #8]
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a92:	441a      	add	r2, r3
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	689a      	ldr	r2, [r3, #8]
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	685b      	ldr	r3, [r3, #4]
 8005aa0:	429a      	cmp	r2, r3
 8005aa2:	d32b      	bcc.n	8005afc <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	681a      	ldr	r2, [r3, #0]
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	609a      	str	r2, [r3, #8]
 8005aac:	e026      	b.n	8005afc <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	68d8      	ldr	r0, [r3, #12]
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ab6:	461a      	mov	r2, r3
 8005ab8:	68b9      	ldr	r1, [r7, #8]
 8005aba:	f001 ffbb 	bl	8007a34 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	68da      	ldr	r2, [r3, #12]
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ac6:	425b      	negs	r3, r3
 8005ac8:	441a      	add	r2, r3
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	68da      	ldr	r2, [r3, #12]
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	429a      	cmp	r2, r3
 8005ad8:	d207      	bcs.n	8005aea <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	685a      	ldr	r2, [r3, #4]
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ae2:	425b      	negs	r3, r3
 8005ae4:	441a      	add	r2, r3
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	2b02      	cmp	r3, #2
 8005aee:	d105      	bne.n	8005afc <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005af0:	693b      	ldr	r3, [r7, #16]
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d002      	beq.n	8005afc <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005af6:	693b      	ldr	r3, [r7, #16]
 8005af8:	3b01      	subs	r3, #1
 8005afa:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005afc:	693b      	ldr	r3, [r7, #16]
 8005afe:	1c5a      	adds	r2, r3, #1
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005b04:	697b      	ldr	r3, [r7, #20]
}
 8005b06:	4618      	mov	r0, r3
 8005b08:	3718      	adds	r7, #24
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	bd80      	pop	{r7, pc}

08005b0e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005b0e:	b580      	push	{r7, lr}
 8005b10:	b082      	sub	sp, #8
 8005b12:	af00      	add	r7, sp, #0
 8005b14:	6078      	str	r0, [r7, #4]
 8005b16:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d018      	beq.n	8005b52 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	68da      	ldr	r2, [r3, #12]
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b28:	441a      	add	r2, r3
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	68da      	ldr	r2, [r3, #12]
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	685b      	ldr	r3, [r3, #4]
 8005b36:	429a      	cmp	r2, r3
 8005b38:	d303      	bcc.n	8005b42 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681a      	ldr	r2, [r3, #0]
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	68d9      	ldr	r1, [r3, #12]
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b4a:	461a      	mov	r2, r3
 8005b4c:	6838      	ldr	r0, [r7, #0]
 8005b4e:	f001 ff71 	bl	8007a34 <memcpy>
	}
}
 8005b52:	bf00      	nop
 8005b54:	3708      	adds	r7, #8
 8005b56:	46bd      	mov	sp, r7
 8005b58:	bd80      	pop	{r7, pc}

08005b5a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005b5a:	b580      	push	{r7, lr}
 8005b5c:	b084      	sub	sp, #16
 8005b5e:	af00      	add	r7, sp, #0
 8005b60:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005b62:	f001 fc3f 	bl	80073e4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005b6c:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005b6e:	e011      	b.n	8005b94 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d012      	beq.n	8005b9e <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	3324      	adds	r3, #36	; 0x24
 8005b7c:	4618      	mov	r0, r3
 8005b7e:	f000 fd4f 	bl	8006620 <xTaskRemoveFromEventList>
 8005b82:	4603      	mov	r3, r0
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d001      	beq.n	8005b8c <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005b88:	f000 fe26 	bl	80067d8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005b8c:	7bfb      	ldrb	r3, [r7, #15]
 8005b8e:	3b01      	subs	r3, #1
 8005b90:	b2db      	uxtb	r3, r3
 8005b92:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005b94:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	dce9      	bgt.n	8005b70 <prvUnlockQueue+0x16>
 8005b9c:	e000      	b.n	8005ba0 <prvUnlockQueue+0x46>
					break;
 8005b9e:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	22ff      	movs	r2, #255	; 0xff
 8005ba4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005ba8:	f001 fc4c 	bl	8007444 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005bac:	f001 fc1a 	bl	80073e4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005bb6:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005bb8:	e011      	b.n	8005bde <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	691b      	ldr	r3, [r3, #16]
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d012      	beq.n	8005be8 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	3310      	adds	r3, #16
 8005bc6:	4618      	mov	r0, r3
 8005bc8:	f000 fd2a 	bl	8006620 <xTaskRemoveFromEventList>
 8005bcc:	4603      	mov	r3, r0
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d001      	beq.n	8005bd6 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005bd2:	f000 fe01 	bl	80067d8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005bd6:	7bbb      	ldrb	r3, [r7, #14]
 8005bd8:	3b01      	subs	r3, #1
 8005bda:	b2db      	uxtb	r3, r3
 8005bdc:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005bde:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	dce9      	bgt.n	8005bba <prvUnlockQueue+0x60>
 8005be6:	e000      	b.n	8005bea <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005be8:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	22ff      	movs	r2, #255	; 0xff
 8005bee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005bf2:	f001 fc27 	bl	8007444 <vPortExitCritical>
}
 8005bf6:	bf00      	nop
 8005bf8:	3710      	adds	r7, #16
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	bd80      	pop	{r7, pc}

08005bfe <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005bfe:	b580      	push	{r7, lr}
 8005c00:	b084      	sub	sp, #16
 8005c02:	af00      	add	r7, sp, #0
 8005c04:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005c06:	f001 fbed 	bl	80073e4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d102      	bne.n	8005c18 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005c12:	2301      	movs	r3, #1
 8005c14:	60fb      	str	r3, [r7, #12]
 8005c16:	e001      	b.n	8005c1c <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005c18:	2300      	movs	r3, #0
 8005c1a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005c1c:	f001 fc12 	bl	8007444 <vPortExitCritical>

	return xReturn;
 8005c20:	68fb      	ldr	r3, [r7, #12]
}
 8005c22:	4618      	mov	r0, r3
 8005c24:	3710      	adds	r7, #16
 8005c26:	46bd      	mov	sp, r7
 8005c28:	bd80      	pop	{r7, pc}

08005c2a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005c2a:	b580      	push	{r7, lr}
 8005c2c:	b084      	sub	sp, #16
 8005c2e:	af00      	add	r7, sp, #0
 8005c30:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005c32:	f001 fbd7 	bl	80073e4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c3e:	429a      	cmp	r2, r3
 8005c40:	d102      	bne.n	8005c48 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005c42:	2301      	movs	r3, #1
 8005c44:	60fb      	str	r3, [r7, #12]
 8005c46:	e001      	b.n	8005c4c <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005c48:	2300      	movs	r3, #0
 8005c4a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005c4c:	f001 fbfa 	bl	8007444 <vPortExitCritical>

	return xReturn;
 8005c50:	68fb      	ldr	r3, [r7, #12]
}
 8005c52:	4618      	mov	r0, r3
 8005c54:	3710      	adds	r7, #16
 8005c56:	46bd      	mov	sp, r7
 8005c58:	bd80      	pop	{r7, pc}
	...

08005c5c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005c5c:	b480      	push	{r7}
 8005c5e:	b085      	sub	sp, #20
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	6078      	str	r0, [r7, #4]
 8005c64:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005c66:	2300      	movs	r3, #0
 8005c68:	60fb      	str	r3, [r7, #12]
 8005c6a:	e014      	b.n	8005c96 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005c6c:	4a0f      	ldr	r2, [pc, #60]	; (8005cac <vQueueAddToRegistry+0x50>)
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d10b      	bne.n	8005c90 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005c78:	490c      	ldr	r1, [pc, #48]	; (8005cac <vQueueAddToRegistry+0x50>)
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	683a      	ldr	r2, [r7, #0]
 8005c7e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005c82:	4a0a      	ldr	r2, [pc, #40]	; (8005cac <vQueueAddToRegistry+0x50>)
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	00db      	lsls	r3, r3, #3
 8005c88:	4413      	add	r3, r2
 8005c8a:	687a      	ldr	r2, [r7, #4]
 8005c8c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005c8e:	e006      	b.n	8005c9e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	3301      	adds	r3, #1
 8005c94:	60fb      	str	r3, [r7, #12]
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	2b07      	cmp	r3, #7
 8005c9a:	d9e7      	bls.n	8005c6c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005c9c:	bf00      	nop
 8005c9e:	bf00      	nop
 8005ca0:	3714      	adds	r7, #20
 8005ca2:	46bd      	mov	sp, r7
 8005ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca8:	4770      	bx	lr
 8005caa:	bf00      	nop
 8005cac:	2000092c 	.word	0x2000092c

08005cb0 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8005cb0:	b480      	push	{r7}
 8005cb2:	b085      	sub	sp, #20
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005cb8:	2300      	movs	r3, #0
 8005cba:	60fb      	str	r3, [r7, #12]
 8005cbc:	e016      	b.n	8005cec <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8005cbe:	4a10      	ldr	r2, [pc, #64]	; (8005d00 <vQueueUnregisterQueue+0x50>)
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	00db      	lsls	r3, r3, #3
 8005cc4:	4413      	add	r3, r2
 8005cc6:	685b      	ldr	r3, [r3, #4]
 8005cc8:	687a      	ldr	r2, [r7, #4]
 8005cca:	429a      	cmp	r2, r3
 8005ccc:	d10b      	bne.n	8005ce6 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8005cce:	4a0c      	ldr	r2, [pc, #48]	; (8005d00 <vQueueUnregisterQueue+0x50>)
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	2100      	movs	r1, #0
 8005cd4:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8005cd8:	4a09      	ldr	r2, [pc, #36]	; (8005d00 <vQueueUnregisterQueue+0x50>)
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	00db      	lsls	r3, r3, #3
 8005cde:	4413      	add	r3, r2
 8005ce0:	2200      	movs	r2, #0
 8005ce2:	605a      	str	r2, [r3, #4]
				break;
 8005ce4:	e006      	b.n	8005cf4 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	3301      	adds	r3, #1
 8005cea:	60fb      	str	r3, [r7, #12]
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	2b07      	cmp	r3, #7
 8005cf0:	d9e5      	bls.n	8005cbe <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8005cf2:	bf00      	nop
 8005cf4:	bf00      	nop
 8005cf6:	3714      	adds	r7, #20
 8005cf8:	46bd      	mov	sp, r7
 8005cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfe:	4770      	bx	lr
 8005d00:	2000092c 	.word	0x2000092c

08005d04 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005d04:	b580      	push	{r7, lr}
 8005d06:	b086      	sub	sp, #24
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	60f8      	str	r0, [r7, #12]
 8005d0c:	60b9      	str	r1, [r7, #8]
 8005d0e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005d14:	f001 fb66 	bl	80073e4 <vPortEnterCritical>
 8005d18:	697b      	ldr	r3, [r7, #20]
 8005d1a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005d1e:	b25b      	sxtb	r3, r3
 8005d20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d24:	d103      	bne.n	8005d2e <vQueueWaitForMessageRestricted+0x2a>
 8005d26:	697b      	ldr	r3, [r7, #20]
 8005d28:	2200      	movs	r2, #0
 8005d2a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005d2e:	697b      	ldr	r3, [r7, #20]
 8005d30:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005d34:	b25b      	sxtb	r3, r3
 8005d36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d3a:	d103      	bne.n	8005d44 <vQueueWaitForMessageRestricted+0x40>
 8005d3c:	697b      	ldr	r3, [r7, #20]
 8005d3e:	2200      	movs	r2, #0
 8005d40:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005d44:	f001 fb7e 	bl	8007444 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005d48:	697b      	ldr	r3, [r7, #20]
 8005d4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d106      	bne.n	8005d5e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005d50:	697b      	ldr	r3, [r7, #20]
 8005d52:	3324      	adds	r3, #36	; 0x24
 8005d54:	687a      	ldr	r2, [r7, #4]
 8005d56:	68b9      	ldr	r1, [r7, #8]
 8005d58:	4618      	mov	r0, r3
 8005d5a:	f000 fc35 	bl	80065c8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005d5e:	6978      	ldr	r0, [r7, #20]
 8005d60:	f7ff fefb 	bl	8005b5a <prvUnlockQueue>
	}
 8005d64:	bf00      	nop
 8005d66:	3718      	adds	r7, #24
 8005d68:	46bd      	mov	sp, r7
 8005d6a:	bd80      	pop	{r7, pc}

08005d6c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005d6c:	b580      	push	{r7, lr}
 8005d6e:	b08e      	sub	sp, #56	; 0x38
 8005d70:	af04      	add	r7, sp, #16
 8005d72:	60f8      	str	r0, [r7, #12]
 8005d74:	60b9      	str	r1, [r7, #8]
 8005d76:	607a      	str	r2, [r7, #4]
 8005d78:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005d7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d10a      	bne.n	8005d96 <xTaskCreateStatic+0x2a>
	__asm volatile
 8005d80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d84:	f383 8811 	msr	BASEPRI, r3
 8005d88:	f3bf 8f6f 	isb	sy
 8005d8c:	f3bf 8f4f 	dsb	sy
 8005d90:	623b      	str	r3, [r7, #32]
}
 8005d92:	bf00      	nop
 8005d94:	e7fe      	b.n	8005d94 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005d96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d10a      	bne.n	8005db2 <xTaskCreateStatic+0x46>
	__asm volatile
 8005d9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005da0:	f383 8811 	msr	BASEPRI, r3
 8005da4:	f3bf 8f6f 	isb	sy
 8005da8:	f3bf 8f4f 	dsb	sy
 8005dac:	61fb      	str	r3, [r7, #28]
}
 8005dae:	bf00      	nop
 8005db0:	e7fe      	b.n	8005db0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005db2:	235c      	movs	r3, #92	; 0x5c
 8005db4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005db6:	693b      	ldr	r3, [r7, #16]
 8005db8:	2b5c      	cmp	r3, #92	; 0x5c
 8005dba:	d00a      	beq.n	8005dd2 <xTaskCreateStatic+0x66>
	__asm volatile
 8005dbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dc0:	f383 8811 	msr	BASEPRI, r3
 8005dc4:	f3bf 8f6f 	isb	sy
 8005dc8:	f3bf 8f4f 	dsb	sy
 8005dcc:	61bb      	str	r3, [r7, #24]
}
 8005dce:	bf00      	nop
 8005dd0:	e7fe      	b.n	8005dd0 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005dd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d01e      	beq.n	8005e16 <xTaskCreateStatic+0xaa>
 8005dd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d01b      	beq.n	8005e16 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005dde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005de0:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005de4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005de6:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dea:	2202      	movs	r2, #2
 8005dec:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005df0:	2300      	movs	r3, #0
 8005df2:	9303      	str	r3, [sp, #12]
 8005df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005df6:	9302      	str	r3, [sp, #8]
 8005df8:	f107 0314 	add.w	r3, r7, #20
 8005dfc:	9301      	str	r3, [sp, #4]
 8005dfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e00:	9300      	str	r3, [sp, #0]
 8005e02:	683b      	ldr	r3, [r7, #0]
 8005e04:	687a      	ldr	r2, [r7, #4]
 8005e06:	68b9      	ldr	r1, [r7, #8]
 8005e08:	68f8      	ldr	r0, [r7, #12]
 8005e0a:	f000 f850 	bl	8005eae <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005e0e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005e10:	f000 f8d4 	bl	8005fbc <prvAddNewTaskToReadyList>
 8005e14:	e001      	b.n	8005e1a <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8005e16:	2300      	movs	r3, #0
 8005e18:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005e1a:	697b      	ldr	r3, [r7, #20]
	}
 8005e1c:	4618      	mov	r0, r3
 8005e1e:	3728      	adds	r7, #40	; 0x28
 8005e20:	46bd      	mov	sp, r7
 8005e22:	bd80      	pop	{r7, pc}

08005e24 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005e24:	b580      	push	{r7, lr}
 8005e26:	b08c      	sub	sp, #48	; 0x30
 8005e28:	af04      	add	r7, sp, #16
 8005e2a:	60f8      	str	r0, [r7, #12]
 8005e2c:	60b9      	str	r1, [r7, #8]
 8005e2e:	603b      	str	r3, [r7, #0]
 8005e30:	4613      	mov	r3, r2
 8005e32:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005e34:	88fb      	ldrh	r3, [r7, #6]
 8005e36:	009b      	lsls	r3, r3, #2
 8005e38:	4618      	mov	r0, r3
 8005e3a:	f001 fbf5 	bl	8007628 <pvPortMalloc>
 8005e3e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005e40:	697b      	ldr	r3, [r7, #20]
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d00e      	beq.n	8005e64 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8005e46:	205c      	movs	r0, #92	; 0x5c
 8005e48:	f001 fbee 	bl	8007628 <pvPortMalloc>
 8005e4c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005e4e:	69fb      	ldr	r3, [r7, #28]
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d003      	beq.n	8005e5c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005e54:	69fb      	ldr	r3, [r7, #28]
 8005e56:	697a      	ldr	r2, [r7, #20]
 8005e58:	631a      	str	r2, [r3, #48]	; 0x30
 8005e5a:	e005      	b.n	8005e68 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005e5c:	6978      	ldr	r0, [r7, #20]
 8005e5e:	f001 fca7 	bl	80077b0 <vPortFree>
 8005e62:	e001      	b.n	8005e68 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005e64:	2300      	movs	r3, #0
 8005e66:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005e68:	69fb      	ldr	r3, [r7, #28]
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d017      	beq.n	8005e9e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005e6e:	69fb      	ldr	r3, [r7, #28]
 8005e70:	2200      	movs	r2, #0
 8005e72:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005e76:	88fa      	ldrh	r2, [r7, #6]
 8005e78:	2300      	movs	r3, #0
 8005e7a:	9303      	str	r3, [sp, #12]
 8005e7c:	69fb      	ldr	r3, [r7, #28]
 8005e7e:	9302      	str	r3, [sp, #8]
 8005e80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e82:	9301      	str	r3, [sp, #4]
 8005e84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e86:	9300      	str	r3, [sp, #0]
 8005e88:	683b      	ldr	r3, [r7, #0]
 8005e8a:	68b9      	ldr	r1, [r7, #8]
 8005e8c:	68f8      	ldr	r0, [r7, #12]
 8005e8e:	f000 f80e 	bl	8005eae <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005e92:	69f8      	ldr	r0, [r7, #28]
 8005e94:	f000 f892 	bl	8005fbc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005e98:	2301      	movs	r3, #1
 8005e9a:	61bb      	str	r3, [r7, #24]
 8005e9c:	e002      	b.n	8005ea4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005e9e:	f04f 33ff 	mov.w	r3, #4294967295
 8005ea2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005ea4:	69bb      	ldr	r3, [r7, #24]
	}
 8005ea6:	4618      	mov	r0, r3
 8005ea8:	3720      	adds	r7, #32
 8005eaa:	46bd      	mov	sp, r7
 8005eac:	bd80      	pop	{r7, pc}

08005eae <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005eae:	b580      	push	{r7, lr}
 8005eb0:	b088      	sub	sp, #32
 8005eb2:	af00      	add	r7, sp, #0
 8005eb4:	60f8      	str	r0, [r7, #12]
 8005eb6:	60b9      	str	r1, [r7, #8]
 8005eb8:	607a      	str	r2, [r7, #4]
 8005eba:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005ebc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ebe:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	009b      	lsls	r3, r3, #2
 8005ec4:	461a      	mov	r2, r3
 8005ec6:	21a5      	movs	r1, #165	; 0xa5
 8005ec8:	f001 fd88 	bl	80079dc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8005ecc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ece:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005ed6:	3b01      	subs	r3, #1
 8005ed8:	009b      	lsls	r3, r3, #2
 8005eda:	4413      	add	r3, r2
 8005edc:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8005ede:	69bb      	ldr	r3, [r7, #24]
 8005ee0:	f023 0307 	bic.w	r3, r3, #7
 8005ee4:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005ee6:	69bb      	ldr	r3, [r7, #24]
 8005ee8:	f003 0307 	and.w	r3, r3, #7
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d00a      	beq.n	8005f06 <prvInitialiseNewTask+0x58>
	__asm volatile
 8005ef0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ef4:	f383 8811 	msr	BASEPRI, r3
 8005ef8:	f3bf 8f6f 	isb	sy
 8005efc:	f3bf 8f4f 	dsb	sy
 8005f00:	617b      	str	r3, [r7, #20]
}
 8005f02:	bf00      	nop
 8005f04:	e7fe      	b.n	8005f04 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005f06:	2300      	movs	r3, #0
 8005f08:	61fb      	str	r3, [r7, #28]
 8005f0a:	e012      	b.n	8005f32 <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005f0c:	68ba      	ldr	r2, [r7, #8]
 8005f0e:	69fb      	ldr	r3, [r7, #28]
 8005f10:	4413      	add	r3, r2
 8005f12:	7819      	ldrb	r1, [r3, #0]
 8005f14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f16:	69fb      	ldr	r3, [r7, #28]
 8005f18:	4413      	add	r3, r2
 8005f1a:	3334      	adds	r3, #52	; 0x34
 8005f1c:	460a      	mov	r2, r1
 8005f1e:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8005f20:	68ba      	ldr	r2, [r7, #8]
 8005f22:	69fb      	ldr	r3, [r7, #28]
 8005f24:	4413      	add	r3, r2
 8005f26:	781b      	ldrb	r3, [r3, #0]
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d006      	beq.n	8005f3a <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005f2c:	69fb      	ldr	r3, [r7, #28]
 8005f2e:	3301      	adds	r3, #1
 8005f30:	61fb      	str	r3, [r7, #28]
 8005f32:	69fb      	ldr	r3, [r7, #28]
 8005f34:	2b0f      	cmp	r3, #15
 8005f36:	d9e9      	bls.n	8005f0c <prvInitialiseNewTask+0x5e>
 8005f38:	e000      	b.n	8005f3c <prvInitialiseNewTask+0x8e>
		{
			break;
 8005f3a:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005f3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f3e:	2200      	movs	r2, #0
 8005f40:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005f44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f46:	2b37      	cmp	r3, #55	; 0x37
 8005f48:	d901      	bls.n	8005f4e <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005f4a:	2337      	movs	r3, #55	; 0x37
 8005f4c:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005f4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f50:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005f52:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005f54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f56:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005f58:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005f5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f5c:	2200      	movs	r2, #0
 8005f5e:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005f60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f62:	3304      	adds	r3, #4
 8005f64:	4618      	mov	r0, r3
 8005f66:	f7ff f891 	bl	800508c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005f6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f6c:	3318      	adds	r3, #24
 8005f6e:	4618      	mov	r0, r3
 8005f70:	f7ff f88c 	bl	800508c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005f74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f76:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f78:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005f7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f7c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005f80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f82:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005f84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f86:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f88:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005f8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f8c:	2200      	movs	r2, #0
 8005f8e:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005f90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f92:	2200      	movs	r2, #0
 8005f94:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005f98:	683a      	ldr	r2, [r7, #0]
 8005f9a:	68f9      	ldr	r1, [r7, #12]
 8005f9c:	69b8      	ldr	r0, [r7, #24]
 8005f9e:	f001 f8f5 	bl	800718c <pxPortInitialiseStack>
 8005fa2:	4602      	mov	r2, r0
 8005fa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fa6:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8005fa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d002      	beq.n	8005fb4 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005fae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fb0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005fb2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005fb4:	bf00      	nop
 8005fb6:	3720      	adds	r7, #32
 8005fb8:	46bd      	mov	sp, r7
 8005fba:	bd80      	pop	{r7, pc}

08005fbc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005fbc:	b580      	push	{r7, lr}
 8005fbe:	b082      	sub	sp, #8
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005fc4:	f001 fa0e 	bl	80073e4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005fc8:	4b2d      	ldr	r3, [pc, #180]	; (8006080 <prvAddNewTaskToReadyList+0xc4>)
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	3301      	adds	r3, #1
 8005fce:	4a2c      	ldr	r2, [pc, #176]	; (8006080 <prvAddNewTaskToReadyList+0xc4>)
 8005fd0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005fd2:	4b2c      	ldr	r3, [pc, #176]	; (8006084 <prvAddNewTaskToReadyList+0xc8>)
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d109      	bne.n	8005fee <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005fda:	4a2a      	ldr	r2, [pc, #168]	; (8006084 <prvAddNewTaskToReadyList+0xc8>)
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005fe0:	4b27      	ldr	r3, [pc, #156]	; (8006080 <prvAddNewTaskToReadyList+0xc4>)
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	2b01      	cmp	r3, #1
 8005fe6:	d110      	bne.n	800600a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005fe8:	f000 fc1a 	bl	8006820 <prvInitialiseTaskLists>
 8005fec:	e00d      	b.n	800600a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005fee:	4b26      	ldr	r3, [pc, #152]	; (8006088 <prvAddNewTaskToReadyList+0xcc>)
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d109      	bne.n	800600a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005ff6:	4b23      	ldr	r3, [pc, #140]	; (8006084 <prvAddNewTaskToReadyList+0xc8>)
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006000:	429a      	cmp	r2, r3
 8006002:	d802      	bhi.n	800600a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006004:	4a1f      	ldr	r2, [pc, #124]	; (8006084 <prvAddNewTaskToReadyList+0xc8>)
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800600a:	4b20      	ldr	r3, [pc, #128]	; (800608c <prvAddNewTaskToReadyList+0xd0>)
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	3301      	adds	r3, #1
 8006010:	4a1e      	ldr	r2, [pc, #120]	; (800608c <prvAddNewTaskToReadyList+0xd0>)
 8006012:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006014:	4b1d      	ldr	r3, [pc, #116]	; (800608c <prvAddNewTaskToReadyList+0xd0>)
 8006016:	681a      	ldr	r2, [r3, #0]
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006020:	4b1b      	ldr	r3, [pc, #108]	; (8006090 <prvAddNewTaskToReadyList+0xd4>)
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	429a      	cmp	r2, r3
 8006026:	d903      	bls.n	8006030 <prvAddNewTaskToReadyList+0x74>
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800602c:	4a18      	ldr	r2, [pc, #96]	; (8006090 <prvAddNewTaskToReadyList+0xd4>)
 800602e:	6013      	str	r3, [r2, #0]
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006034:	4613      	mov	r3, r2
 8006036:	009b      	lsls	r3, r3, #2
 8006038:	4413      	add	r3, r2
 800603a:	009b      	lsls	r3, r3, #2
 800603c:	4a15      	ldr	r2, [pc, #84]	; (8006094 <prvAddNewTaskToReadyList+0xd8>)
 800603e:	441a      	add	r2, r3
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	3304      	adds	r3, #4
 8006044:	4619      	mov	r1, r3
 8006046:	4610      	mov	r0, r2
 8006048:	f7ff f82d 	bl	80050a6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800604c:	f001 f9fa 	bl	8007444 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006050:	4b0d      	ldr	r3, [pc, #52]	; (8006088 <prvAddNewTaskToReadyList+0xcc>)
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	2b00      	cmp	r3, #0
 8006056:	d00e      	beq.n	8006076 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006058:	4b0a      	ldr	r3, [pc, #40]	; (8006084 <prvAddNewTaskToReadyList+0xc8>)
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006062:	429a      	cmp	r2, r3
 8006064:	d207      	bcs.n	8006076 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006066:	4b0c      	ldr	r3, [pc, #48]	; (8006098 <prvAddNewTaskToReadyList+0xdc>)
 8006068:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800606c:	601a      	str	r2, [r3, #0]
 800606e:	f3bf 8f4f 	dsb	sy
 8006072:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006076:	bf00      	nop
 8006078:	3708      	adds	r7, #8
 800607a:	46bd      	mov	sp, r7
 800607c:	bd80      	pop	{r7, pc}
 800607e:	bf00      	nop
 8006080:	20000e40 	.word	0x20000e40
 8006084:	2000096c 	.word	0x2000096c
 8006088:	20000e4c 	.word	0x20000e4c
 800608c:	20000e5c 	.word	0x20000e5c
 8006090:	20000e48 	.word	0x20000e48
 8006094:	20000970 	.word	0x20000970
 8006098:	e000ed04 	.word	0xe000ed04

0800609c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800609c:	b580      	push	{r7, lr}
 800609e:	b084      	sub	sp, #16
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80060a4:	2300      	movs	r3, #0
 80060a6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d017      	beq.n	80060de <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80060ae:	4b13      	ldr	r3, [pc, #76]	; (80060fc <vTaskDelay+0x60>)
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d00a      	beq.n	80060cc <vTaskDelay+0x30>
	__asm volatile
 80060b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060ba:	f383 8811 	msr	BASEPRI, r3
 80060be:	f3bf 8f6f 	isb	sy
 80060c2:	f3bf 8f4f 	dsb	sy
 80060c6:	60bb      	str	r3, [r7, #8]
}
 80060c8:	bf00      	nop
 80060ca:	e7fe      	b.n	80060ca <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80060cc:	f000 f880 	bl	80061d0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80060d0:	2100      	movs	r1, #0
 80060d2:	6878      	ldr	r0, [r7, #4]
 80060d4:	f000 fcf4 	bl	8006ac0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80060d8:	f000 f888 	bl	80061ec <xTaskResumeAll>
 80060dc:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d107      	bne.n	80060f4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80060e4:	4b06      	ldr	r3, [pc, #24]	; (8006100 <vTaskDelay+0x64>)
 80060e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80060ea:	601a      	str	r2, [r3, #0]
 80060ec:	f3bf 8f4f 	dsb	sy
 80060f0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80060f4:	bf00      	nop
 80060f6:	3710      	adds	r7, #16
 80060f8:	46bd      	mov	sp, r7
 80060fa:	bd80      	pop	{r7, pc}
 80060fc:	20000e68 	.word	0x20000e68
 8006100:	e000ed04 	.word	0xe000ed04

08006104 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006104:	b580      	push	{r7, lr}
 8006106:	b08a      	sub	sp, #40	; 0x28
 8006108:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800610a:	2300      	movs	r3, #0
 800610c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800610e:	2300      	movs	r3, #0
 8006110:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006112:	463a      	mov	r2, r7
 8006114:	1d39      	adds	r1, r7, #4
 8006116:	f107 0308 	add.w	r3, r7, #8
 800611a:	4618      	mov	r0, r3
 800611c:	f7fe ff62 	bl	8004fe4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006120:	6839      	ldr	r1, [r7, #0]
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	68ba      	ldr	r2, [r7, #8]
 8006126:	9202      	str	r2, [sp, #8]
 8006128:	9301      	str	r3, [sp, #4]
 800612a:	2300      	movs	r3, #0
 800612c:	9300      	str	r3, [sp, #0]
 800612e:	2300      	movs	r3, #0
 8006130:	460a      	mov	r2, r1
 8006132:	4921      	ldr	r1, [pc, #132]	; (80061b8 <vTaskStartScheduler+0xb4>)
 8006134:	4821      	ldr	r0, [pc, #132]	; (80061bc <vTaskStartScheduler+0xb8>)
 8006136:	f7ff fe19 	bl	8005d6c <xTaskCreateStatic>
 800613a:	4603      	mov	r3, r0
 800613c:	4a20      	ldr	r2, [pc, #128]	; (80061c0 <vTaskStartScheduler+0xbc>)
 800613e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006140:	4b1f      	ldr	r3, [pc, #124]	; (80061c0 <vTaskStartScheduler+0xbc>)
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	2b00      	cmp	r3, #0
 8006146:	d002      	beq.n	800614e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006148:	2301      	movs	r3, #1
 800614a:	617b      	str	r3, [r7, #20]
 800614c:	e001      	b.n	8006152 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800614e:	2300      	movs	r3, #0
 8006150:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006152:	697b      	ldr	r3, [r7, #20]
 8006154:	2b01      	cmp	r3, #1
 8006156:	d102      	bne.n	800615e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006158:	f000 fd06 	bl	8006b68 <xTimerCreateTimerTask>
 800615c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800615e:	697b      	ldr	r3, [r7, #20]
 8006160:	2b01      	cmp	r3, #1
 8006162:	d116      	bne.n	8006192 <vTaskStartScheduler+0x8e>
	__asm volatile
 8006164:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006168:	f383 8811 	msr	BASEPRI, r3
 800616c:	f3bf 8f6f 	isb	sy
 8006170:	f3bf 8f4f 	dsb	sy
 8006174:	613b      	str	r3, [r7, #16]
}
 8006176:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006178:	4b12      	ldr	r3, [pc, #72]	; (80061c4 <vTaskStartScheduler+0xc0>)
 800617a:	f04f 32ff 	mov.w	r2, #4294967295
 800617e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006180:	4b11      	ldr	r3, [pc, #68]	; (80061c8 <vTaskStartScheduler+0xc4>)
 8006182:	2201      	movs	r2, #1
 8006184:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8006186:	4b11      	ldr	r3, [pc, #68]	; (80061cc <vTaskStartScheduler+0xc8>)
 8006188:	2200      	movs	r2, #0
 800618a:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800618c:	f001 f888 	bl	80072a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006190:	e00e      	b.n	80061b0 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006192:	697b      	ldr	r3, [r7, #20]
 8006194:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006198:	d10a      	bne.n	80061b0 <vTaskStartScheduler+0xac>
	__asm volatile
 800619a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800619e:	f383 8811 	msr	BASEPRI, r3
 80061a2:	f3bf 8f6f 	isb	sy
 80061a6:	f3bf 8f4f 	dsb	sy
 80061aa:	60fb      	str	r3, [r7, #12]
}
 80061ac:	bf00      	nop
 80061ae:	e7fe      	b.n	80061ae <vTaskStartScheduler+0xaa>
}
 80061b0:	bf00      	nop
 80061b2:	3718      	adds	r7, #24
 80061b4:	46bd      	mov	sp, r7
 80061b6:	bd80      	pop	{r7, pc}
 80061b8:	08007a90 	.word	0x08007a90
 80061bc:	080067f1 	.word	0x080067f1
 80061c0:	20000e64 	.word	0x20000e64
 80061c4:	20000e60 	.word	0x20000e60
 80061c8:	20000e4c 	.word	0x20000e4c
 80061cc:	20000e44 	.word	0x20000e44

080061d0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80061d0:	b480      	push	{r7}
 80061d2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80061d4:	4b04      	ldr	r3, [pc, #16]	; (80061e8 <vTaskSuspendAll+0x18>)
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	3301      	adds	r3, #1
 80061da:	4a03      	ldr	r2, [pc, #12]	; (80061e8 <vTaskSuspendAll+0x18>)
 80061dc:	6013      	str	r3, [r2, #0]
}
 80061de:	bf00      	nop
 80061e0:	46bd      	mov	sp, r7
 80061e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e6:	4770      	bx	lr
 80061e8:	20000e68 	.word	0x20000e68

080061ec <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80061ec:	b580      	push	{r7, lr}
 80061ee:	b084      	sub	sp, #16
 80061f0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80061f2:	2300      	movs	r3, #0
 80061f4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80061f6:	2300      	movs	r3, #0
 80061f8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80061fa:	4b42      	ldr	r3, [pc, #264]	; (8006304 <xTaskResumeAll+0x118>)
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d10a      	bne.n	8006218 <xTaskResumeAll+0x2c>
	__asm volatile
 8006202:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006206:	f383 8811 	msr	BASEPRI, r3
 800620a:	f3bf 8f6f 	isb	sy
 800620e:	f3bf 8f4f 	dsb	sy
 8006212:	603b      	str	r3, [r7, #0]
}
 8006214:	bf00      	nop
 8006216:	e7fe      	b.n	8006216 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006218:	f001 f8e4 	bl	80073e4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800621c:	4b39      	ldr	r3, [pc, #228]	; (8006304 <xTaskResumeAll+0x118>)
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	3b01      	subs	r3, #1
 8006222:	4a38      	ldr	r2, [pc, #224]	; (8006304 <xTaskResumeAll+0x118>)
 8006224:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006226:	4b37      	ldr	r3, [pc, #220]	; (8006304 <xTaskResumeAll+0x118>)
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	2b00      	cmp	r3, #0
 800622c:	d162      	bne.n	80062f4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800622e:	4b36      	ldr	r3, [pc, #216]	; (8006308 <xTaskResumeAll+0x11c>)
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	2b00      	cmp	r3, #0
 8006234:	d05e      	beq.n	80062f4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006236:	e02f      	b.n	8006298 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8006238:	4b34      	ldr	r3, [pc, #208]	; (800630c <xTaskResumeAll+0x120>)
 800623a:	68db      	ldr	r3, [r3, #12]
 800623c:	68db      	ldr	r3, [r3, #12]
 800623e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	3318      	adds	r3, #24
 8006244:	4618      	mov	r0, r3
 8006246:	f7fe ff8b 	bl	8005160 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	3304      	adds	r3, #4
 800624e:	4618      	mov	r0, r3
 8006250:	f7fe ff86 	bl	8005160 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006258:	4b2d      	ldr	r3, [pc, #180]	; (8006310 <xTaskResumeAll+0x124>)
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	429a      	cmp	r2, r3
 800625e:	d903      	bls.n	8006268 <xTaskResumeAll+0x7c>
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006264:	4a2a      	ldr	r2, [pc, #168]	; (8006310 <xTaskResumeAll+0x124>)
 8006266:	6013      	str	r3, [r2, #0]
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800626c:	4613      	mov	r3, r2
 800626e:	009b      	lsls	r3, r3, #2
 8006270:	4413      	add	r3, r2
 8006272:	009b      	lsls	r3, r3, #2
 8006274:	4a27      	ldr	r2, [pc, #156]	; (8006314 <xTaskResumeAll+0x128>)
 8006276:	441a      	add	r2, r3
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	3304      	adds	r3, #4
 800627c:	4619      	mov	r1, r3
 800627e:	4610      	mov	r0, r2
 8006280:	f7fe ff11 	bl	80050a6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006288:	4b23      	ldr	r3, [pc, #140]	; (8006318 <xTaskResumeAll+0x12c>)
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800628e:	429a      	cmp	r2, r3
 8006290:	d302      	bcc.n	8006298 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8006292:	4b22      	ldr	r3, [pc, #136]	; (800631c <xTaskResumeAll+0x130>)
 8006294:	2201      	movs	r2, #1
 8006296:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006298:	4b1c      	ldr	r3, [pc, #112]	; (800630c <xTaskResumeAll+0x120>)
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	2b00      	cmp	r3, #0
 800629e:	d1cb      	bne.n	8006238 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d001      	beq.n	80062aa <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80062a6:	f000 fb59 	bl	800695c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80062aa:	4b1d      	ldr	r3, [pc, #116]	; (8006320 <xTaskResumeAll+0x134>)
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d010      	beq.n	80062d8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80062b6:	f000 f847 	bl	8006348 <xTaskIncrementTick>
 80062ba:	4603      	mov	r3, r0
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d002      	beq.n	80062c6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80062c0:	4b16      	ldr	r3, [pc, #88]	; (800631c <xTaskResumeAll+0x130>)
 80062c2:	2201      	movs	r2, #1
 80062c4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	3b01      	subs	r3, #1
 80062ca:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d1f1      	bne.n	80062b6 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 80062d2:	4b13      	ldr	r3, [pc, #76]	; (8006320 <xTaskResumeAll+0x134>)
 80062d4:	2200      	movs	r2, #0
 80062d6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80062d8:	4b10      	ldr	r3, [pc, #64]	; (800631c <xTaskResumeAll+0x130>)
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d009      	beq.n	80062f4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80062e0:	2301      	movs	r3, #1
 80062e2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80062e4:	4b0f      	ldr	r3, [pc, #60]	; (8006324 <xTaskResumeAll+0x138>)
 80062e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80062ea:	601a      	str	r2, [r3, #0]
 80062ec:	f3bf 8f4f 	dsb	sy
 80062f0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80062f4:	f001 f8a6 	bl	8007444 <vPortExitCritical>

	return xAlreadyYielded;
 80062f8:	68bb      	ldr	r3, [r7, #8]
}
 80062fa:	4618      	mov	r0, r3
 80062fc:	3710      	adds	r7, #16
 80062fe:	46bd      	mov	sp, r7
 8006300:	bd80      	pop	{r7, pc}
 8006302:	bf00      	nop
 8006304:	20000e68 	.word	0x20000e68
 8006308:	20000e40 	.word	0x20000e40
 800630c:	20000e00 	.word	0x20000e00
 8006310:	20000e48 	.word	0x20000e48
 8006314:	20000970 	.word	0x20000970
 8006318:	2000096c 	.word	0x2000096c
 800631c:	20000e54 	.word	0x20000e54
 8006320:	20000e50 	.word	0x20000e50
 8006324:	e000ed04 	.word	0xe000ed04

08006328 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006328:	b480      	push	{r7}
 800632a:	b083      	sub	sp, #12
 800632c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800632e:	4b05      	ldr	r3, [pc, #20]	; (8006344 <xTaskGetTickCount+0x1c>)
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006334:	687b      	ldr	r3, [r7, #4]
}
 8006336:	4618      	mov	r0, r3
 8006338:	370c      	adds	r7, #12
 800633a:	46bd      	mov	sp, r7
 800633c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006340:	4770      	bx	lr
 8006342:	bf00      	nop
 8006344:	20000e44 	.word	0x20000e44

08006348 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006348:	b580      	push	{r7, lr}
 800634a:	b086      	sub	sp, #24
 800634c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800634e:	2300      	movs	r3, #0
 8006350:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006352:	4b51      	ldr	r3, [pc, #324]	; (8006498 <xTaskIncrementTick+0x150>)
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	2b00      	cmp	r3, #0
 8006358:	f040 808e 	bne.w	8006478 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800635c:	4b4f      	ldr	r3, [pc, #316]	; (800649c <xTaskIncrementTick+0x154>)
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	3301      	adds	r3, #1
 8006362:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006364:	4a4d      	ldr	r2, [pc, #308]	; (800649c <xTaskIncrementTick+0x154>)
 8006366:	693b      	ldr	r3, [r7, #16]
 8006368:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800636a:	693b      	ldr	r3, [r7, #16]
 800636c:	2b00      	cmp	r3, #0
 800636e:	d120      	bne.n	80063b2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8006370:	4b4b      	ldr	r3, [pc, #300]	; (80064a0 <xTaskIncrementTick+0x158>)
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	2b00      	cmp	r3, #0
 8006378:	d00a      	beq.n	8006390 <xTaskIncrementTick+0x48>
	__asm volatile
 800637a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800637e:	f383 8811 	msr	BASEPRI, r3
 8006382:	f3bf 8f6f 	isb	sy
 8006386:	f3bf 8f4f 	dsb	sy
 800638a:	603b      	str	r3, [r7, #0]
}
 800638c:	bf00      	nop
 800638e:	e7fe      	b.n	800638e <xTaskIncrementTick+0x46>
 8006390:	4b43      	ldr	r3, [pc, #268]	; (80064a0 <xTaskIncrementTick+0x158>)
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	60fb      	str	r3, [r7, #12]
 8006396:	4b43      	ldr	r3, [pc, #268]	; (80064a4 <xTaskIncrementTick+0x15c>)
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	4a41      	ldr	r2, [pc, #260]	; (80064a0 <xTaskIncrementTick+0x158>)
 800639c:	6013      	str	r3, [r2, #0]
 800639e:	4a41      	ldr	r2, [pc, #260]	; (80064a4 <xTaskIncrementTick+0x15c>)
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	6013      	str	r3, [r2, #0]
 80063a4:	4b40      	ldr	r3, [pc, #256]	; (80064a8 <xTaskIncrementTick+0x160>)
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	3301      	adds	r3, #1
 80063aa:	4a3f      	ldr	r2, [pc, #252]	; (80064a8 <xTaskIncrementTick+0x160>)
 80063ac:	6013      	str	r3, [r2, #0]
 80063ae:	f000 fad5 	bl	800695c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80063b2:	4b3e      	ldr	r3, [pc, #248]	; (80064ac <xTaskIncrementTick+0x164>)
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	693a      	ldr	r2, [r7, #16]
 80063b8:	429a      	cmp	r2, r3
 80063ba:	d34e      	bcc.n	800645a <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80063bc:	4b38      	ldr	r3, [pc, #224]	; (80064a0 <xTaskIncrementTick+0x158>)
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d101      	bne.n	80063ca <xTaskIncrementTick+0x82>
 80063c6:	2301      	movs	r3, #1
 80063c8:	e000      	b.n	80063cc <xTaskIncrementTick+0x84>
 80063ca:	2300      	movs	r3, #0
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d004      	beq.n	80063da <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80063d0:	4b36      	ldr	r3, [pc, #216]	; (80064ac <xTaskIncrementTick+0x164>)
 80063d2:	f04f 32ff 	mov.w	r2, #4294967295
 80063d6:	601a      	str	r2, [r3, #0]
					break;
 80063d8:	e03f      	b.n	800645a <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80063da:	4b31      	ldr	r3, [pc, #196]	; (80064a0 <xTaskIncrementTick+0x158>)
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	68db      	ldr	r3, [r3, #12]
 80063e0:	68db      	ldr	r3, [r3, #12]
 80063e2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80063e4:	68bb      	ldr	r3, [r7, #8]
 80063e6:	685b      	ldr	r3, [r3, #4]
 80063e8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80063ea:	693a      	ldr	r2, [r7, #16]
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	429a      	cmp	r2, r3
 80063f0:	d203      	bcs.n	80063fa <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80063f2:	4a2e      	ldr	r2, [pc, #184]	; (80064ac <xTaskIncrementTick+0x164>)
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	6013      	str	r3, [r2, #0]
						break;
 80063f8:	e02f      	b.n	800645a <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80063fa:	68bb      	ldr	r3, [r7, #8]
 80063fc:	3304      	adds	r3, #4
 80063fe:	4618      	mov	r0, r3
 8006400:	f7fe feae 	bl	8005160 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006404:	68bb      	ldr	r3, [r7, #8]
 8006406:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006408:	2b00      	cmp	r3, #0
 800640a:	d004      	beq.n	8006416 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800640c:	68bb      	ldr	r3, [r7, #8]
 800640e:	3318      	adds	r3, #24
 8006410:	4618      	mov	r0, r3
 8006412:	f7fe fea5 	bl	8005160 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006416:	68bb      	ldr	r3, [r7, #8]
 8006418:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800641a:	4b25      	ldr	r3, [pc, #148]	; (80064b0 <xTaskIncrementTick+0x168>)
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	429a      	cmp	r2, r3
 8006420:	d903      	bls.n	800642a <xTaskIncrementTick+0xe2>
 8006422:	68bb      	ldr	r3, [r7, #8]
 8006424:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006426:	4a22      	ldr	r2, [pc, #136]	; (80064b0 <xTaskIncrementTick+0x168>)
 8006428:	6013      	str	r3, [r2, #0]
 800642a:	68bb      	ldr	r3, [r7, #8]
 800642c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800642e:	4613      	mov	r3, r2
 8006430:	009b      	lsls	r3, r3, #2
 8006432:	4413      	add	r3, r2
 8006434:	009b      	lsls	r3, r3, #2
 8006436:	4a1f      	ldr	r2, [pc, #124]	; (80064b4 <xTaskIncrementTick+0x16c>)
 8006438:	441a      	add	r2, r3
 800643a:	68bb      	ldr	r3, [r7, #8]
 800643c:	3304      	adds	r3, #4
 800643e:	4619      	mov	r1, r3
 8006440:	4610      	mov	r0, r2
 8006442:	f7fe fe30 	bl	80050a6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006446:	68bb      	ldr	r3, [r7, #8]
 8006448:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800644a:	4b1b      	ldr	r3, [pc, #108]	; (80064b8 <xTaskIncrementTick+0x170>)
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006450:	429a      	cmp	r2, r3
 8006452:	d3b3      	bcc.n	80063bc <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8006454:	2301      	movs	r3, #1
 8006456:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006458:	e7b0      	b.n	80063bc <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800645a:	4b17      	ldr	r3, [pc, #92]	; (80064b8 <xTaskIncrementTick+0x170>)
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006460:	4914      	ldr	r1, [pc, #80]	; (80064b4 <xTaskIncrementTick+0x16c>)
 8006462:	4613      	mov	r3, r2
 8006464:	009b      	lsls	r3, r3, #2
 8006466:	4413      	add	r3, r2
 8006468:	009b      	lsls	r3, r3, #2
 800646a:	440b      	add	r3, r1
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	2b01      	cmp	r3, #1
 8006470:	d907      	bls.n	8006482 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8006472:	2301      	movs	r3, #1
 8006474:	617b      	str	r3, [r7, #20]
 8006476:	e004      	b.n	8006482 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8006478:	4b10      	ldr	r3, [pc, #64]	; (80064bc <xTaskIncrementTick+0x174>)
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	3301      	adds	r3, #1
 800647e:	4a0f      	ldr	r2, [pc, #60]	; (80064bc <xTaskIncrementTick+0x174>)
 8006480:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8006482:	4b0f      	ldr	r3, [pc, #60]	; (80064c0 <xTaskIncrementTick+0x178>)
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	2b00      	cmp	r3, #0
 8006488:	d001      	beq.n	800648e <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 800648a:	2301      	movs	r3, #1
 800648c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800648e:	697b      	ldr	r3, [r7, #20]
}
 8006490:	4618      	mov	r0, r3
 8006492:	3718      	adds	r7, #24
 8006494:	46bd      	mov	sp, r7
 8006496:	bd80      	pop	{r7, pc}
 8006498:	20000e68 	.word	0x20000e68
 800649c:	20000e44 	.word	0x20000e44
 80064a0:	20000df8 	.word	0x20000df8
 80064a4:	20000dfc 	.word	0x20000dfc
 80064a8:	20000e58 	.word	0x20000e58
 80064ac:	20000e60 	.word	0x20000e60
 80064b0:	20000e48 	.word	0x20000e48
 80064b4:	20000970 	.word	0x20000970
 80064b8:	2000096c 	.word	0x2000096c
 80064bc:	20000e50 	.word	0x20000e50
 80064c0:	20000e54 	.word	0x20000e54

080064c4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80064c4:	b480      	push	{r7}
 80064c6:	b085      	sub	sp, #20
 80064c8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80064ca:	4b28      	ldr	r3, [pc, #160]	; (800656c <vTaskSwitchContext+0xa8>)
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d003      	beq.n	80064da <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80064d2:	4b27      	ldr	r3, [pc, #156]	; (8006570 <vTaskSwitchContext+0xac>)
 80064d4:	2201      	movs	r2, #1
 80064d6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80064d8:	e041      	b.n	800655e <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 80064da:	4b25      	ldr	r3, [pc, #148]	; (8006570 <vTaskSwitchContext+0xac>)
 80064dc:	2200      	movs	r2, #0
 80064de:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80064e0:	4b24      	ldr	r3, [pc, #144]	; (8006574 <vTaskSwitchContext+0xb0>)
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	60fb      	str	r3, [r7, #12]
 80064e6:	e010      	b.n	800650a <vTaskSwitchContext+0x46>
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d10a      	bne.n	8006504 <vTaskSwitchContext+0x40>
	__asm volatile
 80064ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064f2:	f383 8811 	msr	BASEPRI, r3
 80064f6:	f3bf 8f6f 	isb	sy
 80064fa:	f3bf 8f4f 	dsb	sy
 80064fe:	607b      	str	r3, [r7, #4]
}
 8006500:	bf00      	nop
 8006502:	e7fe      	b.n	8006502 <vTaskSwitchContext+0x3e>
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	3b01      	subs	r3, #1
 8006508:	60fb      	str	r3, [r7, #12]
 800650a:	491b      	ldr	r1, [pc, #108]	; (8006578 <vTaskSwitchContext+0xb4>)
 800650c:	68fa      	ldr	r2, [r7, #12]
 800650e:	4613      	mov	r3, r2
 8006510:	009b      	lsls	r3, r3, #2
 8006512:	4413      	add	r3, r2
 8006514:	009b      	lsls	r3, r3, #2
 8006516:	440b      	add	r3, r1
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	2b00      	cmp	r3, #0
 800651c:	d0e4      	beq.n	80064e8 <vTaskSwitchContext+0x24>
 800651e:	68fa      	ldr	r2, [r7, #12]
 8006520:	4613      	mov	r3, r2
 8006522:	009b      	lsls	r3, r3, #2
 8006524:	4413      	add	r3, r2
 8006526:	009b      	lsls	r3, r3, #2
 8006528:	4a13      	ldr	r2, [pc, #76]	; (8006578 <vTaskSwitchContext+0xb4>)
 800652a:	4413      	add	r3, r2
 800652c:	60bb      	str	r3, [r7, #8]
 800652e:	68bb      	ldr	r3, [r7, #8]
 8006530:	685b      	ldr	r3, [r3, #4]
 8006532:	685a      	ldr	r2, [r3, #4]
 8006534:	68bb      	ldr	r3, [r7, #8]
 8006536:	605a      	str	r2, [r3, #4]
 8006538:	68bb      	ldr	r3, [r7, #8]
 800653a:	685a      	ldr	r2, [r3, #4]
 800653c:	68bb      	ldr	r3, [r7, #8]
 800653e:	3308      	adds	r3, #8
 8006540:	429a      	cmp	r2, r3
 8006542:	d104      	bne.n	800654e <vTaskSwitchContext+0x8a>
 8006544:	68bb      	ldr	r3, [r7, #8]
 8006546:	685b      	ldr	r3, [r3, #4]
 8006548:	685a      	ldr	r2, [r3, #4]
 800654a:	68bb      	ldr	r3, [r7, #8]
 800654c:	605a      	str	r2, [r3, #4]
 800654e:	68bb      	ldr	r3, [r7, #8]
 8006550:	685b      	ldr	r3, [r3, #4]
 8006552:	68db      	ldr	r3, [r3, #12]
 8006554:	4a09      	ldr	r2, [pc, #36]	; (800657c <vTaskSwitchContext+0xb8>)
 8006556:	6013      	str	r3, [r2, #0]
 8006558:	4a06      	ldr	r2, [pc, #24]	; (8006574 <vTaskSwitchContext+0xb0>)
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	6013      	str	r3, [r2, #0]
}
 800655e:	bf00      	nop
 8006560:	3714      	adds	r7, #20
 8006562:	46bd      	mov	sp, r7
 8006564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006568:	4770      	bx	lr
 800656a:	bf00      	nop
 800656c:	20000e68 	.word	0x20000e68
 8006570:	20000e54 	.word	0x20000e54
 8006574:	20000e48 	.word	0x20000e48
 8006578:	20000970 	.word	0x20000970
 800657c:	2000096c 	.word	0x2000096c

08006580 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006580:	b580      	push	{r7, lr}
 8006582:	b084      	sub	sp, #16
 8006584:	af00      	add	r7, sp, #0
 8006586:	6078      	str	r0, [r7, #4]
 8006588:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	2b00      	cmp	r3, #0
 800658e:	d10a      	bne.n	80065a6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8006590:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006594:	f383 8811 	msr	BASEPRI, r3
 8006598:	f3bf 8f6f 	isb	sy
 800659c:	f3bf 8f4f 	dsb	sy
 80065a0:	60fb      	str	r3, [r7, #12]
}
 80065a2:	bf00      	nop
 80065a4:	e7fe      	b.n	80065a4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80065a6:	4b07      	ldr	r3, [pc, #28]	; (80065c4 <vTaskPlaceOnEventList+0x44>)
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	3318      	adds	r3, #24
 80065ac:	4619      	mov	r1, r3
 80065ae:	6878      	ldr	r0, [r7, #4]
 80065b0:	f7fe fd9d 	bl	80050ee <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80065b4:	2101      	movs	r1, #1
 80065b6:	6838      	ldr	r0, [r7, #0]
 80065b8:	f000 fa82 	bl	8006ac0 <prvAddCurrentTaskToDelayedList>
}
 80065bc:	bf00      	nop
 80065be:	3710      	adds	r7, #16
 80065c0:	46bd      	mov	sp, r7
 80065c2:	bd80      	pop	{r7, pc}
 80065c4:	2000096c 	.word	0x2000096c

080065c8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80065c8:	b580      	push	{r7, lr}
 80065ca:	b086      	sub	sp, #24
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	60f8      	str	r0, [r7, #12]
 80065d0:	60b9      	str	r1, [r7, #8]
 80065d2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d10a      	bne.n	80065f0 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80065da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065de:	f383 8811 	msr	BASEPRI, r3
 80065e2:	f3bf 8f6f 	isb	sy
 80065e6:	f3bf 8f4f 	dsb	sy
 80065ea:	617b      	str	r3, [r7, #20]
}
 80065ec:	bf00      	nop
 80065ee:	e7fe      	b.n	80065ee <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80065f0:	4b0a      	ldr	r3, [pc, #40]	; (800661c <vTaskPlaceOnEventListRestricted+0x54>)
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	3318      	adds	r3, #24
 80065f6:	4619      	mov	r1, r3
 80065f8:	68f8      	ldr	r0, [r7, #12]
 80065fa:	f7fe fd54 	bl	80050a6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	2b00      	cmp	r3, #0
 8006602:	d002      	beq.n	800660a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8006604:	f04f 33ff 	mov.w	r3, #4294967295
 8006608:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800660a:	6879      	ldr	r1, [r7, #4]
 800660c:	68b8      	ldr	r0, [r7, #8]
 800660e:	f000 fa57 	bl	8006ac0 <prvAddCurrentTaskToDelayedList>
	}
 8006612:	bf00      	nop
 8006614:	3718      	adds	r7, #24
 8006616:	46bd      	mov	sp, r7
 8006618:	bd80      	pop	{r7, pc}
 800661a:	bf00      	nop
 800661c:	2000096c 	.word	0x2000096c

08006620 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006620:	b580      	push	{r7, lr}
 8006622:	b086      	sub	sp, #24
 8006624:	af00      	add	r7, sp, #0
 8006626:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	68db      	ldr	r3, [r3, #12]
 800662c:	68db      	ldr	r3, [r3, #12]
 800662e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006630:	693b      	ldr	r3, [r7, #16]
 8006632:	2b00      	cmp	r3, #0
 8006634:	d10a      	bne.n	800664c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8006636:	f04f 0350 	mov.w	r3, #80	; 0x50
 800663a:	f383 8811 	msr	BASEPRI, r3
 800663e:	f3bf 8f6f 	isb	sy
 8006642:	f3bf 8f4f 	dsb	sy
 8006646:	60fb      	str	r3, [r7, #12]
}
 8006648:	bf00      	nop
 800664a:	e7fe      	b.n	800664a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800664c:	693b      	ldr	r3, [r7, #16]
 800664e:	3318      	adds	r3, #24
 8006650:	4618      	mov	r0, r3
 8006652:	f7fe fd85 	bl	8005160 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006656:	4b1e      	ldr	r3, [pc, #120]	; (80066d0 <xTaskRemoveFromEventList+0xb0>)
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	2b00      	cmp	r3, #0
 800665c:	d11d      	bne.n	800669a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800665e:	693b      	ldr	r3, [r7, #16]
 8006660:	3304      	adds	r3, #4
 8006662:	4618      	mov	r0, r3
 8006664:	f7fe fd7c 	bl	8005160 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006668:	693b      	ldr	r3, [r7, #16]
 800666a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800666c:	4b19      	ldr	r3, [pc, #100]	; (80066d4 <xTaskRemoveFromEventList+0xb4>)
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	429a      	cmp	r2, r3
 8006672:	d903      	bls.n	800667c <xTaskRemoveFromEventList+0x5c>
 8006674:	693b      	ldr	r3, [r7, #16]
 8006676:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006678:	4a16      	ldr	r2, [pc, #88]	; (80066d4 <xTaskRemoveFromEventList+0xb4>)
 800667a:	6013      	str	r3, [r2, #0]
 800667c:	693b      	ldr	r3, [r7, #16]
 800667e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006680:	4613      	mov	r3, r2
 8006682:	009b      	lsls	r3, r3, #2
 8006684:	4413      	add	r3, r2
 8006686:	009b      	lsls	r3, r3, #2
 8006688:	4a13      	ldr	r2, [pc, #76]	; (80066d8 <xTaskRemoveFromEventList+0xb8>)
 800668a:	441a      	add	r2, r3
 800668c:	693b      	ldr	r3, [r7, #16]
 800668e:	3304      	adds	r3, #4
 8006690:	4619      	mov	r1, r3
 8006692:	4610      	mov	r0, r2
 8006694:	f7fe fd07 	bl	80050a6 <vListInsertEnd>
 8006698:	e005      	b.n	80066a6 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800669a:	693b      	ldr	r3, [r7, #16]
 800669c:	3318      	adds	r3, #24
 800669e:	4619      	mov	r1, r3
 80066a0:	480e      	ldr	r0, [pc, #56]	; (80066dc <xTaskRemoveFromEventList+0xbc>)
 80066a2:	f7fe fd00 	bl	80050a6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80066a6:	693b      	ldr	r3, [r7, #16]
 80066a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066aa:	4b0d      	ldr	r3, [pc, #52]	; (80066e0 <xTaskRemoveFromEventList+0xc0>)
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066b0:	429a      	cmp	r2, r3
 80066b2:	d905      	bls.n	80066c0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80066b4:	2301      	movs	r3, #1
 80066b6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80066b8:	4b0a      	ldr	r3, [pc, #40]	; (80066e4 <xTaskRemoveFromEventList+0xc4>)
 80066ba:	2201      	movs	r2, #1
 80066bc:	601a      	str	r2, [r3, #0]
 80066be:	e001      	b.n	80066c4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80066c0:	2300      	movs	r3, #0
 80066c2:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 80066c4:	697b      	ldr	r3, [r7, #20]
}
 80066c6:	4618      	mov	r0, r3
 80066c8:	3718      	adds	r7, #24
 80066ca:	46bd      	mov	sp, r7
 80066cc:	bd80      	pop	{r7, pc}
 80066ce:	bf00      	nop
 80066d0:	20000e68 	.word	0x20000e68
 80066d4:	20000e48 	.word	0x20000e48
 80066d8:	20000970 	.word	0x20000970
 80066dc:	20000e00 	.word	0x20000e00
 80066e0:	2000096c 	.word	0x2000096c
 80066e4:	20000e54 	.word	0x20000e54

080066e8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80066e8:	b480      	push	{r7}
 80066ea:	b083      	sub	sp, #12
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80066f0:	4b06      	ldr	r3, [pc, #24]	; (800670c <vTaskInternalSetTimeOutState+0x24>)
 80066f2:	681a      	ldr	r2, [r3, #0]
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80066f8:	4b05      	ldr	r3, [pc, #20]	; (8006710 <vTaskInternalSetTimeOutState+0x28>)
 80066fa:	681a      	ldr	r2, [r3, #0]
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	605a      	str	r2, [r3, #4]
}
 8006700:	bf00      	nop
 8006702:	370c      	adds	r7, #12
 8006704:	46bd      	mov	sp, r7
 8006706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670a:	4770      	bx	lr
 800670c:	20000e58 	.word	0x20000e58
 8006710:	20000e44 	.word	0x20000e44

08006714 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006714:	b580      	push	{r7, lr}
 8006716:	b088      	sub	sp, #32
 8006718:	af00      	add	r7, sp, #0
 800671a:	6078      	str	r0, [r7, #4]
 800671c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	2b00      	cmp	r3, #0
 8006722:	d10a      	bne.n	800673a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8006724:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006728:	f383 8811 	msr	BASEPRI, r3
 800672c:	f3bf 8f6f 	isb	sy
 8006730:	f3bf 8f4f 	dsb	sy
 8006734:	613b      	str	r3, [r7, #16]
}
 8006736:	bf00      	nop
 8006738:	e7fe      	b.n	8006738 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800673a:	683b      	ldr	r3, [r7, #0]
 800673c:	2b00      	cmp	r3, #0
 800673e:	d10a      	bne.n	8006756 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8006740:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006744:	f383 8811 	msr	BASEPRI, r3
 8006748:	f3bf 8f6f 	isb	sy
 800674c:	f3bf 8f4f 	dsb	sy
 8006750:	60fb      	str	r3, [r7, #12]
}
 8006752:	bf00      	nop
 8006754:	e7fe      	b.n	8006754 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8006756:	f000 fe45 	bl	80073e4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800675a:	4b1d      	ldr	r3, [pc, #116]	; (80067d0 <xTaskCheckForTimeOut+0xbc>)
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	685b      	ldr	r3, [r3, #4]
 8006764:	69ba      	ldr	r2, [r7, #24]
 8006766:	1ad3      	subs	r3, r2, r3
 8006768:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800676a:	683b      	ldr	r3, [r7, #0]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006772:	d102      	bne.n	800677a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006774:	2300      	movs	r3, #0
 8006776:	61fb      	str	r3, [r7, #28]
 8006778:	e023      	b.n	80067c2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681a      	ldr	r2, [r3, #0]
 800677e:	4b15      	ldr	r3, [pc, #84]	; (80067d4 <xTaskCheckForTimeOut+0xc0>)
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	429a      	cmp	r2, r3
 8006784:	d007      	beq.n	8006796 <xTaskCheckForTimeOut+0x82>
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	685b      	ldr	r3, [r3, #4]
 800678a:	69ba      	ldr	r2, [r7, #24]
 800678c:	429a      	cmp	r2, r3
 800678e:	d302      	bcc.n	8006796 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006790:	2301      	movs	r3, #1
 8006792:	61fb      	str	r3, [r7, #28]
 8006794:	e015      	b.n	80067c2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006796:	683b      	ldr	r3, [r7, #0]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	697a      	ldr	r2, [r7, #20]
 800679c:	429a      	cmp	r2, r3
 800679e:	d20b      	bcs.n	80067b8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80067a0:	683b      	ldr	r3, [r7, #0]
 80067a2:	681a      	ldr	r2, [r3, #0]
 80067a4:	697b      	ldr	r3, [r7, #20]
 80067a6:	1ad2      	subs	r2, r2, r3
 80067a8:	683b      	ldr	r3, [r7, #0]
 80067aa:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80067ac:	6878      	ldr	r0, [r7, #4]
 80067ae:	f7ff ff9b 	bl	80066e8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80067b2:	2300      	movs	r3, #0
 80067b4:	61fb      	str	r3, [r7, #28]
 80067b6:	e004      	b.n	80067c2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80067b8:	683b      	ldr	r3, [r7, #0]
 80067ba:	2200      	movs	r2, #0
 80067bc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80067be:	2301      	movs	r3, #1
 80067c0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80067c2:	f000 fe3f 	bl	8007444 <vPortExitCritical>

	return xReturn;
 80067c6:	69fb      	ldr	r3, [r7, #28]
}
 80067c8:	4618      	mov	r0, r3
 80067ca:	3720      	adds	r7, #32
 80067cc:	46bd      	mov	sp, r7
 80067ce:	bd80      	pop	{r7, pc}
 80067d0:	20000e44 	.word	0x20000e44
 80067d4:	20000e58 	.word	0x20000e58

080067d8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80067d8:	b480      	push	{r7}
 80067da:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80067dc:	4b03      	ldr	r3, [pc, #12]	; (80067ec <vTaskMissedYield+0x14>)
 80067de:	2201      	movs	r2, #1
 80067e0:	601a      	str	r2, [r3, #0]
}
 80067e2:	bf00      	nop
 80067e4:	46bd      	mov	sp, r7
 80067e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ea:	4770      	bx	lr
 80067ec:	20000e54 	.word	0x20000e54

080067f0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80067f0:	b580      	push	{r7, lr}
 80067f2:	b082      	sub	sp, #8
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80067f8:	f000 f852 	bl	80068a0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80067fc:	4b06      	ldr	r3, [pc, #24]	; (8006818 <prvIdleTask+0x28>)
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	2b01      	cmp	r3, #1
 8006802:	d9f9      	bls.n	80067f8 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006804:	4b05      	ldr	r3, [pc, #20]	; (800681c <prvIdleTask+0x2c>)
 8006806:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800680a:	601a      	str	r2, [r3, #0]
 800680c:	f3bf 8f4f 	dsb	sy
 8006810:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006814:	e7f0      	b.n	80067f8 <prvIdleTask+0x8>
 8006816:	bf00      	nop
 8006818:	20000970 	.word	0x20000970
 800681c:	e000ed04 	.word	0xe000ed04

08006820 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006820:	b580      	push	{r7, lr}
 8006822:	b082      	sub	sp, #8
 8006824:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006826:	2300      	movs	r3, #0
 8006828:	607b      	str	r3, [r7, #4]
 800682a:	e00c      	b.n	8006846 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800682c:	687a      	ldr	r2, [r7, #4]
 800682e:	4613      	mov	r3, r2
 8006830:	009b      	lsls	r3, r3, #2
 8006832:	4413      	add	r3, r2
 8006834:	009b      	lsls	r3, r3, #2
 8006836:	4a12      	ldr	r2, [pc, #72]	; (8006880 <prvInitialiseTaskLists+0x60>)
 8006838:	4413      	add	r3, r2
 800683a:	4618      	mov	r0, r3
 800683c:	f7fe fc06 	bl	800504c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	3301      	adds	r3, #1
 8006844:	607b      	str	r3, [r7, #4]
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	2b37      	cmp	r3, #55	; 0x37
 800684a:	d9ef      	bls.n	800682c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800684c:	480d      	ldr	r0, [pc, #52]	; (8006884 <prvInitialiseTaskLists+0x64>)
 800684e:	f7fe fbfd 	bl	800504c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006852:	480d      	ldr	r0, [pc, #52]	; (8006888 <prvInitialiseTaskLists+0x68>)
 8006854:	f7fe fbfa 	bl	800504c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006858:	480c      	ldr	r0, [pc, #48]	; (800688c <prvInitialiseTaskLists+0x6c>)
 800685a:	f7fe fbf7 	bl	800504c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800685e:	480c      	ldr	r0, [pc, #48]	; (8006890 <prvInitialiseTaskLists+0x70>)
 8006860:	f7fe fbf4 	bl	800504c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006864:	480b      	ldr	r0, [pc, #44]	; (8006894 <prvInitialiseTaskLists+0x74>)
 8006866:	f7fe fbf1 	bl	800504c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800686a:	4b0b      	ldr	r3, [pc, #44]	; (8006898 <prvInitialiseTaskLists+0x78>)
 800686c:	4a05      	ldr	r2, [pc, #20]	; (8006884 <prvInitialiseTaskLists+0x64>)
 800686e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006870:	4b0a      	ldr	r3, [pc, #40]	; (800689c <prvInitialiseTaskLists+0x7c>)
 8006872:	4a05      	ldr	r2, [pc, #20]	; (8006888 <prvInitialiseTaskLists+0x68>)
 8006874:	601a      	str	r2, [r3, #0]
}
 8006876:	bf00      	nop
 8006878:	3708      	adds	r7, #8
 800687a:	46bd      	mov	sp, r7
 800687c:	bd80      	pop	{r7, pc}
 800687e:	bf00      	nop
 8006880:	20000970 	.word	0x20000970
 8006884:	20000dd0 	.word	0x20000dd0
 8006888:	20000de4 	.word	0x20000de4
 800688c:	20000e00 	.word	0x20000e00
 8006890:	20000e14 	.word	0x20000e14
 8006894:	20000e2c 	.word	0x20000e2c
 8006898:	20000df8 	.word	0x20000df8
 800689c:	20000dfc 	.word	0x20000dfc

080068a0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80068a0:	b580      	push	{r7, lr}
 80068a2:	b082      	sub	sp, #8
 80068a4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80068a6:	e019      	b.n	80068dc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80068a8:	f000 fd9c 	bl	80073e4 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80068ac:	4b10      	ldr	r3, [pc, #64]	; (80068f0 <prvCheckTasksWaitingTermination+0x50>)
 80068ae:	68db      	ldr	r3, [r3, #12]
 80068b0:	68db      	ldr	r3, [r3, #12]
 80068b2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	3304      	adds	r3, #4
 80068b8:	4618      	mov	r0, r3
 80068ba:	f7fe fc51 	bl	8005160 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80068be:	4b0d      	ldr	r3, [pc, #52]	; (80068f4 <prvCheckTasksWaitingTermination+0x54>)
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	3b01      	subs	r3, #1
 80068c4:	4a0b      	ldr	r2, [pc, #44]	; (80068f4 <prvCheckTasksWaitingTermination+0x54>)
 80068c6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80068c8:	4b0b      	ldr	r3, [pc, #44]	; (80068f8 <prvCheckTasksWaitingTermination+0x58>)
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	3b01      	subs	r3, #1
 80068ce:	4a0a      	ldr	r2, [pc, #40]	; (80068f8 <prvCheckTasksWaitingTermination+0x58>)
 80068d0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80068d2:	f000 fdb7 	bl	8007444 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80068d6:	6878      	ldr	r0, [r7, #4]
 80068d8:	f000 f810 	bl	80068fc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80068dc:	4b06      	ldr	r3, [pc, #24]	; (80068f8 <prvCheckTasksWaitingTermination+0x58>)
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d1e1      	bne.n	80068a8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80068e4:	bf00      	nop
 80068e6:	bf00      	nop
 80068e8:	3708      	adds	r7, #8
 80068ea:	46bd      	mov	sp, r7
 80068ec:	bd80      	pop	{r7, pc}
 80068ee:	bf00      	nop
 80068f0:	20000e14 	.word	0x20000e14
 80068f4:	20000e40 	.word	0x20000e40
 80068f8:	20000e28 	.word	0x20000e28

080068fc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80068fc:	b580      	push	{r7, lr}
 80068fe:	b084      	sub	sp, #16
 8006900:	af00      	add	r7, sp, #0
 8006902:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800690a:	2b00      	cmp	r3, #0
 800690c:	d108      	bne.n	8006920 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006912:	4618      	mov	r0, r3
 8006914:	f000 ff4c 	bl	80077b0 <vPortFree>
				vPortFree( pxTCB );
 8006918:	6878      	ldr	r0, [r7, #4]
 800691a:	f000 ff49 	bl	80077b0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800691e:	e018      	b.n	8006952 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006926:	2b01      	cmp	r3, #1
 8006928:	d103      	bne.n	8006932 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800692a:	6878      	ldr	r0, [r7, #4]
 800692c:	f000 ff40 	bl	80077b0 <vPortFree>
	}
 8006930:	e00f      	b.n	8006952 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006938:	2b02      	cmp	r3, #2
 800693a:	d00a      	beq.n	8006952 <prvDeleteTCB+0x56>
	__asm volatile
 800693c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006940:	f383 8811 	msr	BASEPRI, r3
 8006944:	f3bf 8f6f 	isb	sy
 8006948:	f3bf 8f4f 	dsb	sy
 800694c:	60fb      	str	r3, [r7, #12]
}
 800694e:	bf00      	nop
 8006950:	e7fe      	b.n	8006950 <prvDeleteTCB+0x54>
	}
 8006952:	bf00      	nop
 8006954:	3710      	adds	r7, #16
 8006956:	46bd      	mov	sp, r7
 8006958:	bd80      	pop	{r7, pc}
	...

0800695c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800695c:	b480      	push	{r7}
 800695e:	b083      	sub	sp, #12
 8006960:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006962:	4b0f      	ldr	r3, [pc, #60]	; (80069a0 <prvResetNextTaskUnblockTime+0x44>)
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	2b00      	cmp	r3, #0
 800696a:	d101      	bne.n	8006970 <prvResetNextTaskUnblockTime+0x14>
 800696c:	2301      	movs	r3, #1
 800696e:	e000      	b.n	8006972 <prvResetNextTaskUnblockTime+0x16>
 8006970:	2300      	movs	r3, #0
 8006972:	2b00      	cmp	r3, #0
 8006974:	d004      	beq.n	8006980 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006976:	4b0b      	ldr	r3, [pc, #44]	; (80069a4 <prvResetNextTaskUnblockTime+0x48>)
 8006978:	f04f 32ff 	mov.w	r2, #4294967295
 800697c:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800697e:	e008      	b.n	8006992 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006980:	4b07      	ldr	r3, [pc, #28]	; (80069a0 <prvResetNextTaskUnblockTime+0x44>)
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	68db      	ldr	r3, [r3, #12]
 8006986:	68db      	ldr	r3, [r3, #12]
 8006988:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	685b      	ldr	r3, [r3, #4]
 800698e:	4a05      	ldr	r2, [pc, #20]	; (80069a4 <prvResetNextTaskUnblockTime+0x48>)
 8006990:	6013      	str	r3, [r2, #0]
}
 8006992:	bf00      	nop
 8006994:	370c      	adds	r7, #12
 8006996:	46bd      	mov	sp, r7
 8006998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800699c:	4770      	bx	lr
 800699e:	bf00      	nop
 80069a0:	20000df8 	.word	0x20000df8
 80069a4:	20000e60 	.word	0x20000e60

080069a8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80069a8:	b480      	push	{r7}
 80069aa:	b083      	sub	sp, #12
 80069ac:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80069ae:	4b0b      	ldr	r3, [pc, #44]	; (80069dc <xTaskGetSchedulerState+0x34>)
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d102      	bne.n	80069bc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80069b6:	2301      	movs	r3, #1
 80069b8:	607b      	str	r3, [r7, #4]
 80069ba:	e008      	b.n	80069ce <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80069bc:	4b08      	ldr	r3, [pc, #32]	; (80069e0 <xTaskGetSchedulerState+0x38>)
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d102      	bne.n	80069ca <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80069c4:	2302      	movs	r3, #2
 80069c6:	607b      	str	r3, [r7, #4]
 80069c8:	e001      	b.n	80069ce <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80069ca:	2300      	movs	r3, #0
 80069cc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80069ce:	687b      	ldr	r3, [r7, #4]
	}
 80069d0:	4618      	mov	r0, r3
 80069d2:	370c      	adds	r7, #12
 80069d4:	46bd      	mov	sp, r7
 80069d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069da:	4770      	bx	lr
 80069dc:	20000e4c 	.word	0x20000e4c
 80069e0:	20000e68 	.word	0x20000e68

080069e4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80069e4:	b580      	push	{r7, lr}
 80069e6:	b086      	sub	sp, #24
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80069f0:	2300      	movs	r3, #0
 80069f2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d056      	beq.n	8006aa8 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80069fa:	4b2e      	ldr	r3, [pc, #184]	; (8006ab4 <xTaskPriorityDisinherit+0xd0>)
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	693a      	ldr	r2, [r7, #16]
 8006a00:	429a      	cmp	r2, r3
 8006a02:	d00a      	beq.n	8006a1a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8006a04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a08:	f383 8811 	msr	BASEPRI, r3
 8006a0c:	f3bf 8f6f 	isb	sy
 8006a10:	f3bf 8f4f 	dsb	sy
 8006a14:	60fb      	str	r3, [r7, #12]
}
 8006a16:	bf00      	nop
 8006a18:	e7fe      	b.n	8006a18 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006a1a:	693b      	ldr	r3, [r7, #16]
 8006a1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d10a      	bne.n	8006a38 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8006a22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a26:	f383 8811 	msr	BASEPRI, r3
 8006a2a:	f3bf 8f6f 	isb	sy
 8006a2e:	f3bf 8f4f 	dsb	sy
 8006a32:	60bb      	str	r3, [r7, #8]
}
 8006a34:	bf00      	nop
 8006a36:	e7fe      	b.n	8006a36 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8006a38:	693b      	ldr	r3, [r7, #16]
 8006a3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a3c:	1e5a      	subs	r2, r3, #1
 8006a3e:	693b      	ldr	r3, [r7, #16]
 8006a40:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006a42:	693b      	ldr	r3, [r7, #16]
 8006a44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a46:	693b      	ldr	r3, [r7, #16]
 8006a48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a4a:	429a      	cmp	r2, r3
 8006a4c:	d02c      	beq.n	8006aa8 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006a4e:	693b      	ldr	r3, [r7, #16]
 8006a50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d128      	bne.n	8006aa8 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006a56:	693b      	ldr	r3, [r7, #16]
 8006a58:	3304      	adds	r3, #4
 8006a5a:	4618      	mov	r0, r3
 8006a5c:	f7fe fb80 	bl	8005160 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006a60:	693b      	ldr	r3, [r7, #16]
 8006a62:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006a64:	693b      	ldr	r3, [r7, #16]
 8006a66:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006a68:	693b      	ldr	r3, [r7, #16]
 8006a6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a6c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006a70:	693b      	ldr	r3, [r7, #16]
 8006a72:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006a74:	693b      	ldr	r3, [r7, #16]
 8006a76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a78:	4b0f      	ldr	r3, [pc, #60]	; (8006ab8 <xTaskPriorityDisinherit+0xd4>)
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	429a      	cmp	r2, r3
 8006a7e:	d903      	bls.n	8006a88 <xTaskPriorityDisinherit+0xa4>
 8006a80:	693b      	ldr	r3, [r7, #16]
 8006a82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a84:	4a0c      	ldr	r2, [pc, #48]	; (8006ab8 <xTaskPriorityDisinherit+0xd4>)
 8006a86:	6013      	str	r3, [r2, #0]
 8006a88:	693b      	ldr	r3, [r7, #16]
 8006a8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a8c:	4613      	mov	r3, r2
 8006a8e:	009b      	lsls	r3, r3, #2
 8006a90:	4413      	add	r3, r2
 8006a92:	009b      	lsls	r3, r3, #2
 8006a94:	4a09      	ldr	r2, [pc, #36]	; (8006abc <xTaskPriorityDisinherit+0xd8>)
 8006a96:	441a      	add	r2, r3
 8006a98:	693b      	ldr	r3, [r7, #16]
 8006a9a:	3304      	adds	r3, #4
 8006a9c:	4619      	mov	r1, r3
 8006a9e:	4610      	mov	r0, r2
 8006aa0:	f7fe fb01 	bl	80050a6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006aa4:	2301      	movs	r3, #1
 8006aa6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006aa8:	697b      	ldr	r3, [r7, #20]
	}
 8006aaa:	4618      	mov	r0, r3
 8006aac:	3718      	adds	r7, #24
 8006aae:	46bd      	mov	sp, r7
 8006ab0:	bd80      	pop	{r7, pc}
 8006ab2:	bf00      	nop
 8006ab4:	2000096c 	.word	0x2000096c
 8006ab8:	20000e48 	.word	0x20000e48
 8006abc:	20000970 	.word	0x20000970

08006ac0 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006ac0:	b580      	push	{r7, lr}
 8006ac2:	b084      	sub	sp, #16
 8006ac4:	af00      	add	r7, sp, #0
 8006ac6:	6078      	str	r0, [r7, #4]
 8006ac8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006aca:	4b21      	ldr	r3, [pc, #132]	; (8006b50 <prvAddCurrentTaskToDelayedList+0x90>)
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006ad0:	4b20      	ldr	r3, [pc, #128]	; (8006b54 <prvAddCurrentTaskToDelayedList+0x94>)
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	3304      	adds	r3, #4
 8006ad6:	4618      	mov	r0, r3
 8006ad8:	f7fe fb42 	bl	8005160 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ae2:	d10a      	bne.n	8006afa <prvAddCurrentTaskToDelayedList+0x3a>
 8006ae4:	683b      	ldr	r3, [r7, #0]
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d007      	beq.n	8006afa <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006aea:	4b1a      	ldr	r3, [pc, #104]	; (8006b54 <prvAddCurrentTaskToDelayedList+0x94>)
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	3304      	adds	r3, #4
 8006af0:	4619      	mov	r1, r3
 8006af2:	4819      	ldr	r0, [pc, #100]	; (8006b58 <prvAddCurrentTaskToDelayedList+0x98>)
 8006af4:	f7fe fad7 	bl	80050a6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006af8:	e026      	b.n	8006b48 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006afa:	68fa      	ldr	r2, [r7, #12]
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	4413      	add	r3, r2
 8006b00:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006b02:	4b14      	ldr	r3, [pc, #80]	; (8006b54 <prvAddCurrentTaskToDelayedList+0x94>)
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	68ba      	ldr	r2, [r7, #8]
 8006b08:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006b0a:	68ba      	ldr	r2, [r7, #8]
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	429a      	cmp	r2, r3
 8006b10:	d209      	bcs.n	8006b26 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006b12:	4b12      	ldr	r3, [pc, #72]	; (8006b5c <prvAddCurrentTaskToDelayedList+0x9c>)
 8006b14:	681a      	ldr	r2, [r3, #0]
 8006b16:	4b0f      	ldr	r3, [pc, #60]	; (8006b54 <prvAddCurrentTaskToDelayedList+0x94>)
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	3304      	adds	r3, #4
 8006b1c:	4619      	mov	r1, r3
 8006b1e:	4610      	mov	r0, r2
 8006b20:	f7fe fae5 	bl	80050ee <vListInsert>
}
 8006b24:	e010      	b.n	8006b48 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006b26:	4b0e      	ldr	r3, [pc, #56]	; (8006b60 <prvAddCurrentTaskToDelayedList+0xa0>)
 8006b28:	681a      	ldr	r2, [r3, #0]
 8006b2a:	4b0a      	ldr	r3, [pc, #40]	; (8006b54 <prvAddCurrentTaskToDelayedList+0x94>)
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	3304      	adds	r3, #4
 8006b30:	4619      	mov	r1, r3
 8006b32:	4610      	mov	r0, r2
 8006b34:	f7fe fadb 	bl	80050ee <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006b38:	4b0a      	ldr	r3, [pc, #40]	; (8006b64 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	68ba      	ldr	r2, [r7, #8]
 8006b3e:	429a      	cmp	r2, r3
 8006b40:	d202      	bcs.n	8006b48 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006b42:	4a08      	ldr	r2, [pc, #32]	; (8006b64 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006b44:	68bb      	ldr	r3, [r7, #8]
 8006b46:	6013      	str	r3, [r2, #0]
}
 8006b48:	bf00      	nop
 8006b4a:	3710      	adds	r7, #16
 8006b4c:	46bd      	mov	sp, r7
 8006b4e:	bd80      	pop	{r7, pc}
 8006b50:	20000e44 	.word	0x20000e44
 8006b54:	2000096c 	.word	0x2000096c
 8006b58:	20000e2c 	.word	0x20000e2c
 8006b5c:	20000dfc 	.word	0x20000dfc
 8006b60:	20000df8 	.word	0x20000df8
 8006b64:	20000e60 	.word	0x20000e60

08006b68 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006b68:	b580      	push	{r7, lr}
 8006b6a:	b08a      	sub	sp, #40	; 0x28
 8006b6c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006b6e:	2300      	movs	r3, #0
 8006b70:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006b72:	f000 facb 	bl	800710c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006b76:	4b1c      	ldr	r3, [pc, #112]	; (8006be8 <xTimerCreateTimerTask+0x80>)
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d021      	beq.n	8006bc2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006b7e:	2300      	movs	r3, #0
 8006b80:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006b82:	2300      	movs	r3, #0
 8006b84:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006b86:	1d3a      	adds	r2, r7, #4
 8006b88:	f107 0108 	add.w	r1, r7, #8
 8006b8c:	f107 030c 	add.w	r3, r7, #12
 8006b90:	4618      	mov	r0, r3
 8006b92:	f7fe fa41 	bl	8005018 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006b96:	6879      	ldr	r1, [r7, #4]
 8006b98:	68bb      	ldr	r3, [r7, #8]
 8006b9a:	68fa      	ldr	r2, [r7, #12]
 8006b9c:	9202      	str	r2, [sp, #8]
 8006b9e:	9301      	str	r3, [sp, #4]
 8006ba0:	2302      	movs	r3, #2
 8006ba2:	9300      	str	r3, [sp, #0]
 8006ba4:	2300      	movs	r3, #0
 8006ba6:	460a      	mov	r2, r1
 8006ba8:	4910      	ldr	r1, [pc, #64]	; (8006bec <xTimerCreateTimerTask+0x84>)
 8006baa:	4811      	ldr	r0, [pc, #68]	; (8006bf0 <xTimerCreateTimerTask+0x88>)
 8006bac:	f7ff f8de 	bl	8005d6c <xTaskCreateStatic>
 8006bb0:	4603      	mov	r3, r0
 8006bb2:	4a10      	ldr	r2, [pc, #64]	; (8006bf4 <xTimerCreateTimerTask+0x8c>)
 8006bb4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006bb6:	4b0f      	ldr	r3, [pc, #60]	; (8006bf4 <xTimerCreateTimerTask+0x8c>)
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d001      	beq.n	8006bc2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006bbe:	2301      	movs	r3, #1
 8006bc0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006bc2:	697b      	ldr	r3, [r7, #20]
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d10a      	bne.n	8006bde <xTimerCreateTimerTask+0x76>
	__asm volatile
 8006bc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bcc:	f383 8811 	msr	BASEPRI, r3
 8006bd0:	f3bf 8f6f 	isb	sy
 8006bd4:	f3bf 8f4f 	dsb	sy
 8006bd8:	613b      	str	r3, [r7, #16]
}
 8006bda:	bf00      	nop
 8006bdc:	e7fe      	b.n	8006bdc <xTimerCreateTimerTask+0x74>
	return xReturn;
 8006bde:	697b      	ldr	r3, [r7, #20]
}
 8006be0:	4618      	mov	r0, r3
 8006be2:	3718      	adds	r7, #24
 8006be4:	46bd      	mov	sp, r7
 8006be6:	bd80      	pop	{r7, pc}
 8006be8:	20000e9c 	.word	0x20000e9c
 8006bec:	08007a98 	.word	0x08007a98
 8006bf0:	08006d15 	.word	0x08006d15
 8006bf4:	20000ea0 	.word	0x20000ea0

08006bf8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006bf8:	b580      	push	{r7, lr}
 8006bfa:	b08a      	sub	sp, #40	; 0x28
 8006bfc:	af00      	add	r7, sp, #0
 8006bfe:	60f8      	str	r0, [r7, #12]
 8006c00:	60b9      	str	r1, [r7, #8]
 8006c02:	607a      	str	r2, [r7, #4]
 8006c04:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006c06:	2300      	movs	r3, #0
 8006c08:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d10a      	bne.n	8006c26 <xTimerGenericCommand+0x2e>
	__asm volatile
 8006c10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c14:	f383 8811 	msr	BASEPRI, r3
 8006c18:	f3bf 8f6f 	isb	sy
 8006c1c:	f3bf 8f4f 	dsb	sy
 8006c20:	623b      	str	r3, [r7, #32]
}
 8006c22:	bf00      	nop
 8006c24:	e7fe      	b.n	8006c24 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006c26:	4b1a      	ldr	r3, [pc, #104]	; (8006c90 <xTimerGenericCommand+0x98>)
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d02a      	beq.n	8006c84 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006c2e:	68bb      	ldr	r3, [r7, #8]
 8006c30:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006c3a:	68bb      	ldr	r3, [r7, #8]
 8006c3c:	2b05      	cmp	r3, #5
 8006c3e:	dc18      	bgt.n	8006c72 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006c40:	f7ff feb2 	bl	80069a8 <xTaskGetSchedulerState>
 8006c44:	4603      	mov	r3, r0
 8006c46:	2b02      	cmp	r3, #2
 8006c48:	d109      	bne.n	8006c5e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006c4a:	4b11      	ldr	r3, [pc, #68]	; (8006c90 <xTimerGenericCommand+0x98>)
 8006c4c:	6818      	ldr	r0, [r3, #0]
 8006c4e:	f107 0110 	add.w	r1, r7, #16
 8006c52:	2300      	movs	r3, #0
 8006c54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006c56:	f7fe fc57 	bl	8005508 <xQueueGenericSend>
 8006c5a:	6278      	str	r0, [r7, #36]	; 0x24
 8006c5c:	e012      	b.n	8006c84 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006c5e:	4b0c      	ldr	r3, [pc, #48]	; (8006c90 <xTimerGenericCommand+0x98>)
 8006c60:	6818      	ldr	r0, [r3, #0]
 8006c62:	f107 0110 	add.w	r1, r7, #16
 8006c66:	2300      	movs	r3, #0
 8006c68:	2200      	movs	r2, #0
 8006c6a:	f7fe fc4d 	bl	8005508 <xQueueGenericSend>
 8006c6e:	6278      	str	r0, [r7, #36]	; 0x24
 8006c70:	e008      	b.n	8006c84 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006c72:	4b07      	ldr	r3, [pc, #28]	; (8006c90 <xTimerGenericCommand+0x98>)
 8006c74:	6818      	ldr	r0, [r3, #0]
 8006c76:	f107 0110 	add.w	r1, r7, #16
 8006c7a:	2300      	movs	r3, #0
 8006c7c:	683a      	ldr	r2, [r7, #0]
 8006c7e:	f7fe fd41 	bl	8005704 <xQueueGenericSendFromISR>
 8006c82:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006c86:	4618      	mov	r0, r3
 8006c88:	3728      	adds	r7, #40	; 0x28
 8006c8a:	46bd      	mov	sp, r7
 8006c8c:	bd80      	pop	{r7, pc}
 8006c8e:	bf00      	nop
 8006c90:	20000e9c 	.word	0x20000e9c

08006c94 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006c94:	b580      	push	{r7, lr}
 8006c96:	b088      	sub	sp, #32
 8006c98:	af02      	add	r7, sp, #8
 8006c9a:	6078      	str	r0, [r7, #4]
 8006c9c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006c9e:	4b1c      	ldr	r3, [pc, #112]	; (8006d10 <prvProcessExpiredTimer+0x7c>)
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	68db      	ldr	r3, [r3, #12]
 8006ca4:	68db      	ldr	r3, [r3, #12]
 8006ca6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006ca8:	697b      	ldr	r3, [r7, #20]
 8006caa:	3304      	adds	r3, #4
 8006cac:	4618      	mov	r0, r3
 8006cae:	f7fe fa57 	bl	8005160 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8006cb2:	697b      	ldr	r3, [r7, #20]
 8006cb4:	69db      	ldr	r3, [r3, #28]
 8006cb6:	2b01      	cmp	r3, #1
 8006cb8:	d122      	bne.n	8006d00 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006cba:	697b      	ldr	r3, [r7, #20]
 8006cbc:	699a      	ldr	r2, [r3, #24]
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	18d1      	adds	r1, r2, r3
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	683a      	ldr	r2, [r7, #0]
 8006cc6:	6978      	ldr	r0, [r7, #20]
 8006cc8:	f000 f8c8 	bl	8006e5c <prvInsertTimerInActiveList>
 8006ccc:	4603      	mov	r3, r0
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d016      	beq.n	8006d00 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006cd2:	2300      	movs	r3, #0
 8006cd4:	9300      	str	r3, [sp, #0]
 8006cd6:	2300      	movs	r3, #0
 8006cd8:	687a      	ldr	r2, [r7, #4]
 8006cda:	2100      	movs	r1, #0
 8006cdc:	6978      	ldr	r0, [r7, #20]
 8006cde:	f7ff ff8b 	bl	8006bf8 <xTimerGenericCommand>
 8006ce2:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006ce4:	693b      	ldr	r3, [r7, #16]
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d10a      	bne.n	8006d00 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 8006cea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cee:	f383 8811 	msr	BASEPRI, r3
 8006cf2:	f3bf 8f6f 	isb	sy
 8006cf6:	f3bf 8f4f 	dsb	sy
 8006cfa:	60fb      	str	r3, [r7, #12]
}
 8006cfc:	bf00      	nop
 8006cfe:	e7fe      	b.n	8006cfe <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006d00:	697b      	ldr	r3, [r7, #20]
 8006d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d04:	6978      	ldr	r0, [r7, #20]
 8006d06:	4798      	blx	r3
}
 8006d08:	bf00      	nop
 8006d0a:	3718      	adds	r7, #24
 8006d0c:	46bd      	mov	sp, r7
 8006d0e:	bd80      	pop	{r7, pc}
 8006d10:	20000e94 	.word	0x20000e94

08006d14 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8006d14:	b580      	push	{r7, lr}
 8006d16:	b084      	sub	sp, #16
 8006d18:	af00      	add	r7, sp, #0
 8006d1a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006d1c:	f107 0308 	add.w	r3, r7, #8
 8006d20:	4618      	mov	r0, r3
 8006d22:	f000 f857 	bl	8006dd4 <prvGetNextExpireTime>
 8006d26:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006d28:	68bb      	ldr	r3, [r7, #8]
 8006d2a:	4619      	mov	r1, r3
 8006d2c:	68f8      	ldr	r0, [r7, #12]
 8006d2e:	f000 f803 	bl	8006d38 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006d32:	f000 f8d5 	bl	8006ee0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006d36:	e7f1      	b.n	8006d1c <prvTimerTask+0x8>

08006d38 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006d38:	b580      	push	{r7, lr}
 8006d3a:	b084      	sub	sp, #16
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	6078      	str	r0, [r7, #4]
 8006d40:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006d42:	f7ff fa45 	bl	80061d0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006d46:	f107 0308 	add.w	r3, r7, #8
 8006d4a:	4618      	mov	r0, r3
 8006d4c:	f000 f866 	bl	8006e1c <prvSampleTimeNow>
 8006d50:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006d52:	68bb      	ldr	r3, [r7, #8]
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d130      	bne.n	8006dba <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006d58:	683b      	ldr	r3, [r7, #0]
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d10a      	bne.n	8006d74 <prvProcessTimerOrBlockTask+0x3c>
 8006d5e:	687a      	ldr	r2, [r7, #4]
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	429a      	cmp	r2, r3
 8006d64:	d806      	bhi.n	8006d74 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006d66:	f7ff fa41 	bl	80061ec <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006d6a:	68f9      	ldr	r1, [r7, #12]
 8006d6c:	6878      	ldr	r0, [r7, #4]
 8006d6e:	f7ff ff91 	bl	8006c94 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006d72:	e024      	b.n	8006dbe <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006d74:	683b      	ldr	r3, [r7, #0]
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d008      	beq.n	8006d8c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006d7a:	4b13      	ldr	r3, [pc, #76]	; (8006dc8 <prvProcessTimerOrBlockTask+0x90>)
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	bf0c      	ite	eq
 8006d84:	2301      	moveq	r3, #1
 8006d86:	2300      	movne	r3, #0
 8006d88:	b2db      	uxtb	r3, r3
 8006d8a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006d8c:	4b0f      	ldr	r3, [pc, #60]	; (8006dcc <prvProcessTimerOrBlockTask+0x94>)
 8006d8e:	6818      	ldr	r0, [r3, #0]
 8006d90:	687a      	ldr	r2, [r7, #4]
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	1ad3      	subs	r3, r2, r3
 8006d96:	683a      	ldr	r2, [r7, #0]
 8006d98:	4619      	mov	r1, r3
 8006d9a:	f7fe ffb3 	bl	8005d04 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006d9e:	f7ff fa25 	bl	80061ec <xTaskResumeAll>
 8006da2:	4603      	mov	r3, r0
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d10a      	bne.n	8006dbe <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006da8:	4b09      	ldr	r3, [pc, #36]	; (8006dd0 <prvProcessTimerOrBlockTask+0x98>)
 8006daa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006dae:	601a      	str	r2, [r3, #0]
 8006db0:	f3bf 8f4f 	dsb	sy
 8006db4:	f3bf 8f6f 	isb	sy
}
 8006db8:	e001      	b.n	8006dbe <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006dba:	f7ff fa17 	bl	80061ec <xTaskResumeAll>
}
 8006dbe:	bf00      	nop
 8006dc0:	3710      	adds	r7, #16
 8006dc2:	46bd      	mov	sp, r7
 8006dc4:	bd80      	pop	{r7, pc}
 8006dc6:	bf00      	nop
 8006dc8:	20000e98 	.word	0x20000e98
 8006dcc:	20000e9c 	.word	0x20000e9c
 8006dd0:	e000ed04 	.word	0xe000ed04

08006dd4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006dd4:	b480      	push	{r7}
 8006dd6:	b085      	sub	sp, #20
 8006dd8:	af00      	add	r7, sp, #0
 8006dda:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006ddc:	4b0e      	ldr	r3, [pc, #56]	; (8006e18 <prvGetNextExpireTime+0x44>)
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	bf0c      	ite	eq
 8006de6:	2301      	moveq	r3, #1
 8006de8:	2300      	movne	r3, #0
 8006dea:	b2db      	uxtb	r3, r3
 8006dec:	461a      	mov	r2, r3
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d105      	bne.n	8006e06 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006dfa:	4b07      	ldr	r3, [pc, #28]	; (8006e18 <prvGetNextExpireTime+0x44>)
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	68db      	ldr	r3, [r3, #12]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	60fb      	str	r3, [r7, #12]
 8006e04:	e001      	b.n	8006e0a <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006e06:	2300      	movs	r3, #0
 8006e08:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006e0a:	68fb      	ldr	r3, [r7, #12]
}
 8006e0c:	4618      	mov	r0, r3
 8006e0e:	3714      	adds	r7, #20
 8006e10:	46bd      	mov	sp, r7
 8006e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e16:	4770      	bx	lr
 8006e18:	20000e94 	.word	0x20000e94

08006e1c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006e1c:	b580      	push	{r7, lr}
 8006e1e:	b084      	sub	sp, #16
 8006e20:	af00      	add	r7, sp, #0
 8006e22:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006e24:	f7ff fa80 	bl	8006328 <xTaskGetTickCount>
 8006e28:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006e2a:	4b0b      	ldr	r3, [pc, #44]	; (8006e58 <prvSampleTimeNow+0x3c>)
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	68fa      	ldr	r2, [r7, #12]
 8006e30:	429a      	cmp	r2, r3
 8006e32:	d205      	bcs.n	8006e40 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006e34:	f000 f908 	bl	8007048 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	2201      	movs	r2, #1
 8006e3c:	601a      	str	r2, [r3, #0]
 8006e3e:	e002      	b.n	8006e46 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	2200      	movs	r2, #0
 8006e44:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006e46:	4a04      	ldr	r2, [pc, #16]	; (8006e58 <prvSampleTimeNow+0x3c>)
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006e4c:	68fb      	ldr	r3, [r7, #12]
}
 8006e4e:	4618      	mov	r0, r3
 8006e50:	3710      	adds	r7, #16
 8006e52:	46bd      	mov	sp, r7
 8006e54:	bd80      	pop	{r7, pc}
 8006e56:	bf00      	nop
 8006e58:	20000ea4 	.word	0x20000ea4

08006e5c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006e5c:	b580      	push	{r7, lr}
 8006e5e:	b086      	sub	sp, #24
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	60f8      	str	r0, [r7, #12]
 8006e64:	60b9      	str	r1, [r7, #8]
 8006e66:	607a      	str	r2, [r7, #4]
 8006e68:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006e6a:	2300      	movs	r3, #0
 8006e6c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	68ba      	ldr	r2, [r7, #8]
 8006e72:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	68fa      	ldr	r2, [r7, #12]
 8006e78:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006e7a:	68ba      	ldr	r2, [r7, #8]
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	429a      	cmp	r2, r3
 8006e80:	d812      	bhi.n	8006ea8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006e82:	687a      	ldr	r2, [r7, #4]
 8006e84:	683b      	ldr	r3, [r7, #0]
 8006e86:	1ad2      	subs	r2, r2, r3
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	699b      	ldr	r3, [r3, #24]
 8006e8c:	429a      	cmp	r2, r3
 8006e8e:	d302      	bcc.n	8006e96 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006e90:	2301      	movs	r3, #1
 8006e92:	617b      	str	r3, [r7, #20]
 8006e94:	e01b      	b.n	8006ece <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006e96:	4b10      	ldr	r3, [pc, #64]	; (8006ed8 <prvInsertTimerInActiveList+0x7c>)
 8006e98:	681a      	ldr	r2, [r3, #0]
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	3304      	adds	r3, #4
 8006e9e:	4619      	mov	r1, r3
 8006ea0:	4610      	mov	r0, r2
 8006ea2:	f7fe f924 	bl	80050ee <vListInsert>
 8006ea6:	e012      	b.n	8006ece <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006ea8:	687a      	ldr	r2, [r7, #4]
 8006eaa:	683b      	ldr	r3, [r7, #0]
 8006eac:	429a      	cmp	r2, r3
 8006eae:	d206      	bcs.n	8006ebe <prvInsertTimerInActiveList+0x62>
 8006eb0:	68ba      	ldr	r2, [r7, #8]
 8006eb2:	683b      	ldr	r3, [r7, #0]
 8006eb4:	429a      	cmp	r2, r3
 8006eb6:	d302      	bcc.n	8006ebe <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006eb8:	2301      	movs	r3, #1
 8006eba:	617b      	str	r3, [r7, #20]
 8006ebc:	e007      	b.n	8006ece <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006ebe:	4b07      	ldr	r3, [pc, #28]	; (8006edc <prvInsertTimerInActiveList+0x80>)
 8006ec0:	681a      	ldr	r2, [r3, #0]
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	3304      	adds	r3, #4
 8006ec6:	4619      	mov	r1, r3
 8006ec8:	4610      	mov	r0, r2
 8006eca:	f7fe f910 	bl	80050ee <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006ece:	697b      	ldr	r3, [r7, #20]
}
 8006ed0:	4618      	mov	r0, r3
 8006ed2:	3718      	adds	r7, #24
 8006ed4:	46bd      	mov	sp, r7
 8006ed6:	bd80      	pop	{r7, pc}
 8006ed8:	20000e98 	.word	0x20000e98
 8006edc:	20000e94 	.word	0x20000e94

08006ee0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006ee0:	b580      	push	{r7, lr}
 8006ee2:	b08e      	sub	sp, #56	; 0x38
 8006ee4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006ee6:	e09d      	b.n	8007024 <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	da18      	bge.n	8006f20 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006eee:	1d3b      	adds	r3, r7, #4
 8006ef0:	3304      	adds	r3, #4
 8006ef2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006ef4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d10a      	bne.n	8006f10 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8006efa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006efe:	f383 8811 	msr	BASEPRI, r3
 8006f02:	f3bf 8f6f 	isb	sy
 8006f06:	f3bf 8f4f 	dsb	sy
 8006f0a:	61fb      	str	r3, [r7, #28]
}
 8006f0c:	bf00      	nop
 8006f0e:	e7fe      	b.n	8006f0e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006f10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006f16:	6850      	ldr	r0, [r2, #4]
 8006f18:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006f1a:	6892      	ldr	r2, [r2, #8]
 8006f1c:	4611      	mov	r1, r2
 8006f1e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	db7e      	blt.n	8007024 <prvProcessReceivedCommands+0x144>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006f2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f2c:	695b      	ldr	r3, [r3, #20]
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d004      	beq.n	8006f3c <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006f32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f34:	3304      	adds	r3, #4
 8006f36:	4618      	mov	r0, r3
 8006f38:	f7fe f912 	bl	8005160 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006f3c:	463b      	mov	r3, r7
 8006f3e:	4618      	mov	r0, r3
 8006f40:	f7ff ff6c 	bl	8006e1c <prvSampleTimeNow>
 8006f44:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	2b09      	cmp	r3, #9
 8006f4a:	d86a      	bhi.n	8007022 <prvProcessReceivedCommands+0x142>
 8006f4c:	a201      	add	r2, pc, #4	; (adr r2, 8006f54 <prvProcessReceivedCommands+0x74>)
 8006f4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f52:	bf00      	nop
 8006f54:	08006f7d 	.word	0x08006f7d
 8006f58:	08006f7d 	.word	0x08006f7d
 8006f5c:	08006f7d 	.word	0x08006f7d
 8006f60:	08007025 	.word	0x08007025
 8006f64:	08006fd9 	.word	0x08006fd9
 8006f68:	08007011 	.word	0x08007011
 8006f6c:	08006f7d 	.word	0x08006f7d
 8006f70:	08006f7d 	.word	0x08006f7d
 8006f74:	08007025 	.word	0x08007025
 8006f78:	08006fd9 	.word	0x08006fd9
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006f7c:	68ba      	ldr	r2, [r7, #8]
 8006f7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f80:	699b      	ldr	r3, [r3, #24]
 8006f82:	18d1      	adds	r1, r2, r3
 8006f84:	68bb      	ldr	r3, [r7, #8]
 8006f86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f88:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006f8a:	f7ff ff67 	bl	8006e5c <prvInsertTimerInActiveList>
 8006f8e:	4603      	mov	r3, r0
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d047      	beq.n	8007024 <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006f94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f98:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006f9a:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8006f9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f9e:	69db      	ldr	r3, [r3, #28]
 8006fa0:	2b01      	cmp	r3, #1
 8006fa2:	d13f      	bne.n	8007024 <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006fa4:	68ba      	ldr	r2, [r7, #8]
 8006fa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fa8:	699b      	ldr	r3, [r3, #24]
 8006faa:	441a      	add	r2, r3
 8006fac:	2300      	movs	r3, #0
 8006fae:	9300      	str	r3, [sp, #0]
 8006fb0:	2300      	movs	r3, #0
 8006fb2:	2100      	movs	r1, #0
 8006fb4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006fb6:	f7ff fe1f 	bl	8006bf8 <xTimerGenericCommand>
 8006fba:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006fbc:	6a3b      	ldr	r3, [r7, #32]
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d130      	bne.n	8007024 <prvProcessReceivedCommands+0x144>
	__asm volatile
 8006fc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fc6:	f383 8811 	msr	BASEPRI, r3
 8006fca:	f3bf 8f6f 	isb	sy
 8006fce:	f3bf 8f4f 	dsb	sy
 8006fd2:	61bb      	str	r3, [r7, #24]
}
 8006fd4:	bf00      	nop
 8006fd6:	e7fe      	b.n	8006fd6 <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006fd8:	68ba      	ldr	r2, [r7, #8]
 8006fda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fdc:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006fde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fe0:	699b      	ldr	r3, [r3, #24]
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d10a      	bne.n	8006ffc <prvProcessReceivedCommands+0x11c>
	__asm volatile
 8006fe6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fea:	f383 8811 	msr	BASEPRI, r3
 8006fee:	f3bf 8f6f 	isb	sy
 8006ff2:	f3bf 8f4f 	dsb	sy
 8006ff6:	617b      	str	r3, [r7, #20]
}
 8006ff8:	bf00      	nop
 8006ffa:	e7fe      	b.n	8006ffa <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006ffc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ffe:	699a      	ldr	r2, [r3, #24]
 8007000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007002:	18d1      	adds	r1, r2, r3
 8007004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007006:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007008:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800700a:	f7ff ff27 	bl	8006e5c <prvInsertTimerInActiveList>
					break;
 800700e:	e009      	b.n	8007024 <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8007010:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007012:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007016:	2b00      	cmp	r3, #0
 8007018:	d104      	bne.n	8007024 <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 800701a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800701c:	f000 fbc8 	bl	80077b0 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007020:	e000      	b.n	8007024 <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
 8007022:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007024:	4b07      	ldr	r3, [pc, #28]	; (8007044 <prvProcessReceivedCommands+0x164>)
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	1d39      	adds	r1, r7, #4
 800702a:	2200      	movs	r2, #0
 800702c:	4618      	mov	r0, r3
 800702e:	f7fe fc01 	bl	8005834 <xQueueReceive>
 8007032:	4603      	mov	r3, r0
 8007034:	2b00      	cmp	r3, #0
 8007036:	f47f af57 	bne.w	8006ee8 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800703a:	bf00      	nop
 800703c:	bf00      	nop
 800703e:	3730      	adds	r7, #48	; 0x30
 8007040:	46bd      	mov	sp, r7
 8007042:	bd80      	pop	{r7, pc}
 8007044:	20000e9c 	.word	0x20000e9c

08007048 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007048:	b580      	push	{r7, lr}
 800704a:	b088      	sub	sp, #32
 800704c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800704e:	e045      	b.n	80070dc <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007050:	4b2c      	ldr	r3, [pc, #176]	; (8007104 <prvSwitchTimerLists+0xbc>)
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	68db      	ldr	r3, [r3, #12]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800705a:	4b2a      	ldr	r3, [pc, #168]	; (8007104 <prvSwitchTimerLists+0xbc>)
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	68db      	ldr	r3, [r3, #12]
 8007060:	68db      	ldr	r3, [r3, #12]
 8007062:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	3304      	adds	r3, #4
 8007068:	4618      	mov	r0, r3
 800706a:	f7fe f879 	bl	8005160 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007072:	68f8      	ldr	r0, [r7, #12]
 8007074:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	69db      	ldr	r3, [r3, #28]
 800707a:	2b01      	cmp	r3, #1
 800707c:	d12e      	bne.n	80070dc <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	699b      	ldr	r3, [r3, #24]
 8007082:	693a      	ldr	r2, [r7, #16]
 8007084:	4413      	add	r3, r2
 8007086:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007088:	68ba      	ldr	r2, [r7, #8]
 800708a:	693b      	ldr	r3, [r7, #16]
 800708c:	429a      	cmp	r2, r3
 800708e:	d90e      	bls.n	80070ae <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	68ba      	ldr	r2, [r7, #8]
 8007094:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	68fa      	ldr	r2, [r7, #12]
 800709a:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800709c:	4b19      	ldr	r3, [pc, #100]	; (8007104 <prvSwitchTimerLists+0xbc>)
 800709e:	681a      	ldr	r2, [r3, #0]
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	3304      	adds	r3, #4
 80070a4:	4619      	mov	r1, r3
 80070a6:	4610      	mov	r0, r2
 80070a8:	f7fe f821 	bl	80050ee <vListInsert>
 80070ac:	e016      	b.n	80070dc <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80070ae:	2300      	movs	r3, #0
 80070b0:	9300      	str	r3, [sp, #0]
 80070b2:	2300      	movs	r3, #0
 80070b4:	693a      	ldr	r2, [r7, #16]
 80070b6:	2100      	movs	r1, #0
 80070b8:	68f8      	ldr	r0, [r7, #12]
 80070ba:	f7ff fd9d 	bl	8006bf8 <xTimerGenericCommand>
 80070be:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d10a      	bne.n	80070dc <prvSwitchTimerLists+0x94>
	__asm volatile
 80070c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070ca:	f383 8811 	msr	BASEPRI, r3
 80070ce:	f3bf 8f6f 	isb	sy
 80070d2:	f3bf 8f4f 	dsb	sy
 80070d6:	603b      	str	r3, [r7, #0]
}
 80070d8:	bf00      	nop
 80070da:	e7fe      	b.n	80070da <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80070dc:	4b09      	ldr	r3, [pc, #36]	; (8007104 <prvSwitchTimerLists+0xbc>)
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d1b4      	bne.n	8007050 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80070e6:	4b07      	ldr	r3, [pc, #28]	; (8007104 <prvSwitchTimerLists+0xbc>)
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80070ec:	4b06      	ldr	r3, [pc, #24]	; (8007108 <prvSwitchTimerLists+0xc0>)
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	4a04      	ldr	r2, [pc, #16]	; (8007104 <prvSwitchTimerLists+0xbc>)
 80070f2:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80070f4:	4a04      	ldr	r2, [pc, #16]	; (8007108 <prvSwitchTimerLists+0xc0>)
 80070f6:	697b      	ldr	r3, [r7, #20]
 80070f8:	6013      	str	r3, [r2, #0]
}
 80070fa:	bf00      	nop
 80070fc:	3718      	adds	r7, #24
 80070fe:	46bd      	mov	sp, r7
 8007100:	bd80      	pop	{r7, pc}
 8007102:	bf00      	nop
 8007104:	20000e94 	.word	0x20000e94
 8007108:	20000e98 	.word	0x20000e98

0800710c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800710c:	b580      	push	{r7, lr}
 800710e:	b082      	sub	sp, #8
 8007110:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007112:	f000 f967 	bl	80073e4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007116:	4b15      	ldr	r3, [pc, #84]	; (800716c <prvCheckForValidListAndQueue+0x60>)
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	2b00      	cmp	r3, #0
 800711c:	d120      	bne.n	8007160 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800711e:	4814      	ldr	r0, [pc, #80]	; (8007170 <prvCheckForValidListAndQueue+0x64>)
 8007120:	f7fd ff94 	bl	800504c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007124:	4813      	ldr	r0, [pc, #76]	; (8007174 <prvCheckForValidListAndQueue+0x68>)
 8007126:	f7fd ff91 	bl	800504c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800712a:	4b13      	ldr	r3, [pc, #76]	; (8007178 <prvCheckForValidListAndQueue+0x6c>)
 800712c:	4a10      	ldr	r2, [pc, #64]	; (8007170 <prvCheckForValidListAndQueue+0x64>)
 800712e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007130:	4b12      	ldr	r3, [pc, #72]	; (800717c <prvCheckForValidListAndQueue+0x70>)
 8007132:	4a10      	ldr	r2, [pc, #64]	; (8007174 <prvCheckForValidListAndQueue+0x68>)
 8007134:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007136:	2300      	movs	r3, #0
 8007138:	9300      	str	r3, [sp, #0]
 800713a:	4b11      	ldr	r3, [pc, #68]	; (8007180 <prvCheckForValidListAndQueue+0x74>)
 800713c:	4a11      	ldr	r2, [pc, #68]	; (8007184 <prvCheckForValidListAndQueue+0x78>)
 800713e:	2110      	movs	r1, #16
 8007140:	200a      	movs	r0, #10
 8007142:	f7fe f89f 	bl	8005284 <xQueueGenericCreateStatic>
 8007146:	4603      	mov	r3, r0
 8007148:	4a08      	ldr	r2, [pc, #32]	; (800716c <prvCheckForValidListAndQueue+0x60>)
 800714a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800714c:	4b07      	ldr	r3, [pc, #28]	; (800716c <prvCheckForValidListAndQueue+0x60>)
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	2b00      	cmp	r3, #0
 8007152:	d005      	beq.n	8007160 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007154:	4b05      	ldr	r3, [pc, #20]	; (800716c <prvCheckForValidListAndQueue+0x60>)
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	490b      	ldr	r1, [pc, #44]	; (8007188 <prvCheckForValidListAndQueue+0x7c>)
 800715a:	4618      	mov	r0, r3
 800715c:	f7fe fd7e 	bl	8005c5c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007160:	f000 f970 	bl	8007444 <vPortExitCritical>
}
 8007164:	bf00      	nop
 8007166:	46bd      	mov	sp, r7
 8007168:	bd80      	pop	{r7, pc}
 800716a:	bf00      	nop
 800716c:	20000e9c 	.word	0x20000e9c
 8007170:	20000e6c 	.word	0x20000e6c
 8007174:	20000e80 	.word	0x20000e80
 8007178:	20000e94 	.word	0x20000e94
 800717c:	20000e98 	.word	0x20000e98
 8007180:	20000f48 	.word	0x20000f48
 8007184:	20000ea8 	.word	0x20000ea8
 8007188:	08007aa0 	.word	0x08007aa0

0800718c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800718c:	b480      	push	{r7}
 800718e:	b085      	sub	sp, #20
 8007190:	af00      	add	r7, sp, #0
 8007192:	60f8      	str	r0, [r7, #12]
 8007194:	60b9      	str	r1, [r7, #8]
 8007196:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	3b04      	subs	r3, #4
 800719c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80071a4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	3b04      	subs	r3, #4
 80071aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80071ac:	68bb      	ldr	r3, [r7, #8]
 80071ae:	f023 0201 	bic.w	r2, r3, #1
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	3b04      	subs	r3, #4
 80071ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80071bc:	4a0c      	ldr	r2, [pc, #48]	; (80071f0 <pxPortInitialiseStack+0x64>)
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	3b14      	subs	r3, #20
 80071c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80071c8:	687a      	ldr	r2, [r7, #4]
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	3b04      	subs	r3, #4
 80071d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	f06f 0202 	mvn.w	r2, #2
 80071da:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	3b20      	subs	r3, #32
 80071e0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80071e2:	68fb      	ldr	r3, [r7, #12]
}
 80071e4:	4618      	mov	r0, r3
 80071e6:	3714      	adds	r7, #20
 80071e8:	46bd      	mov	sp, r7
 80071ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ee:	4770      	bx	lr
 80071f0:	080071f5 	.word	0x080071f5

080071f4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80071f4:	b480      	push	{r7}
 80071f6:	b085      	sub	sp, #20
 80071f8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80071fa:	2300      	movs	r3, #0
 80071fc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80071fe:	4b12      	ldr	r3, [pc, #72]	; (8007248 <prvTaskExitError+0x54>)
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007206:	d00a      	beq.n	800721e <prvTaskExitError+0x2a>
	__asm volatile
 8007208:	f04f 0350 	mov.w	r3, #80	; 0x50
 800720c:	f383 8811 	msr	BASEPRI, r3
 8007210:	f3bf 8f6f 	isb	sy
 8007214:	f3bf 8f4f 	dsb	sy
 8007218:	60fb      	str	r3, [r7, #12]
}
 800721a:	bf00      	nop
 800721c:	e7fe      	b.n	800721c <prvTaskExitError+0x28>
	__asm volatile
 800721e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007222:	f383 8811 	msr	BASEPRI, r3
 8007226:	f3bf 8f6f 	isb	sy
 800722a:	f3bf 8f4f 	dsb	sy
 800722e:	60bb      	str	r3, [r7, #8]
}
 8007230:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007232:	bf00      	nop
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	2b00      	cmp	r3, #0
 8007238:	d0fc      	beq.n	8007234 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800723a:	bf00      	nop
 800723c:	bf00      	nop
 800723e:	3714      	adds	r7, #20
 8007240:	46bd      	mov	sp, r7
 8007242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007246:	4770      	bx	lr
 8007248:	20000074 	.word	0x20000074
 800724c:	00000000 	.word	0x00000000

08007250 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007250:	4b07      	ldr	r3, [pc, #28]	; (8007270 <pxCurrentTCBConst2>)
 8007252:	6819      	ldr	r1, [r3, #0]
 8007254:	6808      	ldr	r0, [r1, #0]
 8007256:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800725a:	f380 8809 	msr	PSP, r0
 800725e:	f3bf 8f6f 	isb	sy
 8007262:	f04f 0000 	mov.w	r0, #0
 8007266:	f380 8811 	msr	BASEPRI, r0
 800726a:	4770      	bx	lr
 800726c:	f3af 8000 	nop.w

08007270 <pxCurrentTCBConst2>:
 8007270:	2000096c 	.word	0x2000096c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007274:	bf00      	nop
 8007276:	bf00      	nop

08007278 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007278:	4808      	ldr	r0, [pc, #32]	; (800729c <prvPortStartFirstTask+0x24>)
 800727a:	6800      	ldr	r0, [r0, #0]
 800727c:	6800      	ldr	r0, [r0, #0]
 800727e:	f380 8808 	msr	MSP, r0
 8007282:	f04f 0000 	mov.w	r0, #0
 8007286:	f380 8814 	msr	CONTROL, r0
 800728a:	b662      	cpsie	i
 800728c:	b661      	cpsie	f
 800728e:	f3bf 8f4f 	dsb	sy
 8007292:	f3bf 8f6f 	isb	sy
 8007296:	df00      	svc	0
 8007298:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800729a:	bf00      	nop
 800729c:	e000ed08 	.word	0xe000ed08

080072a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80072a0:	b580      	push	{r7, lr}
 80072a2:	b086      	sub	sp, #24
 80072a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80072a6:	4b46      	ldr	r3, [pc, #280]	; (80073c0 <xPortStartScheduler+0x120>)
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	4a46      	ldr	r2, [pc, #280]	; (80073c4 <xPortStartScheduler+0x124>)
 80072ac:	4293      	cmp	r3, r2
 80072ae:	d10a      	bne.n	80072c6 <xPortStartScheduler+0x26>
	__asm volatile
 80072b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072b4:	f383 8811 	msr	BASEPRI, r3
 80072b8:	f3bf 8f6f 	isb	sy
 80072bc:	f3bf 8f4f 	dsb	sy
 80072c0:	613b      	str	r3, [r7, #16]
}
 80072c2:	bf00      	nop
 80072c4:	e7fe      	b.n	80072c4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80072c6:	4b3e      	ldr	r3, [pc, #248]	; (80073c0 <xPortStartScheduler+0x120>)
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	4a3f      	ldr	r2, [pc, #252]	; (80073c8 <xPortStartScheduler+0x128>)
 80072cc:	4293      	cmp	r3, r2
 80072ce:	d10a      	bne.n	80072e6 <xPortStartScheduler+0x46>
	__asm volatile
 80072d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072d4:	f383 8811 	msr	BASEPRI, r3
 80072d8:	f3bf 8f6f 	isb	sy
 80072dc:	f3bf 8f4f 	dsb	sy
 80072e0:	60fb      	str	r3, [r7, #12]
}
 80072e2:	bf00      	nop
 80072e4:	e7fe      	b.n	80072e4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80072e6:	4b39      	ldr	r3, [pc, #228]	; (80073cc <xPortStartScheduler+0x12c>)
 80072e8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80072ea:	697b      	ldr	r3, [r7, #20]
 80072ec:	781b      	ldrb	r3, [r3, #0]
 80072ee:	b2db      	uxtb	r3, r3
 80072f0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80072f2:	697b      	ldr	r3, [r7, #20]
 80072f4:	22ff      	movs	r2, #255	; 0xff
 80072f6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80072f8:	697b      	ldr	r3, [r7, #20]
 80072fa:	781b      	ldrb	r3, [r3, #0]
 80072fc:	b2db      	uxtb	r3, r3
 80072fe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007300:	78fb      	ldrb	r3, [r7, #3]
 8007302:	b2db      	uxtb	r3, r3
 8007304:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007308:	b2da      	uxtb	r2, r3
 800730a:	4b31      	ldr	r3, [pc, #196]	; (80073d0 <xPortStartScheduler+0x130>)
 800730c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800730e:	4b31      	ldr	r3, [pc, #196]	; (80073d4 <xPortStartScheduler+0x134>)
 8007310:	2207      	movs	r2, #7
 8007312:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007314:	e009      	b.n	800732a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007316:	4b2f      	ldr	r3, [pc, #188]	; (80073d4 <xPortStartScheduler+0x134>)
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	3b01      	subs	r3, #1
 800731c:	4a2d      	ldr	r2, [pc, #180]	; (80073d4 <xPortStartScheduler+0x134>)
 800731e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007320:	78fb      	ldrb	r3, [r7, #3]
 8007322:	b2db      	uxtb	r3, r3
 8007324:	005b      	lsls	r3, r3, #1
 8007326:	b2db      	uxtb	r3, r3
 8007328:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800732a:	78fb      	ldrb	r3, [r7, #3]
 800732c:	b2db      	uxtb	r3, r3
 800732e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007332:	2b80      	cmp	r3, #128	; 0x80
 8007334:	d0ef      	beq.n	8007316 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007336:	4b27      	ldr	r3, [pc, #156]	; (80073d4 <xPortStartScheduler+0x134>)
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	f1c3 0307 	rsb	r3, r3, #7
 800733e:	2b04      	cmp	r3, #4
 8007340:	d00a      	beq.n	8007358 <xPortStartScheduler+0xb8>
	__asm volatile
 8007342:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007346:	f383 8811 	msr	BASEPRI, r3
 800734a:	f3bf 8f6f 	isb	sy
 800734e:	f3bf 8f4f 	dsb	sy
 8007352:	60bb      	str	r3, [r7, #8]
}
 8007354:	bf00      	nop
 8007356:	e7fe      	b.n	8007356 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007358:	4b1e      	ldr	r3, [pc, #120]	; (80073d4 <xPortStartScheduler+0x134>)
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	021b      	lsls	r3, r3, #8
 800735e:	4a1d      	ldr	r2, [pc, #116]	; (80073d4 <xPortStartScheduler+0x134>)
 8007360:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007362:	4b1c      	ldr	r3, [pc, #112]	; (80073d4 <xPortStartScheduler+0x134>)
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800736a:	4a1a      	ldr	r2, [pc, #104]	; (80073d4 <xPortStartScheduler+0x134>)
 800736c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	b2da      	uxtb	r2, r3
 8007372:	697b      	ldr	r3, [r7, #20]
 8007374:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007376:	4b18      	ldr	r3, [pc, #96]	; (80073d8 <xPortStartScheduler+0x138>)
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	4a17      	ldr	r2, [pc, #92]	; (80073d8 <xPortStartScheduler+0x138>)
 800737c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007380:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007382:	4b15      	ldr	r3, [pc, #84]	; (80073d8 <xPortStartScheduler+0x138>)
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	4a14      	ldr	r2, [pc, #80]	; (80073d8 <xPortStartScheduler+0x138>)
 8007388:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800738c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800738e:	f000 f8dd 	bl	800754c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007392:	4b12      	ldr	r3, [pc, #72]	; (80073dc <xPortStartScheduler+0x13c>)
 8007394:	2200      	movs	r2, #0
 8007396:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007398:	f000 f8fc 	bl	8007594 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800739c:	4b10      	ldr	r3, [pc, #64]	; (80073e0 <xPortStartScheduler+0x140>)
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	4a0f      	ldr	r2, [pc, #60]	; (80073e0 <xPortStartScheduler+0x140>)
 80073a2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80073a6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80073a8:	f7ff ff66 	bl	8007278 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80073ac:	f7ff f88a 	bl	80064c4 <vTaskSwitchContext>
	prvTaskExitError();
 80073b0:	f7ff ff20 	bl	80071f4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80073b4:	2300      	movs	r3, #0
}
 80073b6:	4618      	mov	r0, r3
 80073b8:	3718      	adds	r7, #24
 80073ba:	46bd      	mov	sp, r7
 80073bc:	bd80      	pop	{r7, pc}
 80073be:	bf00      	nop
 80073c0:	e000ed00 	.word	0xe000ed00
 80073c4:	410fc271 	.word	0x410fc271
 80073c8:	410fc270 	.word	0x410fc270
 80073cc:	e000e400 	.word	0xe000e400
 80073d0:	20000f98 	.word	0x20000f98
 80073d4:	20000f9c 	.word	0x20000f9c
 80073d8:	e000ed20 	.word	0xe000ed20
 80073dc:	20000074 	.word	0x20000074
 80073e0:	e000ef34 	.word	0xe000ef34

080073e4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80073e4:	b480      	push	{r7}
 80073e6:	b083      	sub	sp, #12
 80073e8:	af00      	add	r7, sp, #0
	__asm volatile
 80073ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073ee:	f383 8811 	msr	BASEPRI, r3
 80073f2:	f3bf 8f6f 	isb	sy
 80073f6:	f3bf 8f4f 	dsb	sy
 80073fa:	607b      	str	r3, [r7, #4]
}
 80073fc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80073fe:	4b0f      	ldr	r3, [pc, #60]	; (800743c <vPortEnterCritical+0x58>)
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	3301      	adds	r3, #1
 8007404:	4a0d      	ldr	r2, [pc, #52]	; (800743c <vPortEnterCritical+0x58>)
 8007406:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007408:	4b0c      	ldr	r3, [pc, #48]	; (800743c <vPortEnterCritical+0x58>)
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	2b01      	cmp	r3, #1
 800740e:	d10f      	bne.n	8007430 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007410:	4b0b      	ldr	r3, [pc, #44]	; (8007440 <vPortEnterCritical+0x5c>)
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	b2db      	uxtb	r3, r3
 8007416:	2b00      	cmp	r3, #0
 8007418:	d00a      	beq.n	8007430 <vPortEnterCritical+0x4c>
	__asm volatile
 800741a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800741e:	f383 8811 	msr	BASEPRI, r3
 8007422:	f3bf 8f6f 	isb	sy
 8007426:	f3bf 8f4f 	dsb	sy
 800742a:	603b      	str	r3, [r7, #0]
}
 800742c:	bf00      	nop
 800742e:	e7fe      	b.n	800742e <vPortEnterCritical+0x4a>
	}
}
 8007430:	bf00      	nop
 8007432:	370c      	adds	r7, #12
 8007434:	46bd      	mov	sp, r7
 8007436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800743a:	4770      	bx	lr
 800743c:	20000074 	.word	0x20000074
 8007440:	e000ed04 	.word	0xe000ed04

08007444 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007444:	b480      	push	{r7}
 8007446:	b083      	sub	sp, #12
 8007448:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800744a:	4b12      	ldr	r3, [pc, #72]	; (8007494 <vPortExitCritical+0x50>)
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	2b00      	cmp	r3, #0
 8007450:	d10a      	bne.n	8007468 <vPortExitCritical+0x24>
	__asm volatile
 8007452:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007456:	f383 8811 	msr	BASEPRI, r3
 800745a:	f3bf 8f6f 	isb	sy
 800745e:	f3bf 8f4f 	dsb	sy
 8007462:	607b      	str	r3, [r7, #4]
}
 8007464:	bf00      	nop
 8007466:	e7fe      	b.n	8007466 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007468:	4b0a      	ldr	r3, [pc, #40]	; (8007494 <vPortExitCritical+0x50>)
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	3b01      	subs	r3, #1
 800746e:	4a09      	ldr	r2, [pc, #36]	; (8007494 <vPortExitCritical+0x50>)
 8007470:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007472:	4b08      	ldr	r3, [pc, #32]	; (8007494 <vPortExitCritical+0x50>)
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	2b00      	cmp	r3, #0
 8007478:	d105      	bne.n	8007486 <vPortExitCritical+0x42>
 800747a:	2300      	movs	r3, #0
 800747c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800747e:	683b      	ldr	r3, [r7, #0]
 8007480:	f383 8811 	msr	BASEPRI, r3
}
 8007484:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007486:	bf00      	nop
 8007488:	370c      	adds	r7, #12
 800748a:	46bd      	mov	sp, r7
 800748c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007490:	4770      	bx	lr
 8007492:	bf00      	nop
 8007494:	20000074 	.word	0x20000074
	...

080074a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80074a0:	f3ef 8009 	mrs	r0, PSP
 80074a4:	f3bf 8f6f 	isb	sy
 80074a8:	4b15      	ldr	r3, [pc, #84]	; (8007500 <pxCurrentTCBConst>)
 80074aa:	681a      	ldr	r2, [r3, #0]
 80074ac:	f01e 0f10 	tst.w	lr, #16
 80074b0:	bf08      	it	eq
 80074b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80074b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074ba:	6010      	str	r0, [r2, #0]
 80074bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80074c0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80074c4:	f380 8811 	msr	BASEPRI, r0
 80074c8:	f3bf 8f4f 	dsb	sy
 80074cc:	f3bf 8f6f 	isb	sy
 80074d0:	f7fe fff8 	bl	80064c4 <vTaskSwitchContext>
 80074d4:	f04f 0000 	mov.w	r0, #0
 80074d8:	f380 8811 	msr	BASEPRI, r0
 80074dc:	bc09      	pop	{r0, r3}
 80074de:	6819      	ldr	r1, [r3, #0]
 80074e0:	6808      	ldr	r0, [r1, #0]
 80074e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074e6:	f01e 0f10 	tst.w	lr, #16
 80074ea:	bf08      	it	eq
 80074ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80074f0:	f380 8809 	msr	PSP, r0
 80074f4:	f3bf 8f6f 	isb	sy
 80074f8:	4770      	bx	lr
 80074fa:	bf00      	nop
 80074fc:	f3af 8000 	nop.w

08007500 <pxCurrentTCBConst>:
 8007500:	2000096c 	.word	0x2000096c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007504:	bf00      	nop
 8007506:	bf00      	nop

08007508 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007508:	b580      	push	{r7, lr}
 800750a:	b082      	sub	sp, #8
 800750c:	af00      	add	r7, sp, #0
	__asm volatile
 800750e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007512:	f383 8811 	msr	BASEPRI, r3
 8007516:	f3bf 8f6f 	isb	sy
 800751a:	f3bf 8f4f 	dsb	sy
 800751e:	607b      	str	r3, [r7, #4]
}
 8007520:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007522:	f7fe ff11 	bl	8006348 <xTaskIncrementTick>
 8007526:	4603      	mov	r3, r0
 8007528:	2b00      	cmp	r3, #0
 800752a:	d003      	beq.n	8007534 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800752c:	4b06      	ldr	r3, [pc, #24]	; (8007548 <SysTick_Handler+0x40>)
 800752e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007532:	601a      	str	r2, [r3, #0]
 8007534:	2300      	movs	r3, #0
 8007536:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007538:	683b      	ldr	r3, [r7, #0]
 800753a:	f383 8811 	msr	BASEPRI, r3
}
 800753e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007540:	bf00      	nop
 8007542:	3708      	adds	r7, #8
 8007544:	46bd      	mov	sp, r7
 8007546:	bd80      	pop	{r7, pc}
 8007548:	e000ed04 	.word	0xe000ed04

0800754c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800754c:	b480      	push	{r7}
 800754e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007550:	4b0b      	ldr	r3, [pc, #44]	; (8007580 <vPortSetupTimerInterrupt+0x34>)
 8007552:	2200      	movs	r2, #0
 8007554:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007556:	4b0b      	ldr	r3, [pc, #44]	; (8007584 <vPortSetupTimerInterrupt+0x38>)
 8007558:	2200      	movs	r2, #0
 800755a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800755c:	4b0a      	ldr	r3, [pc, #40]	; (8007588 <vPortSetupTimerInterrupt+0x3c>)
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	4a0a      	ldr	r2, [pc, #40]	; (800758c <vPortSetupTimerInterrupt+0x40>)
 8007562:	fba2 2303 	umull	r2, r3, r2, r3
 8007566:	099b      	lsrs	r3, r3, #6
 8007568:	4a09      	ldr	r2, [pc, #36]	; (8007590 <vPortSetupTimerInterrupt+0x44>)
 800756a:	3b01      	subs	r3, #1
 800756c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800756e:	4b04      	ldr	r3, [pc, #16]	; (8007580 <vPortSetupTimerInterrupt+0x34>)
 8007570:	2207      	movs	r2, #7
 8007572:	601a      	str	r2, [r3, #0]
}
 8007574:	bf00      	nop
 8007576:	46bd      	mov	sp, r7
 8007578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800757c:	4770      	bx	lr
 800757e:	bf00      	nop
 8007580:	e000e010 	.word	0xe000e010
 8007584:	e000e018 	.word	0xe000e018
 8007588:	2000006c 	.word	0x2000006c
 800758c:	10624dd3 	.word	0x10624dd3
 8007590:	e000e014 	.word	0xe000e014

08007594 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007594:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80075a4 <vPortEnableVFP+0x10>
 8007598:	6801      	ldr	r1, [r0, #0]
 800759a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800759e:	6001      	str	r1, [r0, #0]
 80075a0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80075a2:	bf00      	nop
 80075a4:	e000ed88 	.word	0xe000ed88

080075a8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80075a8:	b480      	push	{r7}
 80075aa:	b085      	sub	sp, #20
 80075ac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80075ae:	f3ef 8305 	mrs	r3, IPSR
 80075b2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	2b0f      	cmp	r3, #15
 80075b8:	d914      	bls.n	80075e4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80075ba:	4a17      	ldr	r2, [pc, #92]	; (8007618 <vPortValidateInterruptPriority+0x70>)
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	4413      	add	r3, r2
 80075c0:	781b      	ldrb	r3, [r3, #0]
 80075c2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80075c4:	4b15      	ldr	r3, [pc, #84]	; (800761c <vPortValidateInterruptPriority+0x74>)
 80075c6:	781b      	ldrb	r3, [r3, #0]
 80075c8:	7afa      	ldrb	r2, [r7, #11]
 80075ca:	429a      	cmp	r2, r3
 80075cc:	d20a      	bcs.n	80075e4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80075ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075d2:	f383 8811 	msr	BASEPRI, r3
 80075d6:	f3bf 8f6f 	isb	sy
 80075da:	f3bf 8f4f 	dsb	sy
 80075de:	607b      	str	r3, [r7, #4]
}
 80075e0:	bf00      	nop
 80075e2:	e7fe      	b.n	80075e2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80075e4:	4b0e      	ldr	r3, [pc, #56]	; (8007620 <vPortValidateInterruptPriority+0x78>)
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80075ec:	4b0d      	ldr	r3, [pc, #52]	; (8007624 <vPortValidateInterruptPriority+0x7c>)
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	429a      	cmp	r2, r3
 80075f2:	d90a      	bls.n	800760a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80075f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075f8:	f383 8811 	msr	BASEPRI, r3
 80075fc:	f3bf 8f6f 	isb	sy
 8007600:	f3bf 8f4f 	dsb	sy
 8007604:	603b      	str	r3, [r7, #0]
}
 8007606:	bf00      	nop
 8007608:	e7fe      	b.n	8007608 <vPortValidateInterruptPriority+0x60>
	}
 800760a:	bf00      	nop
 800760c:	3714      	adds	r7, #20
 800760e:	46bd      	mov	sp, r7
 8007610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007614:	4770      	bx	lr
 8007616:	bf00      	nop
 8007618:	e000e3f0 	.word	0xe000e3f0
 800761c:	20000f98 	.word	0x20000f98
 8007620:	e000ed0c 	.word	0xe000ed0c
 8007624:	20000f9c 	.word	0x20000f9c

08007628 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007628:	b580      	push	{r7, lr}
 800762a:	b08a      	sub	sp, #40	; 0x28
 800762c:	af00      	add	r7, sp, #0
 800762e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007630:	2300      	movs	r3, #0
 8007632:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007634:	f7fe fdcc 	bl	80061d0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007638:	4b58      	ldr	r3, [pc, #352]	; (800779c <pvPortMalloc+0x174>)
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	2b00      	cmp	r3, #0
 800763e:	d101      	bne.n	8007644 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007640:	f000 f910 	bl	8007864 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007644:	4b56      	ldr	r3, [pc, #344]	; (80077a0 <pvPortMalloc+0x178>)
 8007646:	681a      	ldr	r2, [r3, #0]
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	4013      	ands	r3, r2
 800764c:	2b00      	cmp	r3, #0
 800764e:	f040 808e 	bne.w	800776e <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	2b00      	cmp	r3, #0
 8007656:	d01d      	beq.n	8007694 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8007658:	2208      	movs	r2, #8
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	4413      	add	r3, r2
 800765e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	f003 0307 	and.w	r3, r3, #7
 8007666:	2b00      	cmp	r3, #0
 8007668:	d014      	beq.n	8007694 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	f023 0307 	bic.w	r3, r3, #7
 8007670:	3308      	adds	r3, #8
 8007672:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	f003 0307 	and.w	r3, r3, #7
 800767a:	2b00      	cmp	r3, #0
 800767c:	d00a      	beq.n	8007694 <pvPortMalloc+0x6c>
	__asm volatile
 800767e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007682:	f383 8811 	msr	BASEPRI, r3
 8007686:	f3bf 8f6f 	isb	sy
 800768a:	f3bf 8f4f 	dsb	sy
 800768e:	617b      	str	r3, [r7, #20]
}
 8007690:	bf00      	nop
 8007692:	e7fe      	b.n	8007692 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	2b00      	cmp	r3, #0
 8007698:	d069      	beq.n	800776e <pvPortMalloc+0x146>
 800769a:	4b42      	ldr	r3, [pc, #264]	; (80077a4 <pvPortMalloc+0x17c>)
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	687a      	ldr	r2, [r7, #4]
 80076a0:	429a      	cmp	r2, r3
 80076a2:	d864      	bhi.n	800776e <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80076a4:	4b40      	ldr	r3, [pc, #256]	; (80077a8 <pvPortMalloc+0x180>)
 80076a6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80076a8:	4b3f      	ldr	r3, [pc, #252]	; (80077a8 <pvPortMalloc+0x180>)
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80076ae:	e004      	b.n	80076ba <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80076b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076b2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80076b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80076ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076bc:	685b      	ldr	r3, [r3, #4]
 80076be:	687a      	ldr	r2, [r7, #4]
 80076c0:	429a      	cmp	r2, r3
 80076c2:	d903      	bls.n	80076cc <pvPortMalloc+0xa4>
 80076c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d1f1      	bne.n	80076b0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80076cc:	4b33      	ldr	r3, [pc, #204]	; (800779c <pvPortMalloc+0x174>)
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80076d2:	429a      	cmp	r2, r3
 80076d4:	d04b      	beq.n	800776e <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80076d6:	6a3b      	ldr	r3, [r7, #32]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	2208      	movs	r2, #8
 80076dc:	4413      	add	r3, r2
 80076de:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80076e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076e2:	681a      	ldr	r2, [r3, #0]
 80076e4:	6a3b      	ldr	r3, [r7, #32]
 80076e6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80076e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076ea:	685a      	ldr	r2, [r3, #4]
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	1ad2      	subs	r2, r2, r3
 80076f0:	2308      	movs	r3, #8
 80076f2:	005b      	lsls	r3, r3, #1
 80076f4:	429a      	cmp	r2, r3
 80076f6:	d91f      	bls.n	8007738 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80076f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	4413      	add	r3, r2
 80076fe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007700:	69bb      	ldr	r3, [r7, #24]
 8007702:	f003 0307 	and.w	r3, r3, #7
 8007706:	2b00      	cmp	r3, #0
 8007708:	d00a      	beq.n	8007720 <pvPortMalloc+0xf8>
	__asm volatile
 800770a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800770e:	f383 8811 	msr	BASEPRI, r3
 8007712:	f3bf 8f6f 	isb	sy
 8007716:	f3bf 8f4f 	dsb	sy
 800771a:	613b      	str	r3, [r7, #16]
}
 800771c:	bf00      	nop
 800771e:	e7fe      	b.n	800771e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007722:	685a      	ldr	r2, [r3, #4]
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	1ad2      	subs	r2, r2, r3
 8007728:	69bb      	ldr	r3, [r7, #24]
 800772a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800772c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800772e:	687a      	ldr	r2, [r7, #4]
 8007730:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007732:	69b8      	ldr	r0, [r7, #24]
 8007734:	f000 f8f8 	bl	8007928 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007738:	4b1a      	ldr	r3, [pc, #104]	; (80077a4 <pvPortMalloc+0x17c>)
 800773a:	681a      	ldr	r2, [r3, #0]
 800773c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800773e:	685b      	ldr	r3, [r3, #4]
 8007740:	1ad3      	subs	r3, r2, r3
 8007742:	4a18      	ldr	r2, [pc, #96]	; (80077a4 <pvPortMalloc+0x17c>)
 8007744:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007746:	4b17      	ldr	r3, [pc, #92]	; (80077a4 <pvPortMalloc+0x17c>)
 8007748:	681a      	ldr	r2, [r3, #0]
 800774a:	4b18      	ldr	r3, [pc, #96]	; (80077ac <pvPortMalloc+0x184>)
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	429a      	cmp	r2, r3
 8007750:	d203      	bcs.n	800775a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007752:	4b14      	ldr	r3, [pc, #80]	; (80077a4 <pvPortMalloc+0x17c>)
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	4a15      	ldr	r2, [pc, #84]	; (80077ac <pvPortMalloc+0x184>)
 8007758:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800775a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800775c:	685a      	ldr	r2, [r3, #4]
 800775e:	4b10      	ldr	r3, [pc, #64]	; (80077a0 <pvPortMalloc+0x178>)
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	431a      	orrs	r2, r3
 8007764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007766:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800776a:	2200      	movs	r2, #0
 800776c:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800776e:	f7fe fd3d 	bl	80061ec <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007772:	69fb      	ldr	r3, [r7, #28]
 8007774:	f003 0307 	and.w	r3, r3, #7
 8007778:	2b00      	cmp	r3, #0
 800777a:	d00a      	beq.n	8007792 <pvPortMalloc+0x16a>
	__asm volatile
 800777c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007780:	f383 8811 	msr	BASEPRI, r3
 8007784:	f3bf 8f6f 	isb	sy
 8007788:	f3bf 8f4f 	dsb	sy
 800778c:	60fb      	str	r3, [r7, #12]
}
 800778e:	bf00      	nop
 8007790:	e7fe      	b.n	8007790 <pvPortMalloc+0x168>
	return pvReturn;
 8007792:	69fb      	ldr	r3, [r7, #28]
}
 8007794:	4618      	mov	r0, r3
 8007796:	3728      	adds	r7, #40	; 0x28
 8007798:	46bd      	mov	sp, r7
 800779a:	bd80      	pop	{r7, pc}
 800779c:	20001ba8 	.word	0x20001ba8
 80077a0:	20001bb4 	.word	0x20001bb4
 80077a4:	20001bac 	.word	0x20001bac
 80077a8:	20001ba0 	.word	0x20001ba0
 80077ac:	20001bb0 	.word	0x20001bb0

080077b0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80077b0:	b580      	push	{r7, lr}
 80077b2:	b086      	sub	sp, #24
 80077b4:	af00      	add	r7, sp, #0
 80077b6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d048      	beq.n	8007854 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80077c2:	2308      	movs	r3, #8
 80077c4:	425b      	negs	r3, r3
 80077c6:	697a      	ldr	r2, [r7, #20]
 80077c8:	4413      	add	r3, r2
 80077ca:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80077cc:	697b      	ldr	r3, [r7, #20]
 80077ce:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80077d0:	693b      	ldr	r3, [r7, #16]
 80077d2:	685a      	ldr	r2, [r3, #4]
 80077d4:	4b21      	ldr	r3, [pc, #132]	; (800785c <vPortFree+0xac>)
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	4013      	ands	r3, r2
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d10a      	bne.n	80077f4 <vPortFree+0x44>
	__asm volatile
 80077de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077e2:	f383 8811 	msr	BASEPRI, r3
 80077e6:	f3bf 8f6f 	isb	sy
 80077ea:	f3bf 8f4f 	dsb	sy
 80077ee:	60fb      	str	r3, [r7, #12]
}
 80077f0:	bf00      	nop
 80077f2:	e7fe      	b.n	80077f2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80077f4:	693b      	ldr	r3, [r7, #16]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d00a      	beq.n	8007812 <vPortFree+0x62>
	__asm volatile
 80077fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007800:	f383 8811 	msr	BASEPRI, r3
 8007804:	f3bf 8f6f 	isb	sy
 8007808:	f3bf 8f4f 	dsb	sy
 800780c:	60bb      	str	r3, [r7, #8]
}
 800780e:	bf00      	nop
 8007810:	e7fe      	b.n	8007810 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007812:	693b      	ldr	r3, [r7, #16]
 8007814:	685a      	ldr	r2, [r3, #4]
 8007816:	4b11      	ldr	r3, [pc, #68]	; (800785c <vPortFree+0xac>)
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	4013      	ands	r3, r2
 800781c:	2b00      	cmp	r3, #0
 800781e:	d019      	beq.n	8007854 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007820:	693b      	ldr	r3, [r7, #16]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	2b00      	cmp	r3, #0
 8007826:	d115      	bne.n	8007854 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007828:	693b      	ldr	r3, [r7, #16]
 800782a:	685a      	ldr	r2, [r3, #4]
 800782c:	4b0b      	ldr	r3, [pc, #44]	; (800785c <vPortFree+0xac>)
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	43db      	mvns	r3, r3
 8007832:	401a      	ands	r2, r3
 8007834:	693b      	ldr	r3, [r7, #16]
 8007836:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007838:	f7fe fcca 	bl	80061d0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800783c:	693b      	ldr	r3, [r7, #16]
 800783e:	685a      	ldr	r2, [r3, #4]
 8007840:	4b07      	ldr	r3, [pc, #28]	; (8007860 <vPortFree+0xb0>)
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	4413      	add	r3, r2
 8007846:	4a06      	ldr	r2, [pc, #24]	; (8007860 <vPortFree+0xb0>)
 8007848:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800784a:	6938      	ldr	r0, [r7, #16]
 800784c:	f000 f86c 	bl	8007928 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8007850:	f7fe fccc 	bl	80061ec <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007854:	bf00      	nop
 8007856:	3718      	adds	r7, #24
 8007858:	46bd      	mov	sp, r7
 800785a:	bd80      	pop	{r7, pc}
 800785c:	20001bb4 	.word	0x20001bb4
 8007860:	20001bac 	.word	0x20001bac

08007864 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007864:	b480      	push	{r7}
 8007866:	b085      	sub	sp, #20
 8007868:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800786a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800786e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007870:	4b27      	ldr	r3, [pc, #156]	; (8007910 <prvHeapInit+0xac>)
 8007872:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	f003 0307 	and.w	r3, r3, #7
 800787a:	2b00      	cmp	r3, #0
 800787c:	d00c      	beq.n	8007898 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	3307      	adds	r3, #7
 8007882:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	f023 0307 	bic.w	r3, r3, #7
 800788a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800788c:	68ba      	ldr	r2, [r7, #8]
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	1ad3      	subs	r3, r2, r3
 8007892:	4a1f      	ldr	r2, [pc, #124]	; (8007910 <prvHeapInit+0xac>)
 8007894:	4413      	add	r3, r2
 8007896:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800789c:	4a1d      	ldr	r2, [pc, #116]	; (8007914 <prvHeapInit+0xb0>)
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80078a2:	4b1c      	ldr	r3, [pc, #112]	; (8007914 <prvHeapInit+0xb0>)
 80078a4:	2200      	movs	r2, #0
 80078a6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	68ba      	ldr	r2, [r7, #8]
 80078ac:	4413      	add	r3, r2
 80078ae:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80078b0:	2208      	movs	r2, #8
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	1a9b      	subs	r3, r3, r2
 80078b6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	f023 0307 	bic.w	r3, r3, #7
 80078be:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	4a15      	ldr	r2, [pc, #84]	; (8007918 <prvHeapInit+0xb4>)
 80078c4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80078c6:	4b14      	ldr	r3, [pc, #80]	; (8007918 <prvHeapInit+0xb4>)
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	2200      	movs	r2, #0
 80078cc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80078ce:	4b12      	ldr	r3, [pc, #72]	; (8007918 <prvHeapInit+0xb4>)
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	2200      	movs	r2, #0
 80078d4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80078da:	683b      	ldr	r3, [r7, #0]
 80078dc:	68fa      	ldr	r2, [r7, #12]
 80078de:	1ad2      	subs	r2, r2, r3
 80078e0:	683b      	ldr	r3, [r7, #0]
 80078e2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80078e4:	4b0c      	ldr	r3, [pc, #48]	; (8007918 <prvHeapInit+0xb4>)
 80078e6:	681a      	ldr	r2, [r3, #0]
 80078e8:	683b      	ldr	r3, [r7, #0]
 80078ea:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80078ec:	683b      	ldr	r3, [r7, #0]
 80078ee:	685b      	ldr	r3, [r3, #4]
 80078f0:	4a0a      	ldr	r2, [pc, #40]	; (800791c <prvHeapInit+0xb8>)
 80078f2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80078f4:	683b      	ldr	r3, [r7, #0]
 80078f6:	685b      	ldr	r3, [r3, #4]
 80078f8:	4a09      	ldr	r2, [pc, #36]	; (8007920 <prvHeapInit+0xbc>)
 80078fa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80078fc:	4b09      	ldr	r3, [pc, #36]	; (8007924 <prvHeapInit+0xc0>)
 80078fe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007902:	601a      	str	r2, [r3, #0]
}
 8007904:	bf00      	nop
 8007906:	3714      	adds	r7, #20
 8007908:	46bd      	mov	sp, r7
 800790a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800790e:	4770      	bx	lr
 8007910:	20000fa0 	.word	0x20000fa0
 8007914:	20001ba0 	.word	0x20001ba0
 8007918:	20001ba8 	.word	0x20001ba8
 800791c:	20001bb0 	.word	0x20001bb0
 8007920:	20001bac 	.word	0x20001bac
 8007924:	20001bb4 	.word	0x20001bb4

08007928 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007928:	b480      	push	{r7}
 800792a:	b085      	sub	sp, #20
 800792c:	af00      	add	r7, sp, #0
 800792e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007930:	4b28      	ldr	r3, [pc, #160]	; (80079d4 <prvInsertBlockIntoFreeList+0xac>)
 8007932:	60fb      	str	r3, [r7, #12]
 8007934:	e002      	b.n	800793c <prvInsertBlockIntoFreeList+0x14>
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	60fb      	str	r3, [r7, #12]
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	687a      	ldr	r2, [r7, #4]
 8007942:	429a      	cmp	r2, r3
 8007944:	d8f7      	bhi.n	8007936 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	685b      	ldr	r3, [r3, #4]
 800794e:	68ba      	ldr	r2, [r7, #8]
 8007950:	4413      	add	r3, r2
 8007952:	687a      	ldr	r2, [r7, #4]
 8007954:	429a      	cmp	r2, r3
 8007956:	d108      	bne.n	800796a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	685a      	ldr	r2, [r3, #4]
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	685b      	ldr	r3, [r3, #4]
 8007960:	441a      	add	r2, r3
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	685b      	ldr	r3, [r3, #4]
 8007972:	68ba      	ldr	r2, [r7, #8]
 8007974:	441a      	add	r2, r3
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	429a      	cmp	r2, r3
 800797c:	d118      	bne.n	80079b0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	681a      	ldr	r2, [r3, #0]
 8007982:	4b15      	ldr	r3, [pc, #84]	; (80079d8 <prvInsertBlockIntoFreeList+0xb0>)
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	429a      	cmp	r2, r3
 8007988:	d00d      	beq.n	80079a6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	685a      	ldr	r2, [r3, #4]
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	685b      	ldr	r3, [r3, #4]
 8007994:	441a      	add	r2, r3
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	681a      	ldr	r2, [r3, #0]
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	601a      	str	r2, [r3, #0]
 80079a4:	e008      	b.n	80079b8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80079a6:	4b0c      	ldr	r3, [pc, #48]	; (80079d8 <prvInsertBlockIntoFreeList+0xb0>)
 80079a8:	681a      	ldr	r2, [r3, #0]
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	601a      	str	r2, [r3, #0]
 80079ae:	e003      	b.n	80079b8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	681a      	ldr	r2, [r3, #0]
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80079b8:	68fa      	ldr	r2, [r7, #12]
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	429a      	cmp	r2, r3
 80079be:	d002      	beq.n	80079c6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	687a      	ldr	r2, [r7, #4]
 80079c4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80079c6:	bf00      	nop
 80079c8:	3714      	adds	r7, #20
 80079ca:	46bd      	mov	sp, r7
 80079cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d0:	4770      	bx	lr
 80079d2:	bf00      	nop
 80079d4:	20001ba0 	.word	0x20001ba0
 80079d8:	20001ba8 	.word	0x20001ba8

080079dc <memset>:
 80079dc:	4402      	add	r2, r0
 80079de:	4603      	mov	r3, r0
 80079e0:	4293      	cmp	r3, r2
 80079e2:	d100      	bne.n	80079e6 <memset+0xa>
 80079e4:	4770      	bx	lr
 80079e6:	f803 1b01 	strb.w	r1, [r3], #1
 80079ea:	e7f9      	b.n	80079e0 <memset+0x4>

080079ec <__libc_init_array>:
 80079ec:	b570      	push	{r4, r5, r6, lr}
 80079ee:	4d0d      	ldr	r5, [pc, #52]	; (8007a24 <__libc_init_array+0x38>)
 80079f0:	4c0d      	ldr	r4, [pc, #52]	; (8007a28 <__libc_init_array+0x3c>)
 80079f2:	1b64      	subs	r4, r4, r5
 80079f4:	10a4      	asrs	r4, r4, #2
 80079f6:	2600      	movs	r6, #0
 80079f8:	42a6      	cmp	r6, r4
 80079fa:	d109      	bne.n	8007a10 <__libc_init_array+0x24>
 80079fc:	4d0b      	ldr	r5, [pc, #44]	; (8007a2c <__libc_init_array+0x40>)
 80079fe:	4c0c      	ldr	r4, [pc, #48]	; (8007a30 <__libc_init_array+0x44>)
 8007a00:	f000 f826 	bl	8007a50 <_init>
 8007a04:	1b64      	subs	r4, r4, r5
 8007a06:	10a4      	asrs	r4, r4, #2
 8007a08:	2600      	movs	r6, #0
 8007a0a:	42a6      	cmp	r6, r4
 8007a0c:	d105      	bne.n	8007a1a <__libc_init_array+0x2e>
 8007a0e:	bd70      	pop	{r4, r5, r6, pc}
 8007a10:	f855 3b04 	ldr.w	r3, [r5], #4
 8007a14:	4798      	blx	r3
 8007a16:	3601      	adds	r6, #1
 8007a18:	e7ee      	b.n	80079f8 <__libc_init_array+0xc>
 8007a1a:	f855 3b04 	ldr.w	r3, [r5], #4
 8007a1e:	4798      	blx	r3
 8007a20:	3601      	adds	r6, #1
 8007a22:	e7f2      	b.n	8007a0a <__libc_init_array+0x1e>
 8007a24:	08007b5c 	.word	0x08007b5c
 8007a28:	08007b5c 	.word	0x08007b5c
 8007a2c:	08007b5c 	.word	0x08007b5c
 8007a30:	08007b60 	.word	0x08007b60

08007a34 <memcpy>:
 8007a34:	440a      	add	r2, r1
 8007a36:	4291      	cmp	r1, r2
 8007a38:	f100 33ff 	add.w	r3, r0, #4294967295
 8007a3c:	d100      	bne.n	8007a40 <memcpy+0xc>
 8007a3e:	4770      	bx	lr
 8007a40:	b510      	push	{r4, lr}
 8007a42:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007a46:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007a4a:	4291      	cmp	r1, r2
 8007a4c:	d1f9      	bne.n	8007a42 <memcpy+0xe>
 8007a4e:	bd10      	pop	{r4, pc}

08007a50 <_init>:
 8007a50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a52:	bf00      	nop
 8007a54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a56:	bc08      	pop	{r3}
 8007a58:	469e      	mov	lr, r3
 8007a5a:	4770      	bx	lr

08007a5c <_fini>:
 8007a5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a5e:	bf00      	nop
 8007a60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a62:	bc08      	pop	{r3}
 8007a64:	469e      	mov	lr, r3
 8007a66:	4770      	bx	lr
